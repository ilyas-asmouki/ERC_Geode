
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0f0  0800c0f0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0f0  0800c0f0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0f0  0800c0f0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0f0  0800c0f0  0001c0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0f4  0800c0f4  0001c0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010514  20000060  0800c158  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010574  0800c158  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000251d1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000610b  00000000  00000000  000452a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e08  00000000  00000000  0004b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016a1  00000000  00000000  0004d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001965e  00000000  00000000  0004e859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a2bd  00000000  00000000  00067eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007f6c  00000000  00000000  00072174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  0007a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c070 	.word	0x0800c070

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800c070 	.word	0x0800c070

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_CRC_Init+0x50>)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <MX_CRC_Init+0x54>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_CRC_Init+0x50>)
 800022c:	2201      	movs	r2, #1
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_CRC_Init+0x50>)
 8000232:	2201      	movs	r2, #1
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_CRC_Init+0x50>)
 8000238:	2207      	movs	r2, #7
 800023a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_CRC_Init+0x50>)
 800023e:	2208      	movs	r2, #8
 8000240:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <MX_CRC_Init+0x50>)
 8000244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000248:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_CRC_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <MX_CRC_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_CRC_Init+0x50>)
 8000258:	2201      	movs	r2, #1
 800025a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_CRC_Init+0x50>)
 800025e:	f000 ffb5 	bl	80011cc <HAL_CRC_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000268:	f000 fbed 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000007c 	.word	0x2000007c
 8000274:	40023000 	.word	0x40023000

08000278 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <HAL_CRC_MspInit+0x38>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d10b      	bne.n	80002a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <HAL_CRC_MspInit+0x3c>)
 800028c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800028e:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <HAL_CRC_MspInit+0x3c>)
 8000290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000294:	6493      	str	r3, [r2, #72]	; 0x48
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <HAL_CRC_MspInit+0x3c>)
 8000298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800029a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023000 	.word	0x40023000
 80002b4:	40021000 	.word	0x40021000

080002b8 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002be:	4a20      	ldr	r2, [pc, #128]	; (8000340 <MX_FDCAN1_Init+0x88>)
 80002c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002dc:	2200      	movs	r2, #0
 80002de:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002e8:	2210      	movs	r2, #16
 80002ea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002f4:	2202      	movs	r2, #2
 80002f6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000300:	2201      	movs	r2, #1
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000306:	2201      	movs	r2, #1
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_FDCAN1_Init+0x84>)
 800030c:	2201      	movs	r2, #1
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000312:	2201      	movs	r2, #1
 8000314:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_FDCAN1_Init+0x84>)
 800031e:	2200      	movs	r2, #0
 8000320:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000324:	2200      	movs	r2, #0
 8000326:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_FDCAN1_Init+0x84>)
 800032a:	f001 f841 	bl	80013b0 <HAL_FDCAN_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000334:	f000 fb87 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000a0 	.word	0x200000a0
 8000340:	40006400 	.word	0x40006400

08000344 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800034a:	4a20      	ldr	r2, [pc, #128]	; (80003cc <MX_FDCAN2_Init+0x88>)
 800034c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000354:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000360:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000362:	2200      	movs	r2, #0
 8000364:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000368:	2200      	movs	r2, #0
 800036a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800036e:	2200      	movs	r2, #0
 8000370:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000374:	2210      	movs	r2, #16
 8000376:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800037a:	2201      	movs	r2, #1
 800037c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000380:	2202      	movs	r2, #2
 8000382:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000386:	2202      	movs	r2, #2
 8000388:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800038c:	2201      	movs	r2, #1
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000392:	2201      	movs	r2, #1
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000398:	2201      	movs	r2, #1
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800039e:	2201      	movs	r2, #1
 80003a0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003b6:	f000 fffb 	bl	80013b0 <HAL_FDCAN_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80003c0:	f000 fb41 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000104 	.word	0x20000104
 80003cc:	40006800 	.word	0x40006800

080003d0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b0a0      	sub	sp, #128	; 0x80
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	2254      	movs	r2, #84	; 0x54
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f00b fd05 	bl	800be00 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a48      	ldr	r2, [pc, #288]	; (800051c <HAL_FDCAN_MspInit+0x14c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d142      	bne.n	8000486 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000404:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	4618      	mov	r0, r3
 8000412:	f003 ff27 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800041c:	f000 fb13 	bl	8000a46 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000420:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	4a3e      	ldr	r2, [pc, #248]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 8000428:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800042a:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d10b      	bne.n	800044a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000436:	4a3b      	ldr	r2, [pc, #236]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043c:	6593      	str	r3, [r2, #88]	; 0x58
 800043e:	4b39      	ldr	r3, [pc, #228]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a35      	ldr	r2, [pc, #212]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b33      	ldr	r3, [pc, #204]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000466:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000474:	2309      	movs	r3, #9
 8000476:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047c:	4619      	mov	r1, r3
 800047e:	482a      	ldr	r0, [pc, #168]	; (8000528 <HAL_FDCAN_MspInit+0x158>)
 8000480:	f001 fac4 	bl	8001a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000484:	e045      	b.n	8000512 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a28      	ldr	r2, [pc, #160]	; (800052c <HAL_FDCAN_MspInit+0x15c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d140      	bne.n	8000512 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000494:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800049a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f003 fedf 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 80004ac:	f000 facb 	bl	8000a46 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 80004b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d10b      	bne.n	80004da <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004cc:	6593      	str	r3, [r2, #88]	; 0x58
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80004f2:	2360      	movs	r3, #96	; 0x60
 80004f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2300      	movs	r3, #0
 8000500:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000502:	2309      	movs	r3, #9
 8000504:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800050a:	4619      	mov	r1, r3
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <HAL_FDCAN_MspInit+0x158>)
 800050e:	f001 fa7d 	bl	8001a0c <HAL_GPIO_Init>
}
 8000512:	bf00      	nop
 8000514:	3780      	adds	r7, #128	; 0x80
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40006400 	.word	0x40006400
 8000520:	20000168 	.word	0x20000168
 8000524:	40021000 	.word	0x40021000
 8000528:	48000400 	.word	0x48000400
 800052c:	40006800 	.word	0x40006800

08000530 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

extern void MX_FREERTOS_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	System::init();
 8000536:	f00a fe4b 	bl	800b1d0 <_ZN6System4initEv>
	FDCANTerminal terminal(&hfdcan1);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4905      	ldr	r1, [pc, #20]	; (8000554 <MX_FREERTOS_Init+0x24>)
 800053e:	4618      	mov	r0, r3
 8000540:	f00a fe0c 	bl	800b15c <_ZN13FDCANTerminalC1EP19FDCAN_HandleTypeDef>
	terminal.init();
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f00a fe17 	bl	800b17a <_ZN13FDCANTerminal4initEv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000a0 	.word	0x200000a0

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b5f      	ldr	r3, [pc, #380]	; (80006ec <MX_GPIO_Init+0x194>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a5e      	ldr	r2, [pc, #376]	; (80006ec <MX_GPIO_Init+0x194>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b5c      	ldr	r3, [pc, #368]	; (80006ec <MX_GPIO_Init+0x194>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b59      	ldr	r3, [pc, #356]	; (80006ec <MX_GPIO_Init+0x194>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a58      	ldr	r2, [pc, #352]	; (80006ec <MX_GPIO_Init+0x194>)
 800058c:	f043 0320 	orr.w	r3, r3, #32
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b56      	ldr	r3, [pc, #344]	; (80006ec <MX_GPIO_Init+0x194>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b53      	ldr	r3, [pc, #332]	; (80006ec <MX_GPIO_Init+0x194>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	4a52      	ldr	r2, [pc, #328]	; (80006ec <MX_GPIO_Init+0x194>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <MX_GPIO_Init+0x194>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b4d      	ldr	r3, [pc, #308]	; (80006ec <MX_GPIO_Init+0x194>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a4c      	ldr	r2, [pc, #304]	; (80006ec <MX_GPIO_Init+0x194>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b4a      	ldr	r3, [pc, #296]	; (80006ec <MX_GPIO_Init+0x194>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ce:	4b47      	ldr	r3, [pc, #284]	; (80006ec <MX_GPIO_Init+0x194>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a46      	ldr	r2, [pc, #280]	; (80006ec <MX_GPIO_Init+0x194>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b44      	ldr	r3, [pc, #272]	; (80006ec <MX_GPIO_Init+0x194>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 80005e6:	2200      	movs	r2, #0
 80005e8:	f246 0187 	movw	r1, #24711	; 0x6087
 80005ec:	4840      	ldr	r0, [pc, #256]	; (80006f0 <MX_GPIO_Init+0x198>)
 80005ee:	f001 fb8f 	bl	8001d10 <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	210a      	movs	r1, #10
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f001 fb89 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2187      	movs	r1, #135	; 0x87
 8000602:	483c      	ldr	r0, [pc, #240]	; (80006f4 <MX_GPIO_Init+0x19c>)
 8000604:	f001 fb84 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 8000608:	f246 0387 	movw	r3, #24711	; 0x6087
 800060c:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4833      	ldr	r0, [pc, #204]	; (80006f0 <MX_GPIO_Init+0x198>)
 8000622:	f001 f9f3 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 8000626:	f248 0378 	movw	r3, #32888	; 0x8078
 800062a:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	482d      	ldr	r0, [pc, #180]	; (80006f0 <MX_GPIO_Init+0x198>)
 800063c:	f001 f9e6 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 8000640:	f240 4305 	movw	r3, #1029	; 0x405
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f001 f9d8 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 800065c:	230a      	movs	r3, #10
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f001 f9c9 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 800067a:	2387      	movs	r3, #135	; 0x87
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4818      	ldr	r0, [pc, #96]	; (80006f4 <MX_GPIO_Init+0x19c>)
 8000692:	f001 f9bb 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 8000696:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_GPIO_Init+0x19c>)
 80006ac:	f001 f9ae 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 80006b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <MX_GPIO_Init+0x19c>)
 80006c6:	f001 f9a1 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 80006ca:	2304      	movs	r3, #4
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_GPIO_Init+0x1a0>)
 80006de:	f001 f995 	bl	8001a0c <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000800 	.word	0x48000800
 80006f4:	48000400 	.word	0x48000400
 80006f8:	48000c00 	.word	0x48000c00

080006fc <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C2_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_I2C2_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_I2C2_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <MX_I2C2_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_I2C2_Init+0x74>)
 8000714:	2201      	movs	r2, #1
 8000716:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <MX_I2C2_Init+0x74>)
 8000738:	f001 fb02 	bl	8001d40 <HAL_I2C_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000742:	f000 f980 	bl	8000a46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_I2C2_Init+0x74>)
 800074a:	f001 fb94 	bl	8001e76 <HAL_I2CEx_ConfigAnalogFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f977 	bl	8000a46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_I2C2_Init+0x74>)
 800075c:	f001 fbd6 	bl	8001f0c <HAL_I2CEx_ConfigDigitalFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f96e 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000016c 	.word	0x2000016c
 8000774:	40005800 	.word	0x40005800
 8000778:	00e057fd 	.word	0x00e057fd

0800077c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C3_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_I2C3_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_I2C3_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <MX_I2C3_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_I2C3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C3_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007b8:	f001 fac2 	bl	8001d40 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 f940 	bl	8000a46 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007ca:	f001 fb54 	bl	8001e76 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 f937 	bl	8000a46 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2C3_Init+0x74>)
 80007dc:	f001 fb96 	bl	8001f0c <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f92e 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001c0 	.word	0x200001c0
 80007f4:	40007800 	.word	0x40007800
 80007f8:	00e057fd 	.word	0x00e057fd

080007fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a0      	sub	sp, #128	; 0x80
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	2254      	movs	r2, #84	; 0x54
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f00b faef 	bl	800be00 <memset>
  if(i2cHandle->Instance==I2C2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a3e      	ldr	r2, [pc, #248]	; (8000920 <HAL_I2C_MspInit+0x124>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d138      	bne.n	800089e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fd13 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000844:	f000 f8ff 	bl	8000a46 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <HAL_I2C_MspInit+0x128>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	4a35      	ldr	r2, [pc, #212]	; (8000924 <HAL_I2C_MspInit+0x128>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <HAL_I2C_MspInit+0x128>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000872:	2304      	movs	r3, #4
 8000874:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f001 f8c4 	bl	8001a0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_I2C_MspInit+0x128>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000888:	4a26      	ldr	r2, [pc, #152]	; (8000924 <HAL_I2C_MspInit+0x128>)
 800088a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800088e:	6593      	str	r3, [r2, #88]	; 0x58
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_I2C_MspInit+0x128>)
 8000892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800089c:	e03c      	b.n	8000918 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a21      	ldr	r2, [pc, #132]	; (8000928 <HAL_I2C_MspInit+0x12c>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d137      	bne.n	8000918 <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fcd4 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80008c2:	f000 f8c0 	bl	8000a46 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_I2C_MspInit+0x128>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <HAL_I2C_MspInit+0x128>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_I2C_MspInit+0x128>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80008f0:	2308      	movs	r3, #8
 80008f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008f8:	4619      	mov	r1, r3
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <HAL_I2C_MspInit+0x130>)
 80008fc:	f001 f886 	bl	8001a0c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_I2C_MspInit+0x128>)
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_I2C_MspInit+0x128>)
 8000906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800090a:	6593      	str	r3, [r2, #88]	; 0x58
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_I2C_MspInit+0x128>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
}
 8000918:	bf00      	nop
 800091a:	3780      	adds	r7, #128	; 0x80
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40005800 	.word	0x40005800
 8000924:	40021000 	.word	0x40021000
 8000928:	40007800 	.word	0x40007800
 800092c:	48000800 	.word	0x48000800

08000930 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_IWDG_Init+0x34>)
 8000936:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_IWDG_Init+0x38>)
 8000938:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_IWDG_Init+0x34>)
 800093c:	2200      	movs	r2, #0
 800093e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_IWDG_Init+0x34>)
 8000942:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000946:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_IWDG_Init+0x34>)
 800094a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800094e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_IWDG_Init+0x34>)
 8000952:	f001 fb27 	bl	8001fa4 <HAL_IWDG_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800095c:	f000 f873 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000214 	.word	0x20000214
 8000968:	40003000 	.word	0x40003000

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f000 fad7 	bl	8000f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f81b 	bl	80009ae <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f7ff fdee 	bl	8000558 <MX_GPIO_Init>
  MX_CRC_Init();
 800097c:	f7ff fc50 	bl	8000220 <MX_CRC_Init>
  MX_FDCAN1_Init();
 8000980:	f7ff fc9a 	bl	80002b8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000984:	f7ff fcde 	bl	8000344 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000988:	f7ff feb8 	bl	80006fc <MX_I2C2_Init>
  MX_I2C3_Init();
 800098c:	f7ff fef6 	bl	800077c <MX_I2C3_Init>
  MX_IWDG_Init();
 8000990:	f7ff ffce 	bl	8000930 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000994:	f000 f85c 	bl	8000a50 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000998:	f000 f898 	bl	8000acc <MX_SPI2_Init>
  MX_SPI3_Init();
 800099c:	f000 f8d4 	bl	8000b48 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009a0:	f007 fdee 	bl	8008580 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009a4:	f7ff fdc4 	bl	8000530 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009a8:	f007 fe0e 	bl	80085c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <main+0x40>

080009ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b094      	sub	sp, #80	; 0x50
 80009b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	2238      	movs	r2, #56	; 0x38
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f00b fa1f 	bl	800be00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009d4:	f002 feac 	bl	8003730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009d8:	2309      	movs	r3, #9
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	2303      	movs	r3, #3
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 80009ee:	2310      	movs	r3, #16
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009f2:	2360      	movs	r3, #96	; 0x60
 80009f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009fa:	2306      	movs	r3, #6
 80009fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 ff36 	bl	8003878 <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a12:	f000 f818 	bl	8000a46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fa34 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a3a:	f000 f804 	bl	8000a46 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3750      	adds	r7, #80	; 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4a:	b672      	cpsid	i
}
 8000a4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <Error_Handler+0x8>

08000a50 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_SPI1_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000ab0:	f003 fe26 	bl	8004700 <HAL_SPI_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f7ff ffc4 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000224 	.word	0x20000224
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_SPI2_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000aea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000afa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000afe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b02:	2208      	movs	r2, #8
 8000b04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_SPI2_Init+0x74>)
 8000b2c:	f003 fde8 	bl	8004700 <HAL_SPI_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f7ff ff86 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000288 	.word	0x20000288
 8000b44:	40003800 	.word	0x40003800

08000b48 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_SPI3_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000ba8:	f003 fdaa 	bl	8004700 <HAL_SPI_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f7ff ff48 	bl	8000a46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200002ec 	.word	0x200002ec
 8000bc0:	40003c00 	.word	0x40003c00

08000bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a55      	ldr	r2, [pc, #340]	; (8000d38 <HAL_SPI_MspInit+0x174>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d129      	bne.n	8000c3a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a54      	ldr	r2, [pc, #336]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b4c      	ldr	r3, [pc, #304]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c16:	23f0      	movs	r3, #240	; 0xf0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c26:	2305      	movs	r3, #5
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f000 feea 	bl	8001a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c38:	e07a      	b.n	8000d30 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <HAL_SPI_MspInit+0x17c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d129      	bne.n	8000c98 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	4a3c      	ldr	r2, [pc, #240]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c50:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c74:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c86:	2305      	movs	r3, #5
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	482c      	ldr	r0, [pc, #176]	; (8000d44 <HAL_SPI_MspInit+0x180>)
 8000c92:	f000 febb 	bl	8001a0c <HAL_GPIO_Init>
}
 8000c96:	e04b      	b.n	8000d30 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <HAL_SPI_MspInit+0x184>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d146      	bne.n	8000d30 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x178>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f000 fe7f 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d20:	2306      	movs	r3, #6
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <HAL_SPI_MspInit+0x188>)
 8000d2c:	f000 fe6e 	bl	8001a0c <HAL_GPIO_Init>
}
 8000d30:	bf00      	nop
 8000d32:	3738      	adds	r7, #56	; 0x38
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40003800 	.word	0x40003800
 8000d44:	48000400 	.word	0x48000400
 8000d48:	40003c00 	.word	0x40003c00
 8000d4c:	48000800 	.word	0x48000800

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	; 0x60
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	210f      	movs	r1, #15
 8000d8a:	f06f 0001 	mvn.w	r0, #1
 8000d8e:	f000 f9f6 	bl	800117e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8fa 	bl	8000fc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dd4:	f009 f95a 	bl	800a08c <xTaskGetSchedulerState>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d001      	beq.n	8000de2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dde:	f009 ff43 	bl	800ac68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USB_LP_IRQHandler+0x10>)
 8000dee:	f001 f928 	bl	8002042 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2001014c 	.word	0x2001014c

08000dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return 1;
 8000e00:	2301      	movs	r3, #1
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_kill>:

int _kill(int pid, int sig)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e16:	f00b f8a5 	bl	800bf64 <__errno>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2216      	movs	r2, #22
 8000e1e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_exit>:

void _exit (int status)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ffe7 	bl	8000e0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e3e:	e7fe      	b.n	8000e3e <_exit+0x12>

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f00b f878 	bl	800bf64 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20020000 	.word	0x20020000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000350 	.word	0x20000350
 8000ea8:	20010578 	.word	0x20010578

08000eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed4:	f7ff ffea 	bl	8000eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000efe:	f00b f837 	bl	800bf70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f02:	f7ff fd33 	bl	800096c <main>

08000f06 <LoopForever>:

LoopForever:
    b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f14:	0800c0f8 	.word	0x0800c0f8
  ldr r2, =_sbss
 8000f18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f1c:	20010574 	.word	0x20010574

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>

08000f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f91b 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f32:	200f      	movs	r0, #15
 8000f34:	f000 f80e 	bl	8000f54 <HAL_InitTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	e001      	b.n	8000f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f44:	f7ff ff04 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f48:	79fb      	ldrb	r3, [r7, #7]

}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_InitTick+0x68>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d022      	beq.n	8000fae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_InitTick+0x6c>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_InitTick+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f918 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10f      	bne.n	8000fa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	d809      	bhi.n	8000fa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f96:	f000 f8f2 	bl	800117e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0x70>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e007      	b.n	8000fb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e004      	b.n	8000fb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e001      	b.n	8000fb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x1c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a03      	ldr	r2, [pc, #12]	; (8000fe4 <HAL_IncTick+0x1c>)
 8000fd8:	6013      	str	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20000354 	.word	0x20000354
 8000fe8:	20000008 	.word	0x20000008

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000354 	.word	0x20000354

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff47 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	4603      	mov	r3, r0
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff5e 	bl	800104c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff90 	bl	80010bc <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5f 	bl	8001068 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffb2 	bl	8001124 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e054      	b.n	8001288 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7f5b      	ldrb	r3, [r3, #29]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d105      	bne.n	80011f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f842 	bl	8000278 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	791b      	ldrb	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <HAL_CRC_Init+0xc4>)
 8001208:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0218 	bic.w	r2, r2, #24
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	e00c      	b.n	8001236 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	461a      	mov	r2, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f834 	bl	8001294 <HAL_CRCEx_Polynomial_Set>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e028      	b.n	8001288 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	e004      	b.n	8001254 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6912      	ldr	r2, [r2, #16]
 8001252:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	04c11db7 	.word	0x04c11db7

08001294 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80012a4:	231f      	movs	r3, #31
 80012a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
 80012b6:	e063      	b.n	8001380 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80012b8:	bf00      	nop
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	613a      	str	r2, [r7, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_CRCEx_Polynomial_Set+0x44>
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f0      	beq.n	80012ba <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b18      	cmp	r3, #24
 80012dc:	d846      	bhi.n	800136c <HAL_CRCEx_Polynomial_Set+0xd8>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	08001373 	.word	0x08001373
 80012e8:	0800136d 	.word	0x0800136d
 80012ec:	0800136d 	.word	0x0800136d
 80012f0:	0800136d 	.word	0x0800136d
 80012f4:	0800136d 	.word	0x0800136d
 80012f8:	0800136d 	.word	0x0800136d
 80012fc:	0800136d 	.word	0x0800136d
 8001300:	0800136d 	.word	0x0800136d
 8001304:	08001361 	.word	0x08001361
 8001308:	0800136d 	.word	0x0800136d
 800130c:	0800136d 	.word	0x0800136d
 8001310:	0800136d 	.word	0x0800136d
 8001314:	0800136d 	.word	0x0800136d
 8001318:	0800136d 	.word	0x0800136d
 800131c:	0800136d 	.word	0x0800136d
 8001320:	0800136d 	.word	0x0800136d
 8001324:	08001355 	.word	0x08001355
 8001328:	0800136d 	.word	0x0800136d
 800132c:	0800136d 	.word	0x0800136d
 8001330:	0800136d 	.word	0x0800136d
 8001334:	0800136d 	.word	0x0800136d
 8001338:	0800136d 	.word	0x0800136d
 800133c:	0800136d 	.word	0x0800136d
 8001340:	0800136d 	.word	0x0800136d
 8001344:	08001349 	.word	0x08001349
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b06      	cmp	r3, #6
 800134c:	d913      	bls.n	8001376 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001352:	e010      	b.n	8001376 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b07      	cmp	r3, #7
 8001358:	d90f      	bls.n	800137a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800135e:	e00c      	b.n	800137a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	d90b      	bls.n	800137e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800136a:	e008      	b.n	800137e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	75fb      	strb	r3, [r7, #23]
        break;
 8001370:	e006      	b.n	8001380 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001372:	bf00      	nop
 8001374:	e004      	b.n	8001380 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001376:	bf00      	nop
 8001378:	e002      	b.n	8001380 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800137a:	bf00      	nop
 800137c:	e000      	b.n	8001380 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800137e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f023 0118 	bic.w	r1, r3, #24
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e147      	b.n	8001652 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7fe fffa 	bl	80003d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0210 	bic.w	r2, r2, #16
 80013ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ec:	f7ff fdfe 	bl	8000fec <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013f2:	e012      	b.n	800141a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013f4:	f7ff fdfa 	bl	8000fec <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b0a      	cmp	r3, #10
 8001400:	d90b      	bls.n	800141a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f043 0201 	orr.w	r2, r3, #1
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e11b      	b.n	8001652 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b08      	cmp	r3, #8
 8001426:	d0e5      	beq.n	80013f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0201 	orr.w	r2, r2, #1
 8001436:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff fdd8 	bl	8000fec <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800143e:	e012      	b.n	8001466 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001440:	f7ff fdd4 	bl	8000fec <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d90b      	bls.n	8001466 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f043 0201 	orr.w	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0f5      	b.n	8001652 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0e5      	beq.n	8001440 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0202 	orr.w	r2, r2, #2
 8001482:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a74      	ldr	r2, [pc, #464]	; (800165c <HAL_FDCAN_Init+0x2ac>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d103      	bne.n	8001496 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800148e:	4a74      	ldr	r2, [pc, #464]	; (8001660 <HAL_FDCAN_Init+0x2b0>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7c1b      	ldrb	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	e007      	b.n	80014c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7c5b      	ldrb	r3, [r3, #17]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d108      	bne.n	80014da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	e007      	b.n	80014ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7c9b      	ldrb	r3, [r3, #18]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001500:	619a      	str	r2, [r3, #24]
 8001502:	e007      	b.n	8001514 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001512:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001538:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0210 	bic.w	r2, r2, #16
 8001548:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699a      	ldr	r2, [r3, #24]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0204 	orr.w	r2, r2, #4
 8001560:	619a      	str	r2, [r3, #24]
 8001562:	e02c      	b.n	80015be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d028      	beq.n	80015be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d01c      	beq.n	80015ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699a      	ldr	r2, [r3, #24]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001582:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0210 	orr.w	r2, r2, #16
 8001592:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d110      	bne.n	80015be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0220 	orr.w	r2, r2, #32
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	e007      	b.n	80015be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0220 	orr.w	r2, r2, #32
 80015bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	3b01      	subs	r3, #1
 80015e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015f2:	d115      	bne.n	8001620 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	3b01      	subs	r3, #1
 8001600:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001602:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	3b01      	subs	r3, #1
 800160a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800160c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	3b01      	subs	r3, #1
 8001616:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800161c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800161e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f97c 	bl	8001934 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40006400 	.word	0x40006400
 8001660:	40006500 	.word	0x40006500

08001664 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001674:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d002      	beq.n	8001682 <HAL_FDCAN_ConfigFilter+0x1e>
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d13d      	bne.n	80016fe <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001696:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800169e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e01d      	b.n	80016fa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	075a      	lsls	r2, r3, #29
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	079a      	lsls	r2, r3, #30
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3304      	adds	r3, #4
 80016f2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e006      	b.n	800170c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	f043 0202 	orr.w	r2, r3, #2
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d110      	bne.n	800174e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e006      	b.n	800175c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f043 0204 	orr.w	r2, r3, #4
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
  }
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800177a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d003      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0x22>
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	2b02      	cmp	r3, #2
 8001786:	f040 80c8 	bne.w	800191a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03b      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d031      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d027      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01d      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d013      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00c      	beq.n	800182e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d13b      	bne.n	80018ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d131      	bne.n	80018ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d127      	bne.n	80018ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11d      	bne.n	80018ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d113      	bne.n	80018ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0320 	and.w	r3, r3, #32
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00c      	beq.n	80018ca <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0202 	orr.w	r2, r2, #2
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d009      	beq.n	80018e8 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	430a      	orrs	r2, r1
 8001902:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	430a      	orrs	r2, r1
 8001914:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e006      	b.n	8001928 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f043 0202 	orr.w	r2, r3, #2
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800193e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d103      	bne.n	8001952 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001950:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2c      	ldr	r2, [pc, #176]	; (8001a08 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d103      	bne.n	8001964 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001962:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001972:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	041a      	lsls	r2, r3, #16
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001998:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	061a      	lsls	r2, r3, #24
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e005      	b.n	80019e6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3304      	adds	r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3f3      	bcc.n	80019da <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	4000a400 	.word	0x4000a400
 8001a04:	40006800 	.word	0x40006800
 8001a08:	40006c00 	.word	0x40006c00

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a1a:	e15a      	b.n	8001cd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 814c 	beq.w	8001ccc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d005      	beq.n	8001a4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d130      	bne.n	8001aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a82:	2201      	movs	r2, #1
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 0201 	and.w	r2, r3, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d017      	beq.n	8001aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d123      	bne.n	8001b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	08da      	lsrs	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3208      	adds	r2, #8
 8001b38:	6939      	ldr	r1, [r7, #16]
 8001b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a6 	beq.w	8001ccc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b80:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8c:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_GPIO_Init+0x2e4>)
 8001b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b98:	4a56      	ldr	r2, [pc, #344]	; (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bc2:	d01f      	beq.n	8001c04 <HAL_GPIO_Init+0x1f8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x2ec>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d019      	beq.n	8001c00 <HAL_GPIO_Init+0x1f4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_GPIO_Init+0x2f0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d013      	beq.n	8001bfc <HAL_GPIO_Init+0x1f0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x2f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d00d      	beq.n	8001bf8 <HAL_GPIO_Init+0x1ec>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <HAL_GPIO_Init+0x2f8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d007      	beq.n	8001bf4 <HAL_GPIO_Init+0x1e8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a48      	ldr	r2, [pc, #288]	; (8001d08 <HAL_GPIO_Init+0x2fc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_GPIO_Init+0x1e4>
 8001bec:	2305      	movs	r3, #5
 8001bee:	e00a      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	e008      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e004      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <HAL_GPIO_Init+0x1fa>
 8001c04:	2300      	movs	r3, #0
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	f002 0203 	and.w	r2, r2, #3
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c16:	4937      	ldr	r1, [pc, #220]	; (8001cf4 <HAL_GPIO_Init+0x2e8>)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c24:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c48:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c72:	4a26      	ldr	r2, [pc, #152]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_GPIO_Init+0x300>)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f47f ae9d 	bne.w	8001a1c <HAL_GPIO_Init+0x10>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	48000800 	.word	0x48000800
 8001d00:	48000c00 	.word	0x48000c00
 8001d04:	48001000 	.word	0x48001000
 8001d08:	48001400 	.word	0x48001400
 8001d0c:	40010400 	.word	0x40010400

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e08d      	b.n	8001e6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fd48 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	e006      	b.n	8001dc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d108      	bne.n	8001de2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	e007      	b.n	8001df2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69d9      	ldr	r1, [r3, #28]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1a      	ldr	r2, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d138      	bne.n	8001efe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e032      	b.n	8001f00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2224      	movs	r2, #36	; 0x24
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ec8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e000      	b.n	8001f00 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
  }
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d139      	bne.n	8001f96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d101      	bne.n	8001f30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e033      	b.n	8001f98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e041      	b.n	800203a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f245 5255 	movw	r2, #21845	; 0x5555
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6852      	ldr	r2, [r2, #4]
 8001fd2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6892      	ldr	r2, [r2, #8]
 8001fdc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001fde:	f7ff f805 	bl	8000fec <HAL_GetTick>
 8001fe2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001fe4:	e00f      	b.n	8002006 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001fe6:	f7ff f801 	bl	8000fec <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b31      	cmp	r3, #49	; 0x31
 8001ff2:	d908      	bls.n	8002006 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e019      	b.n	800203a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e8      	bne.n	8001fe6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	429a      	cmp	r2, r3
 8002020:	d005      	beq.n	800202e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68d2      	ldr	r2, [r2, #12]
 800202a:	611a      	str	r2, [r3, #16]
 800202c:	e004      	b.n	8002038 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f005 f984 	bl	800735c <USB_ReadInterrupts>
 8002054:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 faa4 	bl	80025ae <PCD_EP_ISR_Handler>

    return;
 8002066:	e110      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d013      	beq.n	800209a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207a:	b29a      	uxth	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002084:	b292      	uxth	r2, r2
 8002086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f009 fc1a 	bl	800b8c4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002090:	2100      	movs	r1, #0
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8fc 	bl	8002290 <HAL_PCD_SetAddress>

    return;
 8002098:	e0f7      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020bc:	e0e5      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020da:	b292      	uxth	r2, r2
 80020dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020e0:	e0d3      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d034      	beq.n	8002156 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0204 	bic.w	r2, r2, #4
 80020fe:	b292      	uxth	r2, r2
 8002100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800210c:	b29a      	uxth	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0208 	bic.w	r2, r2, #8
 8002116:	b292      	uxth	r2, r2
 8002118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800212e:	2100      	movs	r1, #0
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f009 fd0d 	bl	800bb50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f009 fbfc 	bl	800b934 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800214e:	b292      	uxth	r2, r2
 8002150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002154:	e099      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	2b00      	cmp	r3, #0
 800215e:	d027      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0208 	orr.w	r2, r2, #8
 8002172:	b292      	uxth	r2, r2
 8002174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218a:	b292      	uxth	r2, r2
 800218c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0204 	orr.w	r2, r2, #4
 80021a2:	b292      	uxth	r2, r2
 80021a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f009 fba9 	bl	800b900 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021ae:	e06c      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d040      	beq.n	800223c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021cc:	b292      	uxth	r2, r2
 80021ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d12b      	bne.n	8002234 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0204 	orr.w	r2, r2, #4
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0208 	orr.w	r2, r2, #8
 8002206:	b292      	uxth	r2, r2
 8002208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800221c:	b29b      	uxth	r3, r3
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800222a:	2101      	movs	r1, #1
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f009 fc8f 	bl	800bb50 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002232:	e02a      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f009 fb63 	bl	800b900 <HAL_PCD_SuspendCallback>
    return;
 800223a:	e026      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00f      	beq.n	8002266 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002258:	b292      	uxth	r2, r2
 800225a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f009 fb22 	bl	800b8a8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002264:	e011      	b.n	800228a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00c      	beq.n	800228a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002282:	b292      	uxth	r2, r2
 8002284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002288:	bf00      	nop
  }
}
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_SetAddress+0x1a>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e012      	b.n	80022d0 <HAL_PCD_SetAddress+0x40>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f005 f837 	bl	8007334 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	70fb      	strb	r3, [r7, #3]
 80022ea:	460b      	mov	r3, r1
 80022ec:	803b      	strh	r3, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da0e      	bge.n	800231c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 0207 	and.w	r2, r3, #7
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	3310      	adds	r3, #16
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	705a      	strb	r2, [r3, #1]
 800231a:	e00e      	b.n	800233a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002346:	883a      	ldrh	r2, [r7, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	78ba      	ldrb	r2, [r7, #2]
 8002350:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002352:	78bb      	ldrb	r3, [r7, #2]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d102      	bne.n	800235e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_PCD_EP_Open+0x94>
 8002368:	2302      	movs	r3, #2
 800236a:	e00e      	b.n	800238a <HAL_PCD_EP_Open+0xb2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 ff66 	bl	800524c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002388:	7afb      	ldrb	r3, [r7, #11]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	460b      	mov	r3, r1
 80023a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	f003 0207 	and.w	r2, r3, #7
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6979      	ldr	r1, [r7, #20]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 faf5 	bl	80059d4 <USB_EPStartXfer>

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	460b      	mov	r3, r1
 8002402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	f003 0207 	and.w	r2, r3, #7
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	3310      	adds	r3, #16
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2201      	movs	r2, #1
 800243e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	b2da      	uxtb	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6979      	ldr	r1, [r7, #20]
 8002452:	4618      	mov	r0, r3
 8002454:	f003 fabe 	bl	80059d4 <USB_EPStartXfer>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	7912      	ldrb	r2, [r2, #4]
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e03e      	b.n	80024fe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002484:	2b00      	cmp	r3, #0
 8002486:	da0e      	bge.n	80024a6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	3310      	adds	r3, #16
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	705a      	strb	r2, [r3, #1]
 80024a4:	e00c      	b.n	80024c0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_PCD_EP_SetStall+0x7e>
 80024dc:	2302      	movs	r3, #2
 80024de:	e00e      	b.n	80024fe <HAL_PCD_EP_SetStall+0x9c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68f9      	ldr	r1, [r7, #12]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fe21 	bl	8007136 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	7912      	ldrb	r2, [r2, #4]
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e040      	b.n	80025a6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002528:	2b00      	cmp	r3, #0
 800252a:	da0e      	bge.n	800254a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	f003 0207 	and.w	r2, r3, #7
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	3310      	adds	r3, #16
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	705a      	strb	r2, [r3, #1]
 8002548:	e00e      	b.n	8002568 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 0207 	and.w	r2, r3, #7
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_PCD_EP_ClrStall+0x82>
 8002584:	2302      	movs	r3, #2
 8002586:	e00e      	b.n	80025a6 <HAL_PCD_EP_ClrStall+0xa0>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	f004 fe1e 	bl	80071d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b096      	sub	sp, #88	; 0x58
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025b6:	e3ae      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80025d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 8170 	bne.w	80028bc <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d14d      	bne.n	8002684 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f8:	81fb      	strh	r3, [r7, #14]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002608:	b29b      	uxth	r3, r3
 800260a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3310      	adds	r3, #16
 8002610:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	4413      	add	r3, r2
 800262c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002638:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	441a      	add	r2, r3
 8002644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002646:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002648:	2100      	movs	r1, #0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f009 f912 	bl	800b874 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7b1b      	ldrb	r3, [r3, #12]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 835d 	beq.w	8002d16 <PCD_EP_ISR_Handler+0x768>
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f040 8358 	bne.w	8002d16 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7b1b      	ldrb	r3, [r3, #12]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002670:	b2da      	uxtb	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b292      	uxth	r2, r2
 8002678:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	731a      	strb	r2, [r3, #12]
 8002682:	e348      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800269a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d032      	beq.n	8002708 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80026d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f004 fe8f 	bl	8007400 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ee:	4013      	ands	r3, r2
 80026f0:	823b      	strh	r3, [r7, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	8a3a      	ldrh	r2, [r7, #16]
 80026f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026fc:	b292      	uxth	r2, r2
 80026fe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f009 f88a 	bl	800b81a <HAL_PCD_SetupStageCallback>
 8002706:	e306      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002708:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800270c:	2b00      	cmp	r3, #0
 800270e:	f280 8302 	bge.w	8002d16 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29a      	uxth	r2, r3
 800271a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800271e:	4013      	ands	r3, r2
 8002720:	83fb      	strh	r3, [r7, #30]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	8bfa      	ldrh	r2, [r7, #30]
 8002728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800272c:	b292      	uxth	r2, r2
 800272e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	4413      	add	r3, r2
 800274a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002756:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d019      	beq.n	8002794 <PCD_EP_ISR_Handler+0x1e6>
 8002760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	6959      	ldr	r1, [r3, #20]
 8002770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002772:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002776:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002778:	b29b      	uxth	r3, r3
 800277a:	f004 fe41 	bl	8007400 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800277e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	441a      	add	r2, r3
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800278c:	2100      	movs	r1, #0
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f009 f855 	bl	800b83e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800279e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 82b5 	bne.w	8002d16 <PCD_EP_ISR_Handler+0x768>
 80027ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80027b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027b8:	f000 82ad 	beq.w	8002d16 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b3e      	cmp	r3, #62	; 0x3e
 80027f2:	d91d      	bls.n	8002830 <PCD_EP_ISR_Handler+0x282>
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
 80027fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <PCD_EP_ISR_Handler+0x260>
 8002808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280a:	3b01      	subs	r3, #1
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002816:	b29b      	uxth	r3, r3
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	b29b      	uxth	r3, r3
 800281c:	4313      	orrs	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002828:	b29a      	uxth	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	801a      	strh	r2, [r3, #0]
 800282e:	e026      	b.n	800287e <PCD_EP_ISR_Handler+0x2d0>
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <PCD_EP_ISR_Handler+0x2a0>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002846:	b29a      	uxth	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	e017      	b.n	800287e <PCD_EP_ISR_Handler+0x2d0>
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	647b      	str	r3, [r7, #68]	; 0x44
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <PCD_EP_ISR_Handler+0x2ba>
 8002862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002864:	3301      	adds	r3, #1
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29a      	uxth	r2, r3
 800286e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002870:	b29b      	uxth	r3, r3
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	b29b      	uxth	r3, r3
 8002876:	4313      	orrs	r3, r2
 8002878:	b29a      	uxth	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800288a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288e:	827b      	strh	r3, [r7, #18]
 8002890:	8a7b      	ldrh	r3, [r7, #18]
 8002892:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002896:	827b      	strh	r3, [r7, #18]
 8002898:	8a7b      	ldrh	r3, [r7, #18]
 800289a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800289e:	827b      	strh	r3, [r7, #18]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	8a7b      	ldrh	r3, [r7, #18]
 80028a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	8013      	strh	r3, [r2, #0]
 80028ba:	e22c      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f280 80f6 	bge.w	8002ac6 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028f0:	4013      	ands	r3, r2
 80028f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002908:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800290c:	b292      	uxth	r2, r2
 800290e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002910:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	4413      	add	r3, r2
 8002924:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002928:	7b1b      	ldrb	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d123      	bne.n	8002976 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	4413      	add	r3, r2
 8002948:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002952:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002956:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 808e 	beq.w	8002a7c <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002966:	6959      	ldr	r1, [r3, #20]
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	88da      	ldrh	r2, [r3, #6]
 800296c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002970:	f004 fd46 	bl	8007400 <USB_ReadPMA>
 8002974:	e082      	b.n	8002a7c <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d10a      	bne.n	8002994 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800297e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002982:	461a      	mov	r2, r3
 8002984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f9d3 	bl	8002d32 <HAL_PCD_EP_DB_Receive>
 800298c:	4603      	mov	r3, r0
 800298e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002992:	e073      	b.n	8002a7c <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	441a      	add	r2, r3
 80029c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d022      	beq.n	8002a38 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d02c      	beq.n	8002a7c <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a28:	6959      	ldr	r1, [r3, #20]
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	891a      	ldrh	r2, [r3, #8]
 8002a2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a32:	f004 fce5 	bl	8007400 <USB_ReadPMA>
 8002a36:	e021      	b.n	8002a7c <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	6959      	ldr	r1, [r3, #20]
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	895a      	ldrh	r2, [r3, #10]
 8002a74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a78:	f004 fcc2 	bl	8007400 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a84:	441a      	add	r2, r3
 8002a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a92:	441a      	add	r2, r3
 8002a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <PCD_EP_ISR_Handler+0x4fe>
 8002aa0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d206      	bcs.n	8002aba <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f008 fec3 	bl	800b83e <HAL_PCD_DataOutStageCallback>
 8002ab8:	e005      	b.n	8002ac6 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 ff87 	bl	80059d4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8121 	beq.w	8002d16 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ad4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	78db      	ldrb	r3, [r3, #3]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	f040 80a2 	bne.w	8002c72 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b36:	7b1b      	ldrb	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8093 	beq.w	8002c64 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d046      	beq.n	8002bd8 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d126      	bne.n	8002ba0 <PCD_EP_ISR_Handler+0x5f2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	4413      	add	r3, r2
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	00da      	lsls	r2, r3, #3
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	4413      	add	r3, r2
 8002b74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e061      	b.n	8002c64 <PCD_EP_ISR_Handler+0x6b6>
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d15d      	bne.n	8002c64 <PCD_EP_ISR_Handler+0x6b6>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	4413      	add	r3, r2
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00da      	lsls	r2, r3, #3
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	801a      	strh	r2, [r3, #0]
 8002bd6:	e045      	b.n	8002c64 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d126      	bne.n	8002c34 <PCD_EP_ISR_Handler+0x686>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	4413      	add	r3, r2
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	00da      	lsls	r2, r3, #3
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	4413      	add	r3, r2
 8002c08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	e017      	b.n	8002c64 <PCD_EP_ISR_Handler+0x6b6>
 8002c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d113      	bne.n	8002c64 <PCD_EP_ISR_Handler+0x6b6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	00da      	lsls	r2, r3, #3
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	2200      	movs	r2, #0
 8002c62:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f008 fe02 	bl	800b874 <HAL_PCD_DataInStageCallback>
 8002c70:	e051      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002c72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d144      	bne.n	8002d08 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d907      	bls.n	8002cc2 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cba:	1ad2      	subs	r2, r2, r3
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	619a      	str	r2, [r3, #24]
 8002cc0:	e002      	b.n	8002cc8 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f008 fdcc 	bl	800b874 <HAL_PCD_DataInStageCallback>
 8002cdc:	e01b      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ce6:	441a      	add	r2, r3
 8002ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002cf4:	441a      	add	r2, r3
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d00:	4618      	mov	r0, r3
 8002d02:	f002 fe67 	bl	80059d4 <USB_EPStartXfer>
 8002d06:	e006      	b.n	8002d16 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f917 	bl	8002f44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f6ff ac48 	blt.w	80025b8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3758      	adds	r7, #88	; 0x58
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d07c      	beq.n	8002e44 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	8b7b      	ldrh	r3, [r7, #26]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d306      	bcc.n	8002d88 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	8b7b      	ldrh	r3, [r7, #26]
 8002d80:	1ad2      	subs	r2, r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	619a      	str	r2, [r3, #24]
 8002d86:	e002      	b.n	8002d8e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d123      	bne.n	8002dde <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	833b      	strh	r3, [r7, #24]
 8002db2:	8b3b      	ldrh	r3, [r7, #24]
 8002db4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002db8:	833b      	strh	r3, [r7, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	8b3b      	ldrh	r3, [r7, #24]
 8002dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01f      	beq.n	8002e28 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	82fb      	strh	r3, [r7, #22]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	441a      	add	r2, r3
 8002e12:	8afb      	ldrh	r3, [r7, #22]
 8002e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e28:	8b7b      	ldrh	r3, [r7, #26]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8085 	beq.w	8002f3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6959      	ldr	r1, [r3, #20]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	891a      	ldrh	r2, [r3, #8]
 8002e3c:	8b7b      	ldrh	r3, [r7, #26]
 8002e3e:	f004 fadf 	bl	8007400 <USB_ReadPMA>
 8002e42:	e07a      	b.n	8002f3a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	8b7b      	ldrh	r3, [r7, #26]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d306      	bcc.n	8002e82 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	8b7b      	ldrh	r3, [r7, #26]
 8002e7a:	1ad2      	subs	r2, r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	619a      	str	r2, [r3, #24]
 8002e80:	e002      	b.n	8002e88 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d123      	bne.n	8002ed8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	83fb      	strh	r3, [r7, #30]
 8002eac:	8bfb      	ldrh	r3, [r7, #30]
 8002eae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eb2:	83fb      	strh	r3, [r7, #30]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	441a      	add	r2, r3
 8002ec2:	8bfb      	ldrh	r3, [r7, #30]
 8002ec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11f      	bne.n	8002f22 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	83bb      	strh	r3, [r7, #28]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	8bbb      	ldrh	r3, [r7, #28]
 8002f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f22:	8b7b      	ldrh	r3, [r7, #26]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6959      	ldr	r1, [r3, #20]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	895a      	ldrh	r2, [r3, #10]
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	f004 fa63 	bl	8007400 <USB_ReadPMA>
    }
  }

  return count;
 8002f3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b0a4      	sub	sp, #144	; 0x90
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 81db 	beq.w	8003314 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d907      	bls.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f9a:	1ad2      	subs	r2, r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	619a      	str	r2, [r3, #24]
 8002fa0:	e002      	b.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 80b9 	bne.w	8003124 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d126      	bne.n	8003008 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	4413      	add	r3, r2
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	00da      	lsls	r2, r3, #3
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	4413      	add	r3, r2
 8002fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003000:	b29a      	uxth	r2, r3
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	e01a      	b.n	800303e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d116      	bne.n	800303e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	637b      	str	r3, [r7, #52]	; 0x34
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301e:	b29b      	uxth	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	4413      	add	r3, r2
 8003026:	637b      	str	r3, [r7, #52]	; 0x34
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	00da      	lsls	r2, r3, #3
 800302e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003030:	4413      	add	r3, r2
 8003032:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	785b      	ldrb	r3, [r3, #1]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d126      	bne.n	800309a <HAL_PCD_EP_DB_Transmit+0x156>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	00da      	lsls	r2, r3, #3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307e:	b29a      	uxth	r2, r3
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800308e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003092:	b29a      	uxth	r2, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	801a      	strh	r2, [r3, #0]
 8003098:	e017      	b.n	80030ca <HAL_PCD_EP_DB_Transmit+0x186>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d113      	bne.n	80030ca <HAL_PCD_EP_DB_Transmit+0x186>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	4413      	add	r3, r2
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	00da      	lsls	r2, r3, #3
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	4413      	add	r3, r2
 80030be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2200      	movs	r2, #0
 80030c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4619      	mov	r1, r3
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f008 fbcf 	bl	800b874 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 82fa 	beq.w	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	82fb      	strh	r3, [r7, #22]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	441a      	add	r2, r3
 800310c:	8afb      	ldrh	r3, [r7, #22]
 800310e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800311a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311e:	b29b      	uxth	r3, r3
 8003120:	8013      	strh	r3, [r2, #0]
 8003122:	e2d8      	b.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d021      	beq.n	8003172 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800315e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003178:	2b01      	cmp	r3, #1
 800317a:	f040 82ac 	bne.w	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003186:	441a      	add	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003194:	441a      	add	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6a1a      	ldr	r2, [r3, #32]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d30b      	bcc.n	80031be <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	621a      	str	r2, [r3, #32]
 80031bc:	e017      	b.n	80031ee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d108      	bne.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80031c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031d6:	e00a      	b.n	80031ee <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	785b      	ldrb	r3, [r3, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d165      	bne.n	80032c2 <HAL_PCD_EP_DB_Transmit+0x37e>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003204:	b29b      	uxth	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320a:	4413      	add	r3, r2
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00da      	lsls	r2, r3, #3
 8003214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003216:	4413      	add	r3, r2
 8003218:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003228:	b29a      	uxth	r2, r3
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003232:	2b3e      	cmp	r3, #62	; 0x3e
 8003234:	d91d      	bls.n	8003272 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	64bb      	str	r3, [r7, #72]	; 0x48
 800323e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_PCD_EP_DB_Transmit+0x30c>
 800324a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324c:	3b01      	subs	r3, #1
 800324e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29a      	uxth	r2, r3
 8003256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003258:	b29b      	uxth	r3, r3
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	b29b      	uxth	r3, r3
 800325e:	4313      	orrs	r3, r2
 8003260:	b29b      	uxth	r3, r3
 8003262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326a:	b29a      	uxth	r2, r3
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	801a      	strh	r2, [r3, #0]
 8003270:	e044      	b.n	80032fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_PCD_EP_DB_Transmit+0x34c>
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003288:	b29a      	uxth	r2, r3
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	801a      	strh	r2, [r3, #0]
 800328e:	e035      	b.n	80032fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	64bb      	str	r3, [r7, #72]	; 0x48
 8003298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_PCD_EP_DB_Transmit+0x366>
 80032a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032a6:	3301      	adds	r3, #1
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	801a      	strh	r2, [r3, #0]
 80032c0:	e01c      	b.n	80032fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	785b      	ldrb	r3, [r3, #1]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d118      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	647b      	str	r3, [r7, #68]	; 0x44
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032d8:	b29b      	uxth	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032de:	4413      	add	r3, r2
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00da      	lsls	r2, r3, #3
 80032e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ea:	4413      	add	r3, r2
 80032ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032f0:	643b      	str	r3, [r7, #64]	; 0x40
 80032f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6959      	ldr	r1, [r3, #20]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	891a      	ldrh	r2, [r3, #8]
 8003308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800330c:	b29b      	uxth	r3, r3
 800330e:	f004 f835 	bl	800737c <USB_WritePMA>
 8003312:	e1e0      	b.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331c:	b29b      	uxth	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4413      	add	r3, r2
 800332e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003338:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003344:	429a      	cmp	r2, r3
 8003346:	d307      	bcc.n	8003358 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003350:	1ad2      	subs	r2, r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	619a      	str	r2, [r3, #24]
 8003356:	e002      	b.n	800335e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80c0 	bne.w	80034e8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d126      	bne.n	80033be <HAL_PCD_EP_DB_Transmit+0x47a>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003384:	4413      	add	r3, r2
 8003386:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	00da      	lsls	r2, r3, #3
 800338e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003390:	4413      	add	r3, r2
 8003392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003396:	67bb      	str	r3, [r7, #120]	; 0x78
 8003398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	e01a      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d116      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	667b      	str	r3, [r7, #100]	; 0x64
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033da:	4413      	add	r3, r2
 80033dc:	667b      	str	r3, [r7, #100]	; 0x64
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	00da      	lsls	r2, r3, #3
 80033e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e6:	4413      	add	r3, r2
 80033e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
 80033ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f0:	2200      	movs	r2, #0
 80033f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	677b      	str	r3, [r7, #116]	; 0x74
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d12b      	bne.n	800345a <HAL_PCD_EP_DB_Transmit+0x516>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003410:	b29b      	uxth	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	4413      	add	r3, r2
 8003418:	66fb      	str	r3, [r7, #108]	; 0x6c
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00da      	lsls	r2, r3, #3
 8003420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003422:	4413      	add	r3, r2
 8003424:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800342c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003438:	b29a      	uxth	r2, r3
 800343a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003450:	b29a      	uxth	r2, r3
 8003452:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003456:	801a      	strh	r2, [r3, #0]
 8003458:	e017      	b.n	800348a <HAL_PCD_EP_DB_Transmit+0x546>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d113      	bne.n	800348a <HAL_PCD_EP_DB_Transmit+0x546>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346a:	b29b      	uxth	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	4413      	add	r3, r2
 8003472:	677b      	str	r3, [r7, #116]	; 0x74
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	00da      	lsls	r2, r3, #3
 800347a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347c:	4413      	add	r3, r2
 800347e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003482:	673b      	str	r3, [r7, #112]	; 0x70
 8003484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003486:	2200      	movs	r2, #0
 8003488:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f008 f9ef 	bl	800b874 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 811a 	bne.w	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80034d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8013      	strh	r3, [r2, #0]
 80034e6:	e0f6      	b.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d121      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	441a      	add	r2, r3
 800351e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800352e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 80ca 	bne.w	80036d6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800354a:	441a      	add	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003558:	441a      	add	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6a1a      	ldr	r2, [r3, #32]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	429a      	cmp	r2, r3
 8003568:	d30b      	bcc.n	8003582 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	6a1a      	ldr	r2, [r3, #32]
 8003576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	621a      	str	r2, [r3, #32]
 8003580:	e017      	b.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d108      	bne.n	800359c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800358a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800358e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800359a:	e00a      	b.n	80035b2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	657b      	str	r3, [r7, #84]	; 0x54
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	785b      	ldrb	r3, [r3, #1]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d165      	bne.n	800368c <HAL_PCD_EP_DB_Transmit+0x748>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d4:	4413      	add	r3, r2
 80035d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	00da      	lsls	r2, r3, #3
 80035de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fc:	2b3e      	cmp	r3, #62	; 0x3e
 80035fe:	d91d      	bls.n	800363c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	66bb      	str	r3, [r7, #104]	; 0x68
 8003608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003614:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003616:	3b01      	subs	r3, #1
 8003618:	66bb      	str	r3, [r7, #104]	; 0x68
 800361a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29a      	uxth	r2, r3
 8003620:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003622:	b29b      	uxth	r3, r3
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	b29b      	uxth	r3, r3
 8003628:	4313      	orrs	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003634:	b29a      	uxth	r2, r3
 8003636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	e041      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800363c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_PCD_EP_DB_Transmit+0x716>
 8003644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003652:	b29a      	uxth	r2, r3
 8003654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	e032      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800365a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
 8003662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_PCD_EP_DB_Transmit+0x730>
 800366e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003670:	3301      	adds	r3, #1
 8003672:	66bb      	str	r3, [r7, #104]	; 0x68
 8003674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29a      	uxth	r2, r3
 800367a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800367c:	b29b      	uxth	r3, r3
 800367e:	029b      	lsls	r3, r3, #10
 8003680:	b29b      	uxth	r3, r3
 8003682:	4313      	orrs	r3, r2
 8003684:	b29a      	uxth	r2, r3
 8003686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e019      	b.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d115      	bne.n	80036c0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a2:	4413      	add	r3, r2
 80036a4:	657b      	str	r3, [r7, #84]	; 0x54
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ae:	4413      	add	r3, r2
 80036b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
 80036b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036be:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6959      	ldr	r1, [r3, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	895a      	ldrh	r2, [r3, #10]
 80036cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f003 fe53 	bl	800737c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f0:	82bb      	strh	r3, [r7, #20]
 80036f2:	8abb      	ldrh	r3, [r7, #20]
 80036f4:	f083 0310 	eor.w	r3, r3, #16
 80036f8:	82bb      	strh	r3, [r7, #20]
 80036fa:	8abb      	ldrh	r3, [r7, #20]
 80036fc:	f083 0320 	eor.w	r3, r3, #32
 8003700:	82bb      	strh	r3, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	8abb      	ldrh	r3, [r7, #20]
 8003712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003722:	b29b      	uxth	r3, r3
 8003724:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3790      	adds	r7, #144	; 0x90
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d141      	bne.n	80037c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800373e:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d131      	bne.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003752:	4a46      	ldr	r2, [pc, #280]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003764:	4a41      	ldr	r2, [pc, #260]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800376c:	4b40      	ldr	r3, [pc, #256]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2232      	movs	r2, #50	; 0x32
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	4a3f      	ldr	r2, [pc, #252]	; (8003874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	0c9b      	lsrs	r3, r3, #18
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003782:	e002      	b.n	800378a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3b01      	subs	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800378a:	4b38      	ldr	r3, [pc, #224]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d102      	bne.n	800379e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f2      	bne.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800379e:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037aa:	d158      	bne.n	800385e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e057      	b.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037b6:	4a2d      	ldr	r2, [pc, #180]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037c0:	e04d      	b.n	800385e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c8:	d141      	bne.n	800384e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ca:	4b28      	ldr	r3, [pc, #160]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d6:	d131      	bne.n	800383c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037de:	4a23      	ldr	r2, [pc, #140]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2232      	movs	r2, #50	; 0x32
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	0c9b      	lsrs	r3, r3, #18
 800380a:	3301      	adds	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380e:	e002      	b.n	8003816 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3b01      	subs	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003822:	d102      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f2      	bne.n	8003810 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003836:	d112      	bne.n	800385e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e011      	b.n	8003860 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800384c:	e007      	b.n	800385e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003856:	4a05      	ldr	r2, [pc, #20]	; (800386c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	40007000 	.word	0x40007000
 8003870:	20000000 	.word	0x20000000
 8003874:	431bde83 	.word	0x431bde83

08003878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e2fe      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d075      	beq.n	8003982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003896:	4b97      	ldr	r3, [pc, #604]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a0:	4b94      	ldr	r3, [pc, #592]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_OscConfig+0x3e>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_OscConfig+0x44>
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	4b8d      	ldr	r3, [pc, #564]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05b      	beq.n	8003980 <HAL_RCC_OscConfig+0x108>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d157      	bne.n	8003980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e2d9      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038dc:	d106      	bne.n	80038ec <HAL_RCC_OscConfig+0x74>
 80038de:	4b85      	ldr	r3, [pc, #532]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a84      	ldr	r2, [pc, #528]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e01d      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x98>
 80038f6:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a7e      	ldr	r2, [pc, #504]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80038fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7b      	ldr	r2, [pc, #492]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xb0>
 8003910:	4b78      	ldr	r3, [pc, #480]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a77      	ldr	r2, [pc, #476]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b75      	ldr	r3, [pc, #468]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a74      	ldr	r2, [pc, #464]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fb5c 	bl	8000fec <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003938:	f7fd fb58 	bl	8000fec <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e29e      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0xc0>
 8003956:	e014      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fd fb48 	bl	8000fec <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003960:	f7fd fb44 	bl	8000fec <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e28a      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003972:	4b60      	ldr	r3, [pc, #384]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0xe8>
 800397e:	e000      	b.n	8003982 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d075      	beq.n	8003a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398e:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003998:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_OscConfig+0x136>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_OscConfig+0x13c>
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11f      	bne.n	80039f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b4:	4b4f      	ldr	r3, [pc, #316]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_OscConfig+0x154>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e25d      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	4946      	ldr	r1, [pc, #280]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039e0:	4b45      	ldr	r3, [pc, #276]	; (8003af8 <HAL_RCC_OscConfig+0x280>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fd fab5 	bl	8000f54 <HAL_InitTick>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d043      	beq.n	8003a78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e249      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3c      	ldr	r2, [pc, #240]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fd faf0 	bl	8000fec <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a10:	f7fd faec 	bl	8000fec <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e232      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	492d      	ldr	r1, [pc, #180]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
 8003a42:	e01a      	b.n	8003a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a44:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd facc 	bl	8000fec <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fd fac8 	bl	8000fec <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e20e      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1e0>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d041      	beq.n	8003b0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d01c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8e:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a94:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fd faa5 	bl	8000fec <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa6:	f7fd faa1 	bl	8000fec <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1e7      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ef      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x22e>
 8003ac6:	e020      	b.n	8003b0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_OscConfig+0x27c>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fd fa88 	bl	8000fec <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ade:	e00d      	b.n	8003afc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fd fa84 	bl	8000fec <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d906      	bls.n	8003afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e1ca      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ea      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80a6 	beq.w	8003c64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b1c:	4b84      	ldr	r3, [pc, #528]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2b4>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x2b6>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b7f      	ldr	r3, [pc, #508]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	4a7e      	ldr	r2, [pc, #504]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3e:	4b7c      	ldr	r3, [pc, #496]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b4e:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <HAL_RCC_OscConfig+0x4bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5a:	4b76      	ldr	r3, [pc, #472]	; (8003d34 <HAL_RCC_OscConfig+0x4bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a75      	ldr	r2, [pc, #468]	; (8003d34 <HAL_RCC_OscConfig+0x4bc>)
 8003b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b66:	f7fd fa41 	bl	8000fec <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6e:	f7fd fa3d 	bl	8000fec <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e183      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b80:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCC_OscConfig+0x4bc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d108      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x32e>
 8003b94:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a65      	ldr	r2, [pc, #404]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba4:	e024      	b.n	8003bf0 <HAL_RCC_OscConfig+0x378>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d110      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x358>
 8003bae:	4b60      	ldr	r3, [pc, #384]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	4a5e      	ldr	r2, [pc, #376]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bbe:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc4:	4a5a      	ldr	r2, [pc, #360]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bce:	e00f      	b.n	8003bf0 <HAL_RCC_OscConfig+0x378>
 8003bd0:	4b57      	ldr	r3, [pc, #348]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	4a56      	ldr	r2, [pc, #344]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a52      	ldr	r2, [pc, #328]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fd f9f8 	bl	8000fec <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7fd f9f4 	bl	8000fec <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e138      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c16:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ed      	beq.n	8003c00 <HAL_RCC_OscConfig+0x388>
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fd f9e1 	bl	8000fec <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fd f9dd 	bl	8000fec <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e121      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ed      	bne.n	8003c2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03c      	beq.n	8003cea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01c      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c7e:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c88:	f7fd f9b0 	bl	8000fec <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c90:	f7fd f9ac 	bl	8000fec <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0f2      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ca2:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0ef      	beq.n	8003c90 <HAL_RCC_OscConfig+0x418>
 8003cb0:	e01b      	b.n	8003cea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cb2:	4b1f      	ldr	r3, [pc, #124]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc2:	f7fd f993 	bl	8000fec <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cca:	f7fd f98f 	bl	8000fec <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0d5      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ef      	bne.n	8003cca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80c9 	beq.w	8003e86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	f000 8083 	beq.w	8003e08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d15e      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <HAL_RCC_OscConfig+0x4b8>)
 8003d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d16:	f7fd f969 	bl	8000fec <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd f965 	bl	8000fec <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d905      	bls.n	8003d38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0ab      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d38:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ec      	bne.n	8003d1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d44:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	4b52      	ldr	r3, [pc, #328]	; (8003e94 <HAL_RCC_OscConfig+0x61c>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6a11      	ldr	r1, [r2, #32]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	4311      	orrs	r1, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d5e:	0212      	lsls	r2, r2, #8
 8003d60:	4311      	orrs	r1, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d66:	0852      	lsrs	r2, r2, #1
 8003d68:	3a01      	subs	r2, #1
 8003d6a:	0552      	lsls	r2, r2, #21
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d72:	0852      	lsrs	r2, r2, #1
 8003d74:	3a01      	subs	r2, #1
 8003d76:	0652      	lsls	r2, r2, #25
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d7e:	06d2      	lsls	r2, r2, #27
 8003d80:	430a      	orrs	r2, r1
 8003d82:	4943      	ldr	r1, [pc, #268]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a40      	ldr	r2, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d94:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd f924 	bl	8000fec <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da8:	f7fd f920 	bl	8000fec <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e066      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dba:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x530>
 8003dc6:	e05e      	b.n	8003e86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd f90a 	bl	8000fec <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fd f906 	bl	8000fec <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04c      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dee:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003dfa:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	4924      	ldr	r1, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_OscConfig+0x620>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
 8003e06:	e03e      	b.n	8003e86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e039      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCC_OscConfig+0x618>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d12c      	bne.n	8003e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	3b01      	subs	r3, #1
 8003e34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d123      	bne.n	8003e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d11b      	bne.n	8003e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d113      	bne.n	8003e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	3b01      	subs	r3, #1
 8003e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d001      	beq.n	8003e86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	019f800c 	.word	0x019f800c
 8003e98:	feeefffc 	.word	0xfeeefffc

08003e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e11e      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b91      	ldr	r3, [pc, #580]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d910      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b8e      	ldr	r3, [pc, #568]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 020f 	bic.w	r2, r3, #15
 8003eca:	498c      	ldr	r1, [pc, #560]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b8a      	ldr	r3, [pc, #552]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e106      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d073      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d129      	bne.n	8003f4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ef8:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e0f4      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f08:	f000 f966 	bl	80041d8 <RCC_GetSysClockFreqFromPLLSource>
 8003f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4a7c      	ldr	r2, [pc, #496]	; (8004104 <HAL_RCC_ClockConfig+0x268>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d93f      	bls.n	8003f96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f16:	4b7a      	ldr	r3, [pc, #488]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d033      	beq.n	8003f96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d12f      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f36:	4b72      	ldr	r3, [pc, #456]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3e:	4a70      	ldr	r2, [pc, #448]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e024      	b.n	8003f96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d107      	bne.n	8003f64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0c6      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	4b66      	ldr	r3, [pc, #408]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0be      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f74:	f000 f8ce 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4a61      	ldr	r2, [pc, #388]	; (8004104 <HAL_RCC_ClockConfig+0x268>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d909      	bls.n	8003f96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f82:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f8a:	4a5d      	ldr	r2, [pc, #372]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f96:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4957      	ldr	r1, [pc, #348]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fd f820 	bl	8000fec <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fd f81c 	bl	8000fec <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e095      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1eb      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ffa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004008:	4b3d      	ldr	r3, [pc, #244]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004010:	4a3b      	ldr	r2, [pc, #236]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8004012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004018:	4b39      	ldr	r3, [pc, #228]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4936      	ldr	r1, [pc, #216]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
 800402a:	e008      	b.n	800403e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b80      	cmp	r3, #128	; 0x80
 8004030:	d105      	bne.n	800403e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004032:	4b33      	ldr	r3, [pc, #204]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a32      	ldr	r2, [pc, #200]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8004038:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800403e:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d21d      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f023 020f 	bic.w	r2, r3, #15
 8004054:	4929      	ldr	r1, [pc, #164]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800405c:	f7fc ffc6 	bl	8000fec <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	e00a      	b.n	800407a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004064:	f7fc ffc2 	bl	8000fec <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e03b      	b.n	80040f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_RCC_ClockConfig+0x260>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d1ed      	bne.n	8004064 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4917      	ldr	r1, [pc, #92]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	490f      	ldr	r1, [pc, #60]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040c6:	f000 f825 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040ca:	4602      	mov	r2, r0
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	490c      	ldr	r1, [pc, #48]	; (8004108 <HAL_RCC_ClockConfig+0x26c>)
 80040d8:	5ccb      	ldrb	r3, [r1, r3]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	4a0a      	ldr	r2, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x270>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x274>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc ff32 	bl	8000f54 <HAL_InitTick>
 80040f0:	4603      	mov	r3, r0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40022000 	.word	0x40022000
 8004100:	40021000 	.word	0x40021000
 8004104:	04c4b400 	.word	0x04c4b400
 8004108:	0800c0b0 	.word	0x0800c0b0
 800410c:	20000000 	.word	0x20000000
 8004110:	20000004 	.word	0x20000004

08004114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b04      	cmp	r3, #4
 8004124:	d102      	bne.n	800412c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e047      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b08      	cmp	r3, #8
 8004136:	d102      	bne.n	800413e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	e03e      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d136      	bne.n	80041b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3301      	adds	r3, #1
 8004160:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d10c      	bne.n	8004182 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004172:	68d2      	ldr	r2, [r2, #12]
 8004174:	0a12      	lsrs	r2, r2, #8
 8004176:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
      break;
 8004180:	e00c      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004182:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	4a10      	ldr	r2, [pc, #64]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	0a12      	lsrs	r2, r2, #8
 8004190:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
      break;
 800419a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	0e5b      	lsrs	r3, r3, #25
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e001      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041bc:	693b      	ldr	r3, [r7, #16]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	02dc6c00 	.word	0x02dc6c00

080041d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041de:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d10c      	bne.n	8004216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041fc:	4a17      	ldr	r2, [pc, #92]	; (800425c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004206:	68d2      	ldr	r2, [r2, #12]
 8004208:	0a12      	lsrs	r2, r2, #8
 800420a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	617b      	str	r3, [r7, #20]
    break;
 8004214:	e00c      	b.n	8004230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	fbb2 f3f3 	udiv	r3, r2, r3
 800421e:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004220:	68d2      	ldr	r2, [r2, #12]
 8004222:	0a12      	lsrs	r2, r2, #8
 8004224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    break;
 800422e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0e5b      	lsrs	r3, r3, #25
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800424a:	687b      	ldr	r3, [r7, #4]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40021000 	.word	0x40021000
 800425c:	02dc6c00 	.word	0x02dc6c00
 8004260:	00f42400 	.word	0x00f42400

08004264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800426c:	2300      	movs	r3, #0
 800426e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004270:	2300      	movs	r3, #0
 8004272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8098 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	4b40      	ldr	r3, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429c:	6593      	str	r3, [r2, #88]	; 0x58
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042aa:	2301      	movs	r3, #1
 80042ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a39      	ldr	r2, [pc, #228]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042ba:	f7fc fe97 	bl	8000fec <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042c0:	e009      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c2:	f7fc fe93 	bl	8000fec <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d902      	bls.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	74fb      	strb	r3, [r7, #19]
        break;
 80042d4:	e005      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0ef      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d159      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	429a      	cmp	r2, r3
 8004302:	d019      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004320:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fc fe53 	bl	8000fec <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004348:	e00b      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fc fe4f 	bl	8000fec <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d902      	bls.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	74fb      	strb	r3, [r7, #19]
            break;
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ec      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	4903      	ldr	r1, [pc, #12]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	74bb      	strb	r3, [r7, #18]
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004394:	40021000 	.word	0x40021000
 8004398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a0:	7c7b      	ldrb	r3, [r7, #17]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a6:	4ba7      	ldr	r3, [pc, #668]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	4aa6      	ldr	r2, [pc, #664]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043be:	4ba1      	ldr	r3, [pc, #644]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 0203 	bic.w	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	499d      	ldr	r1, [pc, #628]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043e0:	4b98      	ldr	r3, [pc, #608]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e6:	f023 020c 	bic.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4995      	ldr	r1, [pc, #596]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004402:	4b90      	ldr	r3, [pc, #576]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	498c      	ldr	r1, [pc, #560]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004424:	4b87      	ldr	r3, [pc, #540]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4984      	ldr	r1, [pc, #528]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004446:	4b7f      	ldr	r3, [pc, #508]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	497b      	ldr	r1, [pc, #492]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004468:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	4973      	ldr	r1, [pc, #460]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800448a:	4b6e      	ldr	r3, [pc, #440]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	496a      	ldr	r1, [pc, #424]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044ac:	4b65      	ldr	r3, [pc, #404]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4962      	ldr	r1, [pc, #392]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044ce:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	4959      	ldr	r1, [pc, #356]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044f0:	4b54      	ldr	r3, [pc, #336]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	4951      	ldr	r1, [pc, #324]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004512:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4948      	ldr	r1, [pc, #288]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d015      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4940      	ldr	r1, [pc, #256]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d105      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004554:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004568:	2b00      	cmp	r3, #0
 800456a:	d015      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	4932      	ldr	r1, [pc, #200]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d105      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004596:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d015      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	4924      	ldr	r1, [pc, #144]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c2:	d105      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c4:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	4916      	ldr	r1, [pc, #88]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045fa:	d105      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004606:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4908      	ldr	r1, [pc, #32]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004632:	d109      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a02      	ldr	r2, [pc, #8]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463e:	60d3      	str	r3, [r2, #12]
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004654:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	4926      	ldr	r1, [pc, #152]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004674:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a20      	ldr	r2, [pc, #128]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469a:	4918      	ldr	r1, [pc, #96]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d105      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046c4:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	490a      	ldr	r1, [pc, #40]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a04      	ldr	r2, [pc, #16]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e09d      	b.n	800484e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004722:	d009      	beq.n	8004738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
 800472a:	e005      	b.n	8004738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fa36 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004778:	d902      	bls.n	8004780 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e002      	b.n	8004786 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004784:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800478e:	d007      	beq.n	80047a0 <HAL_SPI_Init+0xa0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	ea42 0103 	orr.w	r1, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 0204 	and.w	r2, r3, #4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b088      	sub	sp, #32
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_SPI_Transmit+0x22>
 8004874:	2302      	movs	r3, #2
 8004876:	e15f      	b.n	8004b38 <HAL_SPI_Transmit+0x2e2>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004880:	f7fc fbb4 	bl	8000fec <HAL_GetTick>
 8004884:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d002      	beq.n	800489c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	77fb      	strb	r3, [r7, #31]
    goto error;
 800489a:	e148      	b.n	8004b2e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_SPI_Transmit+0x52>
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048ac:	e13f      	b.n	8004b2e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2203      	movs	r2, #3
 80048b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d10f      	bne.n	800491a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004908:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004918:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d007      	beq.n	8004938 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004940:	d94f      	bls.n	80049e2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_SPI_Transmit+0xfa>
 800494a:	8afb      	ldrh	r3, [r7, #22]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d142      	bne.n	80049d6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004974:	e02f      	b.n	80049d6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d112      	bne.n	80049aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	1c9a      	adds	r2, r3, #2
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049a8:	e015      	b.n	80049d6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049aa:	f7fc fb1f 	bl	8000fec <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d803      	bhi.n	80049c2 <HAL_SPI_Transmit+0x16c>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c0:	d102      	bne.n	80049c8 <HAL_SPI_Transmit+0x172>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80049d4:	e0ab      	b.n	8004b2e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ca      	bne.n	8004976 <HAL_SPI_Transmit+0x120>
 80049e0:	e080      	b.n	8004ae4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_Transmit+0x19a>
 80049ea:	8afb      	ldrh	r3, [r7, #22]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d174      	bne.n	8004ada <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d912      	bls.n	8004a20 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	881a      	ldrh	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b02      	subs	r3, #2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a1e:	e05c      	b.n	8004ada <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a46:	e048      	b.n	8004ada <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d12b      	bne.n	8004aae <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d912      	bls.n	8004a86 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	1c9a      	adds	r2, r3, #2
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b02      	subs	r3, #2
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a84:	e029      	b.n	8004ada <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	7812      	ldrb	r2, [r2, #0]
 8004a92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aac:	e015      	b.n	8004ada <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aae:	f7fc fa9d 	bl	8000fec <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d803      	bhi.n	8004ac6 <HAL_SPI_Transmit+0x270>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac4:	d102      	bne.n	8004acc <HAL_SPI_Transmit+0x276>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004ad8:	e029      	b.n	8004b2e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1b1      	bne.n	8004a48 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fb69 	bl	80051c0 <SPI_EndRxTxTransaction>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e003      	b.n	8004b2e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x26>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e20a      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x43c>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6e:	f7fc fa3d 	bl	8000fec <HAL_GetTick>
 8004b72:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b7a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b8a:	7efb      	ldrb	r3, [r7, #27]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d00e      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x6e>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b96:	d106      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x66>
 8004ba0:	7efb      	ldrb	r3, [r7, #27]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d003      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bac:	e1e0      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x80>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x80>
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004bc6:	e1d3      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d003      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	887a      	ldrh	r2, [r7, #2]
 8004bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	887a      	ldrh	r2, [r7, #2]
 8004bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	887a      	ldrh	r2, [r7, #2]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1e:	d802      	bhi.n	8004c26 <HAL_SPI_TransmitReceive+0xe6>
 8004c20:	8a3b      	ldrh	r3, [r7, #16]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d908      	bls.n	8004c38 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	e007      	b.n	8004c48 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d007      	beq.n	8004c66 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6e:	f240 8081 	bls.w	8004d74 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x140>
 8004c7a:	8a7b      	ldrh	r3, [r7, #18]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d16d      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	1c9a      	adds	r2, r3, #2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca4:	e05a      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d11b      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x1ac>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x1ac>
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d113      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc8:	881a      	ldrh	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	1c9a      	adds	r2, r3, #2
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d11c      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x1f4>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	b292      	uxth	r2, r2
 8004d12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d34:	f7fc f95a 	bl	8000fec <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d80b      	bhi.n	8004d5c <HAL_SPI_TransmitReceive+0x21c>
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d4a:	d007      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d5a:	e109      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d19f      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x166>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d199      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x166>
 8004d72:	e0e3      	b.n	8004f3c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x244>
 8004d7c:	8a7b      	ldrh	r3, [r7, #18]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	f040 80cf 	bne.w	8004f22 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d912      	bls.n	8004db4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b02      	subs	r3, #2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004db2:	e0b6      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dda:	e0a2      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d134      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x314>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02f      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x314>
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d12c      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d912      	bls.n	8004e2a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b02      	subs	r3, #2
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e28:	e012      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d148      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x3b4>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d042      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d923      	bls.n	8004ec2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	b292      	uxth	r2, r2
 8004e86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	1c9a      	adds	r2, r3, #2
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b02      	subs	r3, #2
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d81f      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ebe:	605a      	str	r2, [r3, #4]
 8004ec0:	e016      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f103 020c 	add.w	r2, r3, #12
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ef4:	f7fc f87a 	bl	8000fec <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d803      	bhi.n	8004f0c <HAL_SPI_TransmitReceive+0x3cc>
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f0a:	d102      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x3d2>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d107      	bne.n	8004f22 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004f20:	e026      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f47f af57 	bne.w	8004ddc <HAL_SPI_TransmitReceive+0x29c>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f47f af50 	bne.w	8004ddc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f93d 	bl	80051c0 <SPI_EndRxTxTransaction>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f66:	e003      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	; 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f94:	f7fc f82a 	bl	8000fec <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fa4:	f7fc f822 	bl	8000fec <HAL_GetTick>
 8004fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004faa:	4b39      	ldr	r3, [pc, #228]	; (8005090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	015b      	lsls	r3, r3, #5
 8004fb0:	0d1b      	lsrs	r3, r3, #20
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fba:	e054      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc2:	d050      	beq.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc4:	f7fc f812 	bl	8000fec <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d902      	bls.n	8004fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d13d      	bne.n	8005056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff2:	d111      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffc:	d004      	beq.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d107      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005020:	d10f      	bne.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e017      	b.n	8005086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3b01      	subs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d19b      	bne.n	8004fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000000 	.word	0x20000000

08005094 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80050a6:	f7fb ffa1 	bl	8000fec <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	4413      	add	r3, r2
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80050b6:	f7fb ff99 	bl	8000fec <HAL_GetTick>
 80050ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050c4:	4b3d      	ldr	r3, [pc, #244]	; (80051bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	00da      	lsls	r2, r3, #3
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	0d1b      	lsrs	r3, r3, #20
 80050d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050dc:	e060      	b.n	80051a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050e4:	d107      	bne.n	80050f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d104      	bne.n	80050f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fc:	d050      	beq.n	80051a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050fe:	f7fb ff75 	bl	8000fec <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510a:	429a      	cmp	r2, r3
 800510c:	d902      	bls.n	8005114 <SPI_WaitFifoStateUntilTimeout+0x80>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d13d      	bne.n	8005190 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005122:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512c:	d111      	bne.n	8005152 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	d004      	beq.n	8005142 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d107      	bne.n	8005152 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005150:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d10f      	bne.n	800517c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800517a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e010      	b.n	80051b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	3b01      	subs	r3, #1
 800519e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d196      	bne.n	80050de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3728      	adds	r7, #40	; 0x28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000000 	.word	0x20000000

080051c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff ff5b 	bl	8005094 <SPI_WaitFifoStateUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e027      	b.n	8005244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	2180      	movs	r1, #128	; 0x80
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff fec0 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e014      	b.n	8005244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2200      	movs	r2, #0
 8005222:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ff34 	bl	8005094 <SPI_WaitFifoStateUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005236:	f043 0220 	orr.w	r2, r3, #32
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e000      	b.n	8005244 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800524c:	b480      	push	{r7}
 800524e:	b09d      	sub	sp, #116	; 0x74
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	78db      	ldrb	r3, [r3, #3]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d81f      	bhi.n	80052be <USB_ActivateEndpoint+0x72>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <USB_ActivateEndpoint+0x38>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	08005295 	.word	0x08005295
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052c7 	.word	0x080052c7
 8005290:	080052a3 	.word	0x080052a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005294:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800529c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80052a0:	e012      	b.n	80052c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80052a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80052aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80052ae:	e00b      	b.n	80052c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80052b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80052bc:	e004      	b.n	80052c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80052c4:	e000      	b.n	80052c8 <USB_ActivateEndpoint+0x7c>
      break;
 80052c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80052d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	b21a      	sxth	r2, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	b21b      	sxth	r3, r3
 800530a:	4313      	orrs	r3, r2
 800530c:	b21b      	sxth	r3, r3
 800530e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	441a      	add	r2, r3
 800531c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005330:	b29b      	uxth	r3, r3
 8005332:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	7b1b      	ldrb	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f040 8178 	bne.w	800562e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	785b      	ldrb	r3, [r3, #1]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8084 	beq.w	8005450 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4413      	add	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	00da      	lsls	r2, r3, #3
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	88db      	ldrh	r3, [r3, #6]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	827b      	strh	r3, [r7, #18]
 800538a:	8a7b      	ldrh	r3, [r7, #18]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <USB_ActivateEndpoint+0x180>
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	823b      	strh	r3, [r7, #16]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	8a3b      	ldrh	r3, [r7, #16]
 80053b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	78db      	ldrb	r3, [r3, #3]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d020      	beq.n	8005416 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ea:	81bb      	strh	r3, [r7, #12]
 80053ec:	89bb      	ldrh	r3, [r7, #12]
 80053ee:	f083 0320 	eor.w	r3, r3, #32
 80053f2:	81bb      	strh	r3, [r7, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	89bb      	ldrh	r3, [r7, #12]
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]
 8005414:	e2d5      	b.n	80059c2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800542c:	81fb      	strh	r3, [r7, #14]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544a:	b29b      	uxth	r3, r3
 800544c:	8013      	strh	r3, [r2, #0]
 800544e:	e2b8      	b.n	80059c2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	4413      	add	r3, r2
 8005462:	633b      	str	r3, [r7, #48]	; 0x30
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	00da      	lsls	r2, r3, #3
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	4413      	add	r3, r2
 800546e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	88db      	ldrh	r3, [r3, #6]
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	b29b      	uxth	r3, r3
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	4413      	add	r3, r2
 8005496:	62bb      	str	r3, [r7, #40]	; 0x28
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	00da      	lsls	r2, r3, #3
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	4413      	add	r3, r2
 80054a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b3e      	cmp	r3, #62	; 0x3e
 80054be:	d91d      	bls.n	80054fc <USB_ActivateEndpoint+0x2b0>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <USB_ActivateEndpoint+0x28e>
 80054d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d6:	3b01      	subs	r3, #1
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4313      	orrs	r3, r2
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e026      	b.n	800554a <USB_ActivateEndpoint+0x2fe>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <USB_ActivateEndpoint+0x2ce>
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005512:	b29a      	uxth	r2, r3
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e017      	b.n	800554a <USB_ActivateEndpoint+0x2fe>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	66bb      	str	r3, [r7, #104]	; 0x68
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <USB_ActivateEndpoint+0x2e8>
 800552e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005530:	3301      	adds	r3, #1
 8005532:	66bb      	str	r3, [r7, #104]	; 0x68
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29a      	uxth	r2, r3
 800553a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29b      	uxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b29a      	uxth	r2, r3
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	847b      	strh	r3, [r7, #34]	; 0x22
 8005558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800555a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01b      	beq.n	800559a <USB_ActivateEndpoint+0x34e>
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	843b      	strh	r3, [r7, #32]
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	441a      	add	r2, r3
 8005584:	8c3b      	ldrh	r3, [r7, #32]
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d124      	bne.n	80055ec <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	83bb      	strh	r3, [r7, #28]
 80055ba:	8bbb      	ldrh	r3, [r7, #28]
 80055bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055c0:	83bb      	strh	r3, [r7, #28]
 80055c2:	8bbb      	ldrh	r3, [r7, #28]
 80055c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055c8:	83bb      	strh	r3, [r7, #28]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8bbb      	ldrh	r3, [r7, #28]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
 80055ea:	e1ea      	b.n	80059c2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	83fb      	strh	r3, [r7, #30]
 8005604:	8bfb      	ldrh	r3, [r7, #30]
 8005606:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800560a:	83fb      	strh	r3, [r7, #30]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	8bfb      	ldrh	r3, [r7, #30]
 8005618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005628:	b29b      	uxth	r3, r3
 800562a:	8013      	strh	r3, [r2, #0]
 800562c:	e1c9      	b.n	80059c2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d11e      	bne.n	8005674 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
 8005672:	e01d      	b.n	80056b0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800569c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c0:	4413      	add	r3, r2
 80056c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	00da      	lsls	r2, r3, #3
 80056ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	891b      	ldrh	r3, [r3, #8]
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	b29b      	uxth	r3, r3
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	657b      	str	r3, [r7, #84]	; 0x54
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f4:	4413      	add	r3, r2
 80056f6:	657b      	str	r3, [r7, #84]	; 0x54
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00da      	lsls	r2, r3, #3
 80056fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005700:	4413      	add	r3, r2
 8005702:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005706:	653b      	str	r3, [r7, #80]	; 0x50
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	895b      	ldrh	r3, [r3, #10]
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	b29b      	uxth	r3, r3
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005716:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b00      	cmp	r3, #0
 800571e:	f040 8093 	bne.w	8005848 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005732:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01b      	beq.n	8005776 <USB_ActivateEndpoint+0x52a>
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005754:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d01b      	beq.n	80057c6 <USB_ActivateEndpoint+0x57a>
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80057de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80057e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005824:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]
 8005846:	e0bc      	b.n	80059c2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005858:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01d      	beq.n	80058a0 <USB_ActivateEndpoint+0x654>
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80058b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01d      	beq.n	80058f8 <USB_ActivateEndpoint+0x6ac>
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	78db      	ldrb	r3, [r3, #3]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d024      	beq.n	800594a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005916:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800591a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800591e:	f083 0320 	eor.w	r3, r3, #32
 8005922:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
 8005948:	e01d      	b.n	8005986 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005960:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80059c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3774      	adds	r7, #116	; 0x74
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop

080059d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b0c2      	sub	sp, #264	; 0x108
 80059d8:	af00      	add	r7, sp, #0
 80059da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e2:	6018      	str	r0, [r3, #0]
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	f040 86b7 	bne.w	800676e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d908      	bls.n	8005a2e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a2c:	e007      	b.n	8005a3e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	7b1b      	ldrb	r3, [r3, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d13a      	bne.n	8005ac4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6959      	ldr	r1, [r3, #20]
 8005a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	88da      	ldrh	r2, [r3, #6]
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a74:	6800      	ldr	r0, [r0, #0]
 8005a76:	f001 fc81 	bl	800737c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	00da      	lsls	r2, r3, #3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	f000 be1f 	b.w	8006702 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f040 8462 	bne.w	800639a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a1a      	ldr	r2, [r3, #32]
 8005ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	f240 83df 	bls.w	80062b2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 81c7 	beq.w	8005f24 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d177      	bne.n	8005ca2 <USB_EPStartXfer+0x2ce>
 8005bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	4413      	add	r3, r2
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	00da      	lsls	r2, r3, #3
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	4413      	add	r3, r2
 8005be8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c02:	2b3e      	cmp	r3, #62	; 0x3e
 8005c04:	d921      	bls.n	8005c4a <USB_EPStartXfer+0x276>
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <USB_EPStartXfer+0x252>
 8005c1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	4313      	orrs	r3, r2
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	801a      	strh	r2, [r3, #0]
 8005c48:	e050      	b.n	8005cec <USB_EPStartXfer+0x318>
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <USB_EPStartXfer+0x294>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	801a      	strh	r2, [r3, #0]
 8005c66:	e041      	b.n	8005cec <USB_EPStartXfer+0x318>
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <USB_EPStartXfer+0x2b4>
 8005c7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c82:	3301      	adds	r3, #1
 8005c84:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	e024      	b.n	8005cec <USB_EPStartXfer+0x318>
 8005ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d11c      	bne.n	8005cec <USB_EPStartXfer+0x318>
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	4413      	add	r3, r2
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	00da      	lsls	r2, r3, #3
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	4413      	add	r3, r2
 8005cdc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	895b      	ldrh	r3, [r3, #10]
 8005cf8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6959      	ldr	r1, [r3, #20]
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	f001 fb2e 	bl	800737c <USB_WritePMA>
            ep->xfer_buff += len;
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d30:	441a      	add	r2, r3
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6a1a      	ldr	r2, [r3, #32]
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d90f      	bls.n	8005d7a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a1a      	ldr	r2, [r3, #32]
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6a:	1ad2      	subs	r2, r2, r3
 8005d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	621a      	str	r2, [r3, #32]
 8005d78:	e00e      	b.n	8005d98 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2200      	movs	r2, #0
 8005d96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d177      	bne.n	8005e98 <USB_EPStartXfer+0x4c4>
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	4413      	add	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	00da      	lsls	r2, r3, #3
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfa:	d921      	bls.n	8005e40 <USB_EPStartXfer+0x46c>
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <USB_EPStartXfer+0x448>
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e16:	3b01      	subs	r3, #1
 8005e18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	e056      	b.n	8005eee <USB_EPStartXfer+0x51a>
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <USB_EPStartXfer+0x48a>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e047      	b.n	8005eee <USB_EPStartXfer+0x51a>
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <USB_EPStartXfer+0x4aa>
 8005e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e02a      	b.n	8005eee <USB_EPStartXfer+0x51a>
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d122      	bne.n	8005eee <USB_EPStartXfer+0x51a>
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	4413      	add	r3, r2
 8005eca:	623b      	str	r3, [r7, #32]
 8005ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00da      	lsls	r2, r3, #3
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	891b      	ldrh	r3, [r3, #8]
 8005efa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6959      	ldr	r1, [r3, #20]
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f001 fa2d 	bl	800737c <USB_WritePMA>
 8005f22:	e3ee      	b.n	8006702 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d177      	bne.n	8006024 <USB_EPStartXfer+0x650>
 8005f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	4413      	add	r3, r2
 8005f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	00da      	lsls	r2, r3, #3
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f68:	4413      	add	r3, r2
 8005f6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f84:	2b3e      	cmp	r3, #62	; 0x3e
 8005f86:	d921      	bls.n	8005fcc <USB_EPStartXfer+0x5f8>
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_EPStartXfer+0x5d4>
 8005f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	029b      	lsls	r3, r3, #10
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	e056      	b.n	800607a <USB_EPStartXfer+0x6a6>
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <USB_EPStartXfer+0x616>
 8005fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	e047      	b.n	800607a <USB_EPStartXfer+0x6a6>
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <USB_EPStartXfer+0x636>
 8006000:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006004:	3301      	adds	r3, #1
 8006006:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800600a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29a      	uxth	r2, r3
 8006010:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006014:	b29b      	uxth	r3, r3
 8006016:	029b      	lsls	r3, r3, #10
 8006018:	b29b      	uxth	r3, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	b29a      	uxth	r2, r3
 800601e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	e02a      	b.n	800607a <USB_EPStartXfer+0x6a6>
 8006024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d122      	bne.n	800607a <USB_EPStartXfer+0x6a6>
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	653b      	str	r3, [r7, #80]	; 0x50
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604e:	b29b      	uxth	r3, r3
 8006050:	461a      	mov	r2, r3
 8006052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006054:	4413      	add	r3, r2
 8006056:	653b      	str	r3, [r7, #80]	; 0x50
 8006058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00da      	lsls	r2, r3, #3
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	4413      	add	r3, r2
 800606a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800606e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006074:	b29a      	uxth	r2, r3
 8006076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006078:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800607a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	891b      	ldrh	r3, [r3, #8]
 8006086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800608a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6959      	ldr	r1, [r3, #20]
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	b29b      	uxth	r3, r3
 800609c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060a8:	6800      	ldr	r0, [r0, #0]
 80060aa:	f001 f967 	bl	800737c <USB_WritePMA>
            ep->xfer_buff += len;
 80060ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	441a      	add	r2, r3
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d90f      	bls.n	8006108 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80060e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6a1a      	ldr	r2, [r3, #32]
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	621a      	str	r2, [r3, #32]
 8006106:	e00e      	b.n	8006126 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	643b      	str	r3, [r7, #64]	; 0x40
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d177      	bne.n	8006232 <USB_EPStartXfer+0x85e>
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
 800614e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	4413      	add	r3, r2
 8006164:	63bb      	str	r3, [r7, #56]	; 0x38
 8006166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	00da      	lsls	r2, r3, #3
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	4413      	add	r3, r2
 8006178:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006188:	b29a      	uxth	r2, r3
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006192:	2b3e      	cmp	r3, #62	; 0x3e
 8006194:	d921      	bls.n	80061da <USB_EPStartXfer+0x806>
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <USB_EPStartXfer+0x7e2>
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	3b01      	subs	r3, #1
 80061b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e050      	b.n	800627c <USB_EPStartXfer+0x8a8>
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <USB_EPStartXfer+0x824>
 80061e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e041      	b.n	800627c <USB_EPStartXfer+0x8a8>
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <USB_EPStartXfer+0x844>
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006212:	3301      	adds	r3, #1
 8006214:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29a      	uxth	r2, r3
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	b29b      	uxth	r3, r3
 8006224:	029b      	lsls	r3, r3, #10
 8006226:	b29b      	uxth	r3, r3
 8006228:	4313      	orrs	r3, r2
 800622a:	b29a      	uxth	r2, r3
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	e024      	b.n	800627c <USB_EPStartXfer+0x8a8>
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d11c      	bne.n	800627c <USB_EPStartXfer+0x8a8>
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006256:	4413      	add	r3, r2
 8006258:	643b      	str	r3, [r7, #64]	; 0x40
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	00da      	lsls	r2, r3, #3
 8006268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626a:	4413      	add	r3, r2
 800626c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006276:	b29a      	uxth	r2, r3
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800627c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	895b      	ldrh	r3, [r3, #10]
 8006288:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6959      	ldr	r1, [r3, #20]
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629c:	b29b      	uxth	r3, r3
 800629e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	f001 f866 	bl	800737c <USB_WritePMA>
 80062b0:	e227      	b.n	8006702 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80062b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800630a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631a:	b29b      	uxth	r3, r3
 800631c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006338:	b29b      	uxth	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800633e:	4413      	add	r3, r2
 8006340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	00da      	lsls	r2, r3, #3
 8006350:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006352:	4413      	add	r3, r2
 8006354:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006358:	65bb      	str	r3, [r7, #88]	; 0x58
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635e:	b29a      	uxth	r2, r3
 8006360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006362:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	891b      	ldrh	r3, [r3, #8]
 8006370:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6959      	ldr	r1, [r3, #20]
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006384:	b29b      	uxth	r3, r3
 8006386:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800638a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800638e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006392:	6800      	ldr	r0, [r0, #0]
 8006394:	f000 fff2 	bl	800737c <USB_WritePMA>
 8006398:	e1b3      	b.n	8006702 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800639a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80c6 	beq.w	800656c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	673b      	str	r3, [r7, #112]	; 0x70
 80063ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	785b      	ldrb	r3, [r3, #1]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d177      	bne.n	80064ec <USB_EPStartXfer+0xb18>
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	66bb      	str	r3, [r7, #104]	; 0x68
 8006408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006416:	b29b      	uxth	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800641c:	4413      	add	r3, r2
 800641e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	00da      	lsls	r2, r3, #3
 800642e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006430:	4413      	add	r3, r2
 8006432:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006436:	667b      	str	r3, [r7, #100]	; 0x64
 8006438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	b29b      	uxth	r3, r3
 800643e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006442:	b29a      	uxth	r2, r3
 8006444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644c:	2b3e      	cmp	r3, #62	; 0x3e
 800644e:	d921      	bls.n	8006494 <USB_EPStartXfer+0xac0>
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <USB_EPStartXfer+0xa9c>
 8006466:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800646a:	3b01      	subs	r3, #1
 800646c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29a      	uxth	r2, r3
 8006476:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800647a:	b29b      	uxth	r3, r3
 800647c:	029b      	lsls	r3, r3, #10
 800647e:	b29b      	uxth	r3, r3
 8006480:	4313      	orrs	r3, r2
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648c:	b29a      	uxth	r2, r3
 800648e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e050      	b.n	8006536 <USB_EPStartXfer+0xb62>
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <USB_EPStartXfer+0xade>
 800649c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	e041      	b.n	8006536 <USB_EPStartXfer+0xb62>
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <USB_EPStartXfer+0xafe>
 80064c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064cc:	3301      	adds	r3, #1
 80064ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	4313      	orrs	r3, r2
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e024      	b.n	8006536 <USB_EPStartXfer+0xb62>
 80064ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	785b      	ldrb	r3, [r3, #1]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d11c      	bne.n	8006536 <USB_EPStartXfer+0xb62>
 80064fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800650a:	b29b      	uxth	r3, r3
 800650c:	461a      	mov	r2, r3
 800650e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006510:	4413      	add	r3, r2
 8006512:	673b      	str	r3, [r7, #112]	; 0x70
 8006514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00da      	lsls	r2, r3, #3
 8006522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006524:	4413      	add	r3, r2
 8006526:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800652a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	b29a      	uxth	r2, r3
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6959      	ldr	r1, [r3, #20]
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006556:	b29b      	uxth	r3, r3
 8006558:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800655c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006560:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006564:	6800      	ldr	r0, [r0, #0]
 8006566:	f000 ff09 	bl	800737c <USB_WritePMA>
 800656a:	e0ca      	b.n	8006702 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800656c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d177      	bne.n	800666c <USB_EPStartXfer+0xc98>
 800657c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800658c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800659c:	4413      	add	r3, r2
 800659e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	00da      	lsls	r2, r3, #3
 80065ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065b0:	4413      	add	r3, r2
 80065b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80065b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065cc:	2b3e      	cmp	r3, #62	; 0x3e
 80065ce:	d921      	bls.n	8006614 <USB_EPStartXfer+0xc40>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <USB_EPStartXfer+0xc1c>
 80065e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	b29b      	uxth	r3, r3
 8006600:	4313      	orrs	r3, r2
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e05c      	b.n	80066ce <USB_EPStartXfer+0xcfa>
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <USB_EPStartXfer+0xc5e>
 800661c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e04d      	b.n	80066ce <USB_EPStartXfer+0xcfa>
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <USB_EPStartXfer+0xc7e>
 8006648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800664c:	3301      	adds	r3, #1
 800664e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800665c:	b29b      	uxth	r3, r3
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	b29b      	uxth	r3, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e030      	b.n	80066ce <USB_EPStartXfer+0xcfa>
 800666c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d128      	bne.n	80066ce <USB_EPStartXfer+0xcfa>
 800667c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006698:	b29b      	uxth	r3, r3
 800669a:	461a      	mov	r2, r3
 800669c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066a0:	4413      	add	r3, r2
 80066a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	891b      	ldrh	r3, [r3, #8]
 80066da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6959      	ldr	r1, [r3, #20]
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80066f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f000 fe3d 	bl	800737c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	817b      	strh	r3, [r7, #10]
 800672a:	897b      	ldrh	r3, [r7, #10]
 800672c:	f083 0310 	eor.w	r3, r3, #16
 8006730:	817b      	strh	r3, [r7, #10]
 8006732:	897b      	ldrh	r3, [r7, #10]
 8006734:	f083 0320 	eor.w	r3, r3, #32
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	897b      	ldrh	r3, [r7, #10]
 8006756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	b29b      	uxth	r3, r3
 8006768:	8013      	strh	r3, [r2, #0]
 800676a:	f000 bcde 	b.w	800712a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	7b1b      	ldrb	r3, [r3, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f040 80bb 	bne.w	80068f6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d917      	bls.n	80067cc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800679c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80067ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	619a      	str	r2, [r3, #24]
 80067ca:	e00e      	b.n	80067ea <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80067cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80067dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80067ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006806:	b29b      	uxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800680e:	4413      	add	r3, r2
 8006810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	00da      	lsls	r2, r3, #3
 8006822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006826:	4413      	add	r3, r2
 8006828:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800682c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006842:	801a      	strh	r2, [r3, #0]
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006848:	2b3e      	cmp	r3, #62	; 0x3e
 800684a:	d924      	bls.n	8006896 <USB_EPStartXfer+0xec2>
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <USB_EPStartXfer+0xe98>
 8006862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006866:	3b01      	subs	r3, #1
 8006868:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800686c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006878:	b29b      	uxth	r3, r3
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	b29b      	uxth	r3, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	b29b      	uxth	r3, r3
 8006882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800688a:	b29a      	uxth	r2, r3
 800688c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	f000 bc10 	b.w	80070b6 <USB_EPStartXfer+0x16e2>
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10c      	bne.n	80068b8 <USB_EPStartXfer+0xee4>
 800689e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	e3fe      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <USB_EPStartXfer+0xf04>
 80068ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068d2:	3301      	adds	r3, #1
 80068d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	029b      	lsls	r3, r3, #10
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e3df      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80068f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	78db      	ldrb	r3, [r3, #3]
 8006902:	2b02      	cmp	r3, #2
 8006904:	f040 8218 	bne.w	8006d38 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 809d 	bne.w	8006a54 <USB_EPStartXfer+0x1080>
 800691a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800693e:	4413      	add	r3, r2
 8006940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	00da      	lsls	r2, r3, #3
 8006952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006956:	4413      	add	r3, r2
 8006958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800695c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800696c:	b29a      	uxth	r2, r3
 800696e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006972:	801a      	strh	r2, [r3, #0]
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b3e      	cmp	r3, #62	; 0x3e
 8006982:	d92b      	bls.n	80069dc <USB_EPStartXfer+0x1008>
 8006984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <USB_EPStartXfer+0xfe0>
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ae:	3b01      	subs	r3, #1
 80069b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	029b      	lsls	r3, r3, #10
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	4313      	orrs	r3, r2
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e070      	b.n	8006abe <USB_EPStartXfer+0x10ea>
 80069dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10c      	bne.n	8006a06 <USB_EPStartXfer+0x1032>
 80069ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	e05b      	b.n	8006abe <USB_EPStartXfer+0x10ea>
 8006a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <USB_EPStartXfer+0x1062>
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a30:	3301      	adds	r3, #1
 8006a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	029b      	lsls	r3, r3, #10
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e034      	b.n	8006abe <USB_EPStartXfer+0x10ea>
 8006a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d12c      	bne.n	8006abe <USB_EPStartXfer+0x10ea>
 8006a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a88:	4413      	add	r3, r2
 8006a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	00da      	lsls	r2, r3, #3
 8006a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 809d 	bne.w	8006c18 <USB_EPStartXfer+0x1244>
 8006ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b02:	4413      	add	r3, r2
 8006b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	00da      	lsls	r2, r3, #3
 8006b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b3e      	cmp	r3, #62	; 0x3e
 8006b46:	d92b      	bls.n	8006ba0 <USB_EPStartXfer+0x11cc>
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <USB_EPStartXfer+0x11a4>
 8006b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b72:	3b01      	subs	r3, #1
 8006b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	029b      	lsls	r3, r3, #10
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b9c:	801a      	strh	r2, [r3, #0]
 8006b9e:	e069      	b.n	8006c74 <USB_EPStartXfer+0x12a0>
 8006ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10c      	bne.n	8006bca <USB_EPStartXfer+0x11f6>
 8006bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e054      	b.n	8006c74 <USB_EPStartXfer+0x12a0>
 8006bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <USB_EPStartXfer+0x1226>
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	e02d      	b.n	8006c74 <USB_EPStartXfer+0x12a0>
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d125      	bne.n	8006c74 <USB_EPStartXfer+0x12a0>
 8006c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c3e:	4413      	add	r3, r2
 8006c40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	00da      	lsls	r2, r3, #3
 8006c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c56:	4413      	add	r3, r2
 8006c58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c72:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8218 	beq.w	80070b6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ca6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <USB_EPStartXfer+0x12ea>
 8006cb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cbe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 81f5 	bne.w	80070b6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ccc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 81ee 	bne.w	80070b6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	441a      	add	r2, r3
 8006d1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
 8006d36:	e1be      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	78db      	ldrb	r3, [r3, #3]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 81b4 	bne.w	80070b2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d917      	bls.n	8006d96 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	619a      	str	r2, [r3, #24]
 8006d94:	e00e      	b.n	8006db4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2200      	movs	r2, #0
 8006db2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f040 8085 	bne.w	8006ed0 <USB_EPStartXfer+0x14fc>
 8006dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006dea:	4413      	add	r3, r2
 8006dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	00da      	lsls	r2, r3, #3
 8006dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e02:	4413      	add	r3, r2
 8006e04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e24:	2b3e      	cmp	r3, #62	; 0x3e
 8006e26:	d923      	bls.n	8006e70 <USB_EPStartXfer+0x149c>
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d104      	bne.n	8006e48 <USB_EPStartXfer+0x1474>
 8006e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e42:	3b01      	subs	r3, #1
 8006e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	029b      	lsls	r3, r3, #10
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	e060      	b.n	8006f32 <USB_EPStartXfer+0x155e>
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10c      	bne.n	8006e92 <USB_EPStartXfer+0x14be>
 8006e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	e04f      	b.n	8006f32 <USB_EPStartXfer+0x155e>
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <USB_EPStartXfer+0x14de>
 8006ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eac:	3301      	adds	r3, #1
 8006eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e030      	b.n	8006f32 <USB_EPStartXfer+0x155e>
 8006ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d128      	bne.n	8006f32 <USB_EPStartXfer+0x155e>
 8006ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	461a      	mov	r2, r3
 8006f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f04:	4413      	add	r3, r2
 8006f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	00da      	lsls	r2, r3, #3
 8006f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 8085 	bne.w	800705c <USB_EPStartXfer+0x1688>
 8006f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f76:	4413      	add	r3, r2
 8006f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00da      	lsls	r2, r3, #3
 8006f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f8e:	4413      	add	r3, r2
 8006f90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb2:	d923      	bls.n	8006ffc <USB_EPStartXfer+0x1628>
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc2:	f003 031f 	and.w	r3, r3, #31
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <USB_EPStartXfer+0x1600>
 8006fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	029b      	lsls	r3, r3, #10
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ff8:	801a      	strh	r2, [r3, #0]
 8006ffa:	e05c      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10c      	bne.n	800701e <USB_EPStartXfer+0x164a>
 8007004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007014:	b29a      	uxth	r2, r3
 8007016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	e04b      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <USB_EPStartXfer+0x166a>
 8007034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007038:	3301      	adds	r3, #1
 800703a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800703e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29a      	uxth	r2, r3
 8007046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800704a:	b29b      	uxth	r3, r3
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	b29b      	uxth	r3, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	b29a      	uxth	r2, r3
 8007054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	e02c      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
 800705c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d124      	bne.n	80070b6 <USB_EPStartXfer+0x16e2>
 800706c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707a:	b29b      	uxth	r3, r3
 800707c:	461a      	mov	r2, r3
 800707e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007082:	4413      	add	r3, r2
 8007084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	00da      	lsls	r2, r3, #3
 8007096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800709a:	4413      	add	r3, r2
 800709c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	e001      	b.n	80070b6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e03a      	b.n	800712c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070dc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80070f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d020      	beq.n	800718a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800715e:	81bb      	strh	r3, [r7, #12]
 8007160:	89bb      	ldrh	r3, [r7, #12]
 8007162:	f083 0310 	eor.w	r3, r3, #16
 8007166:	81bb      	strh	r3, [r7, #12]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	441a      	add	r2, r3
 8007172:	89bb      	ldrh	r3, [r7, #12]
 8007174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007184:	b29b      	uxth	r3, r3
 8007186:	8013      	strh	r3, [r2, #0]
 8007188:	e01f      	b.n	80071ca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	881b      	ldrh	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800719c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a0:	81fb      	strh	r3, [r7, #14]
 80071a2:	89fb      	ldrh	r3, [r7, #14]
 80071a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071a8:	81fb      	strh	r3, [r7, #14]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	441a      	add	r2, r3
 80071b4:	89fb      	ldrh	r3, [r7, #14]
 80071b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	7b1b      	ldrb	r3, [r3, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 809d 	bne.w	8007326 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d04c      	beq.n	800728e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	823b      	strh	r3, [r7, #16]
 8007202:	8a3b      	ldrh	r3, [r7, #16]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01b      	beq.n	8007244 <USB_EPClearStall+0x6c>
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	b29b      	uxth	r3, r3
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	81fb      	strh	r3, [r7, #14]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	441a      	add	r2, r3
 800722e:	89fb      	ldrh	r3, [r7, #14]
 8007230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800723c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007240:	b29b      	uxth	r3, r3
 8007242:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	78db      	ldrb	r3, [r3, #3]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d06c      	beq.n	8007326 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007262:	81bb      	strh	r3, [r7, #12]
 8007264:	89bb      	ldrh	r3, [r7, #12]
 8007266:	f083 0320 	eor.w	r3, r3, #32
 800726a:	81bb      	strh	r3, [r7, #12]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	441a      	add	r2, r3
 8007276:	89bb      	ldrh	r3, [r7, #12]
 8007278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800727c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007288:	b29b      	uxth	r3, r3
 800728a:	8013      	strh	r3, [r2, #0]
 800728c:	e04b      	b.n	8007326 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	82fb      	strh	r3, [r7, #22]
 800729c:	8afb      	ldrh	r3, [r7, #22]
 800729e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01b      	beq.n	80072de <USB_EPClearStall+0x106>
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072bc:	82bb      	strh	r3, [r7, #20]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	441a      	add	r2, r3
 80072c8:	8abb      	ldrh	r3, [r7, #20]
 80072ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f4:	827b      	strh	r3, [r7, #18]
 80072f6:	8a7b      	ldrh	r3, [r7, #18]
 80072f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072fc:	827b      	strh	r3, [r7, #18]
 80072fe:	8a7b      	ldrh	r3, [r7, #18]
 8007300:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007304:	827b      	strh	r3, [r7, #18]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	441a      	add	r2, r3
 8007310:	8a7b      	ldrh	r3, [r7, #18]
 8007312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007322:	b29b      	uxth	r3, r3
 8007324:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d103      	bne.n	800734e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2280      	movs	r2, #128	; 0x80
 800734a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800736a:	b29b      	uxth	r3, r3
 800736c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800736e:	68fb      	ldr	r3, [r7, #12]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800737c:	b480      	push	{r7}
 800737e:	b08b      	sub	sp, #44	; 0x2c
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4611      	mov	r1, r2
 8007388:	461a      	mov	r2, r3
 800738a:	460b      	mov	r3, r1
 800738c:	80fb      	strh	r3, [r7, #6]
 800738e:	4613      	mov	r3, r2
 8007390:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007392:	88bb      	ldrh	r3, [r7, #4]
 8007394:	3301      	adds	r3, #1
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
 80073b2:	e01b      	b.n	80073ec <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3301      	adds	r3, #1
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b21a      	sxth	r2, r3
 80073c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	b21b      	sxth	r3, r3
 80073cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	8a7a      	ldrh	r2, [r7, #18]
 80073d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	3302      	adds	r3, #2
 80073d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	3301      	adds	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	3301      	adds	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	3b01      	subs	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e0      	bne.n	80073b4 <USB_WritePMA+0x38>
  }
}
 80073f2:	bf00      	nop
 80073f4:	bf00      	nop
 80073f6:	372c      	adds	r7, #44	; 0x2c
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007400:	b480      	push	{r7}
 8007402:	b08b      	sub	sp, #44	; 0x2c
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4611      	mov	r1, r2
 800740c:	461a      	mov	r2, r3
 800740e:	460b      	mov	r3, r1
 8007410:	80fb      	strh	r3, [r7, #6]
 8007412:	4613      	mov	r3, r2
 8007414:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007416:	88bb      	ldrh	r3, [r7, #4]
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	b29b      	uxth	r3, r3
 800741c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007426:	88fa      	ldrh	r2, [r7, #6]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007430:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
 8007436:	e018      	b.n	800746a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29b      	uxth	r3, r3
 800743e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	3302      	adds	r3, #2
 8007444:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	b2da      	uxtb	r2, r3
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	3301      	adds	r3, #1
 8007452:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	b2da      	uxtb	r2, r3
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	3b01      	subs	r3, #1
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e3      	bne.n	8007438 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007470:	88bb      	ldrh	r3, [r7, #4]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	701a      	strb	r2, [r3, #0]
  }
}
 800748c:	bf00      	nop
 800748e:	372c      	adds	r7, #44	; 0x2c
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	4611      	mov	r1, r2
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d007      	beq.n	800750c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	4611      	mov	r1, r2
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
  }

  return USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 ff47 	bl	80083bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	2b02      	cmp	r3, #2
 8007550:	d01a      	beq.n	8007588 <USBD_LL_SetupStage+0x72>
 8007552:	2b02      	cmp	r3, #2
 8007554:	d822      	bhi.n	800759c <USBD_LL_SetupStage+0x86>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <USBD_LL_SetupStage+0x4a>
 800755a:	2b01      	cmp	r3, #1
 800755c:	d00a      	beq.n	8007574 <USBD_LL_SetupStage+0x5e>
 800755e:	e01d      	b.n	800759c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f9ef 	bl	800794c <USBD_StdDevReq>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
      break;
 8007572:	e020      	b.n	80075b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa53 	bl	8007a28 <USBD_StdItfReq>
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]
      break;
 8007586:	e016      	b.n	80075b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fa92 	bl	8007aba <USBD_StdEPReq>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
      break;
 800759a:	e00c      	b.n	80075b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f004 fa04 	bl	800b9b8 <USBD_LL_StallEP>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]
      break;
 80075b4:	bf00      	nop
  }

  return ret;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	460b      	mov	r3, r1
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d138      	bne.n	8007646 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d14a      	bne.n	800767c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d913      	bls.n	800761a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	1ad2      	subs	r2, r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4293      	cmp	r3, r2
 800760a:	bf28      	it	cs
 800760c:	4613      	movcs	r3, r2
 800760e:	461a      	mov	r2, r3
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 ff49 	bl	80084aa <USBD_CtlContinueRx>
 8007618:	e030      	b.n	800767c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d10b      	bne.n	800763e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d005      	beq.n	800763e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 ff44 	bl	80084cc <USBD_CtlSendStatus>
 8007644:	e01a      	b.n	800767c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b03      	cmp	r3, #3
 8007650:	d114      	bne.n	800767c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	7afa      	ldrb	r2, [r7, #11]
 8007668:	4611      	mov	r1, r2
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	e000      	b.n	800767e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	460b      	mov	r3, r1
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d16b      	bne.n	8007772 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3314      	adds	r3, #20
 800769e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d156      	bne.n	8007758 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d914      	bls.n	80076e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fedb 	bl	8008488 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076d2:	2300      	movs	r3, #0
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f004 fa17 	bl	800bb0c <USBD_LL_PrepareReceive>
 80076de:	e03b      	b.n	8007758 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d11c      	bne.n	8007726 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d316      	bcc.n	8007726 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007702:	429a      	cmp	r2, r3
 8007704:	d20f      	bcs.n	8007726 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 febc 	bl	8008488 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007718:	2300      	movs	r3, #0
 800771a:	2200      	movs	r2, #0
 800771c:	2100      	movs	r1, #0
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f004 f9f4 	bl	800bb0c <USBD_LL_PrepareReceive>
 8007724:	e018      	b.n	8007758 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d10b      	bne.n	800774a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800774a:	2180      	movs	r1, #128	; 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f004 f933 	bl	800b9b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fecd 	bl	80084f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d122      	bne.n	80077a8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fe98 	bl	8007498 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007770:	e01a      	b.n	80077a8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b03      	cmp	r3, #3
 800777c:	d114      	bne.n	80077a8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	7afa      	ldrb	r2, [r7, #11]
 8007794:	4611      	mov	r1, r2
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	e000      	b.n	80077aa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e02f      	b.n	8007846 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00f      	beq.n	8007810 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6852      	ldr	r2, [r2, #4]
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	4611      	mov	r1, r2
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007810:	2340      	movs	r3, #64	; 0x40
 8007812:	2200      	movs	r2, #0
 8007814:	2100      	movs	r1, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f004 f8a8 	bl	800b96c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2240      	movs	r2, #64	; 0x40
 8007828:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	2200      	movs	r2, #0
 8007830:	2180      	movs	r1, #128	; 0x80
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f004 f89a 	bl	800b96c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2240      	movs	r2, #64	; 0x40
 8007842:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d106      	bne.n	80078bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	e012      	b.n	8007906 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d10b      	bne.n	8007904 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800790e:	b480      	push	{r7}
 8007910:	b087      	sub	sp, #28
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	3301      	adds	r3, #1
 8007924:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800792c:	8a3b      	ldrh	r3, [r7, #16]
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	b21a      	sxth	r2, r3
 8007932:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007936:	4313      	orrs	r3, r2
 8007938:	b21b      	sxth	r3, r3
 800793a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800793c:	89fb      	ldrh	r3, [r7, #14]
}
 800793e:	4618      	mov	r0, r3
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d005      	beq.n	8007972 <USBD_StdDevReq+0x26>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d853      	bhi.n	8007a12 <USBD_StdDevReq+0xc6>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <USBD_StdDevReq+0x3a>
 800796e:	2b20      	cmp	r3, #32
 8007970:	d14f      	bne.n	8007a12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	e04a      	b.n	8007a1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b09      	cmp	r3, #9
 800798c:	d83b      	bhi.n	8007a06 <USBD_StdDevReq+0xba>
 800798e:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <USBD_StdDevReq+0x48>)
 8007990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007994:	080079e9 	.word	0x080079e9
 8007998:	080079fd 	.word	0x080079fd
 800799c:	08007a07 	.word	0x08007a07
 80079a0:	080079f3 	.word	0x080079f3
 80079a4:	08007a07 	.word	0x08007a07
 80079a8:	080079c7 	.word	0x080079c7
 80079ac:	080079bd 	.word	0x080079bd
 80079b0:	08007a07 	.word	0x08007a07
 80079b4:	080079df 	.word	0x080079df
 80079b8:	080079d1 	.word	0x080079d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9de 	bl	8007d80 <USBD_GetDescriptor>
          break;
 80079c4:	e024      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fb6d 	bl	80080a8 <USBD_SetAddress>
          break;
 80079ce:	e01f      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fbac 	bl	8008130 <USBD_SetConfig>
 80079d8:	4603      	mov	r3, r0
 80079da:	73fb      	strb	r3, [r7, #15]
          break;
 80079dc:	e018      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fc4b 	bl	800827c <USBD_GetConfig>
          break;
 80079e6:	e013      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc7c 	bl	80082e8 <USBD_GetStatus>
          break;
 80079f0:	e00e      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fcab 	bl	8008350 <USBD_SetFeature>
          break;
 80079fa:	e009      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fcba 	bl	8008378 <USBD_ClrFeature>
          break;
 8007a04:	e004      	b.n	8007a10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fd11 	bl	8008430 <USBD_CtlError>
          break;
 8007a0e:	bf00      	nop
      }
      break;
 8007a10:	e004      	b.n	8007a1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fd0b 	bl	8008430 <USBD_CtlError>
      break;
 8007a1a:	bf00      	nop
  }

  return ret;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop

08007a28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d005      	beq.n	8007a4e <USBD_StdItfReq+0x26>
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d82f      	bhi.n	8007aa6 <USBD_StdItfReq+0x7e>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <USBD_StdItfReq+0x26>
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d12b      	bne.n	8007aa6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d81d      	bhi.n	8007a98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	889b      	ldrh	r3, [r3, #4]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d813      	bhi.n	8007a8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	4798      	blx	r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	88db      	ldrh	r3, [r3, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d110      	bne.n	8007aa2 <USBD_StdItfReq+0x7a>
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10d      	bne.n	8007aa2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fd20 	bl	80084cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a8c:	e009      	b.n	8007aa2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fccd 	bl	8008430 <USBD_CtlError>
          break;
 8007a96:	e004      	b.n	8007aa2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fcc8 	bl	8008430 <USBD_CtlError>
          break;
 8007aa0:	e000      	b.n	8007aa4 <USBD_StdItfReq+0x7c>
          break;
 8007aa2:	bf00      	nop
      }
      break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fcc1 	bl	8008430 <USBD_CtlError>
      break;
 8007aae:	bf00      	nop
  }

  return ret;
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	889b      	ldrh	r3, [r3, #4]
 8007acc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d007      	beq.n	8007aea <USBD_StdEPReq+0x30>
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	f200 8145 	bhi.w	8007d6a <USBD_StdEPReq+0x2b0>
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00c      	beq.n	8007afe <USBD_StdEPReq+0x44>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	f040 8140 	bne.w	8007d6a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	4798      	blx	r3
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]
      break;
 8007afc:	e13a      	b.n	8007d74 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d007      	beq.n	8007b16 <USBD_StdEPReq+0x5c>
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	f300 8129 	bgt.w	8007d5e <USBD_StdEPReq+0x2a4>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d07f      	beq.n	8007c10 <USBD_StdEPReq+0x156>
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d03c      	beq.n	8007b8e <USBD_StdEPReq+0xd4>
 8007b14:	e123      	b.n	8007d5e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d002      	beq.n	8007b28 <USBD_StdEPReq+0x6e>
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d016      	beq.n	8007b54 <USBD_StdEPReq+0x9a>
 8007b26:	e02c      	b.n	8007b82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00d      	beq.n	8007b4a <USBD_StdEPReq+0x90>
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	2b80      	cmp	r3, #128	; 0x80
 8007b32:	d00a      	beq.n	8007b4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f003 ff3d 	bl	800b9b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b3e:	2180      	movs	r1, #128	; 0x80
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f003 ff39 	bl	800b9b8 <USBD_LL_StallEP>
 8007b46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b48:	e020      	b.n	8007b8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc6f 	bl	8008430 <USBD_CtlError>
              break;
 8007b52:	e01b      	b.n	8007b8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10e      	bne.n	8007b7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00b      	beq.n	8007b7a <USBD_StdEPReq+0xc0>
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d008      	beq.n	8007b7a <USBD_StdEPReq+0xc0>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	88db      	ldrh	r3, [r3, #6]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f003 ff1f 	bl	800b9b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fca6 	bl	80084cc <USBD_CtlSendStatus>

              break;
 8007b80:	e004      	b.n	8007b8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fc53 	bl	8008430 <USBD_CtlError>
              break;
 8007b8a:	bf00      	nop
          }
          break;
 8007b8c:	e0ec      	b.n	8007d68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d002      	beq.n	8007ba0 <USBD_StdEPReq+0xe6>
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d016      	beq.n	8007bcc <USBD_StdEPReq+0x112>
 8007b9e:	e030      	b.n	8007c02 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00d      	beq.n	8007bc2 <USBD_StdEPReq+0x108>
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b80      	cmp	r3, #128	; 0x80
 8007baa:	d00a      	beq.n	8007bc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f003 ff01 	bl	800b9b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bb6:	2180      	movs	r1, #128	; 0x80
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f003 fefd 	bl	800b9b8 <USBD_LL_StallEP>
 8007bbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bc0:	e025      	b.n	8007c0e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fc33 	bl	8008430 <USBD_CtlError>
              break;
 8007bca:	e020      	b.n	8007c0e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	885b      	ldrh	r3, [r3, #2]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11b      	bne.n	8007c0c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d004      	beq.n	8007be8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f003 ff07 	bl	800b9f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fc6f 	bl	80084cc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007c00:	e004      	b.n	8007c0c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fc13 	bl	8008430 <USBD_CtlError>
              break;
 8007c0a:	e000      	b.n	8007c0e <USBD_StdEPReq+0x154>
              break;
 8007c0c:	bf00      	nop
          }
          break;
 8007c0e:	e0ab      	b.n	8007d68 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d002      	beq.n	8007c22 <USBD_StdEPReq+0x168>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d032      	beq.n	8007c86 <USBD_StdEPReq+0x1cc>
 8007c20:	e097      	b.n	8007d52 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <USBD_StdEPReq+0x17e>
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d004      	beq.n	8007c38 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fbfd 	bl	8008430 <USBD_CtlError>
                break;
 8007c36:	e091      	b.n	8007d5c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da0b      	bge.n	8007c58 <USBD_StdEPReq+0x19e>
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	3310      	adds	r3, #16
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	3304      	adds	r3, #4
 8007c56:	e00b      	b.n	8007c70 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fbe7 	bl	8008452 <USBD_CtlSendData>
              break;
 8007c84:	e06a      	b.n	8007d5c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	da11      	bge.n	8007cb2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	f003 020f 	and.w	r2, r3, #15
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	4613      	mov	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	440b      	add	r3, r1
 8007ca0:	3324      	adds	r3, #36	; 0x24
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d117      	bne.n	8007cd8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fbc0 	bl	8008430 <USBD_CtlError>
                  break;
 8007cb0:	e054      	b.n	8007d5c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fbad 	bl	8008430 <USBD_CtlError>
                  break;
 8007cd6:	e041      	b.n	8007d5c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da0b      	bge.n	8007cf8 <USBD_StdEPReq+0x23e>
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	3310      	adds	r3, #16
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	e00b      	b.n	8007d10 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3304      	adds	r3, #4
 8007d10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <USBD_StdEPReq+0x264>
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b80      	cmp	r3, #128	; 0x80
 8007d1c:	d103      	bne.n	8007d26 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e00e      	b.n	8007d44 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f003 fe82 	bl	800ba34 <USBD_LL_IsStallEP>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	e002      	b.n	8007d44 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2202      	movs	r2, #2
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb81 	bl	8008452 <USBD_CtlSendData>
              break;
 8007d50:	e004      	b.n	8007d5c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fb6b 	bl	8008430 <USBD_CtlError>
              break;
 8007d5a:	bf00      	nop
          }
          break;
 8007d5c:	e004      	b.n	8007d68 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fb65 	bl	8008430 <USBD_CtlError>
          break;
 8007d66:	bf00      	nop
      }
      break;
 8007d68:	e004      	b.n	8007d74 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fb5f 	bl	8008430 <USBD_CtlError>
      break;
 8007d72:	bf00      	nop
  }

  return ret;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	885b      	ldrh	r3, [r3, #2]
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	2b0e      	cmp	r3, #14
 8007da2:	f200 8152 	bhi.w	800804a <USBD_GetDescriptor+0x2ca>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <USBD_GetDescriptor+0x2c>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007e1d 	.word	0x08007e1d
 8007db0:	08007e35 	.word	0x08007e35
 8007db4:	08007e75 	.word	0x08007e75
 8007db8:	0800804b 	.word	0x0800804b
 8007dbc:	0800804b 	.word	0x0800804b
 8007dc0:	08007feb 	.word	0x08007feb
 8007dc4:	08008017 	.word	0x08008017
 8007dc8:	0800804b 	.word	0x0800804b
 8007dcc:	0800804b 	.word	0x0800804b
 8007dd0:	0800804b 	.word	0x0800804b
 8007dd4:	0800804b 	.word	0x0800804b
 8007dd8:	0800804b 	.word	0x0800804b
 8007ddc:	0800804b 	.word	0x0800804b
 8007de0:	0800804b 	.word	0x0800804b
 8007de4:	08007de9 	.word	0x08007de9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e0a:	e126      	b.n	800805a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb0e 	bl	8008430 <USBD_CtlError>
        err++;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	3301      	adds	r3, #1
 8007e18:	72fb      	strb	r3, [r7, #11]
      break;
 8007e1a:	e11e      	b.n	800805a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
      break;
 8007e32:	e112      	b.n	800805a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	7c1b      	ldrb	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10d      	bne.n	8007e58 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	f107 0208 	add.w	r2, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	2202      	movs	r2, #2
 8007e54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e56:	e100      	b.n	800805a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	f107 0208 	add.w	r2, r7, #8
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	2202      	movs	r2, #2
 8007e70:	701a      	strb	r2, [r3, #0]
      break;
 8007e72:	e0f2      	b.n	800805a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	885b      	ldrh	r3, [r3, #2]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b05      	cmp	r3, #5
 8007e7c:	f200 80ac 	bhi.w	8007fd8 <USBD_GetDescriptor+0x258>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <USBD_GetDescriptor+0x108>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007ea1 	.word	0x08007ea1
 8007e8c:	08007ed5 	.word	0x08007ed5
 8007e90:	08007f09 	.word	0x08007f09
 8007e94:	08007f3d 	.word	0x08007f3d
 8007e98:	08007f71 	.word	0x08007f71
 8007e9c:	08007fa5 	.word	0x08007fa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	7c12      	ldrb	r2, [r2, #16]
 8007eb8:	f107 0108 	add.w	r1, r7, #8
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec2:	e091      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fab2 	bl	8008430 <USBD_CtlError>
            err++;
 8007ecc:	7afb      	ldrb	r3, [r7, #11]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed2:	e089      	b.n	8007fe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7c12      	ldrb	r2, [r2, #16]
 8007eec:	f107 0108 	add.w	r1, r7, #8
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ef6:	e077      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fa98 	bl	8008430 <USBD_CtlError>
            err++;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
 8007f02:	3301      	adds	r3, #1
 8007f04:	72fb      	strb	r3, [r7, #11]
          break;
 8007f06:	e06f      	b.n	8007fe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00b      	beq.n	8007f2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7c12      	ldrb	r2, [r2, #16]
 8007f20:	f107 0108 	add.w	r1, r7, #8
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2a:	e05d      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa7e 	bl	8008430 <USBD_CtlError>
            err++;
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	3301      	adds	r3, #1
 8007f38:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3a:	e055      	b.n	8007fe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	7c12      	ldrb	r2, [r2, #16]
 8007f54:	f107 0108 	add.w	r1, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f5e:	e043      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa64 	bl	8008430 <USBD_CtlError>
            err++;
 8007f68:	7afb      	ldrb	r3, [r7, #11]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f6e:	e03b      	b.n	8007fe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	7c12      	ldrb	r2, [r2, #16]
 8007f88:	f107 0108 	add.w	r1, r7, #8
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
 8007f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f92:	e029      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa4a 	bl	8008430 <USBD_CtlError>
            err++;
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8007fa2:	e021      	b.n	8007fe8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	7c12      	ldrb	r2, [r2, #16]
 8007fbc:	f107 0108 	add.w	r1, r7, #8
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4798      	blx	r3
 8007fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fc6:	e00f      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fa30 	bl	8008430 <USBD_CtlError>
            err++;
 8007fd0:	7afb      	ldrb	r3, [r7, #11]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fd6:	e007      	b.n	8007fe8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa28 	bl	8008430 <USBD_CtlError>
          err++;
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007fe6:	bf00      	nop
      }
      break;
 8007fe8:	e037      	b.n	800805a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7c1b      	ldrb	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	f107 0208 	add.w	r2, r7, #8
 8007ffe:	4610      	mov	r0, r2
 8008000:	4798      	blx	r3
 8008002:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008004:	e029      	b.n	800805a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fa11 	bl	8008430 <USBD_CtlError>
        err++;
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	3301      	adds	r3, #1
 8008012:	72fb      	strb	r3, [r7, #11]
      break;
 8008014:	e021      	b.n	800805a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	7c1b      	ldrb	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10d      	bne.n	800803a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	f107 0208 	add.w	r2, r7, #8
 800802a:	4610      	mov	r0, r2
 800802c:	4798      	blx	r3
 800802e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3301      	adds	r3, #1
 8008034:	2207      	movs	r2, #7
 8008036:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008038:	e00f      	b.n	800805a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f9f7 	bl	8008430 <USBD_CtlError>
        err++;
 8008042:	7afb      	ldrb	r3, [r7, #11]
 8008044:	3301      	adds	r3, #1
 8008046:	72fb      	strb	r3, [r7, #11]
      break;
 8008048:	e007      	b.n	800805a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f9ef 	bl	8008430 <USBD_CtlError>
      err++;
 8008052:	7afb      	ldrb	r3, [r7, #11]
 8008054:	3301      	adds	r3, #1
 8008056:	72fb      	strb	r3, [r7, #11]
      break;
 8008058:	bf00      	nop
  }

  if (err != 0U)
 800805a:	7afb      	ldrb	r3, [r7, #11]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11e      	bne.n	800809e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	88db      	ldrh	r3, [r3, #6]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d016      	beq.n	8008096 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008068:	893b      	ldrh	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00e      	beq.n	800808c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	88da      	ldrh	r2, [r3, #6]
 8008072:	893b      	ldrh	r3, [r7, #8]
 8008074:	4293      	cmp	r3, r2
 8008076:	bf28      	it	cs
 8008078:	4613      	movcs	r3, r2
 800807a:	b29b      	uxth	r3, r3
 800807c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800807e:	893b      	ldrh	r3, [r7, #8]
 8008080:	461a      	mov	r2, r3
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f9e4 	bl	8008452 <USBD_CtlSendData>
 800808a:	e009      	b.n	80080a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f9ce 	bl	8008430 <USBD_CtlError>
 8008094:	e004      	b.n	80080a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa18 	bl	80084cc <USBD_CtlSendStatus>
 800809c:	e000      	b.n	80080a0 <USBD_GetDescriptor+0x320>
    return;
 800809e:	bf00      	nop
  }
}
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop

080080a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d131      	bne.n	800811e <USBD_SetAddress+0x76>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	88db      	ldrh	r3, [r3, #6]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d12d      	bne.n	800811e <USBD_SetAddress+0x76>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	885b      	ldrh	r3, [r3, #2]
 80080c6:	2b7f      	cmp	r3, #127	; 0x7f
 80080c8:	d829      	bhi.n	800811e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	885b      	ldrh	r3, [r3, #2]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d104      	bne.n	80080ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f9a3 	bl	8008430 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	e01d      	b.n	8008128 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7bfa      	ldrb	r2, [r7, #15]
 80080f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f003 fcc7 	bl	800ba8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f9e4 	bl	80084cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d004      	beq.n	8008114 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2202      	movs	r2, #2
 800810e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	e009      	b.n	8008128 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811c:	e004      	b.n	8008128 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f985 	bl	8008430 <USBD_CtlError>
  }
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	885b      	ldrh	r3, [r3, #2]
 8008142:	b2da      	uxtb	r2, r3
 8008144:	4b4c      	ldr	r3, [pc, #304]	; (8008278 <USBD_SetConfig+0x148>)
 8008146:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008148:	4b4b      	ldr	r3, [pc, #300]	; (8008278 <USBD_SetConfig+0x148>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d905      	bls.n	800815c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f96c 	bl	8008430 <USBD_CtlError>
    return USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	e088      	b.n	800826e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d002      	beq.n	800816e <USBD_SetConfig+0x3e>
 8008168:	2b03      	cmp	r3, #3
 800816a:	d025      	beq.n	80081b8 <USBD_SetConfig+0x88>
 800816c:	e071      	b.n	8008252 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800816e:	4b42      	ldr	r3, [pc, #264]	; (8008278 <USBD_SetConfig+0x148>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d01c      	beq.n	80081b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008176:	4b40      	ldr	r3, [pc, #256]	; (8008278 <USBD_SetConfig+0x148>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008180:	4b3d      	ldr	r3, [pc, #244]	; (8008278 <USBD_SetConfig+0x148>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff f991 	bl	80074ae <USBD_SetClassConfig>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f949 	bl	8008430 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800819e:	e065      	b.n	800826c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f993 	bl	80084cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2203      	movs	r2, #3
 80081aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081ae:	e05d      	b.n	800826c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f98b 	bl	80084cc <USBD_CtlSendStatus>
      break;
 80081b6:	e059      	b.n	800826c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081b8:	4b2f      	ldr	r3, [pc, #188]	; (8008278 <USBD_SetConfig+0x148>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d112      	bne.n	80081e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081c8:	4b2b      	ldr	r3, [pc, #172]	; (8008278 <USBD_SetConfig+0x148>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081d2:	4b29      	ldr	r3, [pc, #164]	; (8008278 <USBD_SetConfig+0x148>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff f984 	bl	80074e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f974 	bl	80084cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081e4:	e042      	b.n	800826c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80081e6:	4b24      	ldr	r3, [pc, #144]	; (8008278 <USBD_SetConfig+0x148>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d02a      	beq.n	800824a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7ff f972 	bl	80074e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <USBD_SetConfig+0x148>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <USBD_SetConfig+0x148>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff f94b 	bl	80074ae <USBD_SetClassConfig>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00f      	beq.n	8008242 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f903 	bl	8008430 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff f957 	bl	80074e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008240:	e014      	b.n	800826c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f942 	bl	80084cc <USBD_CtlSendStatus>
      break;
 8008248:	e010      	b.n	800826c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f93e 	bl	80084cc <USBD_CtlSendStatus>
      break;
 8008250:	e00c      	b.n	800826c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f8eb 	bl	8008430 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <USBD_SetConfig+0x148>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff f940 	bl	80074e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	73fb      	strb	r3, [r7, #15]
      break;
 800826a:	bf00      	nop
  }

  return ret;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20000358 	.word	0x20000358

0800827c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	88db      	ldrh	r3, [r3, #6]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d004      	beq.n	8008298 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f8cd 	bl	8008430 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008296:	e023      	b.n	80082e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	dc02      	bgt.n	80082aa <USBD_GetConfig+0x2e>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dc03      	bgt.n	80082b0 <USBD_GetConfig+0x34>
 80082a8:	e015      	b.n	80082d6 <USBD_GetConfig+0x5a>
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d00b      	beq.n	80082c6 <USBD_GetConfig+0x4a>
 80082ae:	e012      	b.n	80082d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3308      	adds	r3, #8
 80082ba:	2201      	movs	r2, #1
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f8c7 	bl	8008452 <USBD_CtlSendData>
        break;
 80082c4:	e00c      	b.n	80082e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3304      	adds	r3, #4
 80082ca:	2201      	movs	r2, #1
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f8bf 	bl	8008452 <USBD_CtlSendData>
        break;
 80082d4:	e004      	b.n	80082e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082d6:	6839      	ldr	r1, [r7, #0]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f8a9 	bl	8008430 <USBD_CtlError>
        break;
 80082de:	bf00      	nop
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d81e      	bhi.n	800833e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	88db      	ldrh	r3, [r3, #6]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d004      	beq.n	8008312 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f890 	bl	8008430 <USBD_CtlError>
        break;
 8008310:	e01a      	b.n	8008348 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f043 0202 	orr.w	r2, r3, #2
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	330c      	adds	r3, #12
 8008332:	2202      	movs	r2, #2
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f88b 	bl	8008452 <USBD_CtlSendData>
      break;
 800833c:	e004      	b.n	8008348 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f875 	bl	8008430 <USBD_CtlError>
      break;
 8008346:	bf00      	nop
  }
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	885b      	ldrh	r3, [r3, #2]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d106      	bne.n	8008370 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f8ae 	bl	80084cc <USBD_CtlSendStatus>
  }
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	2b02      	cmp	r3, #2
 800838e:	d80b      	bhi.n	80083a8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d10c      	bne.n	80083b2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f893 	bl	80084cc <USBD_CtlSendStatus>
      }
      break;
 80083a6:	e004      	b.n	80083b2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f840 	bl	8008430 <USBD_CtlError>
      break;
 80083b0:	e000      	b.n	80083b4 <USBD_ClrFeature+0x3c>
      break;
 80083b2:	bf00      	nop
  }
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	781a      	ldrb	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781a      	ldrb	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fa91 	bl	800790e <SWAPBYTE>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7ff fa84 	bl	800790e <SWAPBYTE>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3301      	adds	r3, #1
 8008412:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f7ff fa77 	bl	800790e <SWAPBYTE>
 8008420:	4603      	mov	r3, r0
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	80da      	strh	r2, [r3, #6]
}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800843a:	2180      	movs	r1, #128	; 0x80
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f003 fabb 	bl	800b9b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008442:	2100      	movs	r1, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f003 fab7 	bl	800b9b8 <USBD_LL_StallEP>
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2202      	movs	r2, #2
 8008462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	2100      	movs	r1, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f003 fb26 	bl	800baca <USBD_LL_Transmit>

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	2100      	movs	r1, #0
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f003 fb15 	bl	800baca <USBD_LL_Transmit>

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f003 fb25 	bl	800bb0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2204      	movs	r2, #4
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f003 faf1 	bl	800baca <USBD_LL_Transmit>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b082      	sub	sp, #8
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2205      	movs	r2, #5
 80084fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008502:	2300      	movs	r3, #0
 8008504:	2200      	movs	r2, #0
 8008506:	2100      	movs	r1, #0
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f003 faff 	bl	800bb0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <__NVIC_SetPriority>:
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	4603      	mov	r3, r0
 8008520:	6039      	str	r1, [r7, #0]
 8008522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008528:	2b00      	cmp	r3, #0
 800852a:	db0a      	blt.n	8008542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	b2da      	uxtb	r2, r3
 8008530:	490c      	ldr	r1, [pc, #48]	; (8008564 <__NVIC_SetPriority+0x4c>)
 8008532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008536:	0112      	lsls	r2, r2, #4
 8008538:	b2d2      	uxtb	r2, r2
 800853a:	440b      	add	r3, r1
 800853c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008540:	e00a      	b.n	8008558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	b2da      	uxtb	r2, r3
 8008546:	4908      	ldr	r1, [pc, #32]	; (8008568 <__NVIC_SetPriority+0x50>)
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	3b04      	subs	r3, #4
 8008550:	0112      	lsls	r2, r2, #4
 8008552:	b2d2      	uxtb	r2, r2
 8008554:	440b      	add	r3, r1
 8008556:	761a      	strb	r2, [r3, #24]
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	e000e100 	.word	0xe000e100
 8008568:	e000ed00 	.word	0xe000ed00

0800856c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008570:	2100      	movs	r1, #0
 8008572:	f06f 0004 	mvn.w	r0, #4
 8008576:	f7ff ffcf 	bl	8008518 <__NVIC_SetPriority>
#endif
}
 800857a:	bf00      	nop
 800857c:	bd80      	pop	{r7, pc}
	...

08008580 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008586:	f3ef 8305 	mrs	r3, IPSR
 800858a:	603b      	str	r3, [r7, #0]
  return(result);
 800858c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008592:	f06f 0305 	mvn.w	r3, #5
 8008596:	607b      	str	r3, [r7, #4]
 8008598:	e00c      	b.n	80085b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800859a:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <osKernelInitialize+0x44>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d105      	bne.n	80085ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <osKernelInitialize+0x44>)
 80085a4:	2201      	movs	r2, #1
 80085a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	e002      	b.n	80085b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80085b4:	687b      	ldr	r3, [r7, #4]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	2000035c 	.word	0x2000035c

080085c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ce:	f3ef 8305 	mrs	r3, IPSR
 80085d2:	603b      	str	r3, [r7, #0]
  return(result);
 80085d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80085da:	f06f 0305 	mvn.w	r3, #5
 80085de:	607b      	str	r3, [r7, #4]
 80085e0:	e010      	b.n	8008604 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80085e2:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <osKernelStart+0x48>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d109      	bne.n	80085fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80085ea:	f7ff ffbf 	bl	800856c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80085ee:	4b08      	ldr	r3, [pc, #32]	; (8008610 <osKernelStart+0x48>)
 80085f0:	2202      	movs	r2, #2
 80085f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80085f4:	f001 f8ee 	bl	80097d4 <vTaskStartScheduler>
      stat = osOK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	e002      	b.n	8008604 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80085fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008604:	687b      	ldr	r3, [r7, #4]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2000035c 	.word	0x2000035c

08008614 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008614:	b580      	push	{r7, lr}
 8008616:	b08e      	sub	sp, #56	; 0x38
 8008618:	af04      	add	r7, sp, #16
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008620:	2300      	movs	r3, #0
 8008622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008624:	f3ef 8305 	mrs	r3, IPSR
 8008628:	617b      	str	r3, [r7, #20]
  return(result);
 800862a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800862c:	2b00      	cmp	r3, #0
 800862e:	d17e      	bne.n	800872e <osThreadNew+0x11a>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d07b      	beq.n	800872e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008636:	2380      	movs	r3, #128	; 0x80
 8008638:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800863a:	2318      	movs	r3, #24
 800863c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008646:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d045      	beq.n	80086da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <osThreadNew+0x48>
        name = attr->name;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <osThreadNew+0x6e>
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	2b38      	cmp	r3, #56	; 0x38
 8008674:	d805      	bhi.n	8008682 <osThreadNew+0x6e>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f003 0301 	and.w	r3, r3, #1
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <osThreadNew+0x72>
        return (NULL);
 8008682:	2300      	movs	r3, #0
 8008684:	e054      	b.n	8008730 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	089b      	lsrs	r3, r3, #2
 8008694:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <osThreadNew+0xa8>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2ba7      	cmp	r3, #167	; 0xa7
 80086a4:	d90a      	bls.n	80086bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d006      	beq.n	80086bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <osThreadNew+0xa8>
        mem = 1;
 80086b6:	2301      	movs	r3, #1
 80086b8:	61bb      	str	r3, [r7, #24]
 80086ba:	e010      	b.n	80086de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10c      	bne.n	80086de <osThreadNew+0xca>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d108      	bne.n	80086de <osThreadNew+0xca>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d104      	bne.n	80086de <osThreadNew+0xca>
          mem = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	e001      	b.n	80086de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d110      	bne.n	8008706 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086ec:	9202      	str	r2, [sp, #8]
 80086ee:	9301      	str	r3, [sp, #4]
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	6a3a      	ldr	r2, [r7, #32]
 80086f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fe0c 	bl	8009318 <xTaskCreateStatic>
 8008700:	4603      	mov	r3, r0
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	e013      	b.n	800872e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d110      	bne.n	800872e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	b29a      	uxth	r2, r3
 8008710:	f107 0310 	add.w	r3, r7, #16
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 fe57 	bl	80093d2 <xTaskCreate>
 8008724:	4603      	mov	r3, r0
 8008726:	2b01      	cmp	r3, #1
 8008728:	d001      	beq.n	800872e <osThreadNew+0x11a>
            hTask = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800872e:	693b      	ldr	r3, [r7, #16]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3728      	adds	r7, #40	; 0x28
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008740:	f3ef 8305 	mrs	r3, IPSR
 8008744:	60bb      	str	r3, [r7, #8]
  return(result);
 8008746:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <osDelay+0x1c>
    stat = osErrorISR;
 800874c:	f06f 0305 	mvn.w	r3, #5
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	e007      	b.n	8008764 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <osDelay+0x2c>
      vTaskDelay(ticks);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 f804 	bl	800976c <vTaskDelay>
    }
  }

  return (stat);
 8008764:	68fb      	ldr	r3, [r7, #12]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a07      	ldr	r2, [pc, #28]	; (800879c <vApplicationGetIdleTaskMemory+0x2c>)
 8008780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4a06      	ldr	r2, [pc, #24]	; (80087a0 <vApplicationGetIdleTaskMemory+0x30>)
 8008786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2280      	movs	r2, #128	; 0x80
 800878c:	601a      	str	r2, [r3, #0]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000360 	.word	0x20000360
 80087a0:	20000408 	.word	0x20000408

080087a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a07      	ldr	r2, [pc, #28]	; (80087d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80087b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4a06      	ldr	r2, [pc, #24]	; (80087d4 <vApplicationGetTimerTaskMemory+0x30>)
 80087ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	20000608 	.word	0x20000608
 80087d4:	200006b0 	.word	0x200006b0

080087d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f103 0208 	add.w	r2, r3, #8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f103 0208 	add.w	r2, r3, #8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f103 0208 	add.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008890:	d103      	bne.n	800889a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e00c      	b.n	80088b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3308      	adds	r3, #8
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <vListInsert+0x2e>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d2f6      	bcs.n	80088a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	601a      	str	r2, [r3, #0]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6892      	ldr	r2, [r2, #8]
 8008902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6852      	ldr	r2, [r2, #4]
 800890c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d103      	bne.n	8008920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1e5a      	subs	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10a      	bne.n	800896a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008966:	bf00      	nop
 8008968:	e7fe      	b.n	8008968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800896a:	f002 f8eb 	bl	800ab44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	441a      	add	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899a:	3b01      	subs	r3, #1
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	22ff      	movs	r2, #255	; 0xff
 80089b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d114      	bne.n	80089ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01a      	beq.n	80089fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3310      	adds	r3, #16
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 f99b 	bl	8009d08 <xTaskRemoveFromEventList>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d012      	beq.n	80089fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <xQueueGenericReset+0xcc>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	e009      	b.n	80089fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3310      	adds	r3, #16
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff fef2 	bl	80087d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3324      	adds	r3, #36	; 0x24
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff feed 	bl	80087d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f002 f8d1 	bl	800aba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a02:	2301      	movs	r3, #1
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08e      	sub	sp, #56	; 0x38
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a36:	bf00      	nop
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <xQueueGenericCreateStatic+0x52>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <xQueueGenericCreateStatic+0x56>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericCreateStatic+0x58>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	623b      	str	r3, [r7, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <xQueueGenericCreateStatic+0x7e>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <xQueueGenericCreateStatic+0x82>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <xQueueGenericCreateStatic+0x84>
 8008a92:	2300      	movs	r3, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	61fb      	str	r3, [r7, #28]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aae:	2350      	movs	r3, #80	; 0x50
 8008ab0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b50      	cmp	r3, #80	; 0x50
 8008ab6:	d00a      	beq.n	8008ace <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	61bb      	str	r3, [r7, #24]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ace:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00d      	beq.n	8008af6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ae2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	68b9      	ldr	r1, [r7, #8]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 f805 	bl	8008b00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3730      	adds	r7, #48	; 0x30
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d103      	bne.n	8008b1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	e002      	b.n	8008b22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b2e:	2101      	movs	r1, #1
 8008b30:	69b8      	ldr	r0, [r7, #24]
 8008b32:	f7ff ff05 	bl	8008940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08e      	sub	sp, #56	; 0x38
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b56:	2300      	movs	r3, #0
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10a      	bne.n	8008b7a <xQueueGenericSend+0x32>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d103      	bne.n	8008b88 <xQueueGenericSend+0x40>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d101      	bne.n	8008b8c <xQueueGenericSend+0x44>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e000      	b.n	8008b8e <xQueueGenericSend+0x46>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10a      	bne.n	8008ba8 <xQueueGenericSend+0x60>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d103      	bne.n	8008bb6 <xQueueGenericSend+0x6e>
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <xQueueGenericSend+0x72>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <xQueueGenericSend+0x74>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	623b      	str	r3, [r7, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bd6:	f001 fa59 	bl	800a08c <xTaskGetSchedulerState>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <xQueueGenericSend+0x9e>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <xQueueGenericSend+0xa2>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <xQueueGenericSend+0xa4>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <xQueueGenericSend+0xbe>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	61fb      	str	r3, [r7, #28]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c06:	f001 ff9d 	bl	800ab44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d302      	bcc.n	8008c1c <xQueueGenericSend+0xd4>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d129      	bne.n	8008c70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c22:	f000 fa0b 	bl	800903c <prvCopyDataToQueue>
 8008c26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	3324      	adds	r3, #36	; 0x24
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 f867 	bl	8009d08 <xTaskRemoveFromEventList>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d013      	beq.n	8008c68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c40:	4b3f      	ldr	r3, [pc, #252]	; (8008d40 <xQueueGenericSend+0x1f8>)
 8008c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	e00a      	b.n	8008c68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b39      	ldr	r3, [pc, #228]	; (8008d40 <xQueueGenericSend+0x1f8>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c68:	f001 ff9c 	bl	800aba4 <vPortExitCritical>
				return pdPASS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e063      	b.n	8008d38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c76:	f001 ff95 	bl	800aba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e05c      	b.n	8008d38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c84:	f107 0314 	add.w	r3, r7, #20
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 f8a1 	bl	8009dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c92:	f001 ff87 	bl	800aba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c96:	f000 fe0d 	bl	80098b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c9a:	f001 ff53 	bl	800ab44 <vPortEnterCritical>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008caa:	d103      	bne.n	8008cb4 <xQueueGenericSend+0x16c>
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cba:	b25b      	sxtb	r3, r3
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc0:	d103      	bne.n	8008cca <xQueueGenericSend+0x182>
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cca:	f001 ff6b 	bl	800aba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cce:	1d3a      	adds	r2, r7, #4
 8008cd0:	f107 0314 	add.w	r3, r7, #20
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 f890 	bl	8009dfc <xTaskCheckForTimeOut>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d124      	bne.n	8008d2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce4:	f000 faa2 	bl	800922c <prvIsQueueFull>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d018      	beq.n	8008d20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	3310      	adds	r3, #16
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 ffb6 	bl	8009c68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfe:	f000 fa2d 	bl	800915c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d02:	f000 fde5 	bl	80098d0 <xTaskResumeAll>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f af7c 	bne.w	8008c06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d0e:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <xQueueGenericSend+0x1f8>)
 8008d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	e772      	b.n	8008c06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d22:	f000 fa1b 	bl	800915c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d26:	f000 fdd3 	bl	80098d0 <xTaskResumeAll>
 8008d2a:	e76c      	b.n	8008c06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d2e:	f000 fa15 	bl	800915c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d32:	f000 fdcd 	bl	80098d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3738      	adds	r7, #56	; 0x38
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b090      	sub	sp, #64	; 0x40
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <xQueueGenericSendFromISR+0x3c>
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <xQueueGenericSendFromISR+0x40>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <xQueueGenericSendFromISR+0x42>
 8008d84:	2300      	movs	r3, #0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d103      	bne.n	8008dae <xQueueGenericSendFromISR+0x6a>
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d101      	bne.n	8008db2 <xQueueGenericSendFromISR+0x6e>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <xQueueGenericSendFromISR+0x70>
 8008db2:	2300      	movs	r3, #0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	623b      	str	r3, [r7, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dce:	f001 ff9b 	bl	800ad08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	61fa      	str	r2, [r7, #28]
 8008de8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008dea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d302      	bcc.n	8008e00 <xQueueGenericSendFromISR+0xbc>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d12f      	bne.n	8008e60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e16:	f000 f911 	bl	800903c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e22:	d112      	bne.n	8008e4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d016      	beq.n	8008e5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	3324      	adds	r3, #36	; 0x24
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 ff69 	bl	8009d08 <xTaskRemoveFromEventList>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00e      	beq.n	8008e5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e007      	b.n	8008e5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	b25a      	sxtb	r2, r3
 8008e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008e5e:	e001      	b.n	8008e64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3740      	adds	r7, #64	; 0x40
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b08c      	sub	sp, #48	; 0x30
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <xQueueReceive+0x30>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	623b      	str	r3, [r7, #32]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d103      	bne.n	8008eba <xQueueReceive+0x3e>
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <xQueueReceive+0x42>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <xQueueReceive+0x44>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xQueueReceive+0x5e>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	61fb      	str	r3, [r7, #28]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008eda:	f001 f8d7 	bl	800a08c <xTaskGetSchedulerState>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <xQueueReceive+0x6e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <xQueueReceive+0x72>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e000      	b.n	8008ef0 <xQueueReceive+0x74>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xQueueReceive+0x8e>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	61bb      	str	r3, [r7, #24]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f0a:	f001 fe1b 	bl	800ab44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d01f      	beq.n	8008f5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f1e:	f000 f8f7 	bl	8009110 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	1e5a      	subs	r2, r3, #1
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00f      	beq.n	8008f52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	3310      	adds	r3, #16
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fee6 	bl	8009d08 <xTaskRemoveFromEventList>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f42:	4b3d      	ldr	r3, [pc, #244]	; (8009038 <xQueueReceive+0x1bc>)
 8008f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f52:	f001 fe27 	bl	800aba4 <vPortExitCritical>
				return pdPASS;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e069      	b.n	800902e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d103      	bne.n	8008f68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f60:	f001 fe20 	bl	800aba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e062      	b.n	800902e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f6e:	f107 0310 	add.w	r3, r7, #16
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 ff2c 	bl	8009dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f7c:	f001 fe12 	bl	800aba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f80:	f000 fc98 	bl	80098b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f84:	f001 fdde 	bl	800ab44 <vPortEnterCritical>
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f94:	d103      	bne.n	8008f9e <xQueueReceive+0x122>
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fa4:	b25b      	sxtb	r3, r3
 8008fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008faa:	d103      	bne.n	8008fb4 <xQueueReceive+0x138>
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fb4:	f001 fdf6 	bl	800aba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fb8:	1d3a      	adds	r2, r7, #4
 8008fba:	f107 0310 	add.w	r3, r7, #16
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 ff1b 	bl	8009dfc <xTaskCheckForTimeOut>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d123      	bne.n	8009014 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fce:	f000 f917 	bl	8009200 <prvIsQueueEmpty>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d017      	beq.n	8009008 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	3324      	adds	r3, #36	; 0x24
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fe41 	bl	8009c68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fe8:	f000 f8b8 	bl	800915c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fec:	f000 fc70 	bl	80098d0 <xTaskResumeAll>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d189      	bne.n	8008f0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <xQueueReceive+0x1bc>)
 8008ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	e780      	b.n	8008f0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800900a:	f000 f8a7 	bl	800915c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800900e:	f000 fc5f 	bl	80098d0 <xTaskResumeAll>
 8009012:	e77a      	b.n	8008f0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009016:	f000 f8a1 	bl	800915c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800901a:	f000 fc59 	bl	80098d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800901e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009020:	f000 f8ee 	bl	8009200 <prvIsQueueEmpty>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	f43f af6f 	beq.w	8008f0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800902c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800902e:	4618      	mov	r0, r3
 8009030:	3730      	adds	r7, #48	; 0x30
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	e000ed04 	.word	0xe000ed04

0800903c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10d      	bne.n	8009076 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d14d      	bne.n	80090fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f82e 	bl	800a0c8 <xTaskPriorityDisinherit>
 800906c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	e043      	b.n	80090fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d119      	bne.n	80090b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6858      	ldr	r0, [r3, #4]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	461a      	mov	r2, r3
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	f002 ff98 	bl	800bfbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d32b      	bcc.n	80090fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]
 80090ae:	e026      	b.n	80090fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68d8      	ldr	r0, [r3, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b8:	461a      	mov	r2, r3
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	f002 ff7e 	bl	800bfbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c8:	425b      	negs	r3, r3
 80090ca:	441a      	add	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d207      	bcs.n	80090ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e4:	425b      	negs	r3, r3
 80090e6:	441a      	add	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d105      	bne.n	80090fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009106:	697b      	ldr	r3, [r7, #20]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	d018      	beq.n	8009154 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	441a      	add	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	429a      	cmp	r2, r3
 800913a:	d303      	bcc.n	8009144 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68d9      	ldr	r1, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	461a      	mov	r2, r3
 800914e:	6838      	ldr	r0, [r7, #0]
 8009150:	f002 ff34 	bl	800bfbc <memcpy>
	}
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009164:	f001 fcee 	bl	800ab44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800916e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009170:	e011      	b.n	8009196 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	2b00      	cmp	r3, #0
 8009178:	d012      	beq.n	80091a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3324      	adds	r3, #36	; 0x24
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fdc2 	bl	8009d08 <xTaskRemoveFromEventList>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800918a:	f000 fe99 	bl	8009ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	3b01      	subs	r3, #1
 8009192:	b2db      	uxtb	r3, r3
 8009194:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dce9      	bgt.n	8009172 <prvUnlockQueue+0x16>
 800919e:	e000      	b.n	80091a2 <prvUnlockQueue+0x46>
					break;
 80091a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	22ff      	movs	r2, #255	; 0xff
 80091a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091aa:	f001 fcfb 	bl	800aba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091ae:	f001 fcc9 	bl	800ab44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ba:	e011      	b.n	80091e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d012      	beq.n	80091ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3310      	adds	r3, #16
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fd9d 	bl	8009d08 <xTaskRemoveFromEventList>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091d4:	f000 fe74 	bl	8009ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	3b01      	subs	r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dce9      	bgt.n	80091bc <prvUnlockQueue+0x60>
 80091e8:	e000      	b.n	80091ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	22ff      	movs	r2, #255	; 0xff
 80091f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091f4:	f001 fcd6 	bl	800aba4 <vPortExitCritical>
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009208:	f001 fc9c 	bl	800ab44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009214:	2301      	movs	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e001      	b.n	800921e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800921e:	f001 fcc1 	bl	800aba4 <vPortExitCritical>

	return xReturn;
 8009222:	68fb      	ldr	r3, [r7, #12]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009234:	f001 fc86 	bl	800ab44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	429a      	cmp	r2, r3
 8009242:	d102      	bne.n	800924a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009244:	2301      	movs	r3, #1
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e001      	b.n	800924e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800924a:	2300      	movs	r3, #0
 800924c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800924e:	f001 fca9 	bl	800aba4 <vPortExitCritical>

	return xReturn;
 8009252:	68fb      	ldr	r3, [r7, #12]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	e014      	b.n	8009296 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800926c:	4a0f      	ldr	r2, [pc, #60]	; (80092ac <vQueueAddToRegistry+0x50>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10b      	bne.n	8009290 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009278:	490c      	ldr	r1, [pc, #48]	; (80092ac <vQueueAddToRegistry+0x50>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009282:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <vQueueAddToRegistry+0x50>)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800928e:	e006      	b.n	800929e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b07      	cmp	r3, #7
 800929a:	d9e7      	bls.n	800926c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	20000ab0 	.word	0x20000ab0

080092b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092c0:	f001 fc40 	bl	800ab44 <vPortEnterCritical>
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ca:	b25b      	sxtb	r3, r3
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092d0:	d103      	bne.n	80092da <vQueueWaitForMessageRestricted+0x2a>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092e0:	b25b      	sxtb	r3, r3
 80092e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092e6:	d103      	bne.n	80092f0 <vQueueWaitForMessageRestricted+0x40>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092f0:	f001 fc58 	bl	800aba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d106      	bne.n	800930a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	68b9      	ldr	r1, [r7, #8]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fcd3 	bl	8009cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	f7ff ff26 	bl	800915c <prvUnlockQueue>
	}
 8009310:	bf00      	nop
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b08e      	sub	sp, #56	; 0x38
 800931c:	af04      	add	r7, sp, #16
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xTaskCreateStatic+0x2a>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	623b      	str	r3, [r7, #32]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xTaskCreateStatic+0x46>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	61fb      	str	r3, [r7, #28]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800935e:	23a8      	movs	r3, #168	; 0xa8
 8009360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2ba8      	cmp	r3, #168	; 0xa8
 8009366:	d00a      	beq.n	800937e <xTaskCreateStatic+0x66>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	61bb      	str	r3, [r7, #24]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800937e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01e      	beq.n	80093c4 <xTaskCreateStatic+0xac>
 8009386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01b      	beq.n	80093c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009394:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	2202      	movs	r2, #2
 800939a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800939e:	2300      	movs	r3, #0
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f850 	bl	800945c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093be:	f000 f8f3 	bl	80095a8 <prvAddNewTaskToReadyList>
 80093c2:	e001      	b.n	80093c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093c8:	697b      	ldr	r3, [r7, #20]
	}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3728      	adds	r7, #40	; 0x28
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b08c      	sub	sp, #48	; 0x30
 80093d6:	af04      	add	r7, sp, #16
 80093d8:	60f8      	str	r0, [r7, #12]
 80093da:	60b9      	str	r1, [r7, #8]
 80093dc:	603b      	str	r3, [r7, #0]
 80093de:	4613      	mov	r3, r2
 80093e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f001 fcce 	bl	800ad88 <pvPortMalloc>
 80093ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00e      	beq.n	8009412 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093f4:	20a8      	movs	r0, #168	; 0xa8
 80093f6:	f001 fcc7 	bl	800ad88 <pvPortMalloc>
 80093fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
 8009408:	e005      	b.n	8009416 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800940a:	6978      	ldr	r0, [r7, #20]
 800940c:	f001 fd88 	bl	800af20 <vPortFree>
 8009410:	e001      	b.n	8009416 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009424:	88fa      	ldrh	r2, [r7, #6]
 8009426:	2300      	movs	r3, #0
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f80e 	bl	800945c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009440:	69f8      	ldr	r0, [r7, #28]
 8009442:	f000 f8b1 	bl	80095a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009446:	2301      	movs	r3, #1
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	e002      	b.n	8009452 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800944c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009452:	69bb      	ldr	r3, [r7, #24]
	}
 8009454:	4618      	mov	r0, r3
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	461a      	mov	r2, r3
 8009474:	21a5      	movs	r1, #165	; 0xa5
 8009476:	f002 fcc3 	bl	800be00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009484:	3b01      	subs	r3, #1
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f023 0307 	bic.w	r3, r3, #7
 8009492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	617b      	str	r3, [r7, #20]
}
 80094b0:	bf00      	nop
 80094b2:	e7fe      	b.n	80094b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d01f      	beq.n	80094fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]
 80094be:	e012      	b.n	80094e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	4413      	add	r3, r2
 80094c6:	7819      	ldrb	r1, [r3, #0]
 80094c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	3334      	adds	r3, #52	; 0x34
 80094d0:	460a      	mov	r2, r1
 80094d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d006      	beq.n	80094ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	3301      	adds	r3, #1
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d9e9      	bls.n	80094c0 <prvInitialiseNewTask+0x64>
 80094ec:	e000      	b.n	80094f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80094ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094f8:	e003      	b.n	8009502 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b37      	cmp	r3, #55	; 0x37
 8009506:	d901      	bls.n	800950c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009508:	2337      	movs	r3, #55	; 0x37
 800950a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009516:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	2200      	movs	r2, #0
 800951c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	3304      	adds	r3, #4
 8009522:	4618      	mov	r0, r3
 8009524:	f7ff f978 	bl	8008818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	3318      	adds	r3, #24
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff f973 	bl	8008818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009546:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	2200      	movs	r2, #0
 8009554:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	3354      	adds	r3, #84	; 0x54
 800955c:	224c      	movs	r2, #76	; 0x4c
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f002 fc4d 	bl	800be00 <memset>
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	4a0c      	ldr	r2, [pc, #48]	; (800959c <prvInitialiseNewTask+0x140>)
 800956a:	659a      	str	r2, [r3, #88]	; 0x58
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	4a0c      	ldr	r2, [pc, #48]	; (80095a0 <prvInitialiseNewTask+0x144>)
 8009570:	65da      	str	r2, [r3, #92]	; 0x5c
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	4a0b      	ldr	r2, [pc, #44]	; (80095a4 <prvInitialiseNewTask+0x148>)
 8009576:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	69b8      	ldr	r0, [r7, #24]
 800957e:	f001 f9b3 	bl	800a8e8 <pxPortInitialiseStack>
 8009582:	4602      	mov	r2, r0
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800958e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009592:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009594:	bf00      	nop
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20010434 	.word	0x20010434
 80095a0:	2001049c 	.word	0x2001049c
 80095a4:	20010504 	.word	0x20010504

080095a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095b0:	f001 fac8 	bl	800ab44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095b4:	4b2d      	ldr	r3, [pc, #180]	; (800966c <prvAddNewTaskToReadyList+0xc4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	4a2c      	ldr	r2, [pc, #176]	; (800966c <prvAddNewTaskToReadyList+0xc4>)
 80095bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095be:	4b2c      	ldr	r3, [pc, #176]	; (8009670 <prvAddNewTaskToReadyList+0xc8>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095c6:	4a2a      	ldr	r2, [pc, #168]	; (8009670 <prvAddNewTaskToReadyList+0xc8>)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095cc:	4b27      	ldr	r3, [pc, #156]	; (800966c <prvAddNewTaskToReadyList+0xc4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d110      	bne.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095d4:	f000 fc98 	bl	8009f08 <prvInitialiseTaskLists>
 80095d8:	e00d      	b.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095da:	4b26      	ldr	r3, [pc, #152]	; (8009674 <prvAddNewTaskToReadyList+0xcc>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095e2:	4b23      	ldr	r3, [pc, #140]	; (8009670 <prvAddNewTaskToReadyList+0xc8>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d802      	bhi.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095f0:	4a1f      	ldr	r2, [pc, #124]	; (8009670 <prvAddNewTaskToReadyList+0xc8>)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095f6:	4b20      	ldr	r3, [pc, #128]	; (8009678 <prvAddNewTaskToReadyList+0xd0>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	4a1e      	ldr	r2, [pc, #120]	; (8009678 <prvAddNewTaskToReadyList+0xd0>)
 80095fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009600:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <prvAddNewTaskToReadyList+0xd0>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800960c:	4b1b      	ldr	r3, [pc, #108]	; (800967c <prvAddNewTaskToReadyList+0xd4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	429a      	cmp	r2, r3
 8009612:	d903      	bls.n	800961c <prvAddNewTaskToReadyList+0x74>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	4a18      	ldr	r2, [pc, #96]	; (800967c <prvAddNewTaskToReadyList+0xd4>)
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4a15      	ldr	r2, [pc, #84]	; (8009680 <prvAddNewTaskToReadyList+0xd8>)
 800962a:	441a      	add	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	4619      	mov	r1, r3
 8009632:	4610      	mov	r0, r2
 8009634:	f7ff f8fd 	bl	8008832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009638:	f001 fab4 	bl	800aba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800963c:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <prvAddNewTaskToReadyList+0xcc>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00e      	beq.n	8009662 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <prvAddNewTaskToReadyList+0xc8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	429a      	cmp	r2, r3
 8009650:	d207      	bcs.n	8009662 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009652:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <prvAddNewTaskToReadyList+0xdc>)
 8009654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009658:	601a      	str	r2, [r3, #0]
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000fc4 	.word	0x20000fc4
 8009670:	20000af0 	.word	0x20000af0
 8009674:	20000fd0 	.word	0x20000fd0
 8009678:	20000fe0 	.word	0x20000fe0
 800967c:	20000fcc 	.word	0x20000fcc
 8009680:	20000af4 	.word	0x20000af4
 8009684:	e000ed04 	.word	0xe000ed04

08009688 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009690:	f001 fa58 	bl	800ab44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d102      	bne.n	80096a0 <vTaskDelete+0x18>
 800969a:	4b2c      	ldr	r3, [pc, #176]	; (800974c <vTaskDelete+0xc4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	e000      	b.n	80096a2 <vTaskDelete+0x1a>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff f91f 	bl	80088ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3318      	adds	r3, #24
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff f916 	bl	80088ec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80096c0:	4b23      	ldr	r3, [pc, #140]	; (8009750 <vTaskDelete+0xc8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3301      	adds	r3, #1
 80096c6:	4a22      	ldr	r2, [pc, #136]	; (8009750 <vTaskDelete+0xc8>)
 80096c8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80096ca:	4b20      	ldr	r3, [pc, #128]	; (800974c <vTaskDelete+0xc4>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d10b      	bne.n	80096ec <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	481e      	ldr	r0, [pc, #120]	; (8009754 <vTaskDelete+0xcc>)
 80096dc:	f7ff f8a9 	bl	8008832 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80096e0:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <vTaskDelete+0xd0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	4a1c      	ldr	r2, [pc, #112]	; (8009758 <vTaskDelete+0xd0>)
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e009      	b.n	8009700 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80096ec:	4b1b      	ldr	r3, [pc, #108]	; (800975c <vTaskDelete+0xd4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	4a1a      	ldr	r2, [pc, #104]	; (800975c <vTaskDelete+0xd4>)
 80096f4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fc74 	bl	8009fe4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80096fc:	f000 fca6 	bl	800a04c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009700:	f001 fa50 	bl	800aba4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009704:	4b16      	ldr	r3, [pc, #88]	; (8009760 <vTaskDelete+0xd8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01b      	beq.n	8009744 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800970c:	4b0f      	ldr	r3, [pc, #60]	; (800974c <vTaskDelete+0xc4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d116      	bne.n	8009744 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009716:	4b13      	ldr	r3, [pc, #76]	; (8009764 <vTaskDelete+0xdc>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <vTaskDelete+0xac>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	60bb      	str	r3, [r7, #8]
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <vTaskDelete+0xe0>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000af0 	.word	0x20000af0
 8009750:	20000fe0 	.word	0x20000fe0
 8009754:	20000f98 	.word	0x20000f98
 8009758:	20000fac 	.word	0x20000fac
 800975c:	20000fc4 	.word	0x20000fc4
 8009760:	20000fd0 	.word	0x20000fd0
 8009764:	20000fec 	.word	0x20000fec
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009774:	2300      	movs	r3, #0
 8009776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d017      	beq.n	80097ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <vTaskDelay+0x60>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <vTaskDelay+0x30>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60bb      	str	r3, [r7, #8]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800979c:	f000 f88a 	bl	80098b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fcfe 	bl	800a1a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097a8:	f000 f892 	bl	80098d0 <xTaskResumeAll>
 80097ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d107      	bne.n	80097c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80097b4:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <vTaskDelay+0x64>)
 80097b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097c4:	bf00      	nop
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000fec 	.word	0x20000fec
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08a      	sub	sp, #40	; 0x28
 80097d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097da:	2300      	movs	r3, #0
 80097dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097e2:	463a      	mov	r2, r7
 80097e4:	1d39      	adds	r1, r7, #4
 80097e6:	f107 0308 	add.w	r3, r7, #8
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe ffc0 	bl	8008770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	9202      	str	r2, [sp, #8]
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	2300      	movs	r3, #0
 8009800:	460a      	mov	r2, r1
 8009802:	4924      	ldr	r1, [pc, #144]	; (8009894 <vTaskStartScheduler+0xc0>)
 8009804:	4824      	ldr	r0, [pc, #144]	; (8009898 <vTaskStartScheduler+0xc4>)
 8009806:	f7ff fd87 	bl	8009318 <xTaskCreateStatic>
 800980a:	4603      	mov	r3, r0
 800980c:	4a23      	ldr	r2, [pc, #140]	; (800989c <vTaskStartScheduler+0xc8>)
 800980e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009810:	4b22      	ldr	r3, [pc, #136]	; (800989c <vTaskStartScheduler+0xc8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009818:	2301      	movs	r3, #1
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e001      	b.n	8009822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d102      	bne.n	800982e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009828:	f000 fd10 	bl	800a24c <xTimerCreateTimerTask>
 800982c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d11b      	bne.n	800986c <vTaskStartScheduler+0x98>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	613b      	str	r3, [r7, #16]
}
 8009846:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <vTaskStartScheduler+0xcc>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3354      	adds	r3, #84	; 0x54
 800984e:	4a15      	ldr	r2, [pc, #84]	; (80098a4 <vTaskStartScheduler+0xd0>)
 8009850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <vTaskStartScheduler+0xd4>)
 8009854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <vTaskStartScheduler+0xd8>)
 800985c:	2201      	movs	r2, #1
 800985e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009860:	4b13      	ldr	r3, [pc, #76]	; (80098b0 <vTaskStartScheduler+0xdc>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009866:	f001 f8cb 	bl	800aa00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800986a:	e00e      	b.n	800988a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009872:	d10a      	bne.n	800988a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <vTaskStartScheduler+0xb4>
}
 800988a:	bf00      	nop
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	0800c088 	.word	0x0800c088
 8009898:	08009ed9 	.word	0x08009ed9
 800989c:	20000fe8 	.word	0x20000fe8
 80098a0:	20000af0 	.word	0x20000af0
 80098a4:	2000005c 	.word	0x2000005c
 80098a8:	20000fe4 	.word	0x20000fe4
 80098ac:	20000fd0 	.word	0x20000fd0
 80098b0:	20000fc8 	.word	0x20000fc8

080098b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098b8:	4b04      	ldr	r3, [pc, #16]	; (80098cc <vTaskSuspendAll+0x18>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	4a03      	ldr	r2, [pc, #12]	; (80098cc <vTaskSuspendAll+0x18>)
 80098c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098c2:	bf00      	nop
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	20000fec 	.word	0x20000fec

080098d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098da:	2300      	movs	r3, #0
 80098dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80098de:	4b42      	ldr	r3, [pc, #264]	; (80099e8 <xTaskResumeAll+0x118>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <xTaskResumeAll+0x2c>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	603b      	str	r3, [r7, #0]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098fc:	f001 f922 	bl	800ab44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009900:	4b39      	ldr	r3, [pc, #228]	; (80099e8 <xTaskResumeAll+0x118>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3b01      	subs	r3, #1
 8009906:	4a38      	ldr	r2, [pc, #224]	; (80099e8 <xTaskResumeAll+0x118>)
 8009908:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800990a:	4b37      	ldr	r3, [pc, #220]	; (80099e8 <xTaskResumeAll+0x118>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d162      	bne.n	80099d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009912:	4b36      	ldr	r3, [pc, #216]	; (80099ec <xTaskResumeAll+0x11c>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d05e      	beq.n	80099d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800991a:	e02f      	b.n	800997c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991c:	4b34      	ldr	r3, [pc, #208]	; (80099f0 <xTaskResumeAll+0x120>)
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3318      	adds	r3, #24
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe ffdf 	bl	80088ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3304      	adds	r3, #4
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe ffda 	bl	80088ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993c:	4b2d      	ldr	r3, [pc, #180]	; (80099f4 <xTaskResumeAll+0x124>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d903      	bls.n	800994c <xTaskResumeAll+0x7c>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	4a2a      	ldr	r2, [pc, #168]	; (80099f4 <xTaskResumeAll+0x124>)
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4a27      	ldr	r2, [pc, #156]	; (80099f8 <xTaskResumeAll+0x128>)
 800995a:	441a      	add	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3304      	adds	r3, #4
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7fe ff65 	bl	8008832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996c:	4b23      	ldr	r3, [pc, #140]	; (80099fc <xTaskResumeAll+0x12c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	429a      	cmp	r2, r3
 8009974:	d302      	bcc.n	800997c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009976:	4b22      	ldr	r3, [pc, #136]	; (8009a00 <xTaskResumeAll+0x130>)
 8009978:	2201      	movs	r2, #1
 800997a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800997c:	4b1c      	ldr	r3, [pc, #112]	; (80099f0 <xTaskResumeAll+0x120>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1cb      	bne.n	800991c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800998a:	f000 fb5f 	bl	800a04c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800998e:	4b1d      	ldr	r3, [pc, #116]	; (8009a04 <xTaskResumeAll+0x134>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d010      	beq.n	80099bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800999a:	f000 f847 	bl	8009a2c <xTaskIncrementTick>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80099a4:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <xTaskResumeAll+0x130>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1f1      	bne.n	800999a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80099b6:	4b13      	ldr	r3, [pc, #76]	; (8009a04 <xTaskResumeAll+0x134>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <xTaskResumeAll+0x130>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099c4:	2301      	movs	r3, #1
 80099c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099c8:	4b0f      	ldr	r3, [pc, #60]	; (8009a08 <xTaskResumeAll+0x138>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099d8:	f001 f8e4 	bl	800aba4 <vPortExitCritical>

	return xAlreadyYielded;
 80099dc:	68bb      	ldr	r3, [r7, #8]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20000fec 	.word	0x20000fec
 80099ec:	20000fc4 	.word	0x20000fc4
 80099f0:	20000f84 	.word	0x20000f84
 80099f4:	20000fcc 	.word	0x20000fcc
 80099f8:	20000af4 	.word	0x20000af4
 80099fc:	20000af0 	.word	0x20000af0
 8009a00:	20000fd8 	.word	0x20000fd8
 8009a04:	20000fd4 	.word	0x20000fd4
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a12:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <xTaskGetTickCount+0x1c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a18:	687b      	ldr	r3, [r7, #4]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000fc8 	.word	0x20000fc8

08009a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a32:	2300      	movs	r3, #0
 8009a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a36:	4b4f      	ldr	r3, [pc, #316]	; (8009b74 <xTaskIncrementTick+0x148>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f040 808f 	bne.w	8009b5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a40:	4b4d      	ldr	r3, [pc, #308]	; (8009b78 <xTaskIncrementTick+0x14c>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3301      	adds	r3, #1
 8009a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a48:	4a4b      	ldr	r2, [pc, #300]	; (8009b78 <xTaskIncrementTick+0x14c>)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d120      	bne.n	8009a96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a54:	4b49      	ldr	r3, [pc, #292]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <xTaskIncrementTick+0x48>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	603b      	str	r3, [r7, #0]
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <xTaskIncrementTick+0x46>
 8009a74:	4b41      	ldr	r3, [pc, #260]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	4b41      	ldr	r3, [pc, #260]	; (8009b80 <xTaskIncrementTick+0x154>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a3f      	ldr	r2, [pc, #252]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009a80:	6013      	str	r3, [r2, #0]
 8009a82:	4a3f      	ldr	r2, [pc, #252]	; (8009b80 <xTaskIncrementTick+0x154>)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	4b3e      	ldr	r3, [pc, #248]	; (8009b84 <xTaskIncrementTick+0x158>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	4a3d      	ldr	r2, [pc, #244]	; (8009b84 <xTaskIncrementTick+0x158>)
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	f000 fadb 	bl	800a04c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a96:	4b3c      	ldr	r3, [pc, #240]	; (8009b88 <xTaskIncrementTick+0x15c>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d349      	bcc.n	8009b34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aa0:	4b36      	ldr	r3, [pc, #216]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d104      	bne.n	8009ab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aaa:	4b37      	ldr	r3, [pc, #220]	; (8009b88 <xTaskIncrementTick+0x15c>)
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab0:	601a      	str	r2, [r3, #0]
					break;
 8009ab2:	e03f      	b.n	8009b34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab4:	4b31      	ldr	r3, [pc, #196]	; (8009b7c <xTaskIncrementTick+0x150>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d203      	bcs.n	8009ad4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009acc:	4a2e      	ldr	r2, [pc, #184]	; (8009b88 <xTaskIncrementTick+0x15c>)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ad2:	e02f      	b.n	8009b34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe ff07 	bl	80088ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	3318      	adds	r3, #24
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fefe 	bl	80088ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af4:	4b25      	ldr	r3, [pc, #148]	; (8009b8c <xTaskIncrementTick+0x160>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d903      	bls.n	8009b04 <xTaskIncrementTick+0xd8>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	4a22      	ldr	r2, [pc, #136]	; (8009b8c <xTaskIncrementTick+0x160>)
 8009b02:	6013      	str	r3, [r2, #0]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b08:	4613      	mov	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4a1f      	ldr	r2, [pc, #124]	; (8009b90 <xTaskIncrementTick+0x164>)
 8009b12:	441a      	add	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f7fe fe89 	bl	8008832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b24:	4b1b      	ldr	r3, [pc, #108]	; (8009b94 <xTaskIncrementTick+0x168>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d3b8      	bcc.n	8009aa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b32:	e7b5      	b.n	8009aa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b34:	4b17      	ldr	r3, [pc, #92]	; (8009b94 <xTaskIncrementTick+0x168>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3a:	4915      	ldr	r1, [pc, #84]	; (8009b90 <xTaskIncrementTick+0x164>)
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d901      	bls.n	8009b50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b50:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <xTaskIncrementTick+0x16c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d007      	beq.n	8009b68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	e004      	b.n	8009b68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <xTaskIncrementTick+0x170>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <xTaskIncrementTick+0x170>)
 8009b66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b68:	697b      	ldr	r3, [r7, #20]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000fec 	.word	0x20000fec
 8009b78:	20000fc8 	.word	0x20000fc8
 8009b7c:	20000f7c 	.word	0x20000f7c
 8009b80:	20000f80 	.word	0x20000f80
 8009b84:	20000fdc 	.word	0x20000fdc
 8009b88:	20000fe4 	.word	0x20000fe4
 8009b8c:	20000fcc 	.word	0x20000fcc
 8009b90:	20000af4 	.word	0x20000af4
 8009b94:	20000af0 	.word	0x20000af0
 8009b98:	20000fd8 	.word	0x20000fd8
 8009b9c:	20000fd4 	.word	0x20000fd4

08009ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ba6:	4b2a      	ldr	r3, [pc, #168]	; (8009c50 <vTaskSwitchContext+0xb0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bae:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <vTaskSwitchContext+0xb4>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bb4:	e046      	b.n	8009c44 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009bb6:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <vTaskSwitchContext+0xb4>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bbc:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <vTaskSwitchContext+0xb8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	e010      	b.n	8009be6 <vTaskSwitchContext+0x46>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <vTaskSwitchContext+0x40>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	607b      	str	r3, [r7, #4]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <vTaskSwitchContext+0x3e>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	491d      	ldr	r1, [pc, #116]	; (8009c5c <vTaskSwitchContext+0xbc>)
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0e4      	beq.n	8009bc4 <vTaskSwitchContext+0x24>
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4a15      	ldr	r2, [pc, #84]	; (8009c5c <vTaskSwitchContext+0xbc>)
 8009c06:	4413      	add	r3, r2
 8009c08:	60bb      	str	r3, [r7, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	605a      	str	r2, [r3, #4]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d104      	bne.n	8009c2a <vTaskSwitchContext+0x8a>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	605a      	str	r2, [r3, #4]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	4a0b      	ldr	r2, [pc, #44]	; (8009c60 <vTaskSwitchContext+0xc0>)
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <vTaskSwitchContext+0xb8>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <vTaskSwitchContext+0xc0>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3354      	adds	r3, #84	; 0x54
 8009c40:	4a08      	ldr	r2, [pc, #32]	; (8009c64 <vTaskSwitchContext+0xc4>)
 8009c42:	6013      	str	r3, [r2, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20000fec 	.word	0x20000fec
 8009c54:	20000fd8 	.word	0x20000fd8
 8009c58:	20000fcc 	.word	0x20000fcc
 8009c5c:	20000af4 	.word	0x20000af4
 8009c60:	20000af0 	.word	0x20000af0
 8009c64:	2000005c 	.word	0x2000005c

08009c68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	60fb      	str	r3, [r7, #12]
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c8e:	4b07      	ldr	r3, [pc, #28]	; (8009cac <vTaskPlaceOnEventList+0x44>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3318      	adds	r3, #24
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7fe fdef 	bl	800887a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	6838      	ldr	r0, [r7, #0]
 8009ca0:	f000 fa80 	bl	800a1a4 <prvAddCurrentTaskToDelayedList>
}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000af0 	.word	0x20000af0

08009cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	617b      	str	r3, [r7, #20]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	; (8009d04 <vTaskPlaceOnEventListRestricted+0x54>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3318      	adds	r3, #24
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7fe fda6 	bl	8008832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cf0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	68b8      	ldr	r0, [r7, #8]
 8009cf6:	f000 fa55 	bl	800a1a4 <prvAddCurrentTaskToDelayedList>
	}
 8009cfa:	bf00      	nop
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000af0 	.word	0x20000af0

08009d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10a      	bne.n	8009d34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	60fb      	str	r3, [r7, #12]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	3318      	adds	r3, #24
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fdd7 	bl	80088ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d3e:	4b1e      	ldr	r3, [pc, #120]	; (8009db8 <xTaskRemoveFromEventList+0xb0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d11d      	bne.n	8009d82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fe fdce 	bl	80088ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	4b19      	ldr	r3, [pc, #100]	; (8009dbc <xTaskRemoveFromEventList+0xb4>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d903      	bls.n	8009d64 <xTaskRemoveFromEventList+0x5c>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <xTaskRemoveFromEventList+0xb4>)
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4a13      	ldr	r2, [pc, #76]	; (8009dc0 <xTaskRemoveFromEventList+0xb8>)
 8009d72:	441a      	add	r2, r3
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	f7fe fd59 	bl	8008832 <vListInsertEnd>
 8009d80:	e005      	b.n	8009d8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	3318      	adds	r3, #24
 8009d86:	4619      	mov	r1, r3
 8009d88:	480e      	ldr	r0, [pc, #56]	; (8009dc4 <xTaskRemoveFromEventList+0xbc>)
 8009d8a:	f7fe fd52 	bl	8008832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <xTaskRemoveFromEventList+0xc0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d905      	bls.n	8009da8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <xTaskRemoveFromEventList+0xc4>)
 8009da2:	2201      	movs	r2, #1
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e001      	b.n	8009dac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009dac:	697b      	ldr	r3, [r7, #20]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3718      	adds	r7, #24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000fec 	.word	0x20000fec
 8009dbc:	20000fcc 	.word	0x20000fcc
 8009dc0:	20000af4 	.word	0x20000af4
 8009dc4:	20000f84 	.word	0x20000f84
 8009dc8:	20000af0 	.word	0x20000af0
 8009dcc:	20000fd8 	.word	0x20000fd8

08009dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <vTaskInternalSetTimeOutState+0x24>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <vTaskInternalSetTimeOutState+0x28>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	605a      	str	r2, [r3, #4]
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	20000fdc 	.word	0x20000fdc
 8009df8:	20000fc8 	.word	0x20000fc8

08009dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	613b      	str	r3, [r7, #16]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60fb      	str	r3, [r7, #12]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e3e:	f000 fe81 	bl	800ab44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e42:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <xTaskCheckForTimeOut+0xbc>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e5a:	d102      	bne.n	8009e62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	61fb      	str	r3, [r7, #28]
 8009e60:	e023      	b.n	8009eaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <xTaskCheckForTimeOut+0xc0>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d007      	beq.n	8009e7e <xTaskCheckForTimeOut+0x82>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d302      	bcc.n	8009e7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	61fb      	str	r3, [r7, #28]
 8009e7c:	e015      	b.n	8009eaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d20b      	bcs.n	8009ea0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff ff9b 	bl	8009dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	e004      	b.n	8009eaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009eaa:	f000 fe7b 	bl	800aba4 <vPortExitCritical>

	return xReturn;
 8009eae:	69fb      	ldr	r3, [r7, #28]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	20000fc8 	.word	0x20000fc8
 8009ebc:	20000fdc 	.word	0x20000fdc

08009ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ec4:	4b03      	ldr	r3, [pc, #12]	; (8009ed4 <vTaskMissedYield+0x14>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]
}
 8009eca:	bf00      	nop
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	20000fd8 	.word	0x20000fd8

08009ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ee0:	f000 f852 	bl	8009f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <prvIdleTask+0x28>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d9f9      	bls.n	8009ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009eec:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <prvIdleTask+0x2c>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009efc:	e7f0      	b.n	8009ee0 <prvIdleTask+0x8>
 8009efe:	bf00      	nop
 8009f00:	20000af4 	.word	0x20000af4
 8009f04:	e000ed04 	.word	0xe000ed04

08009f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f0e:	2300      	movs	r3, #0
 8009f10:	607b      	str	r3, [r7, #4]
 8009f12:	e00c      	b.n	8009f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4a12      	ldr	r2, [pc, #72]	; (8009f68 <prvInitialiseTaskLists+0x60>)
 8009f20:	4413      	add	r3, r2
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fc58 	bl	80087d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	607b      	str	r3, [r7, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b37      	cmp	r3, #55	; 0x37
 8009f32:	d9ef      	bls.n	8009f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f34:	480d      	ldr	r0, [pc, #52]	; (8009f6c <prvInitialiseTaskLists+0x64>)
 8009f36:	f7fe fc4f 	bl	80087d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f3a:	480d      	ldr	r0, [pc, #52]	; (8009f70 <prvInitialiseTaskLists+0x68>)
 8009f3c:	f7fe fc4c 	bl	80087d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f40:	480c      	ldr	r0, [pc, #48]	; (8009f74 <prvInitialiseTaskLists+0x6c>)
 8009f42:	f7fe fc49 	bl	80087d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f46:	480c      	ldr	r0, [pc, #48]	; (8009f78 <prvInitialiseTaskLists+0x70>)
 8009f48:	f7fe fc46 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f4c:	480b      	ldr	r0, [pc, #44]	; (8009f7c <prvInitialiseTaskLists+0x74>)
 8009f4e:	f7fe fc43 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f52:	4b0b      	ldr	r3, [pc, #44]	; (8009f80 <prvInitialiseTaskLists+0x78>)
 8009f54:	4a05      	ldr	r2, [pc, #20]	; (8009f6c <prvInitialiseTaskLists+0x64>)
 8009f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <prvInitialiseTaskLists+0x7c>)
 8009f5a:	4a05      	ldr	r2, [pc, #20]	; (8009f70 <prvInitialiseTaskLists+0x68>)
 8009f5c:	601a      	str	r2, [r3, #0]
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000af4 	.word	0x20000af4
 8009f6c:	20000f54 	.word	0x20000f54
 8009f70:	20000f68 	.word	0x20000f68
 8009f74:	20000f84 	.word	0x20000f84
 8009f78:	20000f98 	.word	0x20000f98
 8009f7c:	20000fb0 	.word	0x20000fb0
 8009f80:	20000f7c 	.word	0x20000f7c
 8009f84:	20000f80 	.word	0x20000f80

08009f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f8e:	e019      	b.n	8009fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f90:	f000 fdd8 	bl	800ab44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <prvCheckTasksWaitingTermination+0x50>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe fca3 	bl	80088ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fa6:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <prvCheckTasksWaitingTermination+0x54>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	4a0b      	ldr	r2, [pc, #44]	; (8009fdc <prvCheckTasksWaitingTermination+0x54>)
 8009fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <prvCheckTasksWaitingTermination+0x58>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <prvCheckTasksWaitingTermination+0x58>)
 8009fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fba:	f000 fdf3 	bl	800aba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f810 	bl	8009fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fc4:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <prvCheckTasksWaitingTermination+0x58>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e1      	bne.n	8009f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fcc:	bf00      	nop
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000f98 	.word	0x20000f98
 8009fdc:	20000fc4 	.word	0x20000fc4
 8009fe0:	20000fac 	.word	0x20000fac

08009fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3354      	adds	r3, #84	; 0x54
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f001 ff0d 	bl	800be10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d108      	bne.n	800a012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	4618      	mov	r0, r3
 800a006:	f000 ff8b 	bl	800af20 <vPortFree>
				vPortFree( pxTCB );
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 ff88 	bl	800af20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a010:	e018      	b.n	800a044 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d103      	bne.n	800a024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 ff7f 	bl	800af20 <vPortFree>
	}
 800a022:	e00f      	b.n	800a044 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d00a      	beq.n	800a044 <prvDeleteTCB+0x60>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	60fb      	str	r3, [r7, #12]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <prvDeleteTCB+0x5e>
	}
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a052:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <prvResetNextTaskUnblockTime+0x38>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d104      	bne.n	800a066 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a05c:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <prvResetNextTaskUnblockTime+0x3c>)
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a062:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a064:	e008      	b.n	800a078 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a066:	4b07      	ldr	r3, [pc, #28]	; (800a084 <prvResetNextTaskUnblockTime+0x38>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	4a04      	ldr	r2, [pc, #16]	; (800a088 <prvResetNextTaskUnblockTime+0x3c>)
 800a076:	6013      	str	r3, [r2, #0]
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	20000f7c 	.word	0x20000f7c
 800a088:	20000fe4 	.word	0x20000fe4

0800a08c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a092:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <xTaskGetSchedulerState+0x34>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a09a:	2301      	movs	r3, #1
 800a09c:	607b      	str	r3, [r7, #4]
 800a09e:	e008      	b.n	800a0b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0a0:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <xTaskGetSchedulerState+0x38>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d102      	bne.n	800a0ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	607b      	str	r3, [r7, #4]
 800a0ac:	e001      	b.n	800a0b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0b2:	687b      	ldr	r3, [r7, #4]
	}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20000fd0 	.word	0x20000fd0
 800a0c4:	20000fec 	.word	0x20000fec

0800a0c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d056      	beq.n	800a18c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0de:	4b2e      	ldr	r3, [pc, #184]	; (800a198 <xTaskPriorityDisinherit+0xd0>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d00a      	beq.n	800a0fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	60fb      	str	r3, [r7, #12]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	60bb      	str	r3, [r7, #8]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a120:	1e5a      	subs	r2, r3, #1
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a12e:	429a      	cmp	r2, r3
 800a130:	d02c      	beq.n	800a18c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a136:	2b00      	cmp	r3, #0
 800a138:	d128      	bne.n	800a18c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fbd4 	bl	80088ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b0f      	ldr	r3, [pc, #60]	; (800a19c <xTaskPriorityDisinherit+0xd4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <xTaskPriorityDisinherit+0xa4>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a0c      	ldr	r2, [pc, #48]	; (800a19c <xTaskPriorityDisinherit+0xd4>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a09      	ldr	r2, [pc, #36]	; (800a1a0 <xTaskPriorityDisinherit+0xd8>)
 800a17a:	441a      	add	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe fb55 	bl	8008832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a18c:	697b      	ldr	r3, [r7, #20]
	}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20000af0 	.word	0x20000af0
 800a19c:	20000fcc 	.word	0x20000fcc
 800a1a0:	20000af4 	.word	0x20000af4

0800a1a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1ae:	4b21      	ldr	r3, [pc, #132]	; (800a234 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1b4:	4b20      	ldr	r3, [pc, #128]	; (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fb96 	bl	80088ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c6:	d10a      	bne.n	800a1de <prvAddCurrentTaskToDelayedList+0x3a>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d007      	beq.n	800a1de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ce:	4b1a      	ldr	r3, [pc, #104]	; (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4819      	ldr	r0, [pc, #100]	; (800a23c <prvAddCurrentTaskToDelayedList+0x98>)
 800a1d8:	f7fe fb2b 	bl	8008832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1dc:	e026      	b.n	800a22c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1e6:	4b14      	ldr	r3, [pc, #80]	; (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d209      	bcs.n	800a20a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1f6:	4b12      	ldr	r3, [pc, #72]	; (800a240 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4610      	mov	r0, r2
 800a204:	f7fe fb39 	bl	800887a <vListInsert>
}
 800a208:	e010      	b.n	800a22c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a20a:	4b0e      	ldr	r3, [pc, #56]	; (800a244 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f7fe fb2f 	bl	800887a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a21c:	4b0a      	ldr	r3, [pc, #40]	; (800a248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	429a      	cmp	r2, r3
 800a224:	d202      	bcs.n	800a22c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a226:	4a08      	ldr	r2, [pc, #32]	; (800a248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	6013      	str	r3, [r2, #0]
}
 800a22c:	bf00      	nop
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	20000fc8 	.word	0x20000fc8
 800a238:	20000af0 	.word	0x20000af0
 800a23c:	20000fb0 	.word	0x20000fb0
 800a240:	20000f80 	.word	0x20000f80
 800a244:	20000f7c 	.word	0x20000f7c
 800a248:	20000fe4 	.word	0x20000fe4

0800a24c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	; 0x28
 800a250:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a256:	f000 fb07 	bl	800a868 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a25a:	4b1c      	ldr	r3, [pc, #112]	; (800a2cc <xTimerCreateTimerTask+0x80>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d021      	beq.n	800a2a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a26a:	1d3a      	adds	r2, r7, #4
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	f107 030c 	add.w	r3, r7, #12
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe fa95 	bl	80087a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	9202      	str	r2, [sp, #8]
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	2302      	movs	r3, #2
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	2300      	movs	r3, #0
 800a28a:	460a      	mov	r2, r1
 800a28c:	4910      	ldr	r1, [pc, #64]	; (800a2d0 <xTimerCreateTimerTask+0x84>)
 800a28e:	4811      	ldr	r0, [pc, #68]	; (800a2d4 <xTimerCreateTimerTask+0x88>)
 800a290:	f7ff f842 	bl	8009318 <xTaskCreateStatic>
 800a294:	4603      	mov	r3, r0
 800a296:	4a10      	ldr	r2, [pc, #64]	; (800a2d8 <xTimerCreateTimerTask+0x8c>)
 800a298:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a29a:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <xTimerCreateTimerTask+0x8c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	613b      	str	r3, [r7, #16]
}
 800a2be:	bf00      	nop
 800a2c0:	e7fe      	b.n	800a2c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2c2:	697b      	ldr	r3, [r7, #20]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20001020 	.word	0x20001020
 800a2d0:	0800c090 	.word	0x0800c090
 800a2d4:	0800a411 	.word	0x0800a411
 800a2d8:	20001024 	.word	0x20001024

0800a2dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08a      	sub	sp, #40	; 0x28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10a      	bne.n	800a30a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	623b      	str	r3, [r7, #32]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a30a:	4b1a      	ldr	r3, [pc, #104]	; (800a374 <xTimerGenericCommand+0x98>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d02a      	beq.n	800a368 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b05      	cmp	r3, #5
 800a322:	dc18      	bgt.n	800a356 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a324:	f7ff feb2 	bl	800a08c <xTaskGetSchedulerState>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d109      	bne.n	800a342 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a32e:	4b11      	ldr	r3, [pc, #68]	; (800a374 <xTimerGenericCommand+0x98>)
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f107 0110 	add.w	r1, r7, #16
 800a336:	2300      	movs	r3, #0
 800a338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a33a:	f7fe fc05 	bl	8008b48 <xQueueGenericSend>
 800a33e:	6278      	str	r0, [r7, #36]	; 0x24
 800a340:	e012      	b.n	800a368 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a342:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <xTimerGenericCommand+0x98>)
 800a344:	6818      	ldr	r0, [r3, #0]
 800a346:	f107 0110 	add.w	r1, r7, #16
 800a34a:	2300      	movs	r3, #0
 800a34c:	2200      	movs	r2, #0
 800a34e:	f7fe fbfb 	bl	8008b48 <xQueueGenericSend>
 800a352:	6278      	str	r0, [r7, #36]	; 0x24
 800a354:	e008      	b.n	800a368 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a356:	4b07      	ldr	r3, [pc, #28]	; (800a374 <xTimerGenericCommand+0x98>)
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	f107 0110 	add.w	r1, r7, #16
 800a35e:	2300      	movs	r3, #0
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	f7fe fcef 	bl	8008d44 <xQueueGenericSendFromISR>
 800a366:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3728      	adds	r7, #40	; 0x28
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20001020 	.word	0x20001020

0800a378 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a382:	4b22      	ldr	r3, [pc, #136]	; (800a40c <prvProcessExpiredTimer+0x94>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	3304      	adds	r3, #4
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe faab 	bl	80088ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d022      	beq.n	800a3ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	18d1      	adds	r1, r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	683a      	ldr	r2, [r7, #0]
 800a3b0:	6978      	ldr	r0, [r7, #20]
 800a3b2:	f000 f8d1 	bl	800a558 <prvInsertTimerInActiveList>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d01f      	beq.n	800a3fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6978      	ldr	r0, [r7, #20]
 800a3c8:	f7ff ff88 	bl	800a2dc <xTimerGenericCommand>
 800a3cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d113      	bne.n	800a3fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	60fb      	str	r3, [r7, #12]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	6978      	ldr	r0, [r7, #20]
 800a402:	4798      	blx	r3
}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20001018 	.word	0x20001018

0800a410 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a418:	f107 0308 	add.w	r3, r7, #8
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 f857 	bl	800a4d0 <prvGetNextExpireTime>
 800a422:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4619      	mov	r1, r3
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f803 	bl	800a434 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a42e:	f000 f8d5 	bl	800a5dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a432:	e7f1      	b.n	800a418 <prvTimerTask+0x8>

0800a434 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a43e:	f7ff fa39 	bl	80098b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	4618      	mov	r0, r3
 800a448:	f000 f866 	bl	800a518 <prvSampleTimeNow>
 800a44c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d130      	bne.n	800a4b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10a      	bne.n	800a470 <prvProcessTimerOrBlockTask+0x3c>
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d806      	bhi.n	800a470 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a462:	f7ff fa35 	bl	80098d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ff85 	bl	800a378 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a46e:	e024      	b.n	800a4ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <prvProcessTimerOrBlockTask+0x90>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <prvProcessTimerOrBlockTask+0x50>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <prvProcessTimerOrBlockTask+0x52>
 800a484:	2300      	movs	r3, #0
 800a486:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <prvProcessTimerOrBlockTask+0x94>)
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	4619      	mov	r1, r3
 800a496:	f7fe ff0b 	bl	80092b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a49a:	f7ff fa19 	bl	80098d0 <xTaskResumeAll>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4a4:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <prvProcessTimerOrBlockTask+0x98>)
 800a4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	f3bf 8f6f 	isb	sy
}
 800a4b4:	e001      	b.n	800a4ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4b6:	f7ff fa0b 	bl	80098d0 <xTaskResumeAll>
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2000101c 	.word	0x2000101c
 800a4c8:	20001020 	.word	0x20001020
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4d8:	4b0e      	ldr	r3, [pc, #56]	; (800a514 <prvGetNextExpireTime+0x44>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <prvGetNextExpireTime+0x16>
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	e000      	b.n	800a4e8 <prvGetNextExpireTime+0x18>
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4f4:	4b07      	ldr	r3, [pc, #28]	; (800a514 <prvGetNextExpireTime+0x44>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	e001      	b.n	800a504 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a500:	2300      	movs	r3, #0
 800a502:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a504:	68fb      	ldr	r3, [r7, #12]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20001018 	.word	0x20001018

0800a518 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a520:	f7ff fa74 	bl	8009a0c <xTaskGetTickCount>
 800a524:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a526:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <prvSampleTimeNow+0x3c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d205      	bcs.n	800a53c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a530:	f000 f936 	bl	800a7a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	e002      	b.n	800a542 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a542:	4a04      	ldr	r2, [pc, #16]	; (800a554 <prvSampleTimeNow+0x3c>)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20001028 	.word	0x20001028

0800a558 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	607a      	str	r2, [r7, #4]
 800a564:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d812      	bhi.n	800a5a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	1ad2      	subs	r2, r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d302      	bcc.n	800a592 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e01b      	b.n	800a5ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <prvInsertTimerInActiveList+0x7c>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7fe f96c 	bl	800887a <vListInsert>
 800a5a2:	e012      	b.n	800a5ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d206      	bcs.n	800a5ba <prvInsertTimerInActiveList+0x62>
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d302      	bcc.n	800a5ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	e007      	b.n	800a5ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ba:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <prvInsertTimerInActiveList+0x80>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	f7fe f958 	bl	800887a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5ca:	697b      	ldr	r3, [r7, #20]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	2000101c 	.word	0x2000101c
 800a5d8:	20001018 	.word	0x20001018

0800a5dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08e      	sub	sp, #56	; 0x38
 800a5e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5e2:	e0ca      	b.n	800a77a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da18      	bge.n	800a61c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5ea:	1d3b      	adds	r3, r7, #4
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10a      	bne.n	800a60c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	61fb      	str	r3, [r7, #28]
}
 800a608:	bf00      	nop
 800a60a:	e7fe      	b.n	800a60a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a612:	6850      	ldr	r0, [r2, #4]
 800a614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a616:	6892      	ldr	r2, [r2, #8]
 800a618:	4611      	mov	r1, r2
 800a61a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f2c0 80ab 	blt.w	800a77a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d004      	beq.n	800a63a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	3304      	adds	r3, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe f959 	bl	80088ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a63a:	463b      	mov	r3, r7
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff ff6b 	bl	800a518 <prvSampleTimeNow>
 800a642:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b09      	cmp	r3, #9
 800a648:	f200 8096 	bhi.w	800a778 <prvProcessReceivedCommands+0x19c>
 800a64c:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <prvProcessReceivedCommands+0x78>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a67d 	.word	0x0800a67d
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a67d 	.word	0x0800a67d
 800a660:	0800a6f1 	.word	0x0800a6f1
 800a664:	0800a705 	.word	0x0800a705
 800a668:	0800a74f 	.word	0x0800a74f
 800a66c:	0800a67d 	.word	0x0800a67d
 800a670:	0800a67d 	.word	0x0800a67d
 800a674:	0800a6f1 	.word	0x0800a6f1
 800a678:	0800a705 	.word	0x0800a705
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	b2da      	uxtb	r2, r3
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	18d1      	adds	r1, r2, r3
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a69c:	f7ff ff5c 	bl	800a558 <prvInsertTimerInActiveList>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d069      	beq.n	800a77a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d05e      	beq.n	800a77a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	441a      	add	r2, r3
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ce:	f7ff fe05 	bl	800a2dc <xTimerGenericCommand>
 800a6d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d14f      	bne.n	800a77a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	61bb      	str	r3, [r7, #24]
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6f6:	f023 0301 	bic.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a702:	e03a      	b.n	800a77a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	b2da      	uxtb	r2, r3
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10a      	bne.n	800a73a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	617b      	str	r3, [r7, #20]
}
 800a736:	bf00      	nop
 800a738:	e7fe      	b.n	800a738 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	699a      	ldr	r2, [r3, #24]
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	18d1      	adds	r1, r2, r3
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a748:	f7ff ff06 	bl	800a558 <prvInsertTimerInActiveList>
					break;
 800a74c:	e015      	b.n	800a77a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d103      	bne.n	800a764 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a75e:	f000 fbdf 	bl	800af20 <vPortFree>
 800a762:	e00a      	b.n	800a77a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76a:	f023 0301 	bic.w	r3, r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a776:	e000      	b.n	800a77a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a778:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a77a:	4b08      	ldr	r3, [pc, #32]	; (800a79c <prvProcessReceivedCommands+0x1c0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	1d39      	adds	r1, r7, #4
 800a780:	2200      	movs	r2, #0
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fb7a 	bl	8008e7c <xQueueReceive>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f47f af2a 	bne.w	800a5e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	3730      	adds	r7, #48	; 0x30
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20001020 	.word	0x20001020

0800a7a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b088      	sub	sp, #32
 800a7a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a6:	e048      	b.n	800a83a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7a8:	4b2d      	ldr	r3, [pc, #180]	; (800a860 <prvSwitchTimerLists+0xc0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b2:	4b2b      	ldr	r3, [pc, #172]	; (800a860 <prvSwitchTimerLists+0xc0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3304      	adds	r3, #4
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fe f893 	bl	80088ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d02e      	beq.n	800a83a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d90e      	bls.n	800a80c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7fa:	4b19      	ldr	r3, [pc, #100]	; (800a860 <prvSwitchTimerLists+0xc0>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3304      	adds	r3, #4
 800a802:	4619      	mov	r1, r3
 800a804:	4610      	mov	r0, r2
 800a806:	f7fe f838 	bl	800887a <vListInsert>
 800a80a:	e016      	b.n	800a83a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a80c:	2300      	movs	r3, #0
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	2100      	movs	r1, #0
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fd60 	bl	800a2dc <xTimerGenericCommand>
 800a81c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10a      	bne.n	800a83a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	603b      	str	r3, [r7, #0]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a83a:	4b09      	ldr	r3, [pc, #36]	; (800a860 <prvSwitchTimerLists+0xc0>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1b1      	bne.n	800a7a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <prvSwitchTimerLists+0xc0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a84a:	4b06      	ldr	r3, [pc, #24]	; (800a864 <prvSwitchTimerLists+0xc4>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a04      	ldr	r2, [pc, #16]	; (800a860 <prvSwitchTimerLists+0xc0>)
 800a850:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a852:	4a04      	ldr	r2, [pc, #16]	; (800a864 <prvSwitchTimerLists+0xc4>)
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	6013      	str	r3, [r2, #0]
}
 800a858:	bf00      	nop
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20001018 	.word	0x20001018
 800a864:	2000101c 	.word	0x2000101c

0800a868 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a86e:	f000 f969 	bl	800ab44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d120      	bne.n	800a8bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a87a:	4814      	ldr	r0, [pc, #80]	; (800a8cc <prvCheckForValidListAndQueue+0x64>)
 800a87c:	f7fd ffac 	bl	80087d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a880:	4813      	ldr	r0, [pc, #76]	; (800a8d0 <prvCheckForValidListAndQueue+0x68>)
 800a882:	f7fd ffa9 	bl	80087d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a886:	4b13      	ldr	r3, [pc, #76]	; (800a8d4 <prvCheckForValidListAndQueue+0x6c>)
 800a888:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <prvCheckForValidListAndQueue+0x64>)
 800a88a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a88c:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <prvCheckForValidListAndQueue+0x70>)
 800a88e:	4a10      	ldr	r2, [pc, #64]	; (800a8d0 <prvCheckForValidListAndQueue+0x68>)
 800a890:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a892:	2300      	movs	r3, #0
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <prvCheckForValidListAndQueue+0x74>)
 800a898:	4a11      	ldr	r2, [pc, #68]	; (800a8e0 <prvCheckForValidListAndQueue+0x78>)
 800a89a:	2110      	movs	r1, #16
 800a89c:	200a      	movs	r0, #10
 800a89e:	f7fe f8b7 	bl	8008a10 <xQueueGenericCreateStatic>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	4a08      	ldr	r2, [pc, #32]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a8a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8a8:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8b0:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <prvCheckForValidListAndQueue+0x60>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	490b      	ldr	r1, [pc, #44]	; (800a8e4 <prvCheckForValidListAndQueue+0x7c>)
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fcd0 	bl	800925c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8bc:	f000 f972 	bl	800aba4 <vPortExitCritical>
}
 800a8c0:	bf00      	nop
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20001020 	.word	0x20001020
 800a8cc:	20000ff0 	.word	0x20000ff0
 800a8d0:	20001004 	.word	0x20001004
 800a8d4:	20001018 	.word	0x20001018
 800a8d8:	2000101c 	.word	0x2000101c
 800a8dc:	200010cc 	.word	0x200010cc
 800a8e0:	2000102c 	.word	0x2000102c
 800a8e4:	0800c098 	.word	0x0800c098

0800a8e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3b04      	subs	r3, #4
 800a8f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3b04      	subs	r3, #4
 800a906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f023 0201 	bic.w	r2, r3, #1
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3b04      	subs	r3, #4
 800a916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a918:	4a0c      	ldr	r2, [pc, #48]	; (800a94c <pxPortInitialiseStack+0x64>)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3b14      	subs	r3, #20
 800a922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3b04      	subs	r3, #4
 800a92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f06f 0202 	mvn.w	r2, #2
 800a936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3b20      	subs	r3, #32
 800a93c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a93e:	68fb      	ldr	r3, [r7, #12]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	0800a951 	.word	0x0800a951

0800a950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a95a:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <prvTaskExitError+0x54>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a962:	d00a      	beq.n	800a97a <prvTaskExitError+0x2a>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	60fb      	str	r3, [r7, #12]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <prvTaskExitError+0x28>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	60bb      	str	r3, [r7, #8]
}
 800a98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a98e:	bf00      	nop
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0fc      	beq.n	800a990 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	2000000c 	.word	0x2000000c
	...

0800a9b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <pxCurrentTCBConst2>)
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	6808      	ldr	r0, [r1, #0]
 800a9b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ba:	f380 8809 	msr	PSP, r0
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f04f 0000 	mov.w	r0, #0
 800a9c6:	f380 8811 	msr	BASEPRI, r0
 800a9ca:	4770      	bx	lr
 800a9cc:	f3af 8000 	nop.w

0800a9d0 <pxCurrentTCBConst2>:
 800a9d0:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop

0800a9d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9d8:	4808      	ldr	r0, [pc, #32]	; (800a9fc <prvPortStartFirstTask+0x24>)
 800a9da:	6800      	ldr	r0, [r0, #0]
 800a9dc:	6800      	ldr	r0, [r0, #0]
 800a9de:	f380 8808 	msr	MSP, r0
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8814 	msr	CONTROL, r0
 800a9ea:	b662      	cpsie	i
 800a9ec:	b661      	cpsie	f
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	df00      	svc	0
 800a9f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9fa:	bf00      	nop
 800a9fc:	e000ed08 	.word	0xe000ed08

0800aa00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa06:	4b46      	ldr	r3, [pc, #280]	; (800ab20 <xPortStartScheduler+0x120>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a46      	ldr	r2, [pc, #280]	; (800ab24 <xPortStartScheduler+0x124>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d10a      	bne.n	800aa26 <xPortStartScheduler+0x26>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa26:	4b3e      	ldr	r3, [pc, #248]	; (800ab20 <xPortStartScheduler+0x120>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a3f      	ldr	r2, [pc, #252]	; (800ab28 <xPortStartScheduler+0x128>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d10a      	bne.n	800aa46 <xPortStartScheduler+0x46>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	60fb      	str	r3, [r7, #12]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa46:	4b39      	ldr	r3, [pc, #228]	; (800ab2c <xPortStartScheduler+0x12c>)
 800aa48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	22ff      	movs	r2, #255	; 0xff
 800aa56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa60:	78fb      	ldrb	r3, [r7, #3]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4b31      	ldr	r3, [pc, #196]	; (800ab30 <xPortStartScheduler+0x130>)
 800aa6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa6e:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa70:	2207      	movs	r2, #7
 800aa72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa74:	e009      	b.n	800aa8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa76:	4b2f      	ldr	r3, [pc, #188]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	4a2d      	ldr	r2, [pc, #180]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b80      	cmp	r3, #128	; 0x80
 800aa94:	d0ef      	beq.n	800aa76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa96:	4b27      	ldr	r3, [pc, #156]	; (800ab34 <xPortStartScheduler+0x134>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f1c3 0307 	rsb	r3, r3, #7
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d00a      	beq.n	800aab8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	60bb      	str	r3, [r7, #8]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aab8:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <xPortStartScheduler+0x134>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <xPortStartScheduler+0x134>)
 800aac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aac2:	4b1c      	ldr	r3, [pc, #112]	; (800ab34 <xPortStartScheduler+0x134>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaca:	4a1a      	ldr	r2, [pc, #104]	; (800ab34 <xPortStartScheduler+0x134>)
 800aacc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aad6:	4b18      	ldr	r3, [pc, #96]	; (800ab38 <xPortStartScheduler+0x138>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a17      	ldr	r2, [pc, #92]	; (800ab38 <xPortStartScheduler+0x138>)
 800aadc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aae2:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <xPortStartScheduler+0x138>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a14      	ldr	r2, [pc, #80]	; (800ab38 <xPortStartScheduler+0x138>)
 800aae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aaec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aaee:	f000 f8dd 	bl	800acac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aaf2:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <xPortStartScheduler+0x13c>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aaf8:	f000 f8fc 	bl	800acf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aafc:	4b10      	ldr	r3, [pc, #64]	; (800ab40 <xPortStartScheduler+0x140>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a0f      	ldr	r2, [pc, #60]	; (800ab40 <xPortStartScheduler+0x140>)
 800ab02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab08:	f7ff ff66 	bl	800a9d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab0c:	f7ff f848 	bl	8009ba0 <vTaskSwitchContext>
	prvTaskExitError();
 800ab10:	f7ff ff1e 	bl	800a950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	e000ed00 	.word	0xe000ed00
 800ab24:	410fc271 	.word	0x410fc271
 800ab28:	410fc270 	.word	0x410fc270
 800ab2c:	e000e400 	.word	0xe000e400
 800ab30:	2000111c 	.word	0x2000111c
 800ab34:	20001120 	.word	0x20001120
 800ab38:	e000ed20 	.word	0xe000ed20
 800ab3c:	2000000c 	.word	0x2000000c
 800ab40:	e000ef34 	.word	0xe000ef34

0800ab44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	607b      	str	r3, [r7, #4]
}
 800ab5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab5e:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <vPortEnterCritical+0x58>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3301      	adds	r3, #1
 800ab64:	4a0d      	ldr	r2, [pc, #52]	; (800ab9c <vPortEnterCritical+0x58>)
 800ab66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab68:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <vPortEnterCritical+0x58>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d10f      	bne.n	800ab90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <vPortEnterCritical+0x5c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	603b      	str	r3, [r7, #0]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <vPortEnterCritical+0x4a>
	}
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	2000000c 	.word	0x2000000c
 800aba0:	e000ed04 	.word	0xe000ed04

0800aba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abaa:	4b12      	ldr	r3, [pc, #72]	; (800abf4 <vPortExitCritical+0x50>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10a      	bne.n	800abc8 <vPortExitCritical+0x24>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	607b      	str	r3, [r7, #4]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <vPortExitCritical+0x50>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3b01      	subs	r3, #1
 800abce:	4a09      	ldr	r2, [pc, #36]	; (800abf4 <vPortExitCritical+0x50>)
 800abd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abd2:	4b08      	ldr	r3, [pc, #32]	; (800abf4 <vPortExitCritical+0x50>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <vPortExitCritical+0x42>
 800abda:	2300      	movs	r3, #0
 800abdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	f383 8811 	msr	BASEPRI, r3
}
 800abe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800abe6:	bf00      	nop
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	2000000c 	.word	0x2000000c
	...

0800ac00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac00:	f3ef 8009 	mrs	r0, PSP
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <pxCurrentTCBConst>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	f01e 0f10 	tst.w	lr, #16
 800ac10:	bf08      	it	eq
 800ac12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1a:	6010      	str	r0, [r2, #0]
 800ac1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac24:	f380 8811 	msr	BASEPRI, r0
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f7fe ffb6 	bl	8009ba0 <vTaskSwitchContext>
 800ac34:	f04f 0000 	mov.w	r0, #0
 800ac38:	f380 8811 	msr	BASEPRI, r0
 800ac3c:	bc09      	pop	{r0, r3}
 800ac3e:	6819      	ldr	r1, [r3, #0]
 800ac40:	6808      	ldr	r0, [r1, #0]
 800ac42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac46:	f01e 0f10 	tst.w	lr, #16
 800ac4a:	bf08      	it	eq
 800ac4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac50:	f380 8809 	msr	PSP, r0
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	f3af 8000 	nop.w

0800ac60 <pxCurrentTCBConst>:
 800ac60:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop

0800ac68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
}
 800ac80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac82:	f7fe fed3 	bl	8009a2c <xTaskIncrementTick>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac8c:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <xPortSysTickHandler+0x40>)
 800ac8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f383 8811 	msr	BASEPRI, r3
}
 800ac9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	e000ed04 	.word	0xe000ed04

0800acac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acac:	b480      	push	{r7}
 800acae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acb0:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <vPortSetupTimerInterrupt+0x34>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acb6:	4b0b      	ldr	r3, [pc, #44]	; (800ace4 <vPortSetupTimerInterrupt+0x38>)
 800acb8:	2200      	movs	r2, #0
 800acba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <vPortSetupTimerInterrupt+0x3c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0a      	ldr	r2, [pc, #40]	; (800acec <vPortSetupTimerInterrupt+0x40>)
 800acc2:	fba2 2303 	umull	r2, r3, r2, r3
 800acc6:	099b      	lsrs	r3, r3, #6
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <vPortSetupTimerInterrupt+0x44>)
 800acca:	3b01      	subs	r3, #1
 800accc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acce:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <vPortSetupTimerInterrupt+0x34>)
 800acd0:	2207      	movs	r2, #7
 800acd2:	601a      	str	r2, [r3, #0]
}
 800acd4:	bf00      	nop
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	e000e010 	.word	0xe000e010
 800ace4:	e000e018 	.word	0xe000e018
 800ace8:	20000000 	.word	0x20000000
 800acec:	10624dd3 	.word	0x10624dd3
 800acf0:	e000e014 	.word	0xe000e014

0800acf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800acf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad04 <vPortEnableVFP+0x10>
 800acf8:	6801      	ldr	r1, [r0, #0]
 800acfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acfe:	6001      	str	r1, [r0, #0]
 800ad00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad02:	bf00      	nop
 800ad04:	e000ed88 	.word	0xe000ed88

0800ad08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad0e:	f3ef 8305 	mrs	r3, IPSR
 800ad12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b0f      	cmp	r3, #15
 800ad18:	d914      	bls.n	800ad44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad1a:	4a17      	ldr	r2, [pc, #92]	; (800ad78 <vPortValidateInterruptPriority+0x70>)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad24:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <vPortValidateInterruptPriority+0x74>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	7afa      	ldrb	r2, [r7, #11]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d20a      	bcs.n	800ad44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	607b      	str	r3, [r7, #4]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad44:	4b0e      	ldr	r3, [pc, #56]	; (800ad80 <vPortValidateInterruptPriority+0x78>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad4c:	4b0d      	ldr	r3, [pc, #52]	; (800ad84 <vPortValidateInterruptPriority+0x7c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d90a      	bls.n	800ad6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	603b      	str	r3, [r7, #0]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <vPortValidateInterruptPriority+0x60>
	}
 800ad6a:	bf00      	nop
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	e000e3f0 	.word	0xe000e3f0
 800ad7c:	2000111c 	.word	0x2000111c
 800ad80:	e000ed0c 	.word	0xe000ed0c
 800ad84:	20001120 	.word	0x20001120

0800ad88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08a      	sub	sp, #40	; 0x28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad94:	f7fe fd8e 	bl	80098b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad98:	4b5b      	ldr	r3, [pc, #364]	; (800af08 <pvPortMalloc+0x180>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ada0:	f000 f920 	bl	800afe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ada4:	4b59      	ldr	r3, [pc, #356]	; (800af0c <pvPortMalloc+0x184>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	f040 8093 	bne.w	800aed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d01d      	beq.n	800adf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800adb8:	2208      	movs	r2, #8
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4413      	add	r3, r2
 800adbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d014      	beq.n	800adf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f023 0307 	bic.w	r3, r3, #7
 800add0:	3308      	adds	r3, #8
 800add2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <pvPortMalloc+0x6c>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	617b      	str	r3, [r7, #20]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d06e      	beq.n	800aed8 <pvPortMalloc+0x150>
 800adfa:	4b45      	ldr	r3, [pc, #276]	; (800af10 <pvPortMalloc+0x188>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d869      	bhi.n	800aed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae04:	4b43      	ldr	r3, [pc, #268]	; (800af14 <pvPortMalloc+0x18c>)
 800ae06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae08:	4b42      	ldr	r3, [pc, #264]	; (800af14 <pvPortMalloc+0x18c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae0e:	e004      	b.n	800ae1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d903      	bls.n	800ae2c <pvPortMalloc+0xa4>
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d1f1      	bne.n	800ae10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae2c:	4b36      	ldr	r3, [pc, #216]	; (800af08 <pvPortMalloc+0x180>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d050      	beq.n	800aed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2208      	movs	r2, #8
 800ae3c:	4413      	add	r3, r2
 800ae3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	2308      	movs	r3, #8
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d91f      	bls.n	800ae98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	f003 0307 	and.w	r3, r3, #7
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <pvPortMalloc+0xf8>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	613b      	str	r3, [r7, #16]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae92:	69b8      	ldr	r0, [r7, #24]
 800ae94:	f000 f908 	bl	800b0a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae98:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <pvPortMalloc+0x188>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	4a1b      	ldr	r2, [pc, #108]	; (800af10 <pvPortMalloc+0x188>)
 800aea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aea6:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <pvPortMalloc+0x188>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	4b1b      	ldr	r3, [pc, #108]	; (800af18 <pvPortMalloc+0x190>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d203      	bcs.n	800aeba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aeb2:	4b17      	ldr	r3, [pc, #92]	; (800af10 <pvPortMalloc+0x188>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a18      	ldr	r2, [pc, #96]	; (800af18 <pvPortMalloc+0x190>)
 800aeb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	4b13      	ldr	r3, [pc, #76]	; (800af0c <pvPortMalloc+0x184>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aece:	4b13      	ldr	r3, [pc, #76]	; (800af1c <pvPortMalloc+0x194>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	4a11      	ldr	r2, [pc, #68]	; (800af1c <pvPortMalloc+0x194>)
 800aed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aed8:	f7fe fcfa 	bl	80098d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <pvPortMalloc+0x174>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60fb      	str	r3, [r7, #12]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <pvPortMalloc+0x172>
	return pvReturn;
 800aefc:	69fb      	ldr	r3, [r7, #28]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	2001012c 	.word	0x2001012c
 800af0c:	20010140 	.word	0x20010140
 800af10:	20010130 	.word	0x20010130
 800af14:	20010124 	.word	0x20010124
 800af18:	20010134 	.word	0x20010134
 800af1c:	20010138 	.word	0x20010138

0800af20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d04d      	beq.n	800afce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af32:	2308      	movs	r3, #8
 800af34:	425b      	negs	r3, r3
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <vPortFree+0xb8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4013      	ands	r3, r2
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10a      	bne.n	800af64 <vPortFree+0x44>
	__asm volatile
 800af4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af52:	f383 8811 	msr	BASEPRI, r3
 800af56:	f3bf 8f6f 	isb	sy
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	60fb      	str	r3, [r7, #12]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00a      	beq.n	800af82 <vPortFree+0x62>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	60bb      	str	r3, [r7, #8]
}
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	4b14      	ldr	r3, [pc, #80]	; (800afd8 <vPortFree+0xb8>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01e      	beq.n	800afce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d11a      	bne.n	800afce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	4b0e      	ldr	r3, [pc, #56]	; (800afd8 <vPortFree+0xb8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	43db      	mvns	r3, r3
 800afa2:	401a      	ands	r2, r3
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afa8:	f7fe fc84 	bl	80098b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	685a      	ldr	r2, [r3, #4]
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <vPortFree+0xbc>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4413      	add	r3, r2
 800afb6:	4a09      	ldr	r2, [pc, #36]	; (800afdc <vPortFree+0xbc>)
 800afb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afba:	6938      	ldr	r0, [r7, #16]
 800afbc:	f000 f874 	bl	800b0a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <vPortFree+0xc0>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3301      	adds	r3, #1
 800afc6:	4a06      	ldr	r2, [pc, #24]	; (800afe0 <vPortFree+0xc0>)
 800afc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800afca:	f7fe fc81 	bl	80098d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afce:	bf00      	nop
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	20010140 	.word	0x20010140
 800afdc:	20010130 	.word	0x20010130
 800afe0:	2001013c 	.word	0x2001013c

0800afe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800afea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800afee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aff0:	4b27      	ldr	r3, [pc, #156]	; (800b090 <prvHeapInit+0xac>)
 800aff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0307 	and.w	r3, r3, #7
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00c      	beq.n	800b018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3307      	adds	r3, #7
 800b002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 0307 	bic.w	r3, r3, #7
 800b00a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	4a1f      	ldr	r2, [pc, #124]	; (800b090 <prvHeapInit+0xac>)
 800b014:	4413      	add	r3, r2
 800b016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b01c:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <prvHeapInit+0xb0>)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <prvHeapInit+0xb0>)
 800b024:	2200      	movs	r2, #0
 800b026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	4413      	add	r3, r2
 800b02e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b030:	2208      	movs	r2, #8
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	1a9b      	subs	r3, r3, r2
 800b036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 0307 	bic.w	r3, r3, #7
 800b03e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4a15      	ldr	r2, [pc, #84]	; (800b098 <prvHeapInit+0xb4>)
 800b044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b046:	4b14      	ldr	r3, [pc, #80]	; (800b098 <prvHeapInit+0xb4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2200      	movs	r2, #0
 800b04c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b04e:	4b12      	ldr	r3, [pc, #72]	; (800b098 <prvHeapInit+0xb4>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	1ad2      	subs	r2, r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b064:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <prvHeapInit+0xb4>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <prvHeapInit+0xb8>)
 800b072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <prvHeapInit+0xbc>)
 800b07a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b07c:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <prvHeapInit+0xc0>)
 800b07e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	20001124 	.word	0x20001124
 800b094:	20010124 	.word	0x20010124
 800b098:	2001012c 	.word	0x2001012c
 800b09c:	20010134 	.word	0x20010134
 800b0a0:	20010130 	.word	0x20010130
 800b0a4:	20010140 	.word	0x20010140

0800b0a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0b0:	4b28      	ldr	r3, [pc, #160]	; (800b154 <prvInsertBlockIntoFreeList+0xac>)
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	e002      	b.n	800b0bc <prvInsertBlockIntoFreeList+0x14>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d8f7      	bhi.n	800b0b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d108      	bne.n	800b0ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	441a      	add	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	441a      	add	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d118      	bne.n	800b130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	4b15      	ldr	r3, [pc, #84]	; (800b158 <prvInsertBlockIntoFreeList+0xb0>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	429a      	cmp	r2, r3
 800b108:	d00d      	beq.n	800b126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	441a      	add	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e008      	b.n	800b138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b126:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <prvInsertBlockIntoFreeList+0xb0>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e003      	b.n	800b138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d002      	beq.n	800b146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20010124 	.word	0x20010124
 800b158:	2001012c 	.word	0x2001012c

0800b15c <_ZN13FDCANTerminalC1EP19FDCAN_HandleTypeDef>:
 */


#include "Communication.h"

FDCANTerminal::FDCANTerminal(FDCAN_HandleTypeDef* fdcanHandle) : fdcan(fdcanHandle) {}
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <_ZN13FDCANTerminal4initEv>:


void FDCANTerminal::init() {
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b088      	sub	sp, #32
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
    FDCAN_FilterTypeDef sFilterConfig;
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800b182:	2300      	movs	r3, #0
 800b184:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIndex = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800b18a:	2302      	movs	r3, #2
 800b18c:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800b18e:	2301      	movs	r3, #1
 800b190:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterID1 = 0x123; // EXAMPLE ID
 800b192:	f240 1323 	movw	r3, #291	; 0x123
 800b196:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterID2 = 0x7FF; // GENERAL ID
 800b198:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800b19c:	61fb      	str	r3, [r7, #28]
    HAL_FDCAN_ConfigFilter(fdcan, &sFilterConfig);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f107 0208 	add.w	r2, r7, #8
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7f6 fa5b 	bl	8001664 <HAL_FDCAN_ConfigFilter>
    HAL_FDCAN_Start(fdcan);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f6 fab0 	bl	8001718 <HAL_FDCAN_Start>
    HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2101      	movs	r1, #1
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7f6 fad1 	bl	8001768 <HAL_FDCAN_ActivateNotification>
}
 800b1c6:	bf00      	nop
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <_ZN6System4initEv>:
#include <cstdio>
#include "cmsis_os2.h"
#include "stm32g4xx_hal.h"


void System::init(void) {
 800b1d0:	b598      	push	{r3, r4, r7, lr}
 800b1d2:	af00      	add	r7, sp, #0
//    while (true) {
//    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
//    	HAL_Delay(1000);
//    }

	static PowerMonitor* powermonitor = new PowerMonitor(&hspi1);
 800b1d4:	4b16      	ldr	r3, [pc, #88]	; (800b230 <_ZN6System4initEv+0x60>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f3bf 8f5b 	dmb	ish
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bf0c      	ite	eq
 800b1e4:	2301      	moveq	r3, #1
 800b1e6:	2300      	movne	r3, #0
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d018      	beq.n	800b220 <_ZN6System4initEv+0x50>
 800b1ee:	4810      	ldr	r0, [pc, #64]	; (800b230 <_ZN6System4initEv+0x60>)
 800b1f0:	f000 fd18 	bl	800bc24 <__cxa_guard_acquire>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bf14      	ite	ne
 800b1fa:	2301      	movne	r3, #1
 800b1fc:	2300      	moveq	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00d      	beq.n	800b220 <_ZN6System4initEv+0x50>
 800b204:	2040      	movs	r0, #64	; 0x40
 800b206:	f000 fd1c 	bl	800bc42 <_Znwj>
 800b20a:	4603      	mov	r3, r0
 800b20c:	461c      	mov	r4, r3
 800b20e:	4909      	ldr	r1, [pc, #36]	; (800b234 <_ZN6System4initEv+0x64>)
 800b210:	4620      	mov	r0, r4
 800b212:	f000 f833 	bl	800b27c <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef>
 800b216:	4b08      	ldr	r3, [pc, #32]	; (800b238 <_ZN6System4initEv+0x68>)
 800b218:	601c      	str	r4, [r3, #0]
 800b21a:	4805      	ldr	r0, [pc, #20]	; (800b230 <_ZN6System4initEv+0x60>)
 800b21c:	f000 fd0e 	bl	800bc3c <__cxa_guard_release>
	powermonitor->set_tick_delay(100);
 800b220:	4b05      	ldr	r3, [pc, #20]	; (800b238 <_ZN6System4initEv+0x68>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2164      	movs	r1, #100	; 0x64
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fadd 	bl	800b7e6 <_ZN6Thread14set_tick_delayEm>
}
 800b22c:	bf00      	nop
 800b22e:	bd98      	pop	{r3, r4, r7, pc}
 800b230:	20010148 	.word	0x20010148
 800b234:	20000224 	.word	0x20000224
 800b238:	20010144 	.word	0x20010144

0800b23c <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stack_size);
	Thread(const char* name, osPriority_t priority, uint32_t stack_size);
	virtual ~Thread() {};
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	4a04      	ldr	r2, [pc, #16]	; (800b258 <_ZN6ThreadD1Ev+0x1c>)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	0800c0e0 	.word	0x0800c0e0

0800b25c <_ZN6ThreadD0Ev>:
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff ffe9 	bl	800b23c <_ZN6ThreadD1Ev>
 800b26a:	2138      	movs	r1, #56	; 0x38
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fcd7 	bl	800bc20 <_ZdlPvj>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef>:
#define SHUNT_VALUE	0.3e-3f // Ohm

#define CURRENT_LSB (MAX_CURRENT >> 15)


PowerMonitor::PowerMonitor(SPI_HandleTypeDef* spi) : Thread("PowerMonitor"), spi(spi), measurements(nullptr) {};
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4908      	ldr	r1, [pc, #32]	; (800b2ac <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef+0x30>)
 800b28a:	4618      	mov	r0, r3
 800b28c:	f000 fa41 	bl	800b712 <_ZN6ThreadC1EPKc>
 800b290:	4a07      	ldr	r2, [pc, #28]	; (800b2b0 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef+0x34>)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	63da      	str	r2, [r3, #60]	; 0x3c
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	0800c0a0 	.word	0x0800c0a0
 800b2b0:	0800c0c8 	.word	0x0800c0c8

0800b2b4 <_ZN12PowerMonitor4initEv>:


void PowerMonitor::init() {
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	osDelay(100 / portTICK_PERIOD_MS);
 800b2bc:	2064      	movs	r0, #100	; 0x64
 800b2be:	f7fd fa3b 	bl	8008738 <osDelay>

	uint8_t attempts = 3;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	73fb      	strb	r3, [r7, #15]
	bool init_success = false;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73bb      	strb	r3, [r7, #14]

	while (attempts-- > 0) {
 800b2ca:	e011      	b.n	800b2f0 <_ZN12PowerMonitor4initEv+0x3c>
		if (get(INA239_DEVICE_ID_REG) == INA239_DEV_ID) {
 800b2cc:	213f      	movs	r1, #63	; 0x3f
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f91d 	bl	800b50e <_ZN12PowerMonitor3getEh>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	f242 3391 	movw	r3, #9105	; 0x2391
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	bf0c      	ite	eq
 800b2e0:	2301      	moveq	r3, #1
 800b2e2:	2300      	movne	r3, #0
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <_ZN12PowerMonitor4initEv+0x3c>
			init_success = true;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	73bb      	strb	r3, [r7, #14]
			break;
 800b2ee:	e009      	b.n	800b304 <_ZN12PowerMonitor4initEv+0x50>
	while (attempts-- > 0) {
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	1e5a      	subs	r2, r3, #1
 800b2f4:	73fa      	strb	r2, [r7, #15]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2301      	movne	r3, #1
 800b2fc:	2300      	moveq	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1e3      	bne.n	800b2cc <_ZN12PowerMonitor4initEv+0x18>
		}
	}

	if (init_success) {
 800b304:	7bbb      	ldrb	r3, [r7, #14]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d045      	beq.n	800b396 <_ZN12PowerMonitor4initEv+0xe2>
		bool config_success = set(INA239_CONFIG_REG, INA239_CONFIG_ADCRANGE);
 800b30a:	2210      	movs	r2, #16
 800b30c:	2100      	movs	r1, #0
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f911 	bl	800b536 <_ZN12PowerMonitor3setEht>
 800b314:	4603      	mov	r3, r0
 800b316:	737b      	strb	r3, [r7, #13]

		uint16_t adc_config = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_MODE & (0xF << INA239_ADCCONFIG_MODE_BIT);
 800b31c:	897b      	ldrh	r3, [r7, #10]
 800b31e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b322:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b326:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VBUSCT & (0x2 << INA239_ADCCONFIG_VBUSCT_BIT);
 800b328:	897b      	ldrh	r3, [r7, #10]
 800b32a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b32e:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VSHCT & (0x2 << INA239_ADCCONFIG_VSHCT_BIT);
 800b330:	897b      	ldrh	r3, [r7, #10]
 800b332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b336:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VTCT & (0x7 << INA239_ADCCONFIG_VTCT_BIT);
 800b338:	897b      	ldrh	r3, [r7, #10]
 800b33a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800b33e:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_AVG & (0x3 << INA239_ADCCONFIG_AVG_BIT);
 800b340:	897b      	ldrh	r3, [r7, #10]
 800b342:	f043 0303 	orr.w	r3, r3, #3
 800b346:	817b      	strh	r3, [r7, #10]

		config_success |= set(INA239_ADC_CONFIG_REG, adc_config);
 800b348:	897b      	ldrh	r3, [r7, #10]
 800b34a:	461a      	mov	r2, r3
 800b34c:	2101      	movs	r1, #1
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f8f1 	bl	800b536 <_ZN12PowerMonitor3setEht>
 800b354:	4603      	mov	r3, r0
 800b356:	461a      	mov	r2, r3
 800b358:	7b7b      	ldrb	r3, [r7, #13]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bf14      	ite	ne
 800b362:	2301      	movne	r3, #1
 800b364:	2300      	moveq	r3, #0
 800b366:	737b      	strb	r3, [r7, #13]

		config_success |= set(INA239_SHUNT_CAL_REG, 4 * SHUNT_CAL_CONST * MAX_CURRENT * SHUNT_VALUE);
 800b368:	2200      	movs	r2, #0
 800b36a:	2102      	movs	r1, #2
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f8e2 	bl	800b536 <_ZN12PowerMonitor3setEht>
 800b372:	4603      	mov	r3, r0
 800b374:	461a      	mov	r2, r3
 800b376:	7b7b      	ldrb	r3, [r7, #13]
 800b378:	4313      	orrs	r3, r2
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	bf14      	ite	ne
 800b380:	2301      	movne	r3, #1
 800b382:	2300      	moveq	r3, #0
 800b384:	737b      	strb	r3, [r7, #13]

		if (config_success) {
 800b386:	7b7b      	ldrb	r3, [r7, #13]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d108      	bne.n	800b39e <_ZN12PowerMonitor4initEv+0xea>
			// TODO: print that the device has been initialized successfully
		} else {
			// TODO: print that the device config has failed
			terminate();
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 fa1c 	bl	800b7cc <_ZN6Thread9terminateEv>
		// TODO: print that the device hasnt been initialized
		terminate();
	}

	//loop();
}
 800b394:	e003      	b.n	800b39e <_ZN12PowerMonitor4initEv+0xea>
		terminate();
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 fa17 	bl	800b7cc <_ZN6Thread9terminateEv>
}
 800b39e:	bf00      	nop
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <_ZN12PowerMonitor4loopEv>:

void PowerMonitor::loop() {
 800b3a6:	b590      	push	{r4, r7, lr}
 800b3a8:	b083      	sub	sp, #12
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
	measurements->shunt_voltage = read_shunt_voltage();
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f82c 	bl	800b410 <_ZN12PowerMonitor18read_shunt_voltageEv>
 800b3b8:	eef0 7a40 	vmov.f32	s15, s0
 800b3bc:	edc4 7a00 	vstr	s15, [r4]
	measurements->bus_voltage = read_bus_voltage();
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 f83b 	bl	800b440 <_ZN12PowerMonitor16read_bus_voltageEv>
 800b3ca:	eef0 7a40 	vmov.f32	s15, s0
 800b3ce:	edc4 7a01 	vstr	s15, [r4, #4]
	measurements->current = read_current();
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 f84a 	bl	800b470 <_ZN12PowerMonitor12read_currentEv>
 800b3dc:	eef0 7a40 	vmov.f32	s15, s0
 800b3e0:	edc4 7a02 	vstr	s15, [r4, #8]
	measurements->power = read_power();
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f859 	bl	800b4a0 <_ZN12PowerMonitor10read_powerEv>
 800b3ee:	eef0 7a40 	vmov.f32	s15, s0
 800b3f2:	edc4 7a03 	vstr	s15, [r4, #12]
	measurements->temperature = read_temperature();
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f86e 	bl	800b4dc <_ZN12PowerMonitor16read_temperatureEv>
 800b400:	eef0 7a40 	vmov.f32	s15, s0
 800b404:	edc4 7a04 	vstr	s15, [r4, #16]
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}

0800b410 <_ZN12PowerMonitor18read_shunt_voltageEv>:

float PowerMonitor::read_shunt_voltage() {
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	return 1.25e-6f * get(INA239_VSHUNT_REG); // [V]
 800b418:	2104      	movs	r1, #4
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f877 	bl	800b50e <_ZN12PowerMonitor3getEh>
 800b420:	4603      	mov	r3, r0
 800b422:	ee07 3a90 	vmov	s15, r3
 800b426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b42a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b43c <_ZN12PowerMonitor18read_shunt_voltageEv+0x2c>
 800b42e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b432:	eeb0 0a67 	vmov.f32	s0, s15
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	35a7c5ac 	.word	0x35a7c5ac

0800b440 <_ZN12PowerMonitor16read_bus_voltageEv>:

float PowerMonitor::read_bus_voltage() {
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
	return 3.125e-3f * get(INA239_VBUS_REG); // [V]
 800b448:	2105      	movs	r1, #5
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f85f 	bl	800b50e <_ZN12PowerMonitor3getEh>
 800b450:	4603      	mov	r3, r0
 800b452:	ee07 3a90 	vmov	s15, r3
 800b456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b45a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b46c <_ZN12PowerMonitor16read_bus_voltageEv+0x2c>
 800b45e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b462:	eeb0 0a67 	vmov.f32	s0, s15
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	3b4ccccd 	.word	0x3b4ccccd

0800b470 <_ZN12PowerMonitor12read_currentEv>:

float PowerMonitor::read_current() {
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
	return (float) CURRENT_LSB * get(INA239_CURRENT_REG); // [A]
 800b478:	2107      	movs	r1, #7
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f847 	bl	800b50e <_ZN12PowerMonitor3getEh>
 800b480:	4603      	mov	r3, r0
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b49c <_ZN12PowerMonitor12read_currentEv+0x2c>
 800b48e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b492:	eeb0 0a67 	vmov.f32	s0, s15
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	00000000 	.word	0x00000000

0800b4a0 <_ZN12PowerMonitor10read_powerEv>:

float PowerMonitor::read_power() {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	int32_t raw_power = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
	read(INA239_POWER_REG, (uint8_t*) &raw_power, 3);
 800b4ac:	f107 020c 	add.w	r2, r7, #12
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	2108      	movs	r1, #8
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f891 	bl	800b5dc <_ZN12PowerMonitor4readEhPhh>
	return 0.2f * CURRENT_LSB * raw_power;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4c4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b4d8 <_ZN12PowerMonitor10read_powerEv+0x38>
 800b4c8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b4cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	00000000 	.word	0x00000000

0800b4dc <_ZN12PowerMonitor16read_temperatureEv>:

//x * 2**n == x << n
//
//generally, you can use x * y = x << ilog2(y);

float PowerMonitor::read_temperature() {
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	return 125e-3f * ((int16_t) get(INA239_DIETEMP_REG) >> INA239_DIETEMP_BIT); // [deg C]
 800b4e4:	2106      	movs	r1, #6
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f811 	bl	800b50e <_ZN12PowerMonitor3getEh>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	b21b      	sxth	r3, r3
 800b4f0:	111b      	asrs	r3, r3, #4
 800b4f2:	b21b      	sxth	r3, r3
 800b4f4:	ee07 3a90 	vmov	s15, r3
 800b4f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4fc:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800b500:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b504:	eeb0 0a67 	vmov.f32	s0, s15
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <_ZN12PowerMonitor3getEh>:

uint16_t PowerMonitor::get(uint8_t reg) {
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	460b      	mov	r3, r1
 800b518:	70fb      	strb	r3, [r7, #3]
	uint16_t value = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	81fb      	strh	r3, [r7, #14]
	read(reg, (uint8_t*) &value, 2);
 800b51e:	f107 020e 	add.w	r2, r7, #14
 800b522:	78f9      	ldrb	r1, [r7, #3]
 800b524:	2302      	movs	r3, #2
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f858 	bl	800b5dc <_ZN12PowerMonitor4readEhPhh>
	return value;
 800b52c:	89fb      	ldrh	r3, [r7, #14]
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <_ZN12PowerMonitor3setEht>:

bool PowerMonitor::set(uint8_t reg, uint16_t value) {
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	460b      	mov	r3, r1
 800b540:	70fb      	strb	r3, [r7, #3]
 800b542:	4613      	mov	r3, r2
 800b544:	803b      	strh	r3, [r7, #0]
	return write(reg, (uint8_t*) &value, 2);
 800b546:	463a      	mov	r2, r7
 800b548:	78f9      	ldrb	r1, [r7, #3]
 800b54a:	2302      	movs	r3, #2
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f805 	bl	800b55c <_ZN12PowerMonitor5writeEhPhh>
 800b552:	4603      	mov	r3, r0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <_ZN12PowerMonitor5writeEhPhh>:

bool PowerMonitor::write(uint8_t reg, uint8_t* data, uint8_t size) {
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	607a      	str	r2, [r7, #4]
 800b566:	461a      	mov	r2, r3
 800b568:	460b      	mov	r3, r1
 800b56a:	72fb      	strb	r3, [r7, #11]
 800b56c:	4613      	mov	r3, r2
 800b56e:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_buffer[4];
	tx_buffer[0] = (reg << 2) | 0b00;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	b2db      	uxtb	r3, r3
 800b576:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < size; i++) {
 800b578:	2300      	movs	r3, #0
 800b57a:	75fb      	strb	r3, [r7, #23]
 800b57c:	e00f      	b.n	800b59e <_ZN12PowerMonitor5writeEhPhh+0x42>
		tx_buffer[i+1] = data[size-i-1];
 800b57e:	7aba      	ldrb	r2, [r7, #10]
 800b580:	7dfb      	ldrb	r3, [r7, #23]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	3b01      	subs	r3, #1
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	441a      	add	r2, r3
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	3301      	adds	r3, #1
 800b58e:	7812      	ldrb	r2, [r2, #0]
 800b590:	3318      	adds	r3, #24
 800b592:	443b      	add	r3, r7
 800b594:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < size; i++) {
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	3301      	adds	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
 800b59e:	7dfa      	ldrb	r2, [r7, #23]
 800b5a0:	7abb      	ldrb	r3, [r7, #10]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d3eb      	bcc.n	800b57e <_ZN12PowerMonitor5writeEhPhh+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 800b5a6:	b672      	cpsid	i
}
 800b5a8:	bf00      	nop
	}

	__disable_irq();
	HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, tx_buffer, size+1, 10 / portTICK_PERIOD_MS);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b5ae:	7abb      	ldrb	r3, [r7, #10]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	f107 0110 	add.w	r1, r7, #16
 800b5ba:	230a      	movs	r3, #10
 800b5bc:	f7f9 f94b 	bl	8004856 <HAL_SPI_Transmit>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsie i" : : : "memory");
 800b5c4:	b662      	cpsie	i
}
 800b5c6:	bf00      	nop
	__enable_irq();

	return status == HAL_OK;
 800b5c8:	7dbb      	ldrb	r3, [r7, #22]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	bf0c      	ite	eq
 800b5ce:	2301      	moveq	r3, #1
 800b5d0:	2300      	movne	r3, #0
 800b5d2:	b2db      	uxtb	r3, r3
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <_ZN12PowerMonitor4readEhPhh>:

bool PowerMonitor::read(uint8_t reg, uint8_t* data, uint8_t size) {
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b089      	sub	sp, #36	; 0x24
 800b5e0:	af02      	add	r7, sp, #8
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	607a      	str	r2, [r7, #4]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	72fb      	strb	r3, [r7, #11]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	72bb      	strb	r3, [r7, #10]
	uint8_t rx_buffer[4];
	rx_buffer[0] = (reg << 2) | 0b01;
 800b5f0:	7afb      	ldrb	r3, [r7, #11]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	b25b      	sxtb	r3, r3
 800b5f6:	f043 0301 	orr.w	r3, r3, #1
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b600:	b672      	cpsid	i
}
 800b602:	bf00      	nop

	__disable_irq();
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(spi, rx_buffer, rx_buffer, size+1, 100 / portTICK_PERIOD_MS);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b608:	7abb      	ldrb	r3, [r7, #10]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	3301      	adds	r3, #1
 800b60e:	b29b      	uxth	r3, r3
 800b610:	f107 0210 	add.w	r2, r7, #16
 800b614:	f107 0110 	add.w	r1, r7, #16
 800b618:	2464      	movs	r4, #100	; 0x64
 800b61a:	9400      	str	r4, [sp, #0]
 800b61c:	f7f9 fa90 	bl	8004b40 <HAL_SPI_TransmitReceive>
 800b620:	4603      	mov	r3, r0
 800b622:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsie i" : : : "memory");
 800b624:	b662      	cpsie	i
}
 800b626:	bf00      	nop
	__enable_irq();

	for (uint8_t i = 0; i < size; i++) {
 800b628:	2300      	movs	r3, #0
 800b62a:	75fb      	strb	r3, [r7, #23]
 800b62c:	e00d      	b.n	800b64a <_ZN12PowerMonitor4readEhPhh+0x6e>
		data[i] = rx_buffer[size-i];
 800b62e:	7aba      	ldrb	r2, [r7, #10]
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	1ad2      	subs	r2, r2, r3
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	6879      	ldr	r1, [r7, #4]
 800b638:	440b      	add	r3, r1
 800b63a:	3218      	adds	r2, #24
 800b63c:	443a      	add	r2, r7
 800b63e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800b642:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 800b644:	7dfb      	ldrb	r3, [r7, #23]
 800b646:	3301      	adds	r3, #1
 800b648:	75fb      	strb	r3, [r7, #23]
 800b64a:	7dfa      	ldrb	r2, [r7, #23]
 800b64c:	7abb      	ldrb	r3, [r7, #10]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d3ed      	bcc.n	800b62e <_ZN12PowerMonitor4readEhPhh+0x52>
	}

	return status == HAL_OK;
 800b652:	7dbb      	ldrb	r3, [r7, #22]
 800b654:	2b00      	cmp	r3, #0
 800b656:	bf0c      	ite	eq
 800b658:	2301      	moveq	r3, #1
 800b65a:	2300      	movne	r3, #0
 800b65c:	b2db      	uxtb	r3, r3
}
 800b65e:	4618      	mov	r0, r3
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	bd90      	pop	{r4, r7, pc}
	...

0800b668 <_ZN12PowerMonitorD1Ev>:
	float power;
	float temperature;
} Measurements;


class PowerMonitor : public Thread {
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	4a05      	ldr	r2, [pc, #20]	; (800b688 <_ZN12PowerMonitorD1Ev+0x20>)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff fddf 	bl	800b23c <_ZN6ThreadD1Ev>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4618      	mov	r0, r3
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	0800c0c8 	.word	0x0800c0c8

0800b68c <_ZN12PowerMonitorD0Ev>:
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ffe7 	bl	800b668 <_ZN12PowerMonitorD1Ev>
 800b69a:	2140      	movs	r1, #64	; 0x40
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fabf 	bl	800bc20 <_ZdlPvj>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <_Z10__task_runPv>:
#include "task.h"


#define DEFAULT_STACK_SIZE (1024)

void __task_run(void* arg) {
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
 800b6b8:	2064      	movs	r0, #100	; 0x64
 800b6ba:	f7fd f83d 	bl	8008738 <osDelay>

	thread->init();
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	4798      	blx	r3

	while(thread->is_running()) {
 800b6ca:	e00c      	b.n	800b6e6 <_Z10__task_runPv+0x3a>
		thread->loop();
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	330c      	adds	r3, #12
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	4798      	blx	r3
		osDelay(thread->get_tick_delay() / portTICK_PERIOD_MS);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 f892 	bl	800b802 <_ZN6Thread14get_tick_delayEv>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fd f829 	bl	8008738 <osDelay>
	while(thread->is_running()) {
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 f864 	bl	800b7b4 <_ZN6Thread10is_runningEv>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1ec      	bne.n	800b6cc <_Z10__task_runPv+0x20>
	}

	delete thread;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d004      	beq.n	800b702 <_Z10__task_runPv+0x56>
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	3204      	adds	r2, #4
 800b6fc:	6812      	ldr	r2, [r2, #0]
 800b6fe:	4618      	mov	r0, r3
 800b700:	4790      	blx	r2

	vTaskDelete(nullptr);
 800b702:	2000      	movs	r0, #0
 800b704:	f7fd ffc0 	bl	8009688 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 800b708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b70c:	f7fd f814 	bl	8008738 <osDelay>
 800b710:	e7fa      	b.n	800b708 <_Z10__task_runPv+0x5c>

0800b712 <_ZN6ThreadC1EPKc>:
	}
}


Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {};
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
 800b71c:	2218      	movs	r2, #24
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f805 	bl	800b730 <_ZN6ThreadC1EPKc12osPriority_t>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <_ZN6ThreadC1EPKc12osPriority_t>:


Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {};
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	68b9      	ldr	r1, [r7, #8]
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f805 	bl	800b754 <_ZN6ThreadC1EPKc12osPriority_tm>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <_ZN6ThreadC1EPKc12osPriority_tm>:


Thread::Thread(const char* name, uint32_t stack_size) : Thread(name, (osPriority_t) osPriorityNormal, stack_size) {};


Thread::Thread(const char* name, osPriority_t priority, uint32_t stack_size) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b08e      	sub	sp, #56	; 0x38
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	603b      	str	r3, [r7, #0]
 800b762:	4a12      	ldr	r2, [pc, #72]	; (800b7ac <_ZN6ThreadC1EPKc12osPriority_tm+0x58>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2201      	movs	r2, #1
 800b76c:	731a      	strb	r2, [r3, #12]
	const osThreadAttr_t thread_attributes = {
 800b76e:	f107 0314 	add.w	r3, r7, #20
 800b772:	2224      	movs	r2, #36	; 0x24
 800b774:	2100      	movs	r1, #0
 800b776:	4618      	mov	r0, r3
 800b778:	f000 fb42 	bl	800be00 <memset>
		.name = (char*) name,
		.stack_size = stack_size,
		.priority = (osPriority_t) priority,
	};
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	617b      	str	r3, [r7, #20]
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	62bb      	str	r3, [r7, #40]	; 0x28
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	62fb      	str	r3, [r7, #44]	; 0x2c
	this->handle = (osThreadId_t) osThreadNew(&__task_run, this, &thread_attributes);
 800b788:	f107 0314 	add.w	r3, r7, #20
 800b78c:	461a      	mov	r2, r3
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	4807      	ldr	r0, [pc, #28]	; (800b7b0 <_ZN6ThreadC1EPKc12osPriority_tm+0x5c>)
 800b792:	f7fc ff3f 	bl	8008614 <osThreadNew>
 800b796:	4602      	mov	r2, r0
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	605a      	str	r2, [r3, #4]
	this->name = name;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	609a      	str	r2, [r3, #8]
}
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3738      	adds	r7, #56	; 0x38
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	0800c0e0 	.word	0x0800c0e0
 800b7b0:	0800b6ad 	.word	0x0800b6ad

0800b7b4 <_ZN6Thread10is_runningEv>:

bool Thread::is_running() {
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
	return running;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	7b1b      	ldrb	r3, [r3, #12]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <_ZN6Thread9terminateEv>:

void Thread::terminate() {
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	running = false;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	731a      	strb	r2, [r3, #12]
}
 800b7da:	bf00      	nop
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <_ZN6Thread14set_tick_delayEm>:

osThreadId_t Thread::get_handle() {
	return handle;
}

void Thread::set_tick_delay(uint32_t ms) {
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
	delay = ms;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	611a      	str	r2, [r3, #16]
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <_ZN6Thread14get_tick_delayEv>:

uint32_t Thread::get_tick_delay() {
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
	return delay;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	691b      	ldr	r3, [r3, #16]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b82e:	4619      	mov	r1, r3
 800b830:	4610      	mov	r0, r2
 800b832:	f7fb fe70 	bl	8007516 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b836:	bf00      	nop
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b082      	sub	sp, #8
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b850:	78fa      	ldrb	r2, [r7, #3]
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	4613      	mov	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	440b      	add	r3, r1
 800b85e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	78fb      	ldrb	r3, [r7, #3]
 800b866:	4619      	mov	r1, r3
 800b868:	f7fb feaa 	bl	80075c0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	460b      	mov	r3, r1
 800b87e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b886:	78fa      	ldrb	r2, [r7, #3]
 800b888:	6879      	ldr	r1, [r7, #4]
 800b88a:	4613      	mov	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	440b      	add	r3, r1
 800b894:	3324      	adds	r3, #36	; 0x24
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	4619      	mov	r1, r3
 800b89c:	f7fb fef3 	bl	8007686 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fc f807 	bl	80078ca <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	795b      	ldrb	r3, [r3, #5]
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d001      	beq.n	800b8dc <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8d8:	f7f5 f8b5 	bl	8000a46 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8e2:	7bfa      	ldrb	r2, [r7, #15]
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fb ffb1 	bl	800784e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fb ff5d 	bl	80077b2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fb ffad 	bl	800786e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	7a5b      	ldrb	r3, [r3, #9]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d005      	beq.n	800b928 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b91c:	4b04      	ldr	r3, [pc, #16]	; (800b930 <HAL_PCD_SuspendCallback+0x30>)
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	4a03      	ldr	r2, [pc, #12]	; (800b930 <HAL_PCD_SuspendCallback+0x30>)
 800b922:	f043 0306 	orr.w	r3, r3, #6
 800b926:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	e000ed00 	.word	0xe000ed00

0800b934 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7a5b      	ldrb	r3, [r3, #9]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b944:	4b08      	ldr	r3, [pc, #32]	; (800b968 <HAL_PCD_ResumeCallback+0x34>)
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	4a07      	ldr	r2, [pc, #28]	; (800b968 <HAL_PCD_ResumeCallback+0x34>)
 800b94a:	f023 0306 	bic.w	r3, r3, #6
 800b94e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b950:	f000 f934 	bl	800bbbc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fb ff9d 	bl	800789a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	e000ed00 	.word	0xe000ed00

0800b96c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	70fb      	strb	r3, [r7, #3]
 800b97e:	460b      	mov	r3, r1
 800b980:	70bb      	strb	r3, [r7, #2]
 800b982:	4613      	mov	r3, r2
 800b984:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b994:	78bb      	ldrb	r3, [r7, #2]
 800b996:	883a      	ldrh	r2, [r7, #0]
 800b998:	78f9      	ldrb	r1, [r7, #3]
 800b99a:	f7f6 fc9d 	bl	80022d8 <HAL_PCD_EP_Open>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f90f 	bl	800bbc8 <USBD_Get_USB_Status>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9d2:	78fa      	ldrb	r2, [r7, #3]
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f6 fd43 	bl	8002462 <HAL_PCD_EP_SetStall>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f8f0 	bl	800bbc8 <USBD_Get_USB_Status>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba10:	78fa      	ldrb	r2, [r7, #3]
 800ba12:	4611      	mov	r1, r2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7f6 fd76 	bl	8002506 <HAL_PCD_EP_ClrStall>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 f8d1 	bl	800bbc8 <USBD_Get_USB_Status>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da0b      	bge.n	800ba68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba56:	68f9      	ldr	r1, [r7, #12]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	440b      	add	r3, r1
 800ba62:	3312      	adds	r3, #18
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	e00b      	b.n	800ba80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	440b      	add	r3, r1
 800ba7a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800ba7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baa6:	78fa      	ldrb	r2, [r7, #3]
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7f6 fbf0 	bl	8002290 <HAL_PCD_SetAddress>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f000 f886 	bl	800bbc8 <USBD_Get_USB_Status>
 800babc:	4603      	mov	r3, r0
 800babe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b086      	sub	sp, #24
 800bace:	af00      	add	r7, sp, #0
 800bad0:	60f8      	str	r0, [r7, #12]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
 800bad6:	460b      	mov	r3, r1
 800bad8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bae8:	7af9      	ldrb	r1, [r7, #11]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	f7f6 fc81 	bl	80023f4 <HAL_PCD_EP_Transmit>
 800baf2:	4603      	mov	r3, r0
 800baf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f000 f865 	bl	800bbc8 <USBD_Get_USB_Status>
 800bafe:	4603      	mov	r3, r0
 800bb00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb02:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	607a      	str	r2, [r7, #4]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb2a:	7af9      	ldrb	r1, [r7, #11]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	f7f6 fc2f 	bl	8002392 <HAL_PCD_EP_Receive>
 800bb34:	4603      	mov	r3, r0
 800bb36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 f844 	bl	800bbc8 <USBD_Get_USB_Status>
 800bb40:	4603      	mov	r3, r0
 800bb42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb44:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bb5c:	78fb      	ldrb	r3, [r7, #3]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <HAL_PCDEx_LPM_Callback+0x18>
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d013      	beq.n	800bb8e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bb66:	e023      	b.n	800bbb0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	7a5b      	ldrb	r3, [r3, #9]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d007      	beq.n	800bb80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bb70:	f000 f824 	bl	800bbbc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb74:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	4a0f      	ldr	r2, [pc, #60]	; (800bbb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb7a:	f023 0306 	bic.w	r3, r3, #6
 800bb7e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fb fe87 	bl	800789a <USBD_LL_Resume>
    break;
 800bb8c:	e010      	b.n	800bbb0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fb fe6a 	bl	800786e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7a5b      	ldrb	r3, [r3, #9]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d005      	beq.n	800bbae <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bba2:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	4a04      	ldr	r2, [pc, #16]	; (800bbb8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bba8:	f043 0306 	orr.w	r3, r3, #6
 800bbac:	6113      	str	r3, [r2, #16]
    break;
 800bbae:	bf00      	nop
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	e000ed00 	.word	0xe000ed00

0800bbbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bbc0:	f7f4 fef5 	bl	80009ae <SystemClock_Config>
}
 800bbc4:	bf00      	nop
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbd6:	79fb      	ldrb	r3, [r7, #7]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	d817      	bhi.n	800bc0c <USBD_Get_USB_Status+0x44>
 800bbdc:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <USBD_Get_USB_Status+0x1c>)
 800bbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe2:	bf00      	nop
 800bbe4:	0800bbf5 	.word	0x0800bbf5
 800bbe8:	0800bbfb 	.word	0x0800bbfb
 800bbec:	0800bc01 	.word	0x0800bc01
 800bbf0:	0800bc07 	.word	0x0800bc07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf8:	e00b      	b.n	800bc12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfe:	e008      	b.n	800bc12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc00:	2301      	movs	r3, #1
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	e005      	b.n	800bc12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc06:	2303      	movs	r3, #3
 800bc08:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0a:	e002      	b.n	800bc12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc10:	bf00      	nop
  }
  return usb_status;
 800bc12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <_ZdlPvj>:
 800bc20:	f000 b820 	b.w	800bc64 <_ZdlPv>

0800bc24 <__cxa_guard_acquire>:
 800bc24:	6803      	ldr	r3, [r0, #0]
 800bc26:	07db      	lsls	r3, r3, #31
 800bc28:	d406      	bmi.n	800bc38 <__cxa_guard_acquire+0x14>
 800bc2a:	7843      	ldrb	r3, [r0, #1]
 800bc2c:	b103      	cbz	r3, 800bc30 <__cxa_guard_acquire+0xc>
 800bc2e:	deff      	udf	#255	; 0xff
 800bc30:	2301      	movs	r3, #1
 800bc32:	7043      	strb	r3, [r0, #1]
 800bc34:	4618      	mov	r0, r3
 800bc36:	4770      	bx	lr
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4770      	bx	lr

0800bc3c <__cxa_guard_release>:
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	6003      	str	r3, [r0, #0]
 800bc40:	4770      	bx	lr

0800bc42 <_Znwj>:
 800bc42:	2801      	cmp	r0, #1
 800bc44:	bf38      	it	cc
 800bc46:	2001      	movcc	r0, #1
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 f81b 	bl	800bc88 <malloc>
 800bc52:	b100      	cbz	r0, 800bc56 <_Znwj+0x14>
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	f000 f807 	bl	800bc68 <_ZSt15get_new_handlerv>
 800bc5a:	b908      	cbnz	r0, 800bc60 <_Znwj+0x1e>
 800bc5c:	f000 f80c 	bl	800bc78 <abort>
 800bc60:	4780      	blx	r0
 800bc62:	e7f3      	b.n	800bc4c <_Znwj+0xa>

0800bc64 <_ZdlPv>:
 800bc64:	f000 b818 	b.w	800bc98 <free>

0800bc68 <_ZSt15get_new_handlerv>:
 800bc68:	4b02      	ldr	r3, [pc, #8]	; (800bc74 <_ZSt15get_new_handlerv+0xc>)
 800bc6a:	6818      	ldr	r0, [r3, #0]
 800bc6c:	f3bf 8f5b 	dmb	ish
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20010428 	.word	0x20010428

0800bc78 <abort>:
 800bc78:	b508      	push	{r3, lr}
 800bc7a:	2006      	movs	r0, #6
 800bc7c:	f000 f946 	bl	800bf0c <raise>
 800bc80:	2001      	movs	r0, #1
 800bc82:	f7f5 f8d3 	bl	8000e2c <_exit>
	...

0800bc88 <malloc>:
 800bc88:	4b02      	ldr	r3, [pc, #8]	; (800bc94 <malloc+0xc>)
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	f000 b82b 	b.w	800bce8 <_malloc_r>
 800bc92:	bf00      	nop
 800bc94:	2000005c 	.word	0x2000005c

0800bc98 <free>:
 800bc98:	4b02      	ldr	r3, [pc, #8]	; (800bca4 <free+0xc>)
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	f000 b99b 	b.w	800bfd8 <_free_r>
 800bca2:	bf00      	nop
 800bca4:	2000005c 	.word	0x2000005c

0800bca8 <sbrk_aligned>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	4e0e      	ldr	r6, [pc, #56]	; (800bce4 <sbrk_aligned+0x3c>)
 800bcac:	460c      	mov	r4, r1
 800bcae:	6831      	ldr	r1, [r6, #0]
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	b911      	cbnz	r1, 800bcba <sbrk_aligned+0x12>
 800bcb4:	f000 f946 	bl	800bf44 <_sbrk_r>
 800bcb8:	6030      	str	r0, [r6, #0]
 800bcba:	4621      	mov	r1, r4
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f000 f941 	bl	800bf44 <_sbrk_r>
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	d00a      	beq.n	800bcdc <sbrk_aligned+0x34>
 800bcc6:	1cc4      	adds	r4, r0, #3
 800bcc8:	f024 0403 	bic.w	r4, r4, #3
 800bccc:	42a0      	cmp	r0, r4
 800bcce:	d007      	beq.n	800bce0 <sbrk_aligned+0x38>
 800bcd0:	1a21      	subs	r1, r4, r0
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f000 f936 	bl	800bf44 <_sbrk_r>
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d101      	bne.n	800bce0 <sbrk_aligned+0x38>
 800bcdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bce0:	4620      	mov	r0, r4
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
 800bce4:	20010430 	.word	0x20010430

0800bce8 <_malloc_r>:
 800bce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcec:	1ccd      	adds	r5, r1, #3
 800bcee:	f025 0503 	bic.w	r5, r5, #3
 800bcf2:	3508      	adds	r5, #8
 800bcf4:	2d0c      	cmp	r5, #12
 800bcf6:	bf38      	it	cc
 800bcf8:	250c      	movcc	r5, #12
 800bcfa:	2d00      	cmp	r5, #0
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	db01      	blt.n	800bd04 <_malloc_r+0x1c>
 800bd00:	42a9      	cmp	r1, r5
 800bd02:	d905      	bls.n	800bd10 <_malloc_r+0x28>
 800bd04:	230c      	movs	r3, #12
 800bd06:	603b      	str	r3, [r7, #0]
 800bd08:	2600      	movs	r6, #0
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bde4 <_malloc_r+0xfc>
 800bd14:	f000 f868 	bl	800bde8 <__malloc_lock>
 800bd18:	f8d8 3000 	ldr.w	r3, [r8]
 800bd1c:	461c      	mov	r4, r3
 800bd1e:	bb5c      	cbnz	r4, 800bd78 <_malloc_r+0x90>
 800bd20:	4629      	mov	r1, r5
 800bd22:	4638      	mov	r0, r7
 800bd24:	f7ff ffc0 	bl	800bca8 <sbrk_aligned>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	d155      	bne.n	800bdda <_malloc_r+0xf2>
 800bd2e:	f8d8 4000 	ldr.w	r4, [r8]
 800bd32:	4626      	mov	r6, r4
 800bd34:	2e00      	cmp	r6, #0
 800bd36:	d145      	bne.n	800bdc4 <_malloc_r+0xdc>
 800bd38:	2c00      	cmp	r4, #0
 800bd3a:	d048      	beq.n	800bdce <_malloc_r+0xe6>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4638      	mov	r0, r7
 800bd42:	eb04 0903 	add.w	r9, r4, r3
 800bd46:	f000 f8fd 	bl	800bf44 <_sbrk_r>
 800bd4a:	4581      	cmp	r9, r0
 800bd4c:	d13f      	bne.n	800bdce <_malloc_r+0xe6>
 800bd4e:	6821      	ldr	r1, [r4, #0]
 800bd50:	1a6d      	subs	r5, r5, r1
 800bd52:	4629      	mov	r1, r5
 800bd54:	4638      	mov	r0, r7
 800bd56:	f7ff ffa7 	bl	800bca8 <sbrk_aligned>
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	d037      	beq.n	800bdce <_malloc_r+0xe6>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	442b      	add	r3, r5
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	f8d8 3000 	ldr.w	r3, [r8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d038      	beq.n	800bdde <_malloc_r+0xf6>
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	42a2      	cmp	r2, r4
 800bd70:	d12b      	bne.n	800bdca <_malloc_r+0xe2>
 800bd72:	2200      	movs	r2, #0
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	e00f      	b.n	800bd98 <_malloc_r+0xb0>
 800bd78:	6822      	ldr	r2, [r4, #0]
 800bd7a:	1b52      	subs	r2, r2, r5
 800bd7c:	d41f      	bmi.n	800bdbe <_malloc_r+0xd6>
 800bd7e:	2a0b      	cmp	r2, #11
 800bd80:	d917      	bls.n	800bdb2 <_malloc_r+0xca>
 800bd82:	1961      	adds	r1, r4, r5
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	6025      	str	r5, [r4, #0]
 800bd88:	bf18      	it	ne
 800bd8a:	6059      	strne	r1, [r3, #4]
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	bf08      	it	eq
 800bd90:	f8c8 1000 	streq.w	r1, [r8]
 800bd94:	5162      	str	r2, [r4, r5]
 800bd96:	604b      	str	r3, [r1, #4]
 800bd98:	4638      	mov	r0, r7
 800bd9a:	f104 060b 	add.w	r6, r4, #11
 800bd9e:	f000 f829 	bl	800bdf4 <__malloc_unlock>
 800bda2:	f026 0607 	bic.w	r6, r6, #7
 800bda6:	1d23      	adds	r3, r4, #4
 800bda8:	1af2      	subs	r2, r6, r3
 800bdaa:	d0ae      	beq.n	800bd0a <_malloc_r+0x22>
 800bdac:	1b9b      	subs	r3, r3, r6
 800bdae:	50a3      	str	r3, [r4, r2]
 800bdb0:	e7ab      	b.n	800bd0a <_malloc_r+0x22>
 800bdb2:	42a3      	cmp	r3, r4
 800bdb4:	6862      	ldr	r2, [r4, #4]
 800bdb6:	d1dd      	bne.n	800bd74 <_malloc_r+0x8c>
 800bdb8:	f8c8 2000 	str.w	r2, [r8]
 800bdbc:	e7ec      	b.n	800bd98 <_malloc_r+0xb0>
 800bdbe:	4623      	mov	r3, r4
 800bdc0:	6864      	ldr	r4, [r4, #4]
 800bdc2:	e7ac      	b.n	800bd1e <_malloc_r+0x36>
 800bdc4:	4634      	mov	r4, r6
 800bdc6:	6876      	ldr	r6, [r6, #4]
 800bdc8:	e7b4      	b.n	800bd34 <_malloc_r+0x4c>
 800bdca:	4613      	mov	r3, r2
 800bdcc:	e7cc      	b.n	800bd68 <_malloc_r+0x80>
 800bdce:	230c      	movs	r3, #12
 800bdd0:	603b      	str	r3, [r7, #0]
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	f000 f80e 	bl	800bdf4 <__malloc_unlock>
 800bdd8:	e797      	b.n	800bd0a <_malloc_r+0x22>
 800bdda:	6025      	str	r5, [r4, #0]
 800bddc:	e7dc      	b.n	800bd98 <_malloc_r+0xb0>
 800bdde:	605b      	str	r3, [r3, #4]
 800bde0:	deff      	udf	#255	; 0xff
 800bde2:	bf00      	nop
 800bde4:	2001042c 	.word	0x2001042c

0800bde8 <__malloc_lock>:
 800bde8:	4801      	ldr	r0, [pc, #4]	; (800bdf0 <__malloc_lock+0x8>)
 800bdea:	f000 b8e5 	b.w	800bfb8 <__retarget_lock_acquire_recursive>
 800bdee:	bf00      	nop
 800bdf0:	20010570 	.word	0x20010570

0800bdf4 <__malloc_unlock>:
 800bdf4:	4801      	ldr	r0, [pc, #4]	; (800bdfc <__malloc_unlock+0x8>)
 800bdf6:	f000 b8e0 	b.w	800bfba <__retarget_lock_release_recursive>
 800bdfa:	bf00      	nop
 800bdfc:	20010570 	.word	0x20010570

0800be00 <memset>:
 800be00:	4402      	add	r2, r0
 800be02:	4603      	mov	r3, r0
 800be04:	4293      	cmp	r3, r2
 800be06:	d100      	bne.n	800be0a <memset+0xa>
 800be08:	4770      	bx	lr
 800be0a:	f803 1b01 	strb.w	r1, [r3], #1
 800be0e:	e7f9      	b.n	800be04 <memset+0x4>

0800be10 <_reclaim_reent>:
 800be10:	4b29      	ldr	r3, [pc, #164]	; (800beb8 <_reclaim_reent+0xa8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4283      	cmp	r3, r0
 800be16:	b570      	push	{r4, r5, r6, lr}
 800be18:	4604      	mov	r4, r0
 800be1a:	d04b      	beq.n	800beb4 <_reclaim_reent+0xa4>
 800be1c:	69c3      	ldr	r3, [r0, #28]
 800be1e:	b143      	cbz	r3, 800be32 <_reclaim_reent+0x22>
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d144      	bne.n	800beb0 <_reclaim_reent+0xa0>
 800be26:	69e3      	ldr	r3, [r4, #28]
 800be28:	6819      	ldr	r1, [r3, #0]
 800be2a:	b111      	cbz	r1, 800be32 <_reclaim_reent+0x22>
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 f8d3 	bl	800bfd8 <_free_r>
 800be32:	6961      	ldr	r1, [r4, #20]
 800be34:	b111      	cbz	r1, 800be3c <_reclaim_reent+0x2c>
 800be36:	4620      	mov	r0, r4
 800be38:	f000 f8ce 	bl	800bfd8 <_free_r>
 800be3c:	69e1      	ldr	r1, [r4, #28]
 800be3e:	b111      	cbz	r1, 800be46 <_reclaim_reent+0x36>
 800be40:	4620      	mov	r0, r4
 800be42:	f000 f8c9 	bl	800bfd8 <_free_r>
 800be46:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be48:	b111      	cbz	r1, 800be50 <_reclaim_reent+0x40>
 800be4a:	4620      	mov	r0, r4
 800be4c:	f000 f8c4 	bl	800bfd8 <_free_r>
 800be50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be52:	b111      	cbz	r1, 800be5a <_reclaim_reent+0x4a>
 800be54:	4620      	mov	r0, r4
 800be56:	f000 f8bf 	bl	800bfd8 <_free_r>
 800be5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be5c:	b111      	cbz	r1, 800be64 <_reclaim_reent+0x54>
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 f8ba 	bl	800bfd8 <_free_r>
 800be64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be66:	b111      	cbz	r1, 800be6e <_reclaim_reent+0x5e>
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 f8b5 	bl	800bfd8 <_free_r>
 800be6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be70:	b111      	cbz	r1, 800be78 <_reclaim_reent+0x68>
 800be72:	4620      	mov	r0, r4
 800be74:	f000 f8b0 	bl	800bfd8 <_free_r>
 800be78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be7a:	b111      	cbz	r1, 800be82 <_reclaim_reent+0x72>
 800be7c:	4620      	mov	r0, r4
 800be7e:	f000 f8ab 	bl	800bfd8 <_free_r>
 800be82:	6a23      	ldr	r3, [r4, #32]
 800be84:	b1b3      	cbz	r3, 800beb4 <_reclaim_reent+0xa4>
 800be86:	4620      	mov	r0, r4
 800be88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be8c:	4718      	bx	r3
 800be8e:	5949      	ldr	r1, [r1, r5]
 800be90:	b941      	cbnz	r1, 800bea4 <_reclaim_reent+0x94>
 800be92:	3504      	adds	r5, #4
 800be94:	69e3      	ldr	r3, [r4, #28]
 800be96:	2d80      	cmp	r5, #128	; 0x80
 800be98:	68d9      	ldr	r1, [r3, #12]
 800be9a:	d1f8      	bne.n	800be8e <_reclaim_reent+0x7e>
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 f89b 	bl	800bfd8 <_free_r>
 800bea2:	e7c0      	b.n	800be26 <_reclaim_reent+0x16>
 800bea4:	680e      	ldr	r6, [r1, #0]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f896 	bl	800bfd8 <_free_r>
 800beac:	4631      	mov	r1, r6
 800beae:	e7ef      	b.n	800be90 <_reclaim_reent+0x80>
 800beb0:	2500      	movs	r5, #0
 800beb2:	e7ef      	b.n	800be94 <_reclaim_reent+0x84>
 800beb4:	bd70      	pop	{r4, r5, r6, pc}
 800beb6:	bf00      	nop
 800beb8:	2000005c 	.word	0x2000005c

0800bebc <_raise_r>:
 800bebc:	291f      	cmp	r1, #31
 800bebe:	b538      	push	{r3, r4, r5, lr}
 800bec0:	4604      	mov	r4, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	d904      	bls.n	800bed0 <_raise_r+0x14>
 800bec6:	2316      	movs	r3, #22
 800bec8:	6003      	str	r3, [r0, #0]
 800beca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bed2:	b112      	cbz	r2, 800beda <_raise_r+0x1e>
 800bed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bed8:	b94b      	cbnz	r3, 800beee <_raise_r+0x32>
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f830 	bl	800bf40 <_getpid_r>
 800bee0:	462a      	mov	r2, r5
 800bee2:	4601      	mov	r1, r0
 800bee4:	4620      	mov	r0, r4
 800bee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beea:	f000 b817 	b.w	800bf1c <_kill_r>
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d00a      	beq.n	800bf08 <_raise_r+0x4c>
 800bef2:	1c59      	adds	r1, r3, #1
 800bef4:	d103      	bne.n	800befe <_raise_r+0x42>
 800bef6:	2316      	movs	r3, #22
 800bef8:	6003      	str	r3, [r0, #0]
 800befa:	2001      	movs	r0, #1
 800befc:	e7e7      	b.n	800bece <_raise_r+0x12>
 800befe:	2400      	movs	r4, #0
 800bf00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf04:	4628      	mov	r0, r5
 800bf06:	4798      	blx	r3
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e7e0      	b.n	800bece <_raise_r+0x12>

0800bf0c <raise>:
 800bf0c:	4b02      	ldr	r3, [pc, #8]	; (800bf18 <raise+0xc>)
 800bf0e:	4601      	mov	r1, r0
 800bf10:	6818      	ldr	r0, [r3, #0]
 800bf12:	f7ff bfd3 	b.w	800bebc <_raise_r>
 800bf16:	bf00      	nop
 800bf18:	2000005c 	.word	0x2000005c

0800bf1c <_kill_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4d07      	ldr	r5, [pc, #28]	; (800bf3c <_kill_r+0x20>)
 800bf20:	2300      	movs	r3, #0
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	f7f4 ff6f 	bl	8000e0c <_kill>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	d102      	bne.n	800bf38 <_kill_r+0x1c>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	b103      	cbz	r3, 800bf38 <_kill_r+0x1c>
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	bd38      	pop	{r3, r4, r5, pc}
 800bf3a:	bf00      	nop
 800bf3c:	2001056c 	.word	0x2001056c

0800bf40 <_getpid_r>:
 800bf40:	f7f4 bf5c 	b.w	8000dfc <_getpid>

0800bf44 <_sbrk_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4d06      	ldr	r5, [pc, #24]	; (800bf60 <_sbrk_r+0x1c>)
 800bf48:	2300      	movs	r3, #0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4608      	mov	r0, r1
 800bf4e:	602b      	str	r3, [r5, #0]
 800bf50:	f7f4 ff76 	bl	8000e40 <_sbrk>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d102      	bne.n	800bf5e <_sbrk_r+0x1a>
 800bf58:	682b      	ldr	r3, [r5, #0]
 800bf5a:	b103      	cbz	r3, 800bf5e <_sbrk_r+0x1a>
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	bd38      	pop	{r3, r4, r5, pc}
 800bf60:	2001056c 	.word	0x2001056c

0800bf64 <__errno>:
 800bf64:	4b01      	ldr	r3, [pc, #4]	; (800bf6c <__errno+0x8>)
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	2000005c 	.word	0x2000005c

0800bf70 <__libc_init_array>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	4d0d      	ldr	r5, [pc, #52]	; (800bfa8 <__libc_init_array+0x38>)
 800bf74:	4c0d      	ldr	r4, [pc, #52]	; (800bfac <__libc_init_array+0x3c>)
 800bf76:	1b64      	subs	r4, r4, r5
 800bf78:	10a4      	asrs	r4, r4, #2
 800bf7a:	2600      	movs	r6, #0
 800bf7c:	42a6      	cmp	r6, r4
 800bf7e:	d109      	bne.n	800bf94 <__libc_init_array+0x24>
 800bf80:	4d0b      	ldr	r5, [pc, #44]	; (800bfb0 <__libc_init_array+0x40>)
 800bf82:	4c0c      	ldr	r4, [pc, #48]	; (800bfb4 <__libc_init_array+0x44>)
 800bf84:	f000 f874 	bl	800c070 <_init>
 800bf88:	1b64      	subs	r4, r4, r5
 800bf8a:	10a4      	asrs	r4, r4, #2
 800bf8c:	2600      	movs	r6, #0
 800bf8e:	42a6      	cmp	r6, r4
 800bf90:	d105      	bne.n	800bf9e <__libc_init_array+0x2e>
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf98:	4798      	blx	r3
 800bf9a:	3601      	adds	r6, #1
 800bf9c:	e7ee      	b.n	800bf7c <__libc_init_array+0xc>
 800bf9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa2:	4798      	blx	r3
 800bfa4:	3601      	adds	r6, #1
 800bfa6:	e7f2      	b.n	800bf8e <__libc_init_array+0x1e>
 800bfa8:	0800c0f0 	.word	0x0800c0f0
 800bfac:	0800c0f0 	.word	0x0800c0f0
 800bfb0:	0800c0f0 	.word	0x0800c0f0
 800bfb4:	0800c0f4 	.word	0x0800c0f4

0800bfb8 <__retarget_lock_acquire_recursive>:
 800bfb8:	4770      	bx	lr

0800bfba <__retarget_lock_release_recursive>:
 800bfba:	4770      	bx	lr

0800bfbc <memcpy>:
 800bfbc:	440a      	add	r2, r1
 800bfbe:	4291      	cmp	r1, r2
 800bfc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bfc4:	d100      	bne.n	800bfc8 <memcpy+0xc>
 800bfc6:	4770      	bx	lr
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfd2:	4291      	cmp	r1, r2
 800bfd4:	d1f9      	bne.n	800bfca <memcpy+0xe>
 800bfd6:	bd10      	pop	{r4, pc}

0800bfd8 <_free_r>:
 800bfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfda:	2900      	cmp	r1, #0
 800bfdc:	d044      	beq.n	800c068 <_free_r+0x90>
 800bfde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe2:	9001      	str	r0, [sp, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f1a1 0404 	sub.w	r4, r1, #4
 800bfea:	bfb8      	it	lt
 800bfec:	18e4      	addlt	r4, r4, r3
 800bfee:	f7ff fefb 	bl	800bde8 <__malloc_lock>
 800bff2:	4a1e      	ldr	r2, [pc, #120]	; (800c06c <_free_r+0x94>)
 800bff4:	9801      	ldr	r0, [sp, #4]
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	b933      	cbnz	r3, 800c008 <_free_r+0x30>
 800bffa:	6063      	str	r3, [r4, #4]
 800bffc:	6014      	str	r4, [r2, #0]
 800bffe:	b003      	add	sp, #12
 800c000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c004:	f7ff bef6 	b.w	800bdf4 <__malloc_unlock>
 800c008:	42a3      	cmp	r3, r4
 800c00a:	d908      	bls.n	800c01e <_free_r+0x46>
 800c00c:	6825      	ldr	r5, [r4, #0]
 800c00e:	1961      	adds	r1, r4, r5
 800c010:	428b      	cmp	r3, r1
 800c012:	bf01      	itttt	eq
 800c014:	6819      	ldreq	r1, [r3, #0]
 800c016:	685b      	ldreq	r3, [r3, #4]
 800c018:	1949      	addeq	r1, r1, r5
 800c01a:	6021      	streq	r1, [r4, #0]
 800c01c:	e7ed      	b.n	800bffa <_free_r+0x22>
 800c01e:	461a      	mov	r2, r3
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	b10b      	cbz	r3, 800c028 <_free_r+0x50>
 800c024:	42a3      	cmp	r3, r4
 800c026:	d9fa      	bls.n	800c01e <_free_r+0x46>
 800c028:	6811      	ldr	r1, [r2, #0]
 800c02a:	1855      	adds	r5, r2, r1
 800c02c:	42a5      	cmp	r5, r4
 800c02e:	d10b      	bne.n	800c048 <_free_r+0x70>
 800c030:	6824      	ldr	r4, [r4, #0]
 800c032:	4421      	add	r1, r4
 800c034:	1854      	adds	r4, r2, r1
 800c036:	42a3      	cmp	r3, r4
 800c038:	6011      	str	r1, [r2, #0]
 800c03a:	d1e0      	bne.n	800bffe <_free_r+0x26>
 800c03c:	681c      	ldr	r4, [r3, #0]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	6053      	str	r3, [r2, #4]
 800c042:	440c      	add	r4, r1
 800c044:	6014      	str	r4, [r2, #0]
 800c046:	e7da      	b.n	800bffe <_free_r+0x26>
 800c048:	d902      	bls.n	800c050 <_free_r+0x78>
 800c04a:	230c      	movs	r3, #12
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	e7d6      	b.n	800bffe <_free_r+0x26>
 800c050:	6825      	ldr	r5, [r4, #0]
 800c052:	1961      	adds	r1, r4, r5
 800c054:	428b      	cmp	r3, r1
 800c056:	bf04      	itt	eq
 800c058:	6819      	ldreq	r1, [r3, #0]
 800c05a:	685b      	ldreq	r3, [r3, #4]
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	bf04      	itt	eq
 800c060:	1949      	addeq	r1, r1, r5
 800c062:	6021      	streq	r1, [r4, #0]
 800c064:	6054      	str	r4, [r2, #4]
 800c066:	e7ca      	b.n	800bffe <_free_r+0x26>
 800c068:	b003      	add	sp, #12
 800c06a:	bd30      	pop	{r4, r5, pc}
 800c06c:	2001042c 	.word	0x2001042c

0800c070 <_init>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	bf00      	nop
 800c074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c076:	bc08      	pop	{r3}
 800c078:	469e      	mov	lr, r3
 800c07a:	4770      	bx	lr

0800c07c <_fini>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	bf00      	nop
 800c080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c082:	bc08      	pop	{r3}
 800c084:	469e      	mov	lr, r3
 800c086:	4770      	bx	lr
