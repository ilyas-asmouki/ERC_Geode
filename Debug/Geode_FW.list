
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c768  0800c768  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800c768  0800c768  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c768  0800c768  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c768  0800c768  0001c768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001051c  20000060  0800c7d0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001057c  0800c7d0  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000252d7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006311  00000000  00000000  000453aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e40  00000000  00000000  0004b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016c6  00000000  00000000  0004d500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019647  00000000  00000000  0004ebc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a327  00000000  00000000  0006820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000804c  00000000  00000000  00072534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  0007a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c66c 	.word	0x0800c66c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800c66c 	.word	0x0800c66c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <MX_CRC_Init+0x50>)
 800024a:	4a13      	ldr	r2, [pc, #76]	; (8000298 <MX_CRC_Init+0x54>)
 800024c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_CRC_Init+0x50>)
 8000250:	2201      	movs	r2, #1
 8000252:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_CRC_Init+0x50>)
 8000256:	2201      	movs	r2, #1
 8000258:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <MX_CRC_Init+0x50>)
 800025c:	2207      	movs	r2, #7
 800025e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_CRC_Init+0x50>)
 8000262:	2208      	movs	r2, #8
 8000264:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <MX_CRC_Init+0x50>)
 8000268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800026c:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_CRC_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_CRC_Init+0x50>)
 8000276:	2200      	movs	r2, #0
 8000278:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_CRC_Init+0x50>)
 800027c:	2201      	movs	r2, #1
 800027e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_CRC_Init+0x50>)
 8000282:	f000 ffa9 	bl	80011d8 <HAL_CRC_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 800028c:	f000 fbe1 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000007c 	.word	0x2000007c
 8000298:	40023000 	.word	0x40023000

0800029c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <HAL_CRC_MspInit+0x38>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d10b      	bne.n	80002c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <HAL_CRC_MspInit+0x3c>)
 80002b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002b2:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <HAL_CRC_MspInit+0x3c>)
 80002b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b8:	6493      	str	r3, [r2, #72]	; 0x48
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <HAL_CRC_MspInit+0x3c>)
 80002bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002c2:	60fb      	str	r3, [r7, #12]
 80002c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80002c6:	bf00      	nop
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023000 	.word	0x40023000
 80002d8:	40021000 	.word	0x40021000

080002dc <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002e2:	4a20      	ldr	r2, [pc, #128]	; (8000364 <MX_FDCAN1_Init+0x88>)
 80002e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MX_FDCAN1_Init+0x84>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000300:	2200      	movs	r2, #0
 8000302:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000306:	2200      	movs	r2, #0
 8000308:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800030c:	2210      	movs	r2, #16
 800030e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000312:	2201      	movs	r2, #1
 8000314:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000318:	2202      	movs	r2, #2
 800031a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800031e:	2202      	movs	r2, #2
 8000320:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000324:	2201      	movs	r2, #1
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800032a:	2201      	movs	r2, #1
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000330:	2201      	movs	r2, #1
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000336:	2201      	movs	r2, #1
 8000338:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000342:	2200      	movs	r2, #0
 8000344:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_FDCAN1_Init+0x84>)
 8000348:	2200      	movs	r2, #0
 800034a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_FDCAN1_Init+0x84>)
 800034e:	f001 f835 	bl	80013bc <HAL_FDCAN_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000358:	f000 fb7b 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	200000a0 	.word	0x200000a0
 8000364:	40006400 	.word	0x40006400

08000368 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <MX_FDCAN2_Init+0x84>)
 800036e:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <MX_FDCAN2_Init+0x88>)
 8000370:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000372:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <MX_FDCAN2_Init+0x84>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <MX_FDCAN2_Init+0x84>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800037e:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_FDCAN2_Init+0x84>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <MX_FDCAN2_Init+0x84>)
 8000386:	2200      	movs	r2, #0
 8000388:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_FDCAN2_Init+0x84>)
 800038c:	2200      	movs	r2, #0
 800038e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <MX_FDCAN2_Init+0x84>)
 8000392:	2200      	movs	r2, #0
 8000394:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_FDCAN2_Init+0x84>)
 8000398:	2210      	movs	r2, #16
 800039a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800039c:	4b13      	ldr	r3, [pc, #76]	; (80003ec <MX_FDCAN2_Init+0x84>)
 800039e:	2201      	movs	r2, #1
 80003a0:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003a4:	2202      	movs	r2, #2
 80003a6:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003bc:	2201      	movs	r2, #1
 80003be:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_FDCAN2_Init+0x84>)
 80003da:	f000 ffef 	bl	80013bc <HAL_FDCAN_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80003e4:	f000 fb35 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000104 	.word	0x20000104
 80003f0:	40006800 	.word	0x40006800

080003f4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b0a0      	sub	sp, #128	; 0x80
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	2254      	movs	r2, #84	; 0x54
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f00b fff0 	bl	800c3fa <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a48      	ldr	r2, [pc, #288]	; (8000540 <HAL_FDCAN_MspInit+0x14c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d142      	bne.n	80004aa <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000428:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800042a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800042e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000430:	f107 0318 	add.w	r3, r7, #24
 8000434:	4618      	mov	r0, r3
 8000436:	f004 f8e3 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000440:	f000 fb07 	bl	8000a52 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000444:	4b3f      	ldr	r3, [pc, #252]	; (8000544 <HAL_FDCAN_MspInit+0x150>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a3e      	ldr	r2, [pc, #248]	; (8000544 <HAL_FDCAN_MspInit+0x150>)
 800044c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800044e:	4b3d      	ldr	r3, [pc, #244]	; (8000544 <HAL_FDCAN_MspInit+0x150>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d10b      	bne.n	800046e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000456:	4b3c      	ldr	r3, [pc, #240]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 8000458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045a:	4a3b      	ldr	r2, [pc, #236]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 800045c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000460:	6593      	str	r3, [r2, #88]	; 0x58
 8000462:	4b39      	ldr	r3, [pc, #228]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b36      	ldr	r3, [pc, #216]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a35      	ldr	r2, [pc, #212]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 8000474:	f043 0302 	orr.w	r3, r3, #2
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b33      	ldr	r3, [pc, #204]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	613b      	str	r3, [r7, #16]
 8000484:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000486:	f44f 7340 	mov.w	r3, #768	; 0x300
 800048a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048c:	2302      	movs	r3, #2
 800048e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000498:	2309      	movs	r3, #9
 800049a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004a0:	4619      	mov	r1, r3
 80004a2:	482a      	ldr	r0, [pc, #168]	; (800054c <HAL_FDCAN_MspInit+0x158>)
 80004a4:	f001 fc80 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80004a8:	e045      	b.n	8000536 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a28      	ldr	r2, [pc, #160]	; (8000550 <HAL_FDCAN_MspInit+0x15c>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d140      	bne.n	8000536 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	4618      	mov	r0, r3
 80004c6:	f004 f89b 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 80004d0:	f000 fabf 	bl	8000a52 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <HAL_FDCAN_MspInit+0x150>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a1a      	ldr	r2, [pc, #104]	; (8000544 <HAL_FDCAN_MspInit+0x150>)
 80004dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <HAL_FDCAN_MspInit+0x150>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d10b      	bne.n	80004fe <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 80004ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f0:	6593      	str	r3, [r2, #88]	; 0x58
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a11      	ldr	r2, [pc, #68]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_FDCAN_MspInit+0x154>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000516:	2360      	movs	r3, #96	; 0x60
 8000518:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	2302      	movs	r3, #2
 800051c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2300      	movs	r3, #0
 8000524:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000526:	2309      	movs	r3, #9
 8000528:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800052e:	4619      	mov	r1, r3
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <HAL_FDCAN_MspInit+0x158>)
 8000532:	f001 fc39 	bl	8001da8 <HAL_GPIO_Init>
}
 8000536:	bf00      	nop
 8000538:	3780      	adds	r7, #128	; 0x80
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40006400 	.word	0x40006400
 8000544:	20000168 	.word	0x20000168
 8000548:	40021000 	.word	0x40021000
 800054c:	48000400 	.word	0x48000400
 8000550:	40006800 	.word	0x40006800

08000554 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

extern void MX_FREERTOS_Init(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	System::init();
 8000558:	f00b f806 	bl	800b568 <_ZN6System4initEv>
	Communication::init();
 800055c:	f00a ffce 	bl	800b4fc <_ZN13Communication4initEv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b5f      	ldr	r3, [pc, #380]	; (80006f8 <MX_GPIO_Init+0x194>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a5e      	ldr	r2, [pc, #376]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b5c      	ldr	r3, [pc, #368]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b59      	ldr	r3, [pc, #356]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	4a58      	ldr	r2, [pc, #352]	; (80006f8 <MX_GPIO_Init+0x194>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059e:	4b56      	ldr	r3, [pc, #344]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b53      	ldr	r3, [pc, #332]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a52      	ldr	r2, [pc, #328]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a4c      	ldr	r2, [pc, #304]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b47      	ldr	r3, [pc, #284]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a46      	ldr	r2, [pc, #280]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b44      	ldr	r3, [pc, #272]	; (80006f8 <MX_GPIO_Init+0x194>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 80005f2:	2200      	movs	r2, #0
 80005f4:	f246 0187 	movw	r1, #24711	; 0x6087
 80005f8:	4840      	ldr	r0, [pc, #256]	; (80006fc <MX_GPIO_Init+0x198>)
 80005fa:	f001 fd57 	bl	80020ac <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	210a      	movs	r1, #10
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 fd51 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2187      	movs	r1, #135	; 0x87
 800060e:	483c      	ldr	r0, [pc, #240]	; (8000700 <MX_GPIO_Init+0x19c>)
 8000610:	f001 fd4c 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 8000614:	f246 0387 	movw	r3, #24711	; 0x6087
 8000618:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4833      	ldr	r0, [pc, #204]	; (80006fc <MX_GPIO_Init+0x198>)
 800062e:	f001 fbbb 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 8000632:	f248 0378 	movw	r3, #32888	; 0x8078
 8000636:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	482d      	ldr	r0, [pc, #180]	; (80006fc <MX_GPIO_Init+0x198>)
 8000648:	f001 fbae 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 800064c:	f240 4305 	movw	r3, #1029	; 0x405
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 fba0 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 8000668:	230a      	movs	r3, #10
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f001 fb91 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 8000686:	2387      	movs	r3, #135	; 0x87
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_GPIO_Init+0x19c>)
 800069e:	f001 fb83 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 80006a2:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_GPIO_Init+0x19c>)
 80006b8:	f001 fb76 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 80006bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x19c>)
 80006d2:	f001 fb69 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_GPIO_Init+0x1a0>)
 80006ea:	f001 fb5d 	bl	8001da8 <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000800 	.word	0x48000800
 8000700:	48000400 	.word	0x48000400
 8000704:	48000c00 	.word	0x48000c00

08000708 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_I2C2_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_I2C2_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_I2C2_Init+0x74>)
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <MX_I2C2_Init+0x7c>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_I2C2_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_I2C2_Init+0x74>)
 8000744:	f001 fcca 	bl	80020dc <HAL_I2C_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800074e:	f000 f980 	bl	8000a52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_I2C2_Init+0x74>)
 8000756:	f001 fd5c 	bl	8002212 <HAL_I2CEx_ConfigAnalogFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 f977 	bl	8000a52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2C2_Init+0x74>)
 8000768:	f001 fd9e 	bl	80022a8 <HAL_I2CEx_ConfigDigitalFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f96e 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000016c 	.word	0x2000016c
 8000780:	40005800 	.word	0x40005800
 8000784:	00e057fd 	.word	0x00e057fd

08000788 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_I2C3_Init+0x74>)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_I2C3_Init+0x78>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_I2C3_Init+0x74>)
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <MX_I2C3_Init+0x7c>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_I2C3_Init+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_I2C3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_I2C3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C3_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C3_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <MX_I2C3_Init+0x74>)
 80007c4:	f001 fc8a 	bl	80020dc <HAL_I2C_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007ce:	f000 f940 	bl	8000a52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4809      	ldr	r0, [pc, #36]	; (80007fc <MX_I2C3_Init+0x74>)
 80007d6:	f001 fd1c 	bl	8002212 <HAL_I2CEx_ConfigAnalogFilter>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007e0:	f000 f937 	bl	8000a52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007e4:	2100      	movs	r1, #0
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2C3_Init+0x74>)
 80007e8:	f001 fd5e 	bl	80022a8 <HAL_I2CEx_ConfigDigitalFilter>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007f2:	f000 f92e 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001c0 	.word	0x200001c0
 8000800:	40007800 	.word	0x40007800
 8000804:	00e057fd 	.word	0x00e057fd

08000808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0a0      	sub	sp, #128	; 0x80
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	2254      	movs	r2, #84	; 0x54
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00b fde6 	bl	800c3fa <memset>
  if(i2cHandle->Instance==I2C2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a3e      	ldr	r2, [pc, #248]	; (800092c <HAL_I2C_MspInit+0x124>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d138      	bne.n	80008aa <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fedb 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000850:	f000 f8ff 	bl	8000a52 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b36      	ldr	r3, [pc, #216]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	4a35      	ldr	r2, [pc, #212]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000860:	4b33      	ldr	r3, [pc, #204]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800086c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000870:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	2312      	movs	r3, #18
 8000874:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800087e:	2304      	movs	r3, #4
 8000880:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 fa8c 	bl	8001da8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089a:	6593      	str	r3, [r2, #88]	; 0x58
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800089e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008a8:	e03c      	b.n	8000924 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <HAL_I2C_MspInit+0x12c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d137      	bne.n	8000924 <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008be:	f107 0318 	add.w	r3, r7, #24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fe9c 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80008ce:	f000 f8c0 	bl	8000a52 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_I2C_MspInit+0x128>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_I2C_MspInit+0x128>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_I2C_MspInit+0x128>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80008fc:	2308      	movs	r3, #8
 80008fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <HAL_I2C_MspInit+0x130>)
 8000908:	f001 fa4e 	bl	8001da8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_I2C_MspInit+0x128>)
 8000912:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000916:	6593      	str	r3, [r2, #88]	; 0x58
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_I2C_MspInit+0x128>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
}
 8000924:	bf00      	nop
 8000926:	3780      	adds	r7, #128	; 0x80
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40005800 	.word	0x40005800
 8000930:	40021000 	.word	0x40021000
 8000934:	40007800 	.word	0x40007800
 8000938:	48000800 	.word	0x48000800

0800093c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_IWDG_Init+0x34>)
 8000942:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <MX_IWDG_Init+0x38>)
 8000944:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <MX_IWDG_Init+0x34>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_IWDG_Init+0x34>)
 800094e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000952:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_IWDG_Init+0x34>)
 8000956:	f640 72ff 	movw	r2, #4095	; 0xfff
 800095a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_IWDG_Init+0x34>)
 800095e:	f001 fcef 	bl	8002340 <HAL_IWDG_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000968:	f000 f873 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000214 	.word	0x20000214
 8000974:	40003000 	.word	0x40003000

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 fad7 	bl	8000f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f81b 	bl	80009ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f7ff fdee 	bl	8000564 <MX_GPIO_Init>
  MX_CRC_Init();
 8000988:	f7ff fc5c 	bl	8000244 <MX_CRC_Init>
  MX_FDCAN1_Init();
 800098c:	f7ff fca6 	bl	80002dc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000990:	f7ff fcea 	bl	8000368 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000994:	f7ff feb8 	bl	8000708 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000998:	f7ff fef6 	bl	8000788 <MX_I2C3_Init>
  MX_IWDG_Init();
 800099c:	f7ff ffce 	bl	800093c <MX_IWDG_Init>
  MX_SPI1_Init();
 80009a0:	f000 f85c 	bl	8000a5c <MX_SPI1_Init>
  MX_SPI2_Init();
 80009a4:	f000 f898 	bl	8000ad8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80009a8:	f000 f8d4 	bl	8000b54 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ac:	f007 ffb6 	bl	800891c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009b0:	f7ff fdd0 	bl	8000554 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009b4:	f007 ffd6 	bl	8008964 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x40>

080009ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b094      	sub	sp, #80	; 0x50
 80009be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	2238      	movs	r2, #56	; 0x38
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f00b fd16 	bl	800c3fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e0:	f003 f874 	bl	8003acc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009e4:	2309      	movs	r3, #9
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	2303      	movs	r3, #3
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 80009fa:	2310      	movs	r3, #16
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000a06:	2306      	movs	r3, #6
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 f8fe 	bl	8003c14 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a1e:	f000 f818 	bl	8000a52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2303      	movs	r3, #3
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fbfc 	bl	8004238 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a46:	f000 f804 	bl	8000a52 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a56:	b672      	cpsid	i
}
 8000a58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <Error_Handler+0x8>

08000a5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_SPI1_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a92:	2208      	movs	r2, #8
 8000a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_SPI1_Init+0x74>)
 8000abc:	f003 ffee 	bl	8004a9c <HAL_SPI_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f7ff ffc4 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000224 	.word	0x20000224
 8000ad4:	40013000 	.word	0x40013000

08000ad8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <MX_SPI2_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000af2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000af6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_SPI2_Init+0x74>)
 8000b38:	f003 ffb0 	bl	8004a9c <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f7ff ff86 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000288 	.word	0x20000288
 8000b50:	40003800 	.word	0x40003800

08000b54 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_SPI3_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_SPI3_Init+0x74>)
 8000bb4:	f003 ff72 	bl	8004a9c <HAL_SPI_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f7ff ff48 	bl	8000a52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002ec 	.word	0x200002ec
 8000bcc:	40003c00 	.word	0x40003c00

08000bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a55      	ldr	r2, [pc, #340]	; (8000d44 <HAL_SPI_MspInit+0x174>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d129      	bne.n	8000c46 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	4b55      	ldr	r3, [pc, #340]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	4a54      	ldr	r2, [pc, #336]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bfe:	4b52      	ldr	r3, [pc, #328]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c06:	623b      	str	r3, [r7, #32]
 8000c08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c22:	23f0      	movs	r3, #240	; 0xf0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c32:	2305      	movs	r3, #5
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c40:	f001 f8b2 	bl	8001da8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c44:	e07a      	b.n	8000d3c <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <HAL_SPI_MspInit+0x17c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d129      	bne.n	8000ca4 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c50:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c92:	2305      	movs	r3, #5
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	482c      	ldr	r0, [pc, #176]	; (8000d50 <HAL_SPI_MspInit+0x180>)
 8000c9e:	f001 f883 	bl	8001da8 <HAL_GPIO_Init>
}
 8000ca2:	e04b      	b.n	8000d3c <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <HAL_SPI_MspInit+0x184>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d146      	bne.n	8000d3c <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	4a25      	ldr	r2, [pc, #148]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_SPI_MspInit+0x178>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d08:	2306      	movs	r3, #6
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f001 f847 	bl	8001da8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_SPI_MspInit+0x188>)
 8000d38:	f001 f836 	bl	8001da8 <HAL_GPIO_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3738      	adds	r7, #56	; 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40013000 	.word	0x40013000
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40003800 	.word	0x40003800
 8000d50:	48000400 	.word	0x48000400
 8000d54:	40003c00 	.word	0x40003c00
 8000d58:	48000800 	.word	0x48000800

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	210f      	movs	r1, #15
 8000d96:	f06f 0001 	mvn.w	r0, #1
 8000d9a:	f000 f9f6 	bl	800118a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8fa 	bl	8000fd4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000de0:	f009 fb22 	bl	800a428 <xTaskGetSchedulerState>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d001      	beq.n	8000dee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dea:	f00a f90d 	bl	800b008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <USB_LP_IRQHandler+0x10>)
 8000dfa:	f001 faf0 	bl	80023de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20010154 	.word	0x20010154

08000e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return 1;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_kill>:

int _kill(int pid, int sig)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e22:	f00b fb9d 	bl	800c560 <__errno>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2216      	movs	r2, #22
 8000e2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_exit>:

void _exit (int status)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ffe7 	bl	8000e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e4a:	e7fe      	b.n	8000e4a <_exit+0x12>

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f00b fb70 	bl	800c560 <__errno>
 8000e80:	4603      	mov	r3, r0
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20020000 	.word	0x20020000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	20000350 	.word	0x20000350
 8000eb4:	20010580 	.word	0x20010580

08000eb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffea 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f00b fb2f 	bl	800c56c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff fd33 	bl	8000978 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f20:	0800c770 	.word	0x0800c770
  ldr r2, =_sbss
 8000f24:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f28:	2001057c 	.word	0x2001057c

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>

08000f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f91b 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f000 f80e 	bl	8000f60 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f50:	f7ff ff04 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	79fb      	ldrb	r3, [r7, #7]

}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_InitTick+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d022      	beq.n	8000fba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_InitTick+0x6c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_InitTick+0x68>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f918 	bl	80011be <HAL_SYSTICK_Config>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10f      	bne.n	8000fb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d809      	bhi.n	8000fae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa2:	f000 f8f2 	bl	800118a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_InitTick+0x70>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e007      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e004      	b.n	8000fbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000354 	.word	0x20000354
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000354 	.word	0x20000354

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff5e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffb2 	bl	8001130 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e054      	b.n	8001294 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7f5b      	ldrb	r3, [r3, #29]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f84e 	bl	800029c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_CRC_Init+0xc4>)
 8001214:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0218 	bic.w	r2, r2, #24
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	e00c      	b.n	8001242 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	461a      	mov	r2, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f834 	bl	80012a0 <HAL_CRCEx_Polynomial_Set>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e028      	b.n	8001294 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	795b      	ldrb	r3, [r3, #5]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	e004      	b.n	8001260 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6912      	ldr	r2, [r2, #16]
 800125e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	04c11db7 	.word	0x04c11db7

080012a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80012b0:	231f      	movs	r3, #31
 80012b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
 80012c2:	e063      	b.n	800138c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80012c4:	bf00      	nop
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1e5a      	subs	r2, r3, #1
 80012ca:	613a      	str	r2, [r7, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d009      	beq.n	80012e4 <HAL_CRCEx_Polynomial_Set+0x44>
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b18      	cmp	r3, #24
 80012e8:	d846      	bhi.n	8001378 <HAL_CRCEx_Polynomial_Set+0xd8>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	0800137f 	.word	0x0800137f
 80012f4:	08001379 	.word	0x08001379
 80012f8:	08001379 	.word	0x08001379
 80012fc:	08001379 	.word	0x08001379
 8001300:	08001379 	.word	0x08001379
 8001304:	08001379 	.word	0x08001379
 8001308:	08001379 	.word	0x08001379
 800130c:	08001379 	.word	0x08001379
 8001310:	0800136d 	.word	0x0800136d
 8001314:	08001379 	.word	0x08001379
 8001318:	08001379 	.word	0x08001379
 800131c:	08001379 	.word	0x08001379
 8001320:	08001379 	.word	0x08001379
 8001324:	08001379 	.word	0x08001379
 8001328:	08001379 	.word	0x08001379
 800132c:	08001379 	.word	0x08001379
 8001330:	08001361 	.word	0x08001361
 8001334:	08001379 	.word	0x08001379
 8001338:	08001379 	.word	0x08001379
 800133c:	08001379 	.word	0x08001379
 8001340:	08001379 	.word	0x08001379
 8001344:	08001379 	.word	0x08001379
 8001348:	08001379 	.word	0x08001379
 800134c:	08001379 	.word	0x08001379
 8001350:	08001355 	.word	0x08001355
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b06      	cmp	r3, #6
 8001358:	d913      	bls.n	8001382 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800135e:	e010      	b.n	8001382 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b07      	cmp	r3, #7
 8001364:	d90f      	bls.n	8001386 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800136a:	e00c      	b.n	8001386 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	d90b      	bls.n	800138a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001376:	e008      	b.n	800138a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	75fb      	strb	r3, [r7, #23]
        break;
 800137c:	e006      	b.n	800138c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800137e:	bf00      	nop
 8001380:	e004      	b.n	800138c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001382:	bf00      	nop
 8001384:	e002      	b.n	800138c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001386:	bf00      	nop
 8001388:	e000      	b.n	800138c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800138a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10d      	bne.n	80013ae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	f023 0118 	bic.w	r1, r3, #24
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e147      	b.n	800165e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f806 	bl	80003f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	699a      	ldr	r2, [r3, #24]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0210 	bic.w	r2, r2, #16
 80013f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f8:	f7ff fdfe 	bl	8000ff8 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013fe:	e012      	b.n	8001426 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001400:	f7ff fdfa 	bl	8000ff8 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b0a      	cmp	r3, #10
 800140c:	d90b      	bls.n	8001426 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e11b      	b.n	800165e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b08      	cmp	r3, #8
 8001432:	d0e5      	beq.n	8001400 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001444:	f7ff fdd8 	bl	8000ff8 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800144a:	e012      	b.n	8001472 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800144c:	f7ff fdd4 	bl	8000ff8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d90b      	bls.n	8001472 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e0f5      	b.n	800165e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0e5      	beq.n	800144c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0202 	orr.w	r2, r2, #2
 800148e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a74      	ldr	r2, [pc, #464]	; (8001668 <HAL_FDCAN_Init+0x2ac>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d103      	bne.n	80014a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800149a:	4a74      	ldr	r2, [pc, #464]	; (800166c <HAL_FDCAN_Init+0x2b0>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7c1b      	ldrb	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d108      	bne.n	80014bc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699a      	ldr	r2, [r3, #24]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014b8:	619a      	str	r2, [r3, #24]
 80014ba:	e007      	b.n	80014cc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7c5b      	ldrb	r3, [r3, #17]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	e007      	b.n	80014f6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699a      	ldr	r2, [r3, #24]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7c9b      	ldrb	r3, [r3, #18]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d108      	bne.n	8001510 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800150c:	619a      	str	r2, [r3, #24]
 800150e:	e007      	b.n	8001520 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699a      	ldr	r2, [r3, #24]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800151e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001544:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0210 	bic.w	r2, r2, #16
 8001554:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d108      	bne.n	8001570 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0204 	orr.w	r2, r2, #4
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	e02c      	b.n	80015ca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d028      	beq.n	80015ca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d01c      	beq.n	80015ba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691a      	ldr	r2, [r3, #16]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0210 	orr.w	r2, r2, #16
 800159e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d110      	bne.n	80015ca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e007      	b.n	80015ca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0220 	orr.w	r2, r2, #32
 80015c8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015da:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015e2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015f2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015f4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015fe:	d115      	bne.n	800162c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	3b01      	subs	r3, #1
 800160c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800160e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	3b01      	subs	r3, #1
 8001616:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001618:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	3b01      	subs	r3, #1
 8001622:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001628:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800162a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fac8 	bl	8001bd8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40006400 	.word	0x40006400
 800166c:	40006500 	.word	0x40006500

08001670 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001680:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <HAL_FDCAN_ConfigFilter+0x1e>
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d13d      	bne.n	800170a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80016a2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80016aa:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e01d      	b.n	8001706 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	075a      	lsls	r2, r3, #29
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	079a      	lsls	r2, r3, #30
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3304      	adds	r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e006      	b.n	8001718 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170e:	f043 0202 	orr.w	r2, r3, #2
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d110      	bne.n	800175a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e006      	b.n	8001768 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f043 0204 	orr.w	r2, r3, #4
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d12c      	bne.n	80017e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d007      	beq.n	80017ac <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e023      	b.n	80017f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa74 	bl	8001cb0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80017d8:	2201      	movs	r2, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e006      	b.n	80017f4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f043 0208 	orr.w	r2, r3, #8
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
  }
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b08b      	sub	sp, #44	; 0x2c
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001814:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001816:	7efb      	ldrb	r3, [r7, #27]
 8001818:	2b02      	cmp	r3, #2
 800181a:	f040 80e8 	bne.w	80019ee <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b40      	cmp	r3, #64	; 0x40
 8001822:	d137      	bne.n	8001894 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0db      	b.n	80019fc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	0e1b      	lsrs	r3, r3, #24
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d10a      	bne.n	800186c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800185e:	0a5b      	lsrs	r3, r3, #9
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001868:	2301      	movs	r3, #1
 800186a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	4613      	mov	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	e036      	b.n	8001902 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189c:	f003 030f 	and.w	r3, r3, #15
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0a3      	b.n	80019fc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018bc:	0e1b      	lsrs	r3, r3, #24
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10a      	bne.n	80018dc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e005      	b.n	8001932 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3304      	adds	r3, #4
 800194e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0c1b      	lsrs	r3, r3, #16
 8001960:	f003 020f 	and.w	r2, r3, #15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	0e1b      	lsrs	r3, r3, #24
 8001986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0fda      	lsrs	r2, r3, #31
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	3304      	adds	r3, #4
 800199c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
 80019a6:	e00a      	b.n	80019be <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	441a      	add	r2, r3
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	440b      	add	r3, r1
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	3301      	adds	r3, #1
 80019bc:	623b      	str	r3, [r7, #32]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_FDCAN_GetRxMessage+0x20c>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	461a      	mov	r2, r3
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d3ec      	bcc.n	80019a8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d105      	bne.n	80019e0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80019de:	e004      	b.n	80019ea <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	f043 0208 	orr.w	r2, r3, #8
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	372c      	adds	r7, #44	; 0x2c
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	0800c710 	.word	0x0800c710

08001a0c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a1e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d003      	beq.n	8001a2e <HAL_FDCAN_ActivateNotification+0x22>
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	f040 80c8 	bne.w	8001bbe <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d03b      	beq.n	8001ac2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d031      	beq.n	8001ac2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d027      	beq.n	8001ac2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01d      	beq.n	8001ac2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d013      	beq.n	8001ac2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f003 0320 	and.w	r3, r3, #32
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d009      	beq.n	8001ac2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d107      	bne.n	8001ad2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d13b      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d131      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d127      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11d      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00c      	beq.n	8001b6e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0202 	orr.w	r2, r2, #2
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e006      	b.n	8001bcc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	f043 0202 	orr.w	r2, r3, #2
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001be2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2f      	ldr	r2, [pc, #188]	; (8001ca8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d103      	bne.n	8001bf6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001bf4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2c      	ldr	r2, [pc, #176]	; (8001cac <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d103      	bne.n	8001c08 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001c06:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c16:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c3c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	061a      	lsls	r2, r3, #24
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e005      	b.n	8001c8a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d3f3      	bcc.n	8001c7e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	4000a400 	.word	0x4000a400
 8001ca8:	40006800 	.word	0x40006800
 8001cac:	40006c00 	.word	0x40006c00

08001cb0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001cce:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e00a      	b.n	8001cf2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ce4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001cea:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cf0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001cfc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d02:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d08:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e020      	b.n	8001d86 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3303      	adds	r3, #3
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3302      	adds	r3, #2
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	440b      	add	r3, r1
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d5c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	440b      	add	r3, r1
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d6a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	440a      	add	r2, r1
 8001d72:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d74:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3304      	adds	r3, #4
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d3d6      	bcc.n	8001d44 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3724      	adds	r7, #36	; 0x24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	0800c710 	.word	0x0800c710

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001db6:	e15a      	b.n	800206e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 814c 	beq.w	8002068 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d005      	beq.n	8001de8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d130      	bne.n	8001e4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e1e:	2201      	movs	r2, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f003 0201 	and.w	r2, r3, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d017      	beq.n	8001e86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d123      	bne.n	8001eda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	08da      	lsrs	r2, r3, #3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3208      	adds	r2, #8
 8001ed4:	6939      	ldr	r1, [r7, #16]
 8001ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0203 	and.w	r2, r3, #3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80a6 	beq.w	8002068 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_GPIO_Init+0x2e4>)
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f20:	4a5a      	ldr	r2, [pc, #360]	; (800208c <HAL_GPIO_Init+0x2e4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6613      	str	r3, [r2, #96]	; 0x60
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_GPIO_Init+0x2e4>)
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f34:	4a56      	ldr	r2, [pc, #344]	; (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5e:	d01f      	beq.n	8001fa0 <HAL_GPIO_Init+0x1f8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <HAL_GPIO_Init+0x2ec>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d019      	beq.n	8001f9c <HAL_GPIO_Init+0x1f4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a4b      	ldr	r2, [pc, #300]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_GPIO_Init+0x1f0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a4a      	ldr	r2, [pc, #296]	; (800209c <HAL_GPIO_Init+0x2f4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d00d      	beq.n	8001f94 <HAL_GPIO_Init+0x1ec>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a49      	ldr	r2, [pc, #292]	; (80020a0 <HAL_GPIO_Init+0x2f8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d007      	beq.n	8001f90 <HAL_GPIO_Init+0x1e8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d101      	bne.n	8001f8c <HAL_GPIO_Init+0x1e4>
 8001f88:	2305      	movs	r3, #5
 8001f8a:	e00a      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e008      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e006      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f94:	2303      	movs	r3, #3
 8001f96:	e004      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e002      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	f002 0203 	and.w	r2, r2, #3
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	4093      	lsls	r3, r2
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb2:	4937      	ldr	r1, [pc, #220]	; (8002090 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fea:	4b2f      	ldr	r3, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800200e:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_GPIO_Init+0x300>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f ae9d 	bne.w	8001db8 <HAL_GPIO_Init+0x10>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	48000400 	.word	0x48000400
 8002098:	48000800 	.word	0x48000800
 800209c:	48000c00 	.word	0x48000c00
 80020a0:	48001000 	.word	0x48001000
 80020a4:	48001400 	.word	0x48001400
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e08d      	b.n	800220a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fb80 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2224      	movs	r2, #36	; 0x24
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800212c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800213c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	e006      	b.n	8002164 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002162:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d108      	bne.n	800217e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	e007      	b.n	800218e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800219c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69d9      	ldr	r1, [r3, #28]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b20      	cmp	r3, #32
 8002226:	d138      	bne.n	800229a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002232:	2302      	movs	r3, #2
 8002234:	e032      	b.n	800229c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2224      	movs	r2, #36	; 0x24
 8002242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002264:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
  }
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d139      	bne.n	8002332 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e033      	b.n	8002334 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e041      	b.n	80023d6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800235a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f245 5255 	movw	r2, #21845	; 0x5555
 8002364:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6852      	ldr	r2, [r2, #4]
 800236e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6892      	ldr	r2, [r2, #8]
 8002378:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800237a:	f7fe fe3d 	bl	8000ff8 <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002380:	e00f      	b.n	80023a2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002382:	f7fe fe39 	bl	8000ff8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b31      	cmp	r3, #49	; 0x31
 800238e:	d908      	bls.n	80023a2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e019      	b.n	80023d6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e8      	bne.n	8002382 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d005      	beq.n	80023ca <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	611a      	str	r2, [r3, #16]
 80023c8:	e004      	b.n	80023d4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 f984 	bl	80076f8 <USB_ReadInterrupts>
 80023f0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 faa4 	bl	800294a <PCD_EP_ISR_Handler>

    return;
 8002402:	e110      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	2b00      	cmp	r3, #0
 800240c:	d013      	beq.n	8002436 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002420:	b292      	uxth	r2, r2
 8002422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f009 fd36 	bl	800be98 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800242c:	2100      	movs	r1, #0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8fc 	bl	800262c <HAL_PCD_SetAddress>

    return;
 8002434:	e0f7      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002452:	b292      	uxth	r2, r2
 8002454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002458:	e0e5      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002476:	b292      	uxth	r2, r2
 8002478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800247c:	e0d3      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d034      	beq.n	80024f2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0204 	bic.w	r2, r2, #4
 800249a:	b292      	uxth	r2, r2
 800249c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0208 	bic.w	r2, r2, #8
 80024b2:	b292      	uxth	r2, r2
 80024b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024ca:	2100      	movs	r1, #0
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f009 fe29 	bl	800c124 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f009 fd18 	bl	800bf08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024ea:	b292      	uxth	r2, r2
 80024ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024f0:	e099      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d027      	beq.n	800254c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002504:	b29a      	uxth	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	b292      	uxth	r2, r2
 8002510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0204 	orr.w	r2, r2, #4
 800253e:	b292      	uxth	r2, r2
 8002540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f009 fcc5 	bl	800bed4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800254a:	e06c      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d040      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002568:	b292      	uxth	r2, r2
 800256a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d12b      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002580:	b29a      	uxth	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0204 	orr.w	r2, r2, #4
 800258a:	b292      	uxth	r2, r2
 800258c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	b292      	uxth	r2, r2
 80025a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025c6:	2101      	movs	r1, #1
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f009 fdab 	bl	800c124 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80025ce:	e02a      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f009 fc7f 	bl	800bed4 <HAL_PCD_SuspendCallback>
    return;
 80025d6:	e026      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00f      	beq.n	8002602 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f4:	b292      	uxth	r2, r2
 80025f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f009 fc3e 	bl	800be7c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002600:	e011      	b.n	8002626 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261e:	b292      	uxth	r2, r2
 8002620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002624:	bf00      	nop
  }
}
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_PCD_SetAddress+0x1a>
 8002642:	2302      	movs	r3, #2
 8002644:	e012      	b.n	800266c <HAL_PCD_SetAddress+0x40>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f005 f837 	bl	80076d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	70fb      	strb	r3, [r7, #3]
 8002686:	460b      	mov	r3, r1
 8002688:	803b      	strh	r3, [r7, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da0e      	bge.n	80026b8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0207 	and.w	r2, r3, #7
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	3310      	adds	r3, #16
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	705a      	strb	r2, [r3, #1]
 80026b6:	e00e      	b.n	80026d6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 0207 	and.w	r2, r3, #7
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026e2:	883a      	ldrh	r2, [r7, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	78ba      	ldrb	r2, [r7, #2]
 80026ec:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026ee:	78bb      	ldrb	r3, [r7, #2]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d102      	bne.n	80026fa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_PCD_EP_Open+0x94>
 8002704:	2302      	movs	r3, #2
 8002706:	e00e      	b.n	8002726 <HAL_PCD_EP_Open+0xb2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 ff66 	bl	80055e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002724:	7afb      	ldrb	r3, [r7, #11]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	460b      	mov	r3, r1
 800273c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	f003 0207 	and.w	r2, r3, #7
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2200      	movs	r2, #0
 800276c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	b2da      	uxtb	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6979      	ldr	r1, [r7, #20]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 faf5 	bl	8005d70 <USB_EPStartXfer>

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	460b      	mov	r3, r1
 800279e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a0:	7afb      	ldrb	r3, [r7, #11]
 80027a2:	f003 0207 	and.w	r2, r3, #7
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	3310      	adds	r3, #16
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2201      	movs	r2, #1
 80027da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fabe 	bl	8005d70 <USB_EPStartXfer>

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	7912      	ldrb	r2, [r2, #4]
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e03e      	b.n	800289a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800281c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002820:	2b00      	cmp	r3, #0
 8002822:	da0e      	bge.n	8002842 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 0207 	and.w	r2, r3, #7
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	3310      	adds	r3, #16
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	705a      	strb	r2, [r3, #1]
 8002840:	e00c      	b.n	800285c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_EP_SetStall+0x7e>
 8002878:	2302      	movs	r3, #2
 800287a:	e00e      	b.n	800289a <HAL_PCD_EP_SetStall+0x9c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fe21 	bl	80074d2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	7912      	ldrb	r2, [r2, #4]
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e040      	b.n	8002942 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	da0e      	bge.n	80028e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 0207 	and.w	r2, r3, #7
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	3310      	adds	r3, #16
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	705a      	strb	r2, [r3, #1]
 80028e4:	e00e      	b.n	8002904 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	f003 0207 	and.w	r2, r3, #7
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_EP_ClrStall+0x82>
 8002920:	2302      	movs	r3, #2
 8002922:	e00e      	b.n	8002942 <HAL_PCD_EP_ClrStall+0xa0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68f9      	ldr	r1, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fe1e 	bl	8007574 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b096      	sub	sp, #88	; 0x58
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002952:	e3ae      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800296e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 8170 	bne.w	8002c58 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d14d      	bne.n	8002a20 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	b29b      	uxth	r3, r3
 800298c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	81fb      	strh	r3, [r7, #14]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	89fb      	ldrh	r3, [r7, #14]
 800299c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3310      	adds	r3, #16
 80029ac:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	441a      	add	r2, r3
 80029e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029e4:	2100      	movs	r1, #0
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f009 fa2e 	bl	800be48 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7b1b      	ldrb	r3, [r3, #12]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 835d 	beq.w	80030b2 <PCD_EP_ISR_Handler+0x768>
 80029f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 8358 	bne.w	80030b2 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7b1b      	ldrb	r3, [r3, #12]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b292      	uxth	r2, r2
 8002a14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	731a      	strb	r2, [r3, #12]
 8002a1e:	e348      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002a26:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d032      	beq.n	8002aa4 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f004 fe8f 	bl	800779c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	823b      	strh	r3, [r7, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	8a3a      	ldrh	r2, [r7, #16]
 8002a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f009 f9a6 	bl	800bdee <HAL_PCD_SetupStageCallback>
 8002aa2:	e306      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002aa4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f280 8302 	bge.w	80030b2 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aba:	4013      	ands	r3, r2
 8002abc:	83fb      	strh	r3, [r7, #30]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	8bfa      	ldrh	r2, [r7, #30]
 8002ac4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d019      	beq.n	8002b30 <PCD_EP_ISR_Handler+0x1e6>
 8002afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0a:	6959      	ldr	r1, [r3, #20]
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f004 fe41 	bl	800779c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	441a      	add	r2, r3
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f009 f971 	bl	800be12 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 82b5 	bne.w	80030b2 <PCD_EP_ISR_Handler+0x768>
 8002b48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b54:	f000 82ad 	beq.w	80030b2 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b8e:	d91d      	bls.n	8002bcc <PCD_EP_ISR_Handler+0x282>
 8002b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	647b      	str	r3, [r7, #68]	; 0x44
 8002b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <PCD_EP_ISR_Handler+0x260>
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	e026      	b.n	8002c1a <PCD_EP_ISR_Handler+0x2d0>
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <PCD_EP_ISR_Handler+0x2a0>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e017      	b.n	8002c1a <PCD_EP_ISR_Handler+0x2d0>
 8002bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <PCD_EP_ISR_Handler+0x2ba>
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c00:	3301      	adds	r3, #1
 8002c02:	647b      	str	r3, [r7, #68]	; 0x44
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	827b      	strh	r3, [r7, #18]
 8002c2c:	8a7b      	ldrh	r3, [r7, #18]
 8002c2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c32:	827b      	strh	r3, [r7, #18]
 8002c34:	8a7b      	ldrh	r3, [r7, #18]
 8002c36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c3a:	827b      	strh	r3, [r7, #18]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	8a7b      	ldrh	r3, [r7, #18]
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
 8002c56:	e22c      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f280 80f6 	bge.w	8002e62 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cac:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	7b1b      	ldrb	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d123      	bne.n	8002d12 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002cf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 808e 	beq.w	8002e18 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d02:	6959      	ldr	r1, [r3, #20]
 8002d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d06:	88da      	ldrh	r2, [r3, #6]
 8002d08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002d0c:	f004 fd46 	bl	800779c <USB_ReadPMA>
 8002d10:	e082      	b.n	8002e18 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d14:	78db      	ldrb	r3, [r3, #3]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d10a      	bne.n	8002d30 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9d3 	bl	80030ce <HAL_PCD_EP_DB_Receive>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002d2e:	e073      	b.n	8002e18 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	461a      	mov	r2, r3
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	441a      	add	r2, r3
 8002d5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d022      	beq.n	8002dd4 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002db6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02c      	beq.n	8002e18 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	6959      	ldr	r1, [r3, #20]
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	891a      	ldrh	r2, [r3, #8]
 8002dca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002dce:	f004 fce5 	bl	800779c <USB_ReadPMA>
 8002dd2:	e021      	b.n	8002e18 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4413      	add	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002df8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002dfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0a:	6959      	ldr	r1, [r3, #20]
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	895a      	ldrh	r2, [r3, #10]
 8002e10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e14:	f004 fcc2 	bl	800779c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e20:	441a      	add	r2, r3
 8002e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e2e:	441a      	add	r2, r3
 8002e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e32:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <PCD_EP_ISR_Handler+0x4fe>
 8002e3c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d206      	bcs.n	8002e56 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f008 ffdf 	bl	800be12 <HAL_PCD_DataOutStageCallback>
 8002e54:	e005      	b.n	8002e62 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 ff87 	bl	8005d70 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8121 	beq.w	80030b2 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e70:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3310      	adds	r3, #16
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 80a2 	bne.w	800300e <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed2:	7b1b      	ldrb	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8093 	beq.w	8003000 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d046      	beq.n	8002f74 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d126      	bne.n	8002f3c <PCD_EP_ISR_Handler+0x5f2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	4413      	add	r3, r2
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00da      	lsls	r2, r3, #3
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	4413      	add	r3, r2
 8002f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f14:	623b      	str	r3, [r7, #32]
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	801a      	strh	r2, [r3, #0]
 8002f3a:	e061      	b.n	8003000 <PCD_EP_ISR_Handler+0x6b6>
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d15d      	bne.n	8003000 <PCD_EP_ISR_Handler+0x6b6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	4413      	add	r3, r2
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	00da      	lsls	r2, r3, #3
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	4413      	add	r3, r2
 8002f66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e045      	b.n	8003000 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d126      	bne.n	8002fd0 <PCD_EP_ISR_Handler+0x686>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	4413      	add	r3, r2
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	00da      	lsls	r2, r3, #3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	e017      	b.n	8003000 <PCD_EP_ISR_Handler+0x6b6>
 8002fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d113      	bne.n	8003000 <PCD_EP_ISR_Handler+0x6b6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe6:	4413      	add	r3, r2
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f008 ff1e 	bl	800be48 <HAL_PCD_DataInStageCallback>
 800300c:	e051      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800300e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d144      	bne.n	80030a4 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	4413      	add	r3, r2
 8003034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800304a:	429a      	cmp	r2, r3
 800304c:	d907      	bls.n	800305e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800304e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	e002      	b.n	8003064 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800305e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800306c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f008 fee8 	bl	800be48 <HAL_PCD_DataInStageCallback>
 8003078:	e01b      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800307a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003082:	441a      	add	r2, r3
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003090:	441a      	add	r2, r3
 8003092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003094:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800309c:	4618      	mov	r0, r3
 800309e:	f002 fe67 	bl	8005d70 <USB_EPStartXfer>
 80030a2:	e006      	b.n	80030b2 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80030a8:	461a      	mov	r2, r3
 80030aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f917 	bl	80032e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	b21b      	sxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f6ff ac48 	blt.w	8002954 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3758      	adds	r7, #88	; 0x58
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b088      	sub	sp, #32
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	4613      	mov	r3, r2
 80030da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d07c      	beq.n	80031e0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800310a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	429a      	cmp	r2, r3
 8003114:	d306      	bcc.n	8003124 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	8b7b      	ldrh	r3, [r7, #26]
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	e002      	b.n	800312a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d123      	bne.n	800317a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29b      	uxth	r3, r3
 8003144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314c:	833b      	strh	r3, [r7, #24]
 800314e:	8b3b      	ldrh	r3, [r7, #24]
 8003150:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003154:	833b      	strh	r3, [r7, #24]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	8b3b      	ldrh	r3, [r7, #24]
 8003166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	b29b      	uxth	r3, r3
 8003178:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01f      	beq.n	80031c4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	82fb      	strh	r3, [r7, #22]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	8afb      	ldrh	r3, [r7, #22]
 80031b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031c4:	8b7b      	ldrh	r3, [r7, #26]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8085 	beq.w	80032d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	6959      	ldr	r1, [r3, #20]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	891a      	ldrh	r2, [r3, #8]
 80031d8:	8b7b      	ldrh	r3, [r7, #26]
 80031da:	f004 fadf 	bl	800779c <USB_ReadPMA>
 80031de:	e07a      	b.n	80032d6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003204:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	8b7b      	ldrh	r3, [r7, #26]
 800320c:	429a      	cmp	r2, r3
 800320e:	d306      	bcc.n	800321e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	8b7b      	ldrh	r3, [r7, #26]
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	619a      	str	r2, [r3, #24]
 800321c:	e002      	b.n	8003224 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d123      	bne.n	8003274 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	83fb      	strh	r3, [r7, #30]
 8003248:	8bfb      	ldrh	r3, [r7, #30]
 800324a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800324e:	83fb      	strh	r3, [r7, #30]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	8bfb      	ldrh	r3, [r7, #30]
 8003260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	b29b      	uxth	r3, r3
 8003272:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11f      	bne.n	80032be <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003298:	83bb      	strh	r3, [r7, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	8bbb      	ldrh	r3, [r7, #28]
 80032aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6959      	ldr	r1, [r3, #20]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	895a      	ldrh	r2, [r3, #10]
 80032d0:	8b7b      	ldrh	r3, [r7, #26]
 80032d2:	f004 fa63 	bl	800779c <USB_ReadPMA>
    }
  }

  return count;
 80032d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0a4      	sub	sp, #144	; 0x90
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 81db 	beq.w	80036b0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4413      	add	r3, r2
 8003314:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800331e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800332a:	429a      	cmp	r2, r3
 800332c:	d907      	bls.n	800333e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003336:	1ad2      	subs	r2, r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	e002      	b.n	8003344 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 80b9 	bne.w	80034c0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d126      	bne.n	80033a4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	4413      	add	r3, r2
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	00da      	lsls	r2, r3, #3
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	4413      	add	r3, r2
 8003378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800337c:	62bb      	str	r3, [r7, #40]	; 0x28
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003388:	b29a      	uxth	r2, r3
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	801a      	strh	r2, [r3, #0]
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339c:	b29a      	uxth	r2, r3
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	e01a      	b.n	80033da <HAL_PCD_EP_DB_Transmit+0xfa>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d116      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0xfa>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	4413      	add	r3, r2
 80033c2:	637b      	str	r3, [r7, #52]	; 0x34
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	00da      	lsls	r2, r3, #3
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	4413      	add	r3, r2
 80033ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	2200      	movs	r2, #0
 80033d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	785b      	ldrb	r3, [r3, #1]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d126      	bne.n	8003436 <HAL_PCD_EP_DB_Transmit+0x156>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	00da      	lsls	r2, r3, #3
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800341a:	b29a      	uxth	r2, r3
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800342a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800342e:	b29a      	uxth	r2, r3
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	801a      	strh	r2, [r3, #0]
 8003434:	e017      	b.n	8003466 <HAL_PCD_EP_DB_Transmit+0x186>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d113      	bne.n	8003466 <HAL_PCD_EP_DB_Transmit+0x186>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003446:	b29b      	uxth	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	4413      	add	r3, r2
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00da      	lsls	r2, r3, #3
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	4413      	add	r3, r2
 800345a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800345e:	623b      	str	r3, [r7, #32]
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	2200      	movs	r2, #0
 8003464:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f008 fceb 	bl	800be48 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 82fa 	beq.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	82fb      	strh	r3, [r7, #22]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	8afb      	ldrh	r3, [r7, #22]
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]
 80034be:	e2d8      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d021      	beq.n	800350e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 82ac 	bne.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003522:	441a      	add	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003530:	441a      	add	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d30b      	bcc.n	800355a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	621a      	str	r2, [r3, #32]
 8003558:	e017      	b.n	800358a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003562:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003572:	e00a      	b.n	800358a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2200      	movs	r2, #0
 8003588:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d165      	bne.n	800365e <HAL_PCD_EP_DB_Transmit+0x37e>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a6:	4413      	add	r3, r2
 80035a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	00da      	lsls	r2, r3, #3
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	4413      	add	r3, r2
 80035b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ce:	2b3e      	cmp	r3, #62	; 0x3e
 80035d0:	d91d      	bls.n	800360e <HAL_PCD_EP_DB_Transmit+0x32e>
 80035d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d102      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x30c>
 80035e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e8:	3b01      	subs	r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	029b      	lsls	r3, r3, #10
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4313      	orrs	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003606:	b29a      	uxth	r2, r3
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e044      	b.n	8003698 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800360e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_PCD_EP_DB_Transmit+0x34c>
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003624:	b29a      	uxth	r2, r3
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	e035      	b.n	8003698 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800362c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003630:	085b      	lsrs	r3, r3, #1
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
 8003634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_PCD_EP_DB_Transmit+0x366>
 8003640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003642:	3301      	adds	r3, #1
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29a      	uxth	r2, r3
 800364c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364e:	b29b      	uxth	r3, r3
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	b29b      	uxth	r3, r3
 8003654:	4313      	orrs	r3, r2
 8003656:	b29a      	uxth	r2, r3
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	e01c      	b.n	8003698 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d118      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	4413      	add	r3, r2
 800367c:	647b      	str	r3, [r7, #68]	; 0x44
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	00da      	lsls	r2, r3, #3
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	4413      	add	r3, r2
 8003688:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800368c:	643b      	str	r3, [r7, #64]	; 0x40
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003692:	b29a      	uxth	r2, r3
 8003694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003696:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	891a      	ldrh	r2, [r3, #8]
 80036a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f004 f835 	bl	8007718 <USB_WritePMA>
 80036ae:	e1e0      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d307      	bcc.n	80036f4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036ec:	1ad2      	subs	r2, r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	619a      	str	r2, [r3, #24]
 80036f2:	e002      	b.n	80036fa <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 80c0 	bne.w	8003884 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d126      	bne.n	800375a <HAL_PCD_EP_DB_Transmit+0x47a>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003720:	4413      	add	r3, r2
 8003722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	00da      	lsls	r2, r3, #3
 800372a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800372c:	4413      	add	r3, r2
 800372e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003732:	67bb      	str	r3, [r7, #120]	; 0x78
 8003734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	b29a      	uxth	r2, r3
 8003740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003752:	b29a      	uxth	r2, r3
 8003754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	e01a      	b.n	8003790 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d116      	bne.n	8003790 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	667b      	str	r3, [r7, #100]	; 0x64
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003776:	4413      	add	r3, r2
 8003778:	667b      	str	r3, [r7, #100]	; 0x64
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	00da      	lsls	r2, r3, #3
 8003780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003782:	4413      	add	r3, r2
 8003784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003788:	663b      	str	r3, [r7, #96]	; 0x60
 800378a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378c:	2200      	movs	r2, #0
 800378e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d12b      	bne.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x516>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	4413      	add	r3, r2
 80037b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	00da      	lsls	r2, r3, #3
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	4413      	add	r3, r2
 80037c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e017      	b.n	8003826 <HAL_PCD_EP_DB_Transmit+0x546>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d113      	bne.n	8003826 <HAL_PCD_EP_DB_Transmit+0x546>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	4413      	add	r3, r2
 800380e:	677b      	str	r3, [r7, #116]	; 0x74
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	00da      	lsls	r2, r3, #3
 8003816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003818:	4413      	add	r3, r2
 800381a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800381e:	673b      	str	r3, [r7, #112]	; 0x70
 8003820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003822:	2200      	movs	r2, #0
 8003824:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f008 fb0b 	bl	800be48 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 811a 	bne.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003858:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800386e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800387a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800387e:	b29b      	uxth	r3, r3
 8003880:	8013      	strh	r3, [r2, #0]
 8003882:	e0f6      	b.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d121      	bne.n	80038d2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80038be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 80ca 	bne.w	8003a72 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80038e6:	441a      	add	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80038f4:	441a      	add	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6a1a      	ldr	r2, [r3, #32]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	429a      	cmp	r2, r3
 8003904:	d30b      	bcc.n	800391e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	621a      	str	r2, [r3, #32]
 800391c:	e017      	b.n	800394e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800392a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003936:	e00a      	b.n	800394e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	657b      	str	r3, [r7, #84]	; 0x54
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	785b      	ldrb	r3, [r3, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d165      	bne.n	8003a28 <HAL_PCD_EP_DB_Transmit+0x748>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003970:	4413      	add	r3, r2
 8003972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	00da      	lsls	r2, r3, #3
 800397a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397c:	4413      	add	r3, r2
 800397e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003982:	65bb      	str	r3, [r7, #88]	; 0x58
 8003984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	b29a      	uxth	r2, r3
 8003990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003992:	801a      	strh	r2, [r3, #0]
 8003994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003998:	2b3e      	cmp	r3, #62	; 0x3e
 800399a:	d91d      	bls.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800399c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80039b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b2:	3b01      	subs	r3, #1
 80039b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039be:	b29b      	uxth	r3, r3
 80039c0:	029b      	lsls	r3, r3, #10
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4313      	orrs	r3, r2
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	e041      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x77c>
 80039d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x716>
 80039e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	e032      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x77c>
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80039fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x730>
 8003a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	029b      	lsls	r3, r3, #10
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a24:	801a      	strh	r2, [r3, #0]
 8003a26:	e019      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	785b      	ldrb	r3, [r3, #1]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d115      	bne.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3e:	4413      	add	r3, r2
 8003a40:	657b      	str	r3, [r7, #84]	; 0x54
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	00da      	lsls	r2, r3, #3
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a50:	653b      	str	r3, [r7, #80]	; 0x50
 8003a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6959      	ldr	r1, [r3, #20]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	895a      	ldrh	r2, [r3, #10]
 8003a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f003 fe53 	bl	8007718 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8c:	82bb      	strh	r3, [r7, #20]
 8003a8e:	8abb      	ldrh	r3, [r7, #20]
 8003a90:	f083 0310 	eor.w	r3, r3, #16
 8003a94:	82bb      	strh	r3, [r7, #20]
 8003a96:	8abb      	ldrh	r3, [r7, #20]
 8003a98:	f083 0320 	eor.w	r3, r3, #32
 8003a9c:	82bb      	strh	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	441a      	add	r2, r3
 8003aac:	8abb      	ldrh	r3, [r7, #20]
 8003aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3790      	adds	r7, #144	; 0x90
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d141      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ada:	4b4b      	ldr	r3, [pc, #300]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae6:	d131      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae8:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aee:	4a46      	ldr	r2, [pc, #280]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b00:	4a41      	ldr	r2, [pc, #260]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2232      	movs	r2, #50	; 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a3f      	ldr	r2, [pc, #252]	; (8003c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1e:	e002      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d102      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3a:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d158      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e057      	b.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b52:	4a2d      	ldr	r2, [pc, #180]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b5c:	e04d      	b.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d141      	bne.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b66:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d131      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b74:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7a:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b8c:	4a1e      	ldr	r2, [pc, #120]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2232      	movs	r2, #50	; 0x32
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a1c      	ldr	r2, [pc, #112]	; (8003c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003baa:	e002      	b.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f2      	bne.n	8003bac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd2:	d112      	bne.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e011      	b.n	8003bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003be8:	e007      	b.n	8003bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bea:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bf2:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	431bde83 	.word	0x431bde83

08003c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e2fe      	b.n	8004224 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d075      	beq.n	8003d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4b97      	ldr	r3, [pc, #604]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3c:	4b94      	ldr	r3, [pc, #592]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3e>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_OscConfig+0x44>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x108>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d157      	bne.n	8003d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e2d9      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x74>
 8003c7a:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a84      	ldr	r2, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0x98>
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xb0>
 8003cac:	4b78      	ldr	r3, [pc, #480]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a77      	ldr	r2, [pc, #476]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b75      	ldr	r3, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a74      	ldr	r2, [pc, #464]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd f994 	bl	8000ff8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fd f990 	bl	8000ff8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e29e      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xc0>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fd f980 	bl	8000ff8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fd f97c 	bl	8000ff8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e28a      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d0e:	4b60      	ldr	r3, [pc, #384]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0xe8>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d075      	beq.n	8003e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2a:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d34:	4b56      	ldr	r3, [pc, #344]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_OscConfig+0x136>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d002      	beq.n	8003d50 <HAL_RCC_OscConfig+0x13c>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11f      	bne.n	8003d90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_RCC_OscConfig+0x154>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e25d      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d68:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	4946      	ldr	r1, [pc, #280]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_RCC_OscConfig+0x280>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f8ed 	bl	8000f60 <HAL_InitTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d043      	beq.n	8003e14 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e249      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d023      	beq.n	8003de0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd f928 	bl	8000ff8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dac:	f7fd f924 	bl	8000ff8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e232      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dbe:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	492d      	ldr	r1, [pc, #180]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
 8003dde:	e01a      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd f904 	bl	8000ff8 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df4:	f7fd f900 	bl	8000ff8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e20e      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0x1e0>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d041      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01c      	beq.n	8003e64 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e30:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fd f8dd 	bl	8000ff8 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e42:	f7fd f8d9 	bl	8000ff8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1e7      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ef      	beq.n	8003e42 <HAL_RCC_OscConfig+0x22e>
 8003e62:	e020      	b.n	8003ea6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd f8c0 	bl	8000ff8 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7a:	e00d      	b.n	8003e98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fd f8bc 	bl	8000ff8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d906      	bls.n	8003e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e1ca      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e98:	4b8c      	ldr	r3, [pc, #560]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ea      	bne.n	8003e7c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80a6 	beq.w	8004000 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003eb8:	4b84      	ldr	r3, [pc, #528]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x2b4>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x2b6>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b7f      	ldr	r3, [pc, #508]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a7e      	ldr	r2, [pc, #504]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eda:	4b7c      	ldr	r3, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eea:	4b79      	ldr	r3, [pc, #484]	; (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d118      	bne.n	8003f28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef6:	4b76      	ldr	r3, [pc, #472]	; (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a75      	ldr	r2, [pc, #468]	; (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f02:	f7fd f879 	bl	8000ff8 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fd f875 	bl	8000ff8 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e183      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1c:	4b6c      	ldr	r3, [pc, #432]	; (80040d0 <HAL_RCC_OscConfig+0x4bc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d108      	bne.n	8003f42 <HAL_RCC_OscConfig+0x32e>
 8003f30:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f40:	e024      	b.n	8003f8c <HAL_RCC_OscConfig+0x378>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d110      	bne.n	8003f6c <HAL_RCC_OscConfig+0x358>
 8003f4a:	4b60      	ldr	r3, [pc, #384]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	4a5e      	ldr	r2, [pc, #376]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	f043 0304 	orr.w	r3, r3, #4
 8003f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	4a5a      	ldr	r2, [pc, #360]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f6a:	e00f      	b.n	8003f8c <HAL_RCC_OscConfig+0x378>
 8003f6c:	4b57      	ldr	r3, [pc, #348]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f7c:	4b53      	ldr	r3, [pc, #332]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	4a52      	ldr	r2, [pc, #328]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d016      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd f830 	bl	8000ff8 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fd f82c 	bl	8000ff8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e138      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb2:	4b46      	ldr	r3, [pc, #280]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ed      	beq.n	8003f9c <HAL_RCC_OscConfig+0x388>
 8003fc0:	e015      	b.n	8003fee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fd f819 	bl	8000ff8 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd f815 	bl	8000ff8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e121      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ed      	bne.n	8003fca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	4a34      	ldr	r2, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d03c      	beq.n	8004086 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004014:	4b2d      	ldr	r3, [pc, #180]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800401a:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fc ffe8 	bl	8000ff8 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800402c:	f7fc ffe4 	bl	8000ff8 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0f2      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0ef      	beq.n	800402c <HAL_RCC_OscConfig+0x418>
 800404c:	e01b      	b.n	8004086 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fc ffcb 	bl	8000ff8 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004066:	f7fc ffc7 	bl	8000ff8 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0d5      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ef      	bne.n	8004066 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 80c9 	beq.w	8004222 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004090:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b0c      	cmp	r3, #12
 800409a:	f000 8083 	beq.w	80041a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d15e      	bne.n	8004164 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_RCC_OscConfig+0x4b8>)
 80040ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fc ffa1 	bl	8000ff8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	e00c      	b.n	80040d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ba:	f7fc ff9d 	bl	8000ff8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d905      	bls.n	80040d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0ab      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	4b55      	ldr	r3, [pc, #340]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ec      	bne.n	80040ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e0:	4b52      	ldr	r3, [pc, #328]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	4b52      	ldr	r3, [pc, #328]	; (8004230 <HAL_RCC_OscConfig+0x61c>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6a11      	ldr	r1, [r2, #32]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f0:	3a01      	subs	r2, #1
 80040f2:	0112      	lsls	r2, r2, #4
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040fa:	0212      	lsls	r2, r2, #8
 80040fc:	4311      	orrs	r1, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004102:	0852      	lsrs	r2, r2, #1
 8004104:	3a01      	subs	r2, #1
 8004106:	0552      	lsls	r2, r2, #21
 8004108:	4311      	orrs	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800410e:	0852      	lsrs	r2, r2, #1
 8004110:	3a01      	subs	r2, #1
 8004112:	0652      	lsls	r2, r2, #25
 8004114:	4311      	orrs	r1, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800411a:	06d2      	lsls	r2, r2, #27
 800411c:	430a      	orrs	r2, r1
 800411e:	4943      	ldr	r1, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004120:	4313      	orrs	r3, r2
 8004122:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a40      	ldr	r2, [pc, #256]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a3d      	ldr	r2, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fc ff5c 	bl	8000ff8 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fc ff58 	bl	8000ff8 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e066      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004156:	4b35      	ldr	r3, [pc, #212]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x530>
 8004162:	e05e      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800416a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fc ff42 	bl	8000ff8 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fc ff3e 	bl	8000ff8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e04c      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004196:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_OscConfig+0x618>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4924      	ldr	r1, [pc, #144]	; (800422c <HAL_RCC_OscConfig+0x618>)
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <HAL_RCC_OscConfig+0x620>)
 800419e:	4013      	ands	r3, r2
 80041a0:	60cb      	str	r3, [r1, #12]
 80041a2:	e03e      	b.n	8004222 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e039      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041b0:	4b1e      	ldr	r3, [pc, #120]	; (800422c <HAL_RCC_OscConfig+0x618>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d12c      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	3b01      	subs	r3, #1
 80041d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d123      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d11b      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d113      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d109      	bne.n	800421e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	3b01      	subs	r3, #1
 8004218:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000
 8004230:	019f800c 	.word	0x019f800c
 8004234:	feeefffc 	.word	0xfeeefffc

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e11e      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d910      	bls.n	8004280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 020f 	bic.w	r2, r3, #15
 8004266:	498c      	ldr	r1, [pc, #560]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b8a      	ldr	r3, [pc, #552]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e106      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d073      	beq.n	8004374 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d129      	bne.n	80042e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004294:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0f4      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042a4:	f000 f966 	bl	8004574 <RCC_GetSysClockFreqFromPLLSource>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4a7c      	ldr	r2, [pc, #496]	; (80044a0 <HAL_RCC_ClockConfig+0x268>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d93f      	bls.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042b2:	4b7a      	ldr	r3, [pc, #488]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d033      	beq.n	8004332 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d12f      	bne.n	8004332 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042d2:	4b72      	ldr	r3, [pc, #456]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042da:	4a70      	ldr	r2, [pc, #448]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80042dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e024      	b.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f0:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0c6      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004300:	4b66      	ldr	r3, [pc, #408]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0be      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004310:	f000 f8ce 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004314:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4a61      	ldr	r2, [pc, #388]	; (80044a0 <HAL_RCC_ClockConfig+0x268>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d909      	bls.n	8004332 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004326:	4a5d      	ldr	r2, [pc, #372]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004332:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f023 0203 	bic.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	4957      	ldr	r1, [pc, #348]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004344:	f7fc fe58 	bl	8000ff8 <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	e00a      	b.n	8004362 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434c:	f7fc fe54 	bl	8000ff8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e095      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	4b4e      	ldr	r3, [pc, #312]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 020c 	and.w	r2, r3, #12
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	429a      	cmp	r2, r3
 8004372:	d1eb      	bne.n	800434c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d023      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800438c:	4b43      	ldr	r3, [pc, #268]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	4a42      	ldr	r2, [pc, #264]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004396:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d007      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043a4:	4b3d      	ldr	r3, [pc, #244]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043ac:	4a3b      	ldr	r2, [pc, #236]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80043ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	4936      	ldr	r1, [pc, #216]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
 80043c6:	e008      	b.n	80043da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d105      	bne.n	80043da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4a32      	ldr	r2, [pc, #200]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 80043d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043da:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d21d      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e8:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 020f 	bic.w	r2, r3, #15
 80043f0:	4929      	ldr	r1, [pc, #164]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043f8:	f7fc fdfe 	bl	8000ff8 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fc fdfa 	bl	8000ff8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e03b      	b.n	800448e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_RCC_ClockConfig+0x260>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d1ed      	bne.n	8004400 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4917      	ldr	r1, [pc, #92]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	490f      	ldr	r1, [pc, #60]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004462:	f000 f825 	bl	80044b0 <HAL_RCC_GetSysClockFreq>
 8004466:	4602      	mov	r2, r0
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_ClockConfig+0x264>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	490c      	ldr	r1, [pc, #48]	; (80044a4 <HAL_RCC_ClockConfig+0x26c>)
 8004474:	5ccb      	ldrb	r3, [r1, r3]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	fa22 f303 	lsr.w	r3, r2, r3
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_RCC_ClockConfig+0x270>)
 8004480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <HAL_RCC_ClockConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fc fd6a 	bl	8000f60 <HAL_InitTick>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40022000 	.word	0x40022000
 800449c:	40021000 	.word	0x40021000
 80044a0:	04c4b400 	.word	0x04c4b400
 80044a4:	0800c700 	.word	0x0800c700
 80044a8:	20000000 	.word	0x20000000
 80044ac:	20000004 	.word	0x20000004

080044b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044b6:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d102      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c2:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_GetSysClockFreq+0xbc>)
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e047      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d102      	bne.n	80044da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d4:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e03e      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d136      	bne.n	8004554 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	3301      	adds	r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d10c      	bne.n	800451e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004504:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	4a16      	ldr	r2, [pc, #88]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450e:	68d2      	ldr	r2, [r2, #12]
 8004510:	0a12      	lsrs	r2, r2, #8
 8004512:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	617b      	str	r3, [r7, #20]
      break;
 800451c:	e00c      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	4a10      	ldr	r2, [pc, #64]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004528:	68d2      	ldr	r2, [r2, #12]
 800452a:	0a12      	lsrs	r2, r2, #8
 800452c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
      break;
 8004536:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0e5b      	lsrs	r3, r3, #25
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	3301      	adds	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e001      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004558:	693b      	ldr	r3, [r7, #16]
}
 800455a:	4618      	mov	r0, r3
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	00f42400 	.word	0x00f42400
 8004570:	02dc6c00 	.word	0x02dc6c00

08004574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d10c      	bne.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a2:	68d2      	ldr	r2, [r2, #12]
 80045a4:	0a12      	lsrs	r2, r2, #8
 80045a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
    break;
 80045b0:	e00c      	b.n	80045cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045bc:	68d2      	ldr	r2, [r2, #12]
 80045be:	0a12      	lsrs	r2, r2, #8
 80045c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    break;
 80045ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0e5b      	lsrs	r3, r3, #25
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045e6:	687b      	ldr	r3, [r7, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40021000 	.word	0x40021000
 80045f8:	02dc6c00 	.word	0x02dc6c00
 80045fc:	00f42400 	.word	0x00f42400

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004608:	2300      	movs	r3, #0
 800460a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800460c:	2300      	movs	r3, #0
 800460e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8098 	beq.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b43      	ldr	r3, [pc, #268]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b40      	ldr	r3, [pc, #256]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	4a3f      	ldr	r2, [pc, #252]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004638:	6593      	str	r3, [r2, #88]	; 0x58
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a39      	ldr	r2, [pc, #228]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004656:	f7fc fccf 	bl	8000ff8 <HAL_GetTick>
 800465a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465c:	e009      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fc fccb 	bl	8000ff8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
        break;
 8004670:	e005      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ef      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d159      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	d019      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a0:	4b23      	ldr	r3, [pc, #140]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fc fc8b 	bl	8000ff8 <HAL_GetTick>
 80046e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e4:	e00b      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fc fc87 	bl	8000ff8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
            break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ec      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	74bb      	strb	r3, [r7, #18]
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473c:	7c7b      	ldrb	r3, [r7, #17]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	4ba7      	ldr	r3, [pc, #668]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	4aa6      	ldr	r2, [pc, #664]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475a:	4ba1      	ldr	r3, [pc, #644]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f023 0203 	bic.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	499d      	ldr	r1, [pc, #628]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477c:	4b98      	ldr	r3, [pc, #608]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 020c 	bic.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4995      	ldr	r1, [pc, #596]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800479e:	4b90      	ldr	r3, [pc, #576]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	498c      	ldr	r1, [pc, #560]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c0:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4984      	ldr	r1, [pc, #528]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e2:	4b7f      	ldr	r3, [pc, #508]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	497b      	ldr	r1, [pc, #492]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004804:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	4973      	ldr	r1, [pc, #460]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b6e      	ldr	r3, [pc, #440]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	496a      	ldr	r1, [pc, #424]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004848:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4962      	ldr	r1, [pc, #392]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486a:	4b5d      	ldr	r3, [pc, #372]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	4959      	ldr	r1, [pc, #356]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488c:	4b54      	ldr	r3, [pc, #336]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	4951      	ldr	r1, [pc, #324]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b4c      	ldr	r3, [pc, #304]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	4948      	ldr	r1, [pc, #288]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d0:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	4940      	ldr	r1, [pc, #256]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004908:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004916:	4932      	ldr	r1, [pc, #200]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004926:	d105      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b2d      	ldr	r3, [pc, #180]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004946:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	4924      	ldr	r1, [pc, #144]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800495e:	d105      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004996:	d105      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	4908      	ldr	r1, [pc, #32]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f0:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	4926      	ldr	r1, [pc, #152]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a10:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a28:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	4918      	ldr	r1, [pc, #96]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a60:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	490a      	ldr	r1, [pc, #40]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e09d      	b.n	8004bea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d108      	bne.n	8004ac8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004abe:	d009      	beq.n	8004ad4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	61da      	str	r2, [r3, #28]
 8004ac6:	e005      	b.n	8004ad4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc f86e 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b14:	d902      	bls.n	8004b1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e002      	b.n	8004b22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b2a:	d007      	beq.n	8004b3c <HAL_SPI_Init+0xa0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b34:	d002      	beq.n	8004b3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	ea42 0103 	orr.w	r1, r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	0c1b      	lsrs	r3, r3, #16
 8004b98:	f003 0204 	and.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bb8:	ea42 0103 	orr.w	r1, r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b088      	sub	sp, #32
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_SPI_Transmit+0x22>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e15f      	b.n	8004ed4 <HAL_SPI_Transmit+0x2e2>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1c:	f7fc f9ec 	bl	8000ff8 <HAL_GetTick>
 8004c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c36:	e148      	b.n	8004eca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Transmit+0x52>
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c48:	e13f      	b.n	8004eca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c94:	d10f      	bne.n	8004cb6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b40      	cmp	r3, #64	; 0x40
 8004cc2:	d007      	beq.n	8004cd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cdc:	d94f      	bls.n	8004d7e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_Transmit+0xfa>
 8004ce6:	8afb      	ldrh	r3, [r7, #22]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d142      	bne.n	8004d72 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	1c9a      	adds	r2, r3, #2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d10:	e02f      	b.n	8004d72 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d112      	bne.n	8004d46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d44:	e015      	b.n	8004d72 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d46:	f7fc f957 	bl	8000ff8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d803      	bhi.n	8004d5e <HAL_SPI_Transmit+0x16c>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d5c:	d102      	bne.n	8004d64 <HAL_SPI_Transmit+0x172>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004d70:	e0ab      	b.n	8004eca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ca      	bne.n	8004d12 <HAL_SPI_Transmit+0x120>
 8004d7c:	e080      	b.n	8004e80 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit+0x19a>
 8004d86:	8afb      	ldrh	r3, [r7, #22]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d174      	bne.n	8004e76 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d912      	bls.n	8004dbc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	881a      	ldrh	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	1c9a      	adds	r2, r3, #2
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b02      	subs	r3, #2
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dba:	e05c      	b.n	8004e76 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	7812      	ldrb	r2, [r2, #0]
 8004dc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004de2:	e048      	b.n	8004e76 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d12b      	bne.n	8004e4a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d912      	bls.n	8004e22 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b02      	subs	r3, #2
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e20:	e029      	b.n	8004e76 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e48:	e015      	b.n	8004e76 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e4a:	f7fc f8d5 	bl	8000ff8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d803      	bhi.n	8004e62 <HAL_SPI_Transmit+0x270>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e60:	d102      	bne.n	8004e68 <HAL_SPI_Transmit+0x276>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004e74:	e029      	b.n	8004eca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1b1      	bne.n	8004de4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fb69 	bl	800555c <SPI_EndRxTxTransaction>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e003      	b.n	8004eca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004eea:	2301      	movs	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x26>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e20a      	b.n	8005318 <HAL_SPI_TransmitReceive+0x43c>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0a:	f7fc f875 	bl	8000ff8 <HAL_GetTick>
 8004f0e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f16:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f22:	887b      	ldrh	r3, [r7, #2]
 8004f24:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f26:	7efb      	ldrb	r3, [r7, #27]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d00e      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x6e>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d106      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x66>
 8004f3c:	7efb      	ldrb	r3, [r7, #27]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
 8004f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f48:	e1e0      	b.n	800530c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x80>
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f62:	e1d3      	b.n	800530c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d003      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2205      	movs	r2, #5
 8004f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	887a      	ldrh	r2, [r7, #2]
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fba:	d802      	bhi.n	8004fc2 <HAL_SPI_TransmitReceive+0xe6>
 8004fbc:	8a3b      	ldrh	r3, [r7, #16]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d908      	bls.n	8004fd4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e007      	b.n	8004fe4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d007      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800500a:	f240 8081 	bls.w	8005110 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_SPI_TransmitReceive+0x140>
 8005016:	8a7b      	ldrh	r3, [r7, #18]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d16d      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	881a      	ldrh	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	1c9a      	adds	r2, r3, #2
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005040:	e05a      	b.n	80050f8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b02      	cmp	r3, #2
 800504e:	d11b      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x1ac>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_SPI_TransmitReceive+0x1ac>
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	2b01      	cmp	r3, #1
 800505e:	d113      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	881a      	ldrh	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d11c      	bne.n	80050d0 <HAL_SPI_TransmitReceive+0x1f4>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	b292      	uxth	r2, r2
 80050ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050cc:	2301      	movs	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050d0:	f7fb ff92 	bl	8000ff8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050dc:	429a      	cmp	r2, r3
 80050de:	d80b      	bhi.n	80050f8 <HAL_SPI_TransmitReceive+0x21c>
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e6:	d007      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80050f6:	e109      	b.n	800530c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d19f      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x166>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d199      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x166>
 800510e:	e0e3      	b.n	80052d8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x244>
 8005118:	8a7b      	ldrh	r3, [r7, #18]
 800511a:	2b01      	cmp	r3, #1
 800511c:	f040 80cf 	bne.w	80052be <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d912      	bls.n	8005150 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	881a      	ldrh	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	1c9a      	adds	r2, r3, #2
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b02      	subs	r3, #2
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800514e:	e0b6      	b.n	80052be <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005176:	e0a2      	b.n	80052be <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d134      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x314>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02f      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x314>
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	2b01      	cmp	r3, #1
 8005194:	d12c      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d912      	bls.n	80051c6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b02      	subs	r3, #2
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051c4:	e012      	b.n	80051ec <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d148      	bne.n	8005290 <HAL_SPI_TransmitReceive+0x3b4>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d042      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	d923      	bls.n	800525e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	b292      	uxth	r2, r2
 8005222:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b02      	subs	r3, #2
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d81f      	bhi.n	800528c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	e016      	b.n	800528c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f103 020c 	add.w	r2, r3, #12
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800528c:	2301      	movs	r3, #1
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005290:	f7fb feb2 	bl	8000ff8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529c:	429a      	cmp	r2, r3
 800529e:	d803      	bhi.n	80052a8 <HAL_SPI_TransmitReceive+0x3cc>
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a6:	d102      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x3d2>
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d107      	bne.n	80052be <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80052bc:	e026      	b.n	800530c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f af57 	bne.w	8005178 <HAL_SPI_TransmitReceive+0x29c>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f47f af50 	bne.w	8005178 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f93d 	bl	800555c <SPI_EndRxTxTransaction>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e003      	b.n	800530c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005318:	4618      	mov	r0, r3
 800531a:	3728      	adds	r7, #40	; 0x28
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005330:	f7fb fe62 	bl	8000ff8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4413      	add	r3, r2
 800533e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005340:	f7fb fe5a 	bl	8000ff8 <HAL_GetTick>
 8005344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005346:	4b39      	ldr	r3, [pc, #228]	; (800542c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	015b      	lsls	r3, r3, #5
 800534c:	0d1b      	lsrs	r3, r3, #20
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005356:	e054      	b.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535e:	d050      	beq.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005360:	f7fb fe4a 	bl	8000ff8 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	429a      	cmp	r2, r3
 800536e:	d902      	bls.n	8005376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d13d      	bne.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538e:	d111      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005398:	d004      	beq.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d107      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d10f      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e017      	b.n	8005422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3b01      	subs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	429a      	cmp	r2, r3
 800541e:	d19b      	bne.n	8005358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000000 	.word	0x20000000

08005430 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005442:	f7fb fdd9 	bl	8000ff8 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	4413      	add	r3, r2
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005452:	f7fb fdd1 	bl	8000ff8 <HAL_GetTick>
 8005456:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005460:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	00da      	lsls	r2, r3, #3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	0d1b      	lsrs	r3, r3, #20
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005478:	e060      	b.n	800553c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005480:	d107      	bne.n	8005492 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005490:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005498:	d050      	beq.n	800553c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800549a:	f7fb fdad 	bl	8000ff8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d902      	bls.n	80054b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d13d      	bne.n	800552c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c8:	d111      	bne.n	80054ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d2:	d004      	beq.n	80054de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054dc:	d107      	bne.n	80054ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	d10f      	bne.n	8005518 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005516:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e010      	b.n	800554e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	3b01      	subs	r3, #1
 800553a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	429a      	cmp	r2, r3
 800554a:	d196      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3728      	adds	r7, #40	; 0x28
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af02      	add	r7, sp, #8
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff ff5b 	bl	8005430 <SPI_WaitFifoStateUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e027      	b.n	80055e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7ff fec0 	bl	8005320 <SPI_WaitFlagStateUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e014      	b.n	80055e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2200      	movs	r2, #0
 80055be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ff34 	bl	8005430 <SPI_WaitFifoStateUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e000      	b.n	80055e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b09d      	sub	sp, #116	; 0x74
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	78db      	ldrb	r3, [r3, #3]
 8005616:	2b03      	cmp	r3, #3
 8005618:	d81f      	bhi.n	800565a <USB_ActivateEndpoint+0x72>
 800561a:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <USB_ActivateEndpoint+0x38>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005631 	.word	0x08005631
 8005624:	0800564d 	.word	0x0800564d
 8005628:	08005663 	.word	0x08005663
 800562c:	0800563f 	.word	0x0800563f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005630:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005638:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800563c:	e012      	b.n	8005664 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800563e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005642:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005646:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800564a:	e00b      	b.n	8005664 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800564c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005654:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005658:	e004      	b.n	8005664 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005660:	e000      	b.n	8005664 <USB_ActivateEndpoint+0x7c>
      break;
 8005662:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	b21b      	sxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	b21a      	sxth	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80056bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	7b1b      	ldrb	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 8178 	bne.w	80059ca <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8084 	beq.w	80057ec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	61bb      	str	r3, [r7, #24]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4413      	add	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00da      	lsls	r2, r3, #3
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	88db      	ldrh	r3, [r3, #6]
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	b29b      	uxth	r3, r3
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	827b      	strh	r3, [r7, #18]
 8005726:	8a7b      	ldrh	r3, [r7, #18]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <USB_ActivateEndpoint+0x180>
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	823b      	strh	r3, [r7, #16]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	441a      	add	r2, r3
 8005752:	8a3b      	ldrh	r3, [r7, #16]
 8005754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005764:	b29b      	uxth	r3, r3
 8005766:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	78db      	ldrb	r3, [r3, #3]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d020      	beq.n	80057b2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005786:	81bb      	strh	r3, [r7, #12]
 8005788:	89bb      	ldrh	r3, [r7, #12]
 800578a:	f083 0320 	eor.w	r3, r3, #32
 800578e:	81bb      	strh	r3, [r7, #12]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	89bb      	ldrh	r3, [r7, #12]
 800579c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	8013      	strh	r3, [r2, #0]
 80057b0:	e2d5      	b.n	8005d5e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c8:	81fb      	strh	r3, [r7, #14]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	441a      	add	r2, r3
 80057d4:	89fb      	ldrh	r3, [r7, #14]
 80057d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]
 80057ea:	e2b8      	b.n	8005d5e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	633b      	str	r3, [r7, #48]	; 0x30
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	4413      	add	r3, r2
 80057fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	00da      	lsls	r2, r3, #3
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	4413      	add	r3, r2
 800580a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	88db      	ldrh	r3, [r3, #6]
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	b29b      	uxth	r3, r3
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582a:	b29b      	uxth	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	4413      	add	r3, r2
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	00da      	lsls	r2, r3, #3
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	4413      	add	r3, r2
 800583e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800584e:	b29a      	uxth	r2, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b3e      	cmp	r3, #62	; 0x3e
 800585a:	d91d      	bls.n	8005898 <USB_ActivateEndpoint+0x2b0>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	66bb      	str	r3, [r7, #104]	; 0x68
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <USB_ActivateEndpoint+0x28e>
 8005870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005872:	3b01      	subs	r3, #1
 8005874:	66bb      	str	r3, [r7, #104]	; 0x68
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29a      	uxth	r2, r3
 800587c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800587e:	b29b      	uxth	r3, r3
 8005880:	029b      	lsls	r3, r3, #10
 8005882:	b29b      	uxth	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	b29b      	uxth	r3, r3
 8005888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005890:	b29a      	uxth	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e026      	b.n	80058e6 <USB_ActivateEndpoint+0x2fe>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <USB_ActivateEndpoint+0x2ce>
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e017      	b.n	80058e6 <USB_ActivateEndpoint+0x2fe>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	085b      	lsrs	r3, r3, #1
 80058bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <USB_ActivateEndpoint+0x2e8>
 80058ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058cc:	3301      	adds	r3, #1
 80058ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058d8:	b29b      	uxth	r3, r3
 80058da:	029b      	lsls	r3, r3, #10
 80058dc:	b29b      	uxth	r3, r3
 80058de:	4313      	orrs	r3, r2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80058f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01b      	beq.n	8005936 <USB_ActivateEndpoint+0x34e>
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005914:	843b      	strh	r3, [r7, #32]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	8c3b      	ldrh	r3, [r7, #32]
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d124      	bne.n	8005988 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	83bb      	strh	r3, [r7, #28]
 8005956:	8bbb      	ldrh	r3, [r7, #28]
 8005958:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800595c:	83bb      	strh	r3, [r7, #28]
 800595e:	8bbb      	ldrh	r3, [r7, #28]
 8005960:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005964:	83bb      	strh	r3, [r7, #28]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	8bbb      	ldrh	r3, [r7, #28]
 8005972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005982:	b29b      	uxth	r3, r3
 8005984:	8013      	strh	r3, [r2, #0]
 8005986:	e1ea      	b.n	8005d5e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	83fb      	strh	r3, [r7, #30]
 80059a0:	8bfb      	ldrh	r3, [r7, #30]
 80059a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059a6:	83fb      	strh	r3, [r7, #30]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	441a      	add	r2, r3
 80059b2:	8bfb      	ldrh	r3, [r7, #30]
 80059b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]
 80059c8:	e1c9      	b.n	8005d5e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d11e      	bne.n	8005a10 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8013      	strh	r3, [r2, #0]
 8005a0e:	e01d      	b.n	8005a4c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	441a      	add	r2, r3
 8005a34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a5c:	4413      	add	r3, r2
 8005a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	00da      	lsls	r2, r3, #3
 8005a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	891b      	ldrh	r3, [r3, #8]
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	657b      	str	r3, [r7, #84]	; 0x54
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a90:	4413      	add	r3, r2
 8005a92:	657b      	str	r3, [r7, #84]	; 0x54
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	00da      	lsls	r2, r3, #3
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	895b      	ldrh	r3, [r3, #10]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f040 8093 	bne.w	8005be4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ace:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01b      	beq.n	8005b12 <USB_ActivateEndpoint+0x52a>
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01b      	beq.n	8005b62 <USB_ActivateEndpoint+0x57a>
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b40:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b78:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b80:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b88:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
 8005be2:	e0bc      	b.n	8005d5e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005bf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01d      	beq.n	8005c3c <USB_ActivateEndpoint+0x654>
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01d      	beq.n	8005c94 <USB_ActivateEndpoint+0x6ac>
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	78db      	ldrb	r3, [r3, #3]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d024      	beq.n	8005ce6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cba:	f083 0320 	eor.w	r3, r3, #32
 8005cbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8013      	strh	r3, [r2, #0]
 8005ce4:	e01d      	b.n	8005d22 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3774      	adds	r7, #116	; 0x74
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b0c2      	sub	sp, #264	; 0x108
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d7e:	6018      	str	r0, [r3, #0]
 8005d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d88:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	f040 86b7 	bne.w	8006b0a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d908      	bls.n	8005dca <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dc8:	e007      	b.n	8005dda <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	7b1b      	ldrb	r3, [r3, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d13a      	bne.n	8005e60 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6959      	ldr	r1, [r3, #20]
 8005df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	88da      	ldrh	r2, [r3, #6]
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e10:	6800      	ldr	r0, [r0, #0]
 8005e12:	f001 fc81 	bl	8007718 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	00da      	lsls	r2, r3, #3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	f000 be1f 	b.w	8006a9e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	78db      	ldrb	r3, [r3, #3]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	f040 8462 	bne.w	8006736 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	f240 83df 	bls.w	800664e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 81c7 	beq.w	80062c0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d177      	bne.n	800603e <USB_EPStartXfer+0x2ce>
 8005f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	4413      	add	r3, r2
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	00da      	lsls	r2, r3, #3
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	4413      	add	r3, r2
 8005f84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa0:	d921      	bls.n	8005fe6 <USB_EPStartXfer+0x276>
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <USB_EPStartXfer+0x252>
 8005fb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e050      	b.n	8006088 <USB_EPStartXfer+0x318>
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <USB_EPStartXfer+0x294>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	e041      	b.n	8006088 <USB_EPStartXfer+0x318>
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <USB_EPStartXfer+0x2b4>
 800601a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800601e:	3301      	adds	r3, #1
 8006020:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29a      	uxth	r2, r3
 800602a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800602e:	b29b      	uxth	r3, r3
 8006030:	029b      	lsls	r3, r3, #10
 8006032:	b29b      	uxth	r3, r3
 8006034:	4313      	orrs	r3, r2
 8006036:	b29a      	uxth	r2, r3
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e024      	b.n	8006088 <USB_EPStartXfer+0x318>
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d11c      	bne.n	8006088 <USB_EPStartXfer+0x318>
 800604e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	4413      	add	r3, r2
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
 8006066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	00da      	lsls	r2, r3, #3
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	4413      	add	r3, r2
 8006078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006082:	b29a      	uxth	r2, r3
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	895b      	ldrh	r3, [r3, #10]
 8006094:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6959      	ldr	r1, [r3, #20]
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80060ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060b6:	6800      	ldr	r0, [r0, #0]
 80060b8:	f001 fb2e 	bl	8007718 <USB_WritePMA>
            ep->xfer_buff += len;
 80060bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060cc:	441a      	add	r2, r3
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d90f      	bls.n	8006116 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80060f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	621a      	str	r2, [r3, #32]
 8006114:	e00e      	b.n	8006134 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2200      	movs	r2, #0
 8006132:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d177      	bne.n	8006234 <USB_EPStartXfer+0x4c4>
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	4413      	add	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	00da      	lsls	r2, r3, #3
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	4413      	add	r3, r2
 800617a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800618a:	b29a      	uxth	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006194:	2b3e      	cmp	r3, #62	; 0x3e
 8006196:	d921      	bls.n	80061dc <USB_EPStartXfer+0x46c>
 8006198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <USB_EPStartXfer+0x448>
 80061ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b2:	3b01      	subs	r3, #1
 80061b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	e056      	b.n	800628a <USB_EPStartXfer+0x51a>
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <USB_EPStartXfer+0x48a>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e047      	b.n	800628a <USB_EPStartXfer+0x51a>
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d004      	beq.n	800621a <USB_EPStartXfer+0x4aa>
 8006210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006214:	3301      	adds	r3, #1
 8006216:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29a      	uxth	r2, r3
 8006220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29b      	uxth	r3, r3
 800622a:	4313      	orrs	r3, r2
 800622c:	b29a      	uxth	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e02a      	b.n	800628a <USB_EPStartXfer+0x51a>
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	785b      	ldrb	r3, [r3, #1]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d122      	bne.n	800628a <USB_EPStartXfer+0x51a>
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	623b      	str	r3, [r7, #32]
 8006250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	4413      	add	r3, r2
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	00da      	lsls	r2, r3, #3
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	4413      	add	r3, r2
 800627a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	b29a      	uxth	r2, r3
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800628a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	891b      	ldrh	r3, [r3, #8]
 8006296:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800629a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800629e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6959      	ldr	r1, [r3, #20]
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062b8:	6800      	ldr	r0, [r0, #0]
 80062ba:	f001 fa2d 	bl	8007718 <USB_WritePMA>
 80062be:	e3ee      	b.n	8006a9e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80062c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	785b      	ldrb	r3, [r3, #1]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d177      	bne.n	80063c0 <USB_EPStartXfer+0x650>
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	64bb      	str	r3, [r7, #72]	; 0x48
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f0:	4413      	add	r3, r2
 80062f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	00da      	lsls	r2, r3, #3
 8006302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006304:	4413      	add	r3, r2
 8006306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800630a:	647b      	str	r3, [r7, #68]	; 0x44
 800630c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006316:	b29a      	uxth	r2, r3
 8006318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006320:	2b3e      	cmp	r3, #62	; 0x3e
 8006322:	d921      	bls.n	8006368 <USB_EPStartXfer+0x5f8>
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b00      	cmp	r3, #0
 8006338:	d104      	bne.n	8006344 <USB_EPStartXfer+0x5d4>
 800633a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800633e:	3b01      	subs	r3, #1
 8006340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29a      	uxth	r2, r3
 800634a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800634e:	b29b      	uxth	r3, r3
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	b29b      	uxth	r3, r3
 8006354:	4313      	orrs	r3, r2
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800635c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006360:	b29a      	uxth	r2, r3
 8006362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e056      	b.n	8006416 <USB_EPStartXfer+0x6a6>
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <USB_EPStartXfer+0x616>
 8006370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637e:	b29a      	uxth	r2, r3
 8006380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e047      	b.n	8006416 <USB_EPStartXfer+0x6a6>
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638a:	085b      	lsrs	r3, r3, #1
 800638c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <USB_EPStartXfer+0x636>
 800639c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063a0:	3301      	adds	r3, #1
 80063a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4313      	orrs	r3, r2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e02a      	b.n	8006416 <USB_EPStartXfer+0x6a6>
 80063c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d122      	bne.n	8006416 <USB_EPStartXfer+0x6a6>
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	653b      	str	r3, [r7, #80]	; 0x50
 80063dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063f0:	4413      	add	r3, r2
 80063f2:	653b      	str	r3, [r7, #80]	; 0x50
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	00da      	lsls	r2, r3, #3
 8006402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006404:	4413      	add	r3, r2
 8006406:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800640c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006410:	b29a      	uxth	r2, r3
 8006412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006414:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	891b      	ldrh	r3, [r3, #8]
 8006422:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6959      	ldr	r1, [r3, #20]
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006436:	b29b      	uxth	r3, r3
 8006438:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800643c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006440:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006444:	6800      	ldr	r0, [r0, #0]
 8006446:	f001 f967 	bl	8007718 <USB_WritePMA>
            ep->xfer_buff += len;
 800644a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645a:	441a      	add	r2, r3
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6a1a      	ldr	r2, [r3, #32]
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	429a      	cmp	r2, r3
 8006482:	d90f      	bls.n	80064a4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	621a      	str	r2, [r3, #32]
 80064a2:	e00e      	b.n	80064c2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80064b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	643b      	str	r3, [r7, #64]	; 0x40
 80064ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d177      	bne.n	80065ce <USB_EPStartXfer+0x85e>
 80064de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	4413      	add	r3, r2
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	00da      	lsls	r2, r3, #3
 8006510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006512:	4413      	add	r3, r2
 8006514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006524:	b29a      	uxth	r2, r3
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800652e:	2b3e      	cmp	r3, #62	; 0x3e
 8006530:	d921      	bls.n	8006576 <USB_EPStartXfer+0x806>
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <USB_EPStartXfer+0x7e2>
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	3b01      	subs	r3, #1
 800654e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	b29b      	uxth	r3, r3
 800655e:	029b      	lsls	r3, r3, #10
 8006560:	b29b      	uxth	r3, r3
 8006562:	4313      	orrs	r3, r2
 8006564:	b29b      	uxth	r3, r3
 8006566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800656a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800656e:	b29a      	uxth	r2, r3
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	e050      	b.n	8006618 <USB_EPStartXfer+0x8a8>
 8006576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <USB_EPStartXfer+0x824>
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658c:	b29a      	uxth	r2, r3
 800658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	e041      	b.n	8006618 <USB_EPStartXfer+0x8a8>
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <USB_EPStartXfer+0x844>
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	3301      	adds	r3, #1
 80065b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	b29b      	uxth	r3, r3
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	801a      	strh	r2, [r3, #0]
 80065cc:	e024      	b.n	8006618 <USB_EPStartXfer+0x8a8>
 80065ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d11c      	bne.n	8006618 <USB_EPStartXfer+0x8a8>
 80065de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f2:	4413      	add	r3, r2
 80065f4:	643b      	str	r3, [r7, #64]	; 0x40
 80065f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	00da      	lsls	r2, r3, #3
 8006604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006606:	4413      	add	r3, r2
 8006608:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006612:	b29a      	uxth	r2, r3
 8006614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006616:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	895b      	ldrh	r3, [r3, #10]
 8006624:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800662c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6959      	ldr	r1, [r3, #20]
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	b29b      	uxth	r3, r3
 800663a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800663e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006642:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006646:	6800      	ldr	r0, [r0, #0]
 8006648:	f001 f866 	bl	8007718 <USB_WritePMA>
 800664c:	e227      	b.n	8006a9e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800665e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066da:	4413      	add	r3, r2
 80066dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	00da      	lsls	r2, r3, #3
 80066ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	891b      	ldrh	r3, [r3, #8]
 800670c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6959      	ldr	r1, [r3, #20]
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006720:	b29b      	uxth	r3, r3
 8006722:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006726:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800672a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	f000 fff2 	bl	8007718 <USB_WritePMA>
 8006734:	e1b3      	b.n	8006a9e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a1a      	ldr	r2, [r3, #32]
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800674c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006758:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80c6 	beq.w	8006908 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	673b      	str	r3, [r7, #112]	; 0x70
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d177      	bne.n	8006888 <USB_EPStartXfer+0xb18>
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80067a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067b8:	4413      	add	r3, r2
 80067ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80067bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	00da      	lsls	r2, r3, #3
 80067ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067d2:	667b      	str	r3, [r7, #100]	; 0x64
 80067d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067de:	b29a      	uxth	r2, r3
 80067e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e8:	2b3e      	cmp	r3, #62	; 0x3e
 80067ea:	d921      	bls.n	8006830 <USB_EPStartXfer+0xac0>
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <USB_EPStartXfer+0xa9c>
 8006802:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006806:	3b01      	subs	r3, #1
 8006808:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800680c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e050      	b.n	80068d2 <USB_EPStartXfer+0xb62>
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <USB_EPStartXfer+0xade>
 8006838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006846:	b29a      	uxth	r2, r3
 8006848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e041      	b.n	80068d2 <USB_EPStartXfer+0xb62>
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <USB_EPStartXfer+0xafe>
 8006864:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006868:	3301      	adds	r3, #1
 800686a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800686e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006878:	b29b      	uxth	r3, r3
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	b29b      	uxth	r3, r3
 800687e:	4313      	orrs	r3, r2
 8006880:	b29a      	uxth	r2, r3
 8006882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	e024      	b.n	80068d2 <USB_EPStartXfer+0xb62>
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d11c      	bne.n	80068d2 <USB_EPStartXfer+0xb62>
 8006898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ac:	4413      	add	r3, r2
 80068ae:	673b      	str	r3, [r7, #112]	; 0x70
 80068b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	00da      	lsls	r2, r3, #3
 80068be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c0:	4413      	add	r3, r2
 80068c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	895b      	ldrh	r3, [r3, #10]
 80068de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6959      	ldr	r1, [r3, #20]
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006900:	6800      	ldr	r0, [r0, #0]
 8006902:	f000 ff09 	bl	8007718 <USB_WritePMA>
 8006906:	e0ca      	b.n	8006a9e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d177      	bne.n	8006a08 <USB_EPStartXfer+0xc98>
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006938:	4413      	add	r3, r2
 800693a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	00da      	lsls	r2, r3, #3
 800694a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800694c:	4413      	add	r3, r2
 800694e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006952:	67bb      	str	r3, [r7, #120]	; 0x78
 8006954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695e:	b29a      	uxth	r2, r3
 8006960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006968:	2b3e      	cmp	r3, #62	; 0x3e
 800696a:	d921      	bls.n	80069b0 <USB_EPStartXfer+0xc40>
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <USB_EPStartXfer+0xc1c>
 8006982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006986:	3b01      	subs	r3, #1
 8006988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800698c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	4313      	orrs	r3, r2
 800699e:	b29b      	uxth	r3, r3
 80069a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e05c      	b.n	8006a6a <USB_EPStartXfer+0xcfa>
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <USB_EPStartXfer+0xc5e>
 80069b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	e04d      	b.n	8006a6a <USB_EPStartXfer+0xcfa>
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <USB_EPStartXfer+0xc7e>
 80069e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069e8:	3301      	adds	r3, #1
 80069ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	029b      	lsls	r3, r3, #10
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4313      	orrs	r3, r2
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	e030      	b.n	8006a6a <USB_EPStartXfer+0xcfa>
 8006a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d128      	bne.n	8006a6a <USB_EPStartXfer+0xcfa>
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	00da      	lsls	r2, r3, #3
 8006a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	891b      	ldrh	r3, [r3, #8]
 8006a76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6959      	ldr	r1, [r3, #20]
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006a90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006a94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006a98:	6800      	ldr	r0, [r0, #0]
 8006a9a:	f000 fe3d 	bl	8007718 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac4:	817b      	strh	r3, [r7, #10]
 8006ac6:	897b      	ldrh	r3, [r7, #10]
 8006ac8:	f083 0310 	eor.w	r3, r3, #16
 8006acc:	817b      	strh	r3, [r7, #10]
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	f083 0320 	eor.w	r3, r3, #32
 8006ad4:	817b      	strh	r3, [r7, #10]
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	441a      	add	r2, r3
 8006af0:	897b      	ldrh	r3, [r7, #10]
 8006af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	8013      	strh	r3, [r2, #0]
 8006b06:	f000 bcde 	b.w	80074c6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	7b1b      	ldrb	r3, [r3, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 80bb 	bne.w	8006c92 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d917      	bls.n	8006b68 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8006b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b58:	1ad2      	subs	r2, r2, r3
 8006b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	619a      	str	r2, [r3, #24]
 8006b66:	e00e      	b.n	8006b86 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2200      	movs	r2, #0
 8006b84:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006baa:	4413      	add	r3, r2
 8006bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	00da      	lsls	r2, r3, #3
 8006bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bde:	801a      	strh	r2, [r3, #0]
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	2b3e      	cmp	r3, #62	; 0x3e
 8006be6:	d924      	bls.n	8006c32 <USB_EPStartXfer+0xec2>
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <USB_EPStartXfer+0xe98>
 8006bfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	029b      	lsls	r3, r3, #10
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c2c:	801a      	strh	r2, [r3, #0]
 8006c2e:	f000 bc10 	b.w	8007452 <USB_EPStartXfer+0x16e2>
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10c      	bne.n	8006c54 <USB_EPStartXfer+0xee4>
 8006c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	e3fe      	b.n	8007452 <USB_EPStartXfer+0x16e2>
 8006c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <USB_EPStartXfer+0xf04>
 8006c6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c6e:	3301      	adds	r3, #1
 8006c70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c8e:	801a      	strh	r2, [r3, #0]
 8006c90:	e3df      	b.n	8007452 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	f040 8218 	bne.w	80070d4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 809d 	bne.w	8006df0 <USB_EPStartXfer+0x1080>
 8006cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cda:	4413      	add	r3, r2
 8006cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00da      	lsls	r2, r3, #3
 8006cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d1e:	d92b      	bls.n	8006d78 <USB_EPStartXfer+0x1008>
 8006d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <USB_EPStartXfer+0xfe0>
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	029b      	lsls	r3, r3, #10
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	e070      	b.n	8006e5a <USB_EPStartXfer+0x10ea>
 8006d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10c      	bne.n	8006da2 <USB_EPStartXfer+0x1032>
 8006d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e05b      	b.n	8006e5a <USB_EPStartXfer+0x10ea>
 8006da2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <USB_EPStartXfer+0x1062>
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	029b      	lsls	r3, r3, #10
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e034      	b.n	8006e5a <USB_EPStartXfer+0x10ea>
 8006df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	785b      	ldrb	r3, [r3, #1]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d12c      	bne.n	8006e5a <USB_EPStartXfer+0x10ea>
 8006e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e24:	4413      	add	r3, r2
 8006e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	00da      	lsls	r2, r3, #3
 8006e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f040 809d 	bne.w	8006fb4 <USB_EPStartXfer+0x1244>
 8006e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	00da      	lsls	r2, r3, #3
 8006eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ee2:	d92b      	bls.n	8006f3c <USB_EPStartXfer+0x11cc>
 8006ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <USB_EPStartXfer+0x11a4>
 8006f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	029b      	lsls	r3, r3, #10
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4313      	orrs	r3, r2
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	e069      	b.n	8007010 <USB_EPStartXfer+0x12a0>
 8006f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10c      	bne.n	8006f66 <USB_EPStartXfer+0x11f6>
 8006f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e054      	b.n	8007010 <USB_EPStartXfer+0x12a0>
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d004      	beq.n	8006f96 <USB_EPStartXfer+0x1226>
 8006f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f90:	3301      	adds	r3, #1
 8006f92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	e02d      	b.n	8007010 <USB_EPStartXfer+0x12a0>
 8006fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d125      	bne.n	8007010 <USB_EPStartXfer+0x12a0>
 8006fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006fda:	4413      	add	r3, r2
 8006fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	00da      	lsls	r2, r3, #3
 8006fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	b29a      	uxth	r2, r3
 800700a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800700e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8218 	beq.w	8007452 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007042:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <USB_EPStartXfer+0x12ea>
 800704e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800705a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800705e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007062:	2b00      	cmp	r3, #0
 8007064:	f040 81f5 	bne.w	8007452 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007068:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 81ee 	bne.w	8007452 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	b29b      	uxth	r3, r3
 8007094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80070a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80070be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8013      	strh	r3, [r2, #0]
 80070d2:	e1be      	b.n	8007452 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 81b4 	bne.w	800744e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d917      	bls.n	8007132 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	619a      	str	r2, [r3, #24]
 8007130:	e00e      	b.n	8007150 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8007142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 8085 	bne.w	800726c <USB_EPStartXfer+0x14fc>
 8007162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007186:	4413      	add	r3, r2
 8007188:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800718c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	00da      	lsls	r2, r3, #3
 800719a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800719e:	4413      	add	r3, r2
 80071a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c0:	2b3e      	cmp	r3, #62	; 0x3e
 80071c2:	d923      	bls.n	800720c <USB_EPStartXfer+0x149c>
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d104      	bne.n	80071e4 <USB_EPStartXfer+0x1474>
 80071da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071de:	3b01      	subs	r3, #1
 80071e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	029b      	lsls	r3, r3, #10
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e060      	b.n	80072ce <USB_EPStartXfer+0x155e>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10c      	bne.n	800722e <USB_EPStartXfer+0x14be>
 8007214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007224:	b29a      	uxth	r2, r3
 8007226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800722a:	801a      	strh	r2, [r3, #0]
 800722c:	e04f      	b.n	80072ce <USB_EPStartXfer+0x155e>
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007232:	085b      	lsrs	r3, r3, #1
 8007234:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d004      	beq.n	800724e <USB_EPStartXfer+0x14de>
 8007244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007248:	3301      	adds	r3, #1
 800724a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800724e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29a      	uxth	r2, r3
 8007256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800725a:	b29b      	uxth	r3, r3
 800725c:	029b      	lsls	r3, r3, #10
 800725e:	b29b      	uxth	r3, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	b29a      	uxth	r2, r3
 8007264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	e030      	b.n	80072ce <USB_EPStartXfer+0x155e>
 800726c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d128      	bne.n	80072ce <USB_EPStartXfer+0x155e>
 800727c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800728a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800728e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072a0:	4413      	add	r3, r2
 80072a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80072a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	00da      	lsls	r2, r3, #3
 80072b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072b8:	4413      	add	r3, r2
 80072ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f040 8085 	bne.w	80073f8 <USB_EPStartXfer+0x1688>
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007312:	4413      	add	r3, r2
 8007314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00da      	lsls	r2, r3, #3
 8007326:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800732a:	4413      	add	r3, r2
 800732c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007346:	801a      	strh	r2, [r3, #0]
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734c:	2b3e      	cmp	r3, #62	; 0x3e
 800734e:	d923      	bls.n	8007398 <USB_EPStartXfer+0x1628>
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	2b00      	cmp	r3, #0
 8007364:	d104      	bne.n	8007370 <USB_EPStartXfer+0x1600>
 8007366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800736a:	3b01      	subs	r3, #1
 800736c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29a      	uxth	r2, r3
 8007378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800737c:	b29b      	uxth	r3, r3
 800737e:	029b      	lsls	r3, r3, #10
 8007380:	b29b      	uxth	r3, r3
 8007382:	4313      	orrs	r3, r2
 8007384:	b29b      	uxth	r3, r3
 8007386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738e:	b29a      	uxth	r2, r3
 8007390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	e05c      	b.n	8007452 <USB_EPStartXfer+0x16e2>
 8007398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10c      	bne.n	80073ba <USB_EPStartXfer+0x164a>
 80073a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	e04b      	b.n	8007452 <USB_EPStartXfer+0x16e2>
 80073ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <USB_EPStartXfer+0x166a>
 80073d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d4:	3301      	adds	r3, #1
 80073d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	029b      	lsls	r3, r3, #10
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	4313      	orrs	r3, r2
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	e02c      	b.n	8007452 <USB_EPStartXfer+0x16e2>
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	785b      	ldrb	r3, [r3, #1]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d124      	bne.n	8007452 <USB_EPStartXfer+0x16e2>
 8007408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800741e:	4413      	add	r3, r2
 8007420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	00da      	lsls	r2, r3, #3
 8007432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007436:	4413      	add	r3, r2
 8007438:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800743c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007444:	b29a      	uxth	r2, r3
 8007446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	e001      	b.n	8007452 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e03a      	b.n	80074c8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007478:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800747c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007480:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007484:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007488:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800748c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007490:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	441a      	add	r2, r3
 80074ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80074b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	785b      	ldrb	r3, [r3, #1]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d020      	beq.n	8007526 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fa:	81bb      	strh	r3, [r7, #12]
 80074fc:	89bb      	ldrh	r3, [r7, #12]
 80074fe:	f083 0310 	eor.w	r3, r3, #16
 8007502:	81bb      	strh	r3, [r7, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	441a      	add	r2, r3
 800750e:	89bb      	ldrh	r3, [r7, #12]
 8007510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800751c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007520:	b29b      	uxth	r3, r3
 8007522:	8013      	strh	r3, [r2, #0]
 8007524:	e01f      	b.n	8007566 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753c:	81fb      	strh	r3, [r7, #14]
 800753e:	89fb      	ldrh	r3, [r7, #14]
 8007540:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007544:	81fb      	strh	r3, [r7, #14]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	441a      	add	r2, r3
 8007550:	89fb      	ldrh	r3, [r7, #14]
 8007552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800755e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007562:	b29b      	uxth	r3, r3
 8007564:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	7b1b      	ldrb	r3, [r3, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 809d 	bne.w	80076c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d04c      	beq.n	800762a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	881b      	ldrh	r3, [r3, #0]
 800759c:	823b      	strh	r3, [r7, #16]
 800759e:	8a3b      	ldrh	r3, [r7, #16]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01b      	beq.n	80075e0 <USB_EPClearStall+0x6c>
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075be:	81fb      	strh	r3, [r7, #14]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075dc:	b29b      	uxth	r3, r3
 80075de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	78db      	ldrb	r3, [r3, #3]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d06c      	beq.n	80076c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fe:	81bb      	strh	r3, [r7, #12]
 8007600:	89bb      	ldrh	r3, [r7, #12]
 8007602:	f083 0320 	eor.w	r3, r3, #32
 8007606:	81bb      	strh	r3, [r7, #12]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	89bb      	ldrh	r3, [r7, #12]
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
 8007628:	e04b      	b.n	80076c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	82fb      	strh	r3, [r7, #22]
 8007638:	8afb      	ldrh	r3, [r7, #22]
 800763a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d01b      	beq.n	800767a <USB_EPClearStall+0x106>
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007658:	82bb      	strh	r3, [r7, #20]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	441a      	add	r2, r3
 8007664:	8abb      	ldrh	r3, [r7, #20]
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800768c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007690:	827b      	strh	r3, [r7, #18]
 8007692:	8a7b      	ldrh	r3, [r7, #18]
 8007694:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007698:	827b      	strh	r3, [r7, #18]
 800769a:	8a7b      	ldrh	r3, [r7, #18]
 800769c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076a0:	827b      	strh	r3, [r7, #18]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	441a      	add	r2, r3
 80076ac:	8a7b      	ldrh	r3, [r7, #18]
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2280      	movs	r2, #128	; 0x80
 80076e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007706:	b29b      	uxth	r3, r3
 8007708:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800770a:	68fb      	ldr	r3, [r7, #12]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3714      	adds	r7, #20
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007718:	b480      	push	{r7}
 800771a:	b08b      	sub	sp, #44	; 0x2c
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4611      	mov	r1, r2
 8007724:	461a      	mov	r2, r3
 8007726:	460b      	mov	r3, r1
 8007728:	80fb      	strh	r3, [r7, #6]
 800772a:	4613      	mov	r3, r2
 800772c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800772e:	88bb      	ldrh	r3, [r7, #4]
 8007730:	3301      	adds	r3, #1
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007748:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	e01b      	b.n	8007788 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	3301      	adds	r3, #1
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	b21a      	sxth	r2, r3
 8007760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007764:	4313      	orrs	r3, r2
 8007766:	b21b      	sxth	r3, r3
 8007768:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	8a7a      	ldrh	r2, [r7, #18]
 800776e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	3302      	adds	r3, #2
 8007774:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	3301      	adds	r3, #1
 800777a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	3301      	adds	r3, #1
 8007780:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	3b01      	subs	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e0      	bne.n	8007750 <USB_WritePMA+0x38>
  }
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	372c      	adds	r7, #44	; 0x2c
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800779c:	b480      	push	{r7}
 800779e:	b08b      	sub	sp, #44	; 0x2c
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4611      	mov	r1, r2
 80077a8:	461a      	mov	r2, r3
 80077aa:	460b      	mov	r3, r1
 80077ac:	80fb      	strh	r3, [r7, #6]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80077b2:	88bb      	ldrh	r3, [r7, #4]
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077c2:	88fa      	ldrh	r2, [r7, #6]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
 80077d2:	e018      	b.n	8007806 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	3302      	adds	r3, #2
 80077e0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	3301      	adds	r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	3301      	adds	r3, #1
 80077fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	3b01      	subs	r3, #1
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e3      	bne.n	80077d4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	b2da      	uxtb	r2, r3
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	701a      	strb	r2, [r3, #0]
  }
}
 8007828:	bf00      	nop
 800782a:	372c      	adds	r7, #44	; 0x2c
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007856:	2303      	movs	r3, #3
 8007858:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	4611      	mov	r1, r2
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	4798      	blx	r3
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b082      	sub	sp, #8
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	460b      	mov	r3, r1
 800788c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	4611      	mov	r1, r2
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
  }

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 ff47 	bl	8008758 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078d8:	461a      	mov	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d01a      	beq.n	8007924 <USBD_LL_SetupStage+0x72>
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d822      	bhi.n	8007938 <USBD_LL_SetupStage+0x86>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <USBD_LL_SetupStage+0x4a>
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d00a      	beq.n	8007910 <USBD_LL_SetupStage+0x5e>
 80078fa:	e01d      	b.n	8007938 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f9ef 	bl	8007ce8 <USBD_StdDevReq>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]
      break;
 800790e:	e020      	b.n	8007952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fa53 	bl	8007dc4 <USBD_StdItfReq>
 800791e:	4603      	mov	r3, r0
 8007920:	73fb      	strb	r3, [r7, #15]
      break;
 8007922:	e016      	b.n	8007952 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa92 	bl	8007e56 <USBD_StdEPReq>
 8007932:	4603      	mov	r3, r0
 8007934:	73fb      	strb	r3, [r7, #15]
      break;
 8007936:	e00c      	b.n	8007952 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800793e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007942:	b2db      	uxtb	r3, r3
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f004 fb20 	bl	800bf8c <USBD_LL_StallEP>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
      break;
 8007950:	bf00      	nop
  }

  return ret;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	460b      	mov	r3, r1
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d138      	bne.n	80079e2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007976:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800797e:	2b03      	cmp	r3, #3
 8007980:	d14a      	bne.n	8007a18 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d913      	bls.n	80079b6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bf28      	it	cs
 80079a8:	4613      	movcs	r3, r2
 80079aa:	461a      	mov	r2, r3
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 ff49 	bl	8008846 <USBD_CtlContinueRx>
 80079b4:	e030      	b.n	8007a18 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d10b      	bne.n	80079da <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 ff44 	bl	8008868 <USBD_CtlSendStatus>
 80079e0:	e01a      	b.n	8007a18 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d114      	bne.n	8007a18 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00e      	beq.n	8007a18 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	7afa      	ldrb	r2, [r7, #11]
 8007a04:	4611      	mov	r1, r2
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	4798      	blx	r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	e000      	b.n	8007a1a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d16b      	bne.n	8007b0e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d156      	bne.n	8007af4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d914      	bls.n	8007a7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fedb 	bl	8008824 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	2100      	movs	r1, #0
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f004 fb33 	bl	800c0e0 <USBD_LL_PrepareReceive>
 8007a7a:	e03b      	b.n	8007af4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d11c      	bne.n	8007ac2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d316      	bcc.n	8007ac2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d20f      	bcs.n	8007ac2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 febc 	bl	8008824 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f004 fb10 	bl	800c0e0 <USBD_LL_PrepareReceive>
 8007ac0:	e018      	b.n	8007af4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d10b      	bne.n	8007ae6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ae6:	2180      	movs	r1, #128	; 0x80
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f004 fa4f 	bl	800bf8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fecd 	bl	800888e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d122      	bne.n	8007b44 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fe98 	bl	8007834 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b0c:	e01a      	b.n	8007b44 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d114      	bne.n	8007b44 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00e      	beq.n	8007b44 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	7afa      	ldrb	r2, [r7, #11]
 8007b30:	4611      	mov	r1, r2
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	4798      	blx	r3
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	e000      	b.n	8007b46 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e02f      	b.n	8007be2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00f      	beq.n	8007bac <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d009      	beq.n	8007bac <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6852      	ldr	r2, [r2, #4]
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f004 f9c4 	bl	800bf40 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f004 f9b6 	bl	800bf40 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2240      	movs	r2, #64	; 0x40
 8007bde:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2204      	movs	r2, #4
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d106      	bne.n	8007c58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e012      	b.n	8007ca2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d10b      	bne.n	8007ca0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b087      	sub	sp, #28
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cc8:	8a3b      	ldrh	r3, [r7, #16]
 8007cca:	021b      	lsls	r3, r3, #8
 8007ccc:	b21a      	sxth	r2, r3
 8007cce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	b21b      	sxth	r3, r3
 8007cd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d005      	beq.n	8007d0e <USBD_StdDevReq+0x26>
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d853      	bhi.n	8007dae <USBD_StdDevReq+0xc6>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <USBD_StdDevReq+0x3a>
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d14f      	bne.n	8007dae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d20:	e04a      	b.n	8007db8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d83b      	bhi.n	8007da2 <USBD_StdDevReq+0xba>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <USBD_StdDevReq+0x48>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d85 	.word	0x08007d85
 8007d34:	08007d99 	.word	0x08007d99
 8007d38:	08007da3 	.word	0x08007da3
 8007d3c:	08007d8f 	.word	0x08007d8f
 8007d40:	08007da3 	.word	0x08007da3
 8007d44:	08007d63 	.word	0x08007d63
 8007d48:	08007d59 	.word	0x08007d59
 8007d4c:	08007da3 	.word	0x08007da3
 8007d50:	08007d7b 	.word	0x08007d7b
 8007d54:	08007d6d 	.word	0x08007d6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f9de 	bl	800811c <USBD_GetDescriptor>
          break;
 8007d60:	e024      	b.n	8007dac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb6d 	bl	8008444 <USBD_SetAddress>
          break;
 8007d6a:	e01f      	b.n	8007dac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fbac 	bl	80084cc <USBD_SetConfig>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
          break;
 8007d78:	e018      	b.n	8007dac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fc4b 	bl	8008618 <USBD_GetConfig>
          break;
 8007d82:	e013      	b.n	8007dac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fc7c 	bl	8008684 <USBD_GetStatus>
          break;
 8007d8c:	e00e      	b.n	8007dac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fcab 	bl	80086ec <USBD_SetFeature>
          break;
 8007d96:	e009      	b.n	8007dac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fcba 	bl	8008714 <USBD_ClrFeature>
          break;
 8007da0:	e004      	b.n	8007dac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fd11 	bl	80087cc <USBD_CtlError>
          break;
 8007daa:	bf00      	nop
      }
      break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fd0b 	bl	80087cc <USBD_CtlError>
      break;
 8007db6:	bf00      	nop
  }

  return ret;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop

08007dc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dda:	2b40      	cmp	r3, #64	; 0x40
 8007ddc:	d005      	beq.n	8007dea <USBD_StdItfReq+0x26>
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	d82f      	bhi.n	8007e42 <USBD_StdItfReq+0x7e>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <USBD_StdItfReq+0x26>
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	d12b      	bne.n	8007e42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d81d      	bhi.n	8007e34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	889b      	ldrh	r3, [r3, #4]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d813      	bhi.n	8007e2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	4798      	blx	r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d110      	bne.n	8007e3e <USBD_StdItfReq+0x7a>
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10d      	bne.n	8007e3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fd20 	bl	8008868 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e28:	e009      	b.n	8007e3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fccd 	bl	80087cc <USBD_CtlError>
          break;
 8007e32:	e004      	b.n	8007e3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fcc8 	bl	80087cc <USBD_CtlError>
          break;
 8007e3c:	e000      	b.n	8007e40 <USBD_StdItfReq+0x7c>
          break;
 8007e3e:	bf00      	nop
      }
      break;
 8007e40:	e004      	b.n	8007e4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fcc1 	bl	80087cc <USBD_CtlError>
      break;
 8007e4a:	bf00      	nop
  }

  return ret;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	889b      	ldrh	r3, [r3, #4]
 8007e68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	d007      	beq.n	8007e86 <USBD_StdEPReq+0x30>
 8007e76:	2b40      	cmp	r3, #64	; 0x40
 8007e78:	f200 8145 	bhi.w	8008106 <USBD_StdEPReq+0x2b0>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00c      	beq.n	8007e9a <USBD_StdEPReq+0x44>
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	f040 8140 	bne.w	8008106 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
      break;
 8007e98:	e13a      	b.n	8008110 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d007      	beq.n	8007eb2 <USBD_StdEPReq+0x5c>
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	f300 8129 	bgt.w	80080fa <USBD_StdEPReq+0x2a4>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d07f      	beq.n	8007fac <USBD_StdEPReq+0x156>
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d03c      	beq.n	8007f2a <USBD_StdEPReq+0xd4>
 8007eb0:	e123      	b.n	80080fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d002      	beq.n	8007ec4 <USBD_StdEPReq+0x6e>
 8007ebe:	2b03      	cmp	r3, #3
 8007ec0:	d016      	beq.n	8007ef0 <USBD_StdEPReq+0x9a>
 8007ec2:	e02c      	b.n	8007f1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00d      	beq.n	8007ee6 <USBD_StdEPReq+0x90>
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b80      	cmp	r3, #128	; 0x80
 8007ece:	d00a      	beq.n	8007ee6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f004 f859 	bl	800bf8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eda:	2180      	movs	r1, #128	; 0x80
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f004 f855 	bl	800bf8c <USBD_LL_StallEP>
 8007ee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ee4:	e020      	b.n	8007f28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc6f 	bl	80087cc <USBD_CtlError>
              break;
 8007eee:	e01b      	b.n	8007f28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	885b      	ldrh	r3, [r3, #2]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10e      	bne.n	8007f16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <USBD_StdEPReq+0xc0>
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b80      	cmp	r3, #128	; 0x80
 8007f02:	d008      	beq.n	8007f16 <USBD_StdEPReq+0xc0>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	88db      	ldrh	r3, [r3, #6]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f004 f83b 	bl	800bf8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fca6 	bl	8008868 <USBD_CtlSendStatus>

              break;
 8007f1c:	e004      	b.n	8007f28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc53 	bl	80087cc <USBD_CtlError>
              break;
 8007f26:	bf00      	nop
          }
          break;
 8007f28:	e0ec      	b.n	8008104 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d002      	beq.n	8007f3c <USBD_StdEPReq+0xe6>
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d016      	beq.n	8007f68 <USBD_StdEPReq+0x112>
 8007f3a:	e030      	b.n	8007f9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <USBD_StdEPReq+0x108>
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	d00a      	beq.n	8007f5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f004 f81d 	bl	800bf8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f004 f819 	bl	800bf8c <USBD_LL_StallEP>
 8007f5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f5c:	e025      	b.n	8007faa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc33 	bl	80087cc <USBD_CtlError>
              break;
 8007f66:	e020      	b.n	8007faa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	885b      	ldrh	r3, [r3, #2]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d11b      	bne.n	8007fa8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f004 f823 	bl	800bfca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fc6f 	bl	8008868 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f9c:	e004      	b.n	8007fa8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc13 	bl	80087cc <USBD_CtlError>
              break;
 8007fa6:	e000      	b.n	8007faa <USBD_StdEPReq+0x154>
              break;
 8007fa8:	bf00      	nop
          }
          break;
 8007faa:	e0ab      	b.n	8008104 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d002      	beq.n	8007fbe <USBD_StdEPReq+0x168>
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d032      	beq.n	8008022 <USBD_StdEPReq+0x1cc>
 8007fbc:	e097      	b.n	80080ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d007      	beq.n	8007fd4 <USBD_StdEPReq+0x17e>
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d004      	beq.n	8007fd4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fbfd 	bl	80087cc <USBD_CtlError>
                break;
 8007fd2:	e091      	b.n	80080f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da0b      	bge.n	8007ff4 <USBD_StdEPReq+0x19e>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	3310      	adds	r3, #16
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	e00b      	b.n	800800c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2202      	movs	r2, #2
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fbe7 	bl	80087ee <USBD_CtlSendData>
              break;
 8008020:	e06a      	b.n	80080f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	da11      	bge.n	800804e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800802a:	7bbb      	ldrb	r3, [r7, #14]
 800802c:	f003 020f 	and.w	r2, r3, #15
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	3324      	adds	r3, #36	; 0x24
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d117      	bne.n	8008074 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fbc0 	bl	80087cc <USBD_CtlError>
                  break;
 800804c:	e054      	b.n	80080f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	f003 020f 	and.w	r2, r3, #15
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fbad 	bl	80087cc <USBD_CtlError>
                  break;
 8008072:	e041      	b.n	80080f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008078:	2b00      	cmp	r3, #0
 800807a:	da0b      	bge.n	8008094 <USBD_StdEPReq+0x23e>
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	3310      	adds	r3, #16
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	3304      	adds	r3, #4
 8008092:	e00b      	b.n	80080ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <USBD_StdEPReq+0x264>
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b80      	cmp	r3, #128	; 0x80
 80080b8:	d103      	bne.n	80080c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	e00e      	b.n	80080e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f003 ff9e 	bl	800c008 <USBD_LL_IsStallEP>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2201      	movs	r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	e002      	b.n	80080e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2202      	movs	r2, #2
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb81 	bl	80087ee <USBD_CtlSendData>
              break;
 80080ec:	e004      	b.n	80080f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fb6b 	bl	80087cc <USBD_CtlError>
              break;
 80080f6:	bf00      	nop
          }
          break;
 80080f8:	e004      	b.n	8008104 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb65 	bl	80087cc <USBD_CtlError>
          break;
 8008102:	bf00      	nop
      }
      break;
 8008104:	e004      	b.n	8008110 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fb5f 	bl	80087cc <USBD_CtlError>
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	2b0e      	cmp	r3, #14
 800813e:	f200 8152 	bhi.w	80083e6 <USBD_GetDescriptor+0x2ca>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <USBD_GetDescriptor+0x2c>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	080081b9 	.word	0x080081b9
 800814c:	080081d1 	.word	0x080081d1
 8008150:	08008211 	.word	0x08008211
 8008154:	080083e7 	.word	0x080083e7
 8008158:	080083e7 	.word	0x080083e7
 800815c:	08008387 	.word	0x08008387
 8008160:	080083b3 	.word	0x080083b3
 8008164:	080083e7 	.word	0x080083e7
 8008168:	080083e7 	.word	0x080083e7
 800816c:	080083e7 	.word	0x080083e7
 8008170:	080083e7 	.word	0x080083e7
 8008174:	080083e7 	.word	0x080083e7
 8008178:	080083e7 	.word	0x080083e7
 800817c:	080083e7 	.word	0x080083e7
 8008180:	08008185 	.word	0x08008185
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	7c12      	ldrb	r2, [r2, #16]
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081a6:	e126      	b.n	80083f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fb0e 	bl	80087cc <USBD_CtlError>
        err++;
 80081b0:	7afb      	ldrb	r3, [r7, #11]
 80081b2:	3301      	adds	r3, #1
 80081b4:	72fb      	strb	r3, [r7, #11]
      break;
 80081b6:	e11e      	b.n	80083f6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
      break;
 80081ce:	e112      	b.n	80083f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7c1b      	ldrb	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10d      	bne.n	80081f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f107 0208 	add.w	r2, r7, #8
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3301      	adds	r3, #1
 80081ee:	2202      	movs	r2, #2
 80081f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081f2:	e100      	b.n	80083f6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	f107 0208 	add.w	r2, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
      break;
 800820e:	e0f2      	b.n	80083f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	885b      	ldrh	r3, [r3, #2]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b05      	cmp	r3, #5
 8008218:	f200 80ac 	bhi.w	8008374 <USBD_GetDescriptor+0x258>
 800821c:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <USBD_GetDescriptor+0x108>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	0800823d 	.word	0x0800823d
 8008228:	08008271 	.word	0x08008271
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082d9 	.word	0x080082d9
 8008234:	0800830d 	.word	0x0800830d
 8008238:	08008341 	.word	0x08008341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	7c12      	ldrb	r2, [r2, #16]
 8008254:	f107 0108 	add.w	r1, r7, #8
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800825e:	e091      	b.n	8008384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fab2 	bl	80087cc <USBD_CtlError>
            err++;
 8008268:	7afb      	ldrb	r3, [r7, #11]
 800826a:	3301      	adds	r3, #1
 800826c:	72fb      	strb	r3, [r7, #11]
          break;
 800826e:	e089      	b.n	8008384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	7c12      	ldrb	r2, [r2, #16]
 8008288:	f107 0108 	add.w	r1, r7, #8
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008292:	e077      	b.n	8008384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa98 	bl	80087cc <USBD_CtlError>
            err++;
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	3301      	adds	r3, #1
 80082a0:	72fb      	strb	r3, [r7, #11]
          break;
 80082a2:	e06f      	b.n	8008384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7c12      	ldrb	r2, [r2, #16]
 80082bc:	f107 0108 	add.w	r1, r7, #8
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c6:	e05d      	b.n	8008384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa7e 	bl	80087cc <USBD_CtlError>
            err++;
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	3301      	adds	r3, #1
 80082d4:	72fb      	strb	r3, [r7, #11]
          break;
 80082d6:	e055      	b.n	8008384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7c12      	ldrb	r2, [r2, #16]
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fa:	e043      	b.n	8008384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa64 	bl	80087cc <USBD_CtlError>
            err++;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	3301      	adds	r3, #1
 8008308:	72fb      	strb	r3, [r7, #11]
          break;
 800830a:	e03b      	b.n	8008384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e029      	b.n	8008384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa4a 	bl	80087cc <USBD_CtlError>
            err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
          break;
 800833e:	e021      	b.n	8008384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e00f      	b.n	8008384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa30 	bl	80087cc <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e007      	b.n	8008384 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fa28 	bl	80087cc <USBD_CtlError>
          err++;
 800837c:	7afb      	ldrb	r3, [r7, #11]
 800837e:	3301      	adds	r3, #1
 8008380:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008382:	bf00      	nop
      }
      break;
 8008384:	e037      	b.n	80083f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	7c1b      	ldrb	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d109      	bne.n	80083a2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	f107 0208 	add.w	r2, r7, #8
 800839a:	4610      	mov	r0, r2
 800839c:	4798      	blx	r3
 800839e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083a0:	e029      	b.n	80083f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa11 	bl	80087cc <USBD_CtlError>
        err++;
 80083aa:	7afb      	ldrb	r3, [r7, #11]
 80083ac:	3301      	adds	r3, #1
 80083ae:	72fb      	strb	r3, [r7, #11]
      break;
 80083b0:	e021      	b.n	80083f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	7c1b      	ldrb	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10d      	bne.n	80083d6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	f107 0208 	add.w	r2, r7, #8
 80083c6:	4610      	mov	r0, r2
 80083c8:	4798      	blx	r3
 80083ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	2207      	movs	r2, #7
 80083d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083d4:	e00f      	b.n	80083f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f9f7 	bl	80087cc <USBD_CtlError>
        err++;
 80083de:	7afb      	ldrb	r3, [r7, #11]
 80083e0:	3301      	adds	r3, #1
 80083e2:	72fb      	strb	r3, [r7, #11]
      break;
 80083e4:	e007      	b.n	80083f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9ef 	bl	80087cc <USBD_CtlError>
      err++;
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	3301      	adds	r3, #1
 80083f2:	72fb      	strb	r3, [r7, #11]
      break;
 80083f4:	bf00      	nop
  }

  if (err != 0U)
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d11e      	bne.n	800843a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	88db      	ldrh	r3, [r3, #6]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d016      	beq.n	8008432 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008404:	893b      	ldrh	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00e      	beq.n	8008428 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	88da      	ldrh	r2, [r3, #6]
 800840e:	893b      	ldrh	r3, [r7, #8]
 8008410:	4293      	cmp	r3, r2
 8008412:	bf28      	it	cs
 8008414:	4613      	movcs	r3, r2
 8008416:	b29b      	uxth	r3, r3
 8008418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800841a:	893b      	ldrh	r3, [r7, #8]
 800841c:	461a      	mov	r2, r3
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f9e4 	bl	80087ee <USBD_CtlSendData>
 8008426:	e009      	b.n	800843c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f9ce 	bl	80087cc <USBD_CtlError>
 8008430:	e004      	b.n	800843c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa18 	bl	8008868 <USBD_CtlSendStatus>
 8008438:	e000      	b.n	800843c <USBD_GetDescriptor+0x320>
    return;
 800843a:	bf00      	nop
  }
}
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop

08008444 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	889b      	ldrh	r3, [r3, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d131      	bne.n	80084ba <USBD_SetAddress+0x76>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	88db      	ldrh	r3, [r3, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d12d      	bne.n	80084ba <USBD_SetAddress+0x76>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	885b      	ldrh	r3, [r3, #2]
 8008462:	2b7f      	cmp	r3, #127	; 0x7f
 8008464:	d829      	bhi.n	80084ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	b2db      	uxtb	r3, r3
 800846c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008470:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d104      	bne.n	8008488 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f9a3 	bl	80087cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	e01d      	b.n	80084c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	7bfa      	ldrb	r2, [r7, #15]
 800848c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f003 fde3 	bl	800c060 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9e4 	bl	8008868 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ae:	e009      	b.n	80084c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b8:	e004      	b.n	80084c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f985 	bl	80087cc <USBD_CtlError>
  }
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	885b      	ldrh	r3, [r3, #2]
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	4b4c      	ldr	r3, [pc, #304]	; (8008614 <USBD_SetConfig+0x148>)
 80084e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084e4:	4b4b      	ldr	r3, [pc, #300]	; (8008614 <USBD_SetConfig+0x148>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d905      	bls.n	80084f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f96c 	bl	80087cc <USBD_CtlError>
    return USBD_FAIL;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e088      	b.n	800860a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d002      	beq.n	800850a <USBD_SetConfig+0x3e>
 8008504:	2b03      	cmp	r3, #3
 8008506:	d025      	beq.n	8008554 <USBD_SetConfig+0x88>
 8008508:	e071      	b.n	80085ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800850a:	4b42      	ldr	r3, [pc, #264]	; (8008614 <USBD_SetConfig+0x148>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01c      	beq.n	800854c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008512:	4b40      	ldr	r3, [pc, #256]	; (8008614 <USBD_SetConfig+0x148>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800851c:	4b3d      	ldr	r3, [pc, #244]	; (8008614 <USBD_SetConfig+0x148>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff f991 	bl	800784a <USBD_SetClassConfig>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f949 	bl	80087cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800853a:	e065      	b.n	8008608 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f993 	bl	8008868 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2203      	movs	r2, #3
 8008546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800854a:	e05d      	b.n	8008608 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f98b 	bl	8008868 <USBD_CtlSendStatus>
      break;
 8008552:	e059      	b.n	8008608 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008554:	4b2f      	ldr	r3, [pc, #188]	; (8008614 <USBD_SetConfig+0x148>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d112      	bne.n	8008582 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008564:	4b2b      	ldr	r3, [pc, #172]	; (8008614 <USBD_SetConfig+0x148>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800856e:	4b29      	ldr	r3, [pc, #164]	; (8008614 <USBD_SetConfig+0x148>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	4619      	mov	r1, r3
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7ff f984 	bl	8007882 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f974 	bl	8008868 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008580:	e042      	b.n	8008608 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008582:	4b24      	ldr	r3, [pc, #144]	; (8008614 <USBD_SetConfig+0x148>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	429a      	cmp	r2, r3
 800858e:	d02a      	beq.n	80085e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff f972 	bl	8007882 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800859e:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <USBD_SetConfig+0x148>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <USBD_SetConfig+0x148>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff f94b 	bl	800784a <USBD_SetClassConfig>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00f      	beq.n	80085de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f903 	bl	80087cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff f957 	bl	8007882 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085dc:	e014      	b.n	8008608 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f942 	bl	8008868 <USBD_CtlSendStatus>
      break;
 80085e4:	e010      	b.n	8008608 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f93e 	bl	8008868 <USBD_CtlSendStatus>
      break;
 80085ec:	e00c      	b.n	8008608 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f8eb 	bl	80087cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <USBD_SetConfig+0x148>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff f940 	bl	8007882 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	73fb      	strb	r3, [r7, #15]
      break;
 8008606:	bf00      	nop
  }

  return ret;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000358 	.word	0x20000358

08008618 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	88db      	ldrh	r3, [r3, #6]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d004      	beq.n	8008634 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f8cd 	bl	80087cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008632:	e023      	b.n	800867c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	dc02      	bgt.n	8008646 <USBD_GetConfig+0x2e>
 8008640:	2b00      	cmp	r3, #0
 8008642:	dc03      	bgt.n	800864c <USBD_GetConfig+0x34>
 8008644:	e015      	b.n	8008672 <USBD_GetConfig+0x5a>
 8008646:	2b03      	cmp	r3, #3
 8008648:	d00b      	beq.n	8008662 <USBD_GetConfig+0x4a>
 800864a:	e012      	b.n	8008672 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3308      	adds	r3, #8
 8008656:	2201      	movs	r2, #1
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f8c7 	bl	80087ee <USBD_CtlSendData>
        break;
 8008660:	e00c      	b.n	800867c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3304      	adds	r3, #4
 8008666:	2201      	movs	r2, #1
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8bf 	bl	80087ee <USBD_CtlSendData>
        break;
 8008670:	e004      	b.n	800867c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f8a9 	bl	80087cc <USBD_CtlError>
        break;
 800867a:	bf00      	nop
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008694:	b2db      	uxtb	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	2b02      	cmp	r3, #2
 800869a:	d81e      	bhi.n	80086da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	88db      	ldrh	r3, [r3, #6]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d004      	beq.n	80086ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f890 	bl	80087cc <USBD_CtlError>
        break;
 80086ac:	e01a      	b.n	80086e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f043 0202 	orr.w	r2, r3, #2
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	330c      	adds	r3, #12
 80086ce:	2202      	movs	r2, #2
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f88b 	bl	80087ee <USBD_CtlSendData>
      break;
 80086d8:	e004      	b.n	80086e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f875 	bl	80087cc <USBD_CtlError>
      break;
 80086e2:	bf00      	nop
  }
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	885b      	ldrh	r3, [r3, #2]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d106      	bne.n	800870c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f8ae 	bl	8008868 <USBD_CtlSendStatus>
  }
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008724:	b2db      	uxtb	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	2b02      	cmp	r3, #2
 800872a:	d80b      	bhi.n	8008744 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	885b      	ldrh	r3, [r3, #2]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d10c      	bne.n	800874e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f893 	bl	8008868 <USBD_CtlSendStatus>
      }
      break;
 8008742:	e004      	b.n	800874e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f840 	bl	80087cc <USBD_CtlError>
      break;
 800874c:	e000      	b.n	8008750 <USBD_ClrFeature+0x3c>
      break;
 800874e:	bf00      	nop
  }
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff fa91 	bl	8007caa <SWAPBYTE>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3301      	adds	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7ff fa84 	bl	8007caa <SWAPBYTE>
 80087a2:	4603      	mov	r3, r0
 80087a4:	461a      	mov	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff fa77 	bl	8007caa <SWAPBYTE>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	80da      	strh	r2, [r3, #6]
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087d6:	2180      	movs	r1, #128	; 0x80
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f003 fbd7 	bl	800bf8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087de:	2100      	movs	r1, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f003 fbd3 	bl	800bf8c <USBD_LL_StallEP>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	2100      	movs	r1, #0
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f003 fc42 	bl	800c09e <USBD_LL_Transmit>

  return USBD_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	2100      	movs	r1, #0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f003 fc31 	bl	800c09e <USBD_LL_Transmit>

  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	2100      	movs	r1, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f003 fc41 	bl	800c0e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3710      	adds	r7, #16
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2204      	movs	r2, #4
 8008874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f003 fc0d 	bl	800c09e <USBD_LL_Transmit>

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2205      	movs	r2, #5
 800889a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800889e:	2300      	movs	r3, #0
 80088a0:	2200      	movs	r2, #0
 80088a2:	2100      	movs	r1, #0
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f003 fc1b 	bl	800c0e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <__NVIC_SetPriority>:
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	db0a      	blt.n	80088de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	490c      	ldr	r1, [pc, #48]	; (8008900 <__NVIC_SetPriority+0x4c>)
 80088ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d2:	0112      	lsls	r2, r2, #4
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	440b      	add	r3, r1
 80088d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80088dc:	e00a      	b.n	80088f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	4908      	ldr	r1, [pc, #32]	; (8008904 <__NVIC_SetPriority+0x50>)
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	3b04      	subs	r3, #4
 80088ec:	0112      	lsls	r2, r2, #4
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	440b      	add	r3, r1
 80088f2:	761a      	strb	r2, [r3, #24]
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	e000e100 	.word	0xe000e100
 8008904:	e000ed00 	.word	0xe000ed00

08008908 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800890c:	2100      	movs	r1, #0
 800890e:	f06f 0004 	mvn.w	r0, #4
 8008912:	f7ff ffcf 	bl	80088b4 <__NVIC_SetPriority>
#endif
}
 8008916:	bf00      	nop
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008922:	f3ef 8305 	mrs	r3, IPSR
 8008926:	603b      	str	r3, [r7, #0]
  return(result);
 8008928:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800892e:	f06f 0305 	mvn.w	r3, #5
 8008932:	607b      	str	r3, [r7, #4]
 8008934:	e00c      	b.n	8008950 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <osKernelInitialize+0x44>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d105      	bne.n	800894a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800893e:	4b08      	ldr	r3, [pc, #32]	; (8008960 <osKernelInitialize+0x44>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008944:	2300      	movs	r3, #0
 8008946:	607b      	str	r3, [r7, #4]
 8008948:	e002      	b.n	8008950 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800894a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008950:	687b      	ldr	r3, [r7, #4]
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	2000035c 	.word	0x2000035c

08008964 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800896a:	f3ef 8305 	mrs	r3, IPSR
 800896e:	603b      	str	r3, [r7, #0]
  return(result);
 8008970:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008976:	f06f 0305 	mvn.w	r3, #5
 800897a:	607b      	str	r3, [r7, #4]
 800897c:	e010      	b.n	80089a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800897e:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <osKernelStart+0x48>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d109      	bne.n	800899a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008986:	f7ff ffbf 	bl	8008908 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <osKernelStart+0x48>)
 800898c:	2202      	movs	r2, #2
 800898e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008990:	f001 f8ee 	bl	8009b70 <vTaskStartScheduler>
      stat = osOK;
 8008994:	2300      	movs	r3, #0
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	e002      	b.n	80089a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800899e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089a0:	687b      	ldr	r3, [r7, #4]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	2000035c 	.word	0x2000035c

080089b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08e      	sub	sp, #56	; 0x38
 80089b4:	af04      	add	r7, sp, #16
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089c0:	f3ef 8305 	mrs	r3, IPSR
 80089c4:	617b      	str	r3, [r7, #20]
  return(result);
 80089c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d17e      	bne.n	8008aca <osThreadNew+0x11a>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d07b      	beq.n	8008aca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089d2:	2380      	movs	r3, #128	; 0x80
 80089d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089d6:	2318      	movs	r3, #24
 80089d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d045      	beq.n	8008a76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <osThreadNew+0x48>
        name = attr->name;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d008      	beq.n	8008a1e <osThreadNew+0x6e>
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	2b38      	cmp	r3, #56	; 0x38
 8008a10:	d805      	bhi.n	8008a1e <osThreadNew+0x6e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <osThreadNew+0x72>
        return (NULL);
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e054      	b.n	8008acc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	089b      	lsrs	r3, r3, #2
 8008a30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00e      	beq.n	8008a58 <osThreadNew+0xa8>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	2ba7      	cmp	r3, #167	; 0xa7
 8008a40:	d90a      	bls.n	8008a58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <osThreadNew+0xa8>
        mem = 1;
 8008a52:	2301      	movs	r3, #1
 8008a54:	61bb      	str	r3, [r7, #24]
 8008a56:	e010      	b.n	8008a7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10c      	bne.n	8008a7a <osThreadNew+0xca>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d108      	bne.n	8008a7a <osThreadNew+0xca>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d104      	bne.n	8008a7a <osThreadNew+0xca>
          mem = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61bb      	str	r3, [r7, #24]
 8008a74:	e001      	b.n	8008a7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d110      	bne.n	8008aa2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a88:	9202      	str	r2, [sp, #8]
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	6a3a      	ldr	r2, [r7, #32]
 8008a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fe0c 	bl	80096b4 <xTaskCreateStatic>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	e013      	b.n	8008aca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d110      	bne.n	8008aca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	f107 0310 	add.w	r3, r7, #16
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 fe57 	bl	800976e <xTaskCreate>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d001      	beq.n	8008aca <osThreadNew+0x11a>
            hTask = NULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008aca:	693b      	ldr	r3, [r7, #16]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3728      	adds	r7, #40	; 0x28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008adc:	f3ef 8305 	mrs	r3, IPSR
 8008ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <osDelay+0x1c>
    stat = osErrorISR;
 8008ae8:	f06f 0305 	mvn.w	r3, #5
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e007      	b.n	8008b00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 f804 	bl	8009b08 <vTaskDelay>
    }
  }

  return (stat);
 8008b00:	68fb      	ldr	r3, [r7, #12]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4a06      	ldr	r2, [pc, #24]	; (8008b3c <vApplicationGetIdleTaskMemory+0x30>)
 8008b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2280      	movs	r2, #128	; 0x80
 8008b28:	601a      	str	r2, [r3, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000360 	.word	0x20000360
 8008b3c:	20000408 	.word	0x20000408

08008b40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4a07      	ldr	r2, [pc, #28]	; (8008b6c <vApplicationGetTimerTaskMemory+0x2c>)
 8008b50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4a06      	ldr	r2, [pc, #24]	; (8008b70 <vApplicationGetTimerTaskMemory+0x30>)
 8008b56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b5e:	601a      	str	r2, [r3, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000608 	.word	0x20000608
 8008b70:	200006b0 	.word	0x200006b0

08008b74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f103 0208 	add.w	r2, r3, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f103 0208 	add.w	r2, r3, #8
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f103 0208 	add.w	r2, r3, #8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	601a      	str	r2, [r3, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c2c:	d103      	bne.n	8008c36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e00c      	b.n	8008c50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e002      	b.n	8008c44 <vListInsert+0x2e>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d2f6      	bcs.n	8008c3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	1c5a      	adds	r2, r3, #1
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	601a      	str	r2, [r3, #0]
}
 8008c7c:	bf00      	nop
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6892      	ldr	r2, [r2, #8]
 8008c9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6852      	ldr	r2, [r2, #4]
 8008ca8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d103      	bne.n	8008cbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008d06:	f002 f8ed 	bl	800aee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d16:	fb01 f303 	mul.w	r3, r1, r3
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d36:	3b01      	subs	r3, #1
 8008d38:	68f9      	ldr	r1, [r7, #12]
 8008d3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008d3c:	fb01 f303 	mul.w	r3, r1, r3
 8008d40:	441a      	add	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	22ff      	movs	r2, #255	; 0xff
 8008d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	22ff      	movs	r2, #255	; 0xff
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d114      	bne.n	8008d86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01a      	beq.n	8008d9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3310      	adds	r3, #16
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 f99b 	bl	800a0a4 <xTaskRemoveFromEventList>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d012      	beq.n	8008d9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <xQueueGenericReset+0xcc>)
 8008d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	e009      	b.n	8008d9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3310      	adds	r3, #16
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff fef2 	bl	8008b74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3324      	adds	r3, #36	; 0x24
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff feed 	bl	8008b74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d9a:	f002 f8d3 	bl	800af44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d9e:	2301      	movs	r3, #1
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08e      	sub	sp, #56	; 0x38
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <xQueueGenericCreateStatic+0x52>
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <xQueueGenericCreateStatic+0x56>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericCreateStatic+0x58>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	623b      	str	r3, [r7, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d102      	bne.n	8008e2a <xQueueGenericCreateStatic+0x7e>
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <xQueueGenericCreateStatic+0x82>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <xQueueGenericCreateStatic+0x84>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	61fb      	str	r3, [r7, #28]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e4a:	2350      	movs	r3, #80	; 0x50
 8008e4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b50      	cmp	r3, #80	; 0x50
 8008e52:	d00a      	beq.n	8008e6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	61bb      	str	r3, [r7, #24]
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00d      	beq.n	8008e92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	68b9      	ldr	r1, [r7, #8]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f805 	bl	8008e9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3730      	adds	r7, #48	; 0x30
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008eca:	2101      	movs	r1, #1
 8008ecc:	69b8      	ldr	r0, [r7, #24]
 8008ece:	f7ff ff05 	bl	8008cdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	78fa      	ldrb	r2, [r7, #3]
 8008ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08e      	sub	sp, #56	; 0x38
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <xQueueGenericSend+0x32>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <xQueueGenericSend+0x40>
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <xQueueGenericSend+0x44>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <xQueueGenericSend+0x46>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <xQueueGenericSend+0x60>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d103      	bne.n	8008f52 <xQueueGenericSend+0x6e>
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <xQueueGenericSend+0x72>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <xQueueGenericSend+0x74>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10a      	bne.n	8008f72 <xQueueGenericSend+0x8e>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	623b      	str	r3, [r7, #32]
}
 8008f6e:	bf00      	nop
 8008f70:	e7fe      	b.n	8008f70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f72:	f001 fa59 	bl	800a428 <xTaskGetSchedulerState>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d102      	bne.n	8008f82 <xQueueGenericSend+0x9e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <xQueueGenericSend+0xa2>
 8008f82:	2301      	movs	r3, #1
 8008f84:	e000      	b.n	8008f88 <xQueueGenericSend+0xa4>
 8008f86:	2300      	movs	r3, #0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	61fb      	str	r3, [r7, #28]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fa2:	f001 ff9f 	bl	800aee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d302      	bcc.n	8008fb8 <xQueueGenericSend+0xd4>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d129      	bne.n	800900c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fbe:	f000 fa0b 	bl	80093d8 <prvCopyDataToQueue>
 8008fc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d010      	beq.n	8008fee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	3324      	adds	r3, #36	; 0x24
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 f867 	bl	800a0a4 <xTaskRemoveFromEventList>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d013      	beq.n	8009004 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fdc:	4b3f      	ldr	r3, [pc, #252]	; (80090dc <xQueueGenericSend+0x1f8>)
 8008fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	e00a      	b.n	8009004 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ff4:	4b39      	ldr	r3, [pc, #228]	; (80090dc <xQueueGenericSend+0x1f8>)
 8008ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009004:	f001 ff9e 	bl	800af44 <vPortExitCritical>
				return pdPASS;
 8009008:	2301      	movs	r3, #1
 800900a:	e063      	b.n	80090d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d103      	bne.n	800901a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009012:	f001 ff97 	bl	800af44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009016:	2300      	movs	r3, #0
 8009018:	e05c      	b.n	80090d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800901a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f8a1 	bl	800a16c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800902a:	2301      	movs	r3, #1
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800902e:	f001 ff89 	bl	800af44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009032:	f000 fe0d 	bl	8009c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009036:	f001 ff55 	bl	800aee4 <vPortEnterCritical>
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009040:	b25b      	sxtb	r3, r3
 8009042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009046:	d103      	bne.n	8009050 <xQueueGenericSend+0x16c>
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009056:	b25b      	sxtb	r3, r3
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905c:	d103      	bne.n	8009066 <xQueueGenericSend+0x182>
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009066:	f001 ff6d 	bl	800af44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800906a:	1d3a      	adds	r2, r7, #4
 800906c:	f107 0314 	add.w	r3, r7, #20
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f001 f890 	bl	800a198 <xTaskCheckForTimeOut>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d124      	bne.n	80090c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800907e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009080:	f000 faa2 	bl	80095c8 <prvIsQueueFull>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d018      	beq.n	80090bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	3310      	adds	r3, #16
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f000 ffb6 	bl	800a004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800909a:	f000 fa2d 	bl	80094f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800909e:	f000 fde5 	bl	8009c6c <xTaskResumeAll>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f47f af7c 	bne.w	8008fa2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090aa:	4b0c      	ldr	r3, [pc, #48]	; (80090dc <xQueueGenericSend+0x1f8>)
 80090ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	e772      	b.n	8008fa2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090be:	f000 fa1b 	bl	80094f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090c2:	f000 fdd3 	bl	8009c6c <xTaskResumeAll>
 80090c6:	e76c      	b.n	8008fa2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ca:	f000 fa15 	bl	80094f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ce:	f000 fdcd 	bl	8009c6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3738      	adds	r7, #56	; 0x38
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	e000ed04 	.word	0xe000ed04

080090e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b090      	sub	sp, #64	; 0x40
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d103      	bne.n	800911c <xQueueGenericSendFromISR+0x3c>
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <xQueueGenericSendFromISR+0x40>
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <xQueueGenericSendFromISR+0x42>
 8009120:	2300      	movs	r3, #0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2b02      	cmp	r3, #2
 8009140:	d103      	bne.n	800914a <xQueueGenericSendFromISR+0x6a>
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <xQueueGenericSendFromISR+0x6e>
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <xQueueGenericSendFromISR+0x70>
 800914e:	2300      	movs	r3, #0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	623b      	str	r3, [r7, #32]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800916a:	f001 ff9d 	bl	800b0a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800916e:	f3ef 8211 	mrs	r2, BASEPRI
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	61fa      	str	r2, [r7, #28]
 8009184:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009186:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009192:	429a      	cmp	r2, r3
 8009194:	d302      	bcc.n	800919c <xQueueGenericSendFromISR+0xbc>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d12f      	bne.n	80091fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091b2:	f000 f911 	bl	80093d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091be:	d112      	bne.n	80091e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d016      	beq.n	80091f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	3324      	adds	r3, #36	; 0x24
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 ff69 	bl	800a0a4 <xTaskRemoveFromEventList>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00e      	beq.n	80091f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00b      	beq.n	80091f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	e007      	b.n	80091f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091ea:	3301      	adds	r3, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	b25a      	sxtb	r2, r3
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091f6:	2301      	movs	r3, #1
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80091fa:	e001      	b.n	8009200 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009202:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800920a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800920c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800920e:	4618      	mov	r0, r3
 8009210:	3740      	adds	r7, #64	; 0x40
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08c      	sub	sp, #48	; 0x30
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009224:	2300      	movs	r3, #0
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <xQueueReceive+0x30>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	623b      	str	r3, [r7, #32]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <xQueueReceive+0x3e>
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d101      	bne.n	800925a <xQueueReceive+0x42>
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <xQueueReceive+0x44>
 800925a:	2300      	movs	r3, #0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <xQueueReceive+0x5e>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	61fb      	str	r3, [r7, #28]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009276:	f001 f8d7 	bl	800a428 <xTaskGetSchedulerState>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <xQueueReceive+0x6e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <xQueueReceive+0x72>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <xQueueReceive+0x74>
 800928a:	2300      	movs	r3, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xQueueReceive+0x8e>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61bb      	str	r3, [r7, #24]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092a6:	f001 fe1d 	bl	800aee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01f      	beq.n	80092f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ba:	f000 f8f7 	bl	80094ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	1e5a      	subs	r2, r3, #1
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00f      	beq.n	80092ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	3310      	adds	r3, #16
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fee6 	bl	800a0a4 <xTaskRemoveFromEventList>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092de:	4b3d      	ldr	r3, [pc, #244]	; (80093d4 <xQueueReceive+0x1bc>)
 80092e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e4:	601a      	str	r2, [r3, #0]
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092ee:	f001 fe29 	bl	800af44 <vPortExitCritical>
				return pdPASS;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e069      	b.n	80093ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d103      	bne.n	8009304 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092fc:	f001 fe22 	bl	800af44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009300:	2300      	movs	r3, #0
 8009302:	e062      	b.n	80093ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800930a:	f107 0310 	add.w	r3, r7, #16
 800930e:	4618      	mov	r0, r3
 8009310:	f000 ff2c 	bl	800a16c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009314:	2301      	movs	r3, #1
 8009316:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009318:	f001 fe14 	bl	800af44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800931c:	f000 fc98 	bl	8009c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009320:	f001 fde0 	bl	800aee4 <vPortEnterCritical>
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800932a:	b25b      	sxtb	r3, r3
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009330:	d103      	bne.n	800933a <xQueueReceive+0x122>
 8009332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009340:	b25b      	sxtb	r3, r3
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009346:	d103      	bne.n	8009350 <xQueueReceive+0x138>
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009350:	f001 fdf8 	bl	800af44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009354:	1d3a      	adds	r2, r7, #4
 8009356:	f107 0310 	add.w	r3, r7, #16
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f000 ff1b 	bl	800a198 <xTaskCheckForTimeOut>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d123      	bne.n	80093b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800936a:	f000 f917 	bl	800959c <prvIsQueueEmpty>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d017      	beq.n	80093a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	3324      	adds	r3, #36	; 0x24
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fe41 	bl	800a004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009384:	f000 f8b8 	bl	80094f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009388:	f000 fc70 	bl	8009c6c <xTaskResumeAll>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d189      	bne.n	80092a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009392:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <xQueueReceive+0x1bc>)
 8009394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	e780      	b.n	80092a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a6:	f000 f8a7 	bl	80094f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093aa:	f000 fc5f 	bl	8009c6c <xTaskResumeAll>
 80093ae:	e77a      	b.n	80092a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b2:	f000 f8a1 	bl	80094f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093b6:	f000 fc59 	bl	8009c6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093bc:	f000 f8ee 	bl	800959c <prvIsQueueEmpty>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f43f af6f 	beq.w	80092a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3730      	adds	r7, #48	; 0x30
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10d      	bne.n	8009412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d14d      	bne.n	800949a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	4618      	mov	r0, r3
 8009404:	f001 f82e 	bl	800a464 <xTaskPriorityDisinherit>
 8009408:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	609a      	str	r2, [r3, #8]
 8009410:	e043      	b.n	800949a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d119      	bne.n	800944c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6858      	ldr	r0, [r3, #4]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009420:	461a      	mov	r2, r3
 8009422:	68b9      	ldr	r1, [r7, #8]
 8009424:	f003 f8c8 	bl	800c5b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	441a      	add	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	429a      	cmp	r2, r3
 8009440:	d32b      	bcc.n	800949a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	605a      	str	r2, [r3, #4]
 800944a:	e026      	b.n	800949a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68d8      	ldr	r0, [r3, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	461a      	mov	r2, r3
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	f003 f8ae 	bl	800c5b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	425b      	negs	r3, r3
 8009466:	441a      	add	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d207      	bcs.n	8009488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	425b      	negs	r3, r3
 8009482:	441a      	add	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b02      	cmp	r3, #2
 800948c:	d105      	bne.n	800949a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	3b01      	subs	r3, #1
 8009498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094a2:	697b      	ldr	r3, [r7, #20]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d018      	beq.n	80094f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68da      	ldr	r2, [r3, #12]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	441a      	add	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d303      	bcc.n	80094e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68d9      	ldr	r1, [r3, #12]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	461a      	mov	r2, r3
 80094ea:	6838      	ldr	r0, [r7, #0]
 80094ec:	f003 f864 	bl	800c5b8 <memcpy>
	}
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009500:	f001 fcf0 	bl	800aee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800950a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800950c:	e011      	b.n	8009532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	2b00      	cmp	r3, #0
 8009514:	d012      	beq.n	800953c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3324      	adds	r3, #36	; 0x24
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fdc2 	bl	800a0a4 <xTaskRemoveFromEventList>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009526:	f000 fe99 	bl	800a25c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	3b01      	subs	r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dce9      	bgt.n	800950e <prvUnlockQueue+0x16>
 800953a:	e000      	b.n	800953e <prvUnlockQueue+0x46>
					break;
 800953c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	22ff      	movs	r2, #255	; 0xff
 8009542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009546:	f001 fcfd 	bl	800af44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800954a:	f001 fccb 	bl	800aee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009556:	e011      	b.n	800957c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d012      	beq.n	8009586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3310      	adds	r3, #16
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fd9d 	bl	800a0a4 <xTaskRemoveFromEventList>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009570:	f000 fe74 	bl	800a25c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	3b01      	subs	r3, #1
 8009578:	b2db      	uxtb	r3, r3
 800957a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800957c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009580:	2b00      	cmp	r3, #0
 8009582:	dce9      	bgt.n	8009558 <prvUnlockQueue+0x60>
 8009584:	e000      	b.n	8009588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	22ff      	movs	r2, #255	; 0xff
 800958c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009590:	f001 fcd8 	bl	800af44 <vPortExitCritical>
}
 8009594:	bf00      	nop
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095a4:	f001 fc9e 	bl	800aee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095b0:	2301      	movs	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e001      	b.n	80095ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095ba:	f001 fcc3 	bl	800af44 <vPortExitCritical>

	return xReturn;
 80095be:	68fb      	ldr	r3, [r7, #12]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095d0:	f001 fc88 	bl	800aee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d102      	bne.n	80095e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095e0:	2301      	movs	r3, #1
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e001      	b.n	80095ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095ea:	f001 fcab 	bl	800af44 <vPortExitCritical>

	return xReturn;
 80095ee:	68fb      	ldr	r3, [r7, #12]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	e014      	b.n	8009632 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009608:	4a0f      	ldr	r2, [pc, #60]	; (8009648 <vQueueAddToRegistry+0x50>)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10b      	bne.n	800962c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009614:	490c      	ldr	r1, [pc, #48]	; (8009648 <vQueueAddToRegistry+0x50>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800961e:	4a0a      	ldr	r2, [pc, #40]	; (8009648 <vQueueAddToRegistry+0x50>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	4413      	add	r3, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800962a:	e006      	b.n	800963a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3301      	adds	r3, #1
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b07      	cmp	r3, #7
 8009636:	d9e7      	bls.n	8009608 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009638:	bf00      	nop
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000ab0 	.word	0x20000ab0

0800964c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800965c:	f001 fc42 	bl	800aee4 <vPortEnterCritical>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009666:	b25b      	sxtb	r3, r3
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966c:	d103      	bne.n	8009676 <vQueueWaitForMessageRestricted+0x2a>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800967c:	b25b      	sxtb	r3, r3
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009682:	d103      	bne.n	800968c <vQueueWaitForMessageRestricted+0x40>
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800968c:	f001 fc5a 	bl	800af44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fcd3 	bl	800a04c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096a6:	6978      	ldr	r0, [r7, #20]
 80096a8:	f7ff ff26 	bl	80094f8 <prvUnlockQueue>
	}
 80096ac:	bf00      	nop
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08e      	sub	sp, #56	; 0x38
 80096b8:	af04      	add	r7, sp, #16
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <xTaskCreateStatic+0x2a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	623b      	str	r3, [r7, #32]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <xTaskCreateStatic+0x46>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	61fb      	str	r3, [r7, #28]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096fa:	23a8      	movs	r3, #168	; 0xa8
 80096fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2ba8      	cmp	r3, #168	; 0xa8
 8009702:	d00a      	beq.n	800971a <xTaskCreateStatic+0x66>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	61bb      	str	r3, [r7, #24]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800971a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01e      	beq.n	8009760 <xTaskCreateStatic+0xac>
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01b      	beq.n	8009760 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009730:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	2202      	movs	r2, #2
 8009736:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800973a:	2300      	movs	r3, #0
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	9302      	str	r3, [sp, #8]
 8009742:	f107 0314 	add.w	r3, r7, #20
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 f850 	bl	80097f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800975a:	f000 f8f3 	bl	8009944 <prvAddNewTaskToReadyList>
 800975e:	e001      	b.n	8009764 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009760:	2300      	movs	r3, #0
 8009762:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009764:	697b      	ldr	r3, [r7, #20]
	}
 8009766:	4618      	mov	r0, r3
 8009768:	3728      	adds	r7, #40	; 0x28
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800976e:	b580      	push	{r7, lr}
 8009770:	b08c      	sub	sp, #48	; 0x30
 8009772:	af04      	add	r7, sp, #16
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	603b      	str	r3, [r7, #0]
 800977a:	4613      	mov	r3, r2
 800977c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fcd0 	bl	800b128 <pvPortMalloc>
 8009788:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00e      	beq.n	80097ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009790:	20a8      	movs	r0, #168	; 0xa8
 8009792:	f001 fcc9 	bl	800b128 <pvPortMalloc>
 8009796:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d003      	beq.n	80097a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	631a      	str	r2, [r3, #48]	; 0x30
 80097a4:	e005      	b.n	80097b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80097a6:	6978      	ldr	r0, [r7, #20]
 80097a8:	f001 fd8a 	bl	800b2c0 <vPortFree>
 80097ac:	e001      	b.n	80097b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097ae:	2300      	movs	r3, #0
 80097b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d017      	beq.n	80097e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	2300      	movs	r3, #0
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f80e 	bl	80097f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097dc:	69f8      	ldr	r0, [r7, #28]
 80097de:	f000 f8b1 	bl	8009944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097e2:	2301      	movs	r3, #1
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	e002      	b.n	80097ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097ee:	69bb      	ldr	r3, [r7, #24]
	}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3720      	adds	r7, #32
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	461a      	mov	r2, r3
 8009810:	21a5      	movs	r1, #165	; 0xa5
 8009812:	f002 fdf2 	bl	800c3fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009820:	3b01      	subs	r3, #1
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	f023 0307 	bic.w	r3, r3, #7
 800982e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <prvInitialiseNewTask+0x58>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	617b      	str	r3, [r7, #20]
}
 800984c:	bf00      	nop
 800984e:	e7fe      	b.n	800984e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d01f      	beq.n	8009896 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009856:	2300      	movs	r3, #0
 8009858:	61fb      	str	r3, [r7, #28]
 800985a:	e012      	b.n	8009882 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	7819      	ldrb	r1, [r3, #0]
 8009864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	4413      	add	r3, r2
 800986a:	3334      	adds	r3, #52	; 0x34
 800986c:	460a      	mov	r2, r1
 800986e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	4413      	add	r3, r2
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d006      	beq.n	800988a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	3301      	adds	r3, #1
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b0f      	cmp	r3, #15
 8009886:	d9e9      	bls.n	800985c <prvInitialiseNewTask+0x64>
 8009888:	e000      	b.n	800988c <prvInitialiseNewTask+0x94>
			{
				break;
 800988a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009894:	e003      	b.n	800989e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	2b37      	cmp	r3, #55	; 0x37
 80098a2:	d901      	bls.n	80098a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80098a4:	2337      	movs	r3, #55	; 0x37
 80098a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	2200      	movs	r2, #0
 80098b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098bc:	3304      	adds	r3, #4
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff f978 	bl	8008bb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	3318      	adds	r3, #24
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7ff f973 	bl	8008bb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	2200      	movs	r2, #0
 80098e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	3354      	adds	r3, #84	; 0x54
 80098f8:	224c      	movs	r2, #76	; 0x4c
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f002 fd7c 	bl	800c3fa <memset>
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	4a0c      	ldr	r2, [pc, #48]	; (8009938 <prvInitialiseNewTask+0x140>)
 8009906:	659a      	str	r2, [r3, #88]	; 0x58
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	4a0c      	ldr	r2, [pc, #48]	; (800993c <prvInitialiseNewTask+0x144>)
 800990c:	65da      	str	r2, [r3, #92]	; 0x5c
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	4a0b      	ldr	r2, [pc, #44]	; (8009940 <prvInitialiseNewTask+0x148>)
 8009912:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	68f9      	ldr	r1, [r7, #12]
 8009918:	69b8      	ldr	r0, [r7, #24]
 800991a:	f001 f9b3 	bl	800ac84 <pxPortInitialiseStack>
 800991e:	4602      	mov	r2, r0
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800992e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009930:	bf00      	nop
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	2001043c 	.word	0x2001043c
 800993c:	200104a4 	.word	0x200104a4
 8009940:	2001050c 	.word	0x2001050c

08009944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800994c:	f001 faca 	bl	800aee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009950:	4b2d      	ldr	r3, [pc, #180]	; (8009a08 <prvAddNewTaskToReadyList+0xc4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	4a2c      	ldr	r2, [pc, #176]	; (8009a08 <prvAddNewTaskToReadyList+0xc4>)
 8009958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800995a:	4b2c      	ldr	r3, [pc, #176]	; (8009a0c <prvAddNewTaskToReadyList+0xc8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d109      	bne.n	8009976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009962:	4a2a      	ldr	r2, [pc, #168]	; (8009a0c <prvAddNewTaskToReadyList+0xc8>)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009968:	4b27      	ldr	r3, [pc, #156]	; (8009a08 <prvAddNewTaskToReadyList+0xc4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d110      	bne.n	8009992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009970:	f000 fc98 	bl	800a2a4 <prvInitialiseTaskLists>
 8009974:	e00d      	b.n	8009992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009976:	4b26      	ldr	r3, [pc, #152]	; (8009a10 <prvAddNewTaskToReadyList+0xcc>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800997e:	4b23      	ldr	r3, [pc, #140]	; (8009a0c <prvAddNewTaskToReadyList+0xc8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	429a      	cmp	r2, r3
 800998a:	d802      	bhi.n	8009992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800998c:	4a1f      	ldr	r2, [pc, #124]	; (8009a0c <prvAddNewTaskToReadyList+0xc8>)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009992:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <prvAddNewTaskToReadyList+0xd0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3301      	adds	r3, #1
 8009998:	4a1e      	ldr	r2, [pc, #120]	; (8009a14 <prvAddNewTaskToReadyList+0xd0>)
 800999a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800999c:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <prvAddNewTaskToReadyList+0xd0>)
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <prvAddNewTaskToReadyList+0xd4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d903      	bls.n	80099b8 <prvAddNewTaskToReadyList+0x74>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	4a18      	ldr	r2, [pc, #96]	; (8009a18 <prvAddNewTaskToReadyList+0xd4>)
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4a15      	ldr	r2, [pc, #84]	; (8009a1c <prvAddNewTaskToReadyList+0xd8>)
 80099c6:	441a      	add	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f7ff f8fd 	bl	8008bce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099d4:	f001 fab6 	bl	800af44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099d8:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <prvAddNewTaskToReadyList+0xcc>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00e      	beq.n	80099fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <prvAddNewTaskToReadyList+0xc8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d207      	bcs.n	80099fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099ee:	4b0c      	ldr	r3, [pc, #48]	; (8009a20 <prvAddNewTaskToReadyList+0xdc>)
 80099f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	20000fc4 	.word	0x20000fc4
 8009a0c:	20000af0 	.word	0x20000af0
 8009a10:	20000fd0 	.word	0x20000fd0
 8009a14:	20000fe0 	.word	0x20000fe0
 8009a18:	20000fcc 	.word	0x20000fcc
 8009a1c:	20000af4 	.word	0x20000af4
 8009a20:	e000ed04 	.word	0xe000ed04

08009a24 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009a2c:	f001 fa5a 	bl	800aee4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d102      	bne.n	8009a3c <vTaskDelete+0x18>
 8009a36:	4b2c      	ldr	r3, [pc, #176]	; (8009ae8 <vTaskDelete+0xc4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	e000      	b.n	8009a3e <vTaskDelete+0x1a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff f91f 	bl	8008c88 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d004      	beq.n	8009a5c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3318      	adds	r3, #24
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff f916 	bl	8008c88 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009a5c:	4b23      	ldr	r3, [pc, #140]	; (8009aec <vTaskDelete+0xc8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3301      	adds	r3, #1
 8009a62:	4a22      	ldr	r2, [pc, #136]	; (8009aec <vTaskDelete+0xc8>)
 8009a64:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8009a66:	4b20      	ldr	r3, [pc, #128]	; (8009ae8 <vTaskDelete+0xc4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d10b      	bne.n	8009a88 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	481e      	ldr	r0, [pc, #120]	; (8009af0 <vTaskDelete+0xcc>)
 8009a78:	f7ff f8a9 	bl	8008bce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009a7c:	4b1d      	ldr	r3, [pc, #116]	; (8009af4 <vTaskDelete+0xd0>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	4a1c      	ldr	r2, [pc, #112]	; (8009af4 <vTaskDelete+0xd0>)
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e009      	b.n	8009a9c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009a88:	4b1b      	ldr	r3, [pc, #108]	; (8009af8 <vTaskDelete+0xd4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a1a      	ldr	r2, [pc, #104]	; (8009af8 <vTaskDelete+0xd4>)
 8009a90:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 fc74 	bl	800a380 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009a98:	f000 fca6 	bl	800a3e8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009a9c:	f001 fa52 	bl	800af44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009aa0:	4b16      	ldr	r3, [pc, #88]	; (8009afc <vTaskDelete+0xd8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01b      	beq.n	8009ae0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009aa8:	4b0f      	ldr	r3, [pc, #60]	; (8009ae8 <vTaskDelete+0xc4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d116      	bne.n	8009ae0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009ab2:	4b13      	ldr	r3, [pc, #76]	; (8009b00 <vTaskDelete+0xdc>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00a      	beq.n	8009ad0 <vTaskDelete+0xac>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	60bb      	str	r3, [r7, #8]
}
 8009acc:	bf00      	nop
 8009ace:	e7fe      	b.n	8009ace <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <vTaskDelete+0xe0>)
 8009ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ae0:	bf00      	nop
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20000af0 	.word	0x20000af0
 8009aec:	20000fe0 	.word	0x20000fe0
 8009af0:	20000f98 	.word	0x20000f98
 8009af4:	20000fac 	.word	0x20000fac
 8009af8:	20000fc4 	.word	0x20000fc4
 8009afc:	20000fd0 	.word	0x20000fd0
 8009b00:	20000fec 	.word	0x20000fec
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d017      	beq.n	8009b4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <vTaskDelay+0x60>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <vTaskDelay+0x30>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	60bb      	str	r3, [r7, #8]
}
 8009b34:	bf00      	nop
 8009b36:	e7fe      	b.n	8009b36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b38:	f000 f88a 	bl	8009c50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fcfe 	bl	800a540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b44:	f000 f892 	bl	8009c6c <xTaskResumeAll>
 8009b48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d107      	bne.n	8009b60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <vTaskDelay+0x64>)
 8009b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000fec 	.word	0x20000fec
 8009b6c:	e000ed04 	.word	0xe000ed04

08009b70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08a      	sub	sp, #40	; 0x28
 8009b74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b7e:	463a      	mov	r2, r7
 8009b80:	1d39      	adds	r1, r7, #4
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe ffc0 	bl	8008b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	9202      	str	r2, [sp, #8]
 8009b94:	9301      	str	r3, [sp, #4]
 8009b96:	2300      	movs	r3, #0
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	460a      	mov	r2, r1
 8009b9e:	4924      	ldr	r1, [pc, #144]	; (8009c30 <vTaskStartScheduler+0xc0>)
 8009ba0:	4824      	ldr	r0, [pc, #144]	; (8009c34 <vTaskStartScheduler+0xc4>)
 8009ba2:	f7ff fd87 	bl	80096b4 <xTaskCreateStatic>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	4a23      	ldr	r2, [pc, #140]	; (8009c38 <vTaskStartScheduler+0xc8>)
 8009baa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bac:	4b22      	ldr	r3, [pc, #136]	; (8009c38 <vTaskStartScheduler+0xc8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	e001      	b.n	8009bbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d102      	bne.n	8009bca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bc4:	f000 fd10 	bl	800a5e8 <xTimerCreateTimerTask>
 8009bc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d11b      	bne.n	8009c08 <vTaskStartScheduler+0x98>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	613b      	str	r3, [r7, #16]
}
 8009be2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009be4:	4b15      	ldr	r3, [pc, #84]	; (8009c3c <vTaskStartScheduler+0xcc>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3354      	adds	r3, #84	; 0x54
 8009bea:	4a15      	ldr	r2, [pc, #84]	; (8009c40 <vTaskStartScheduler+0xd0>)
 8009bec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bee:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <vTaskStartScheduler+0xd4>)
 8009bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bf6:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <vTaskStartScheduler+0xd8>)
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bfc:	4b13      	ldr	r3, [pc, #76]	; (8009c4c <vTaskStartScheduler+0xdc>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c02:	f001 f8cd 	bl	800ada0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c06:	e00e      	b.n	8009c26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c0e:	d10a      	bne.n	8009c26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60fb      	str	r3, [r7, #12]
}
 8009c22:	bf00      	nop
 8009c24:	e7fe      	b.n	8009c24 <vTaskStartScheduler+0xb4>
}
 8009c26:	bf00      	nop
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800c684 	.word	0x0800c684
 8009c34:	0800a275 	.word	0x0800a275
 8009c38:	20000fe8 	.word	0x20000fe8
 8009c3c:	20000af0 	.word	0x20000af0
 8009c40:	2000005c 	.word	0x2000005c
 8009c44:	20000fe4 	.word	0x20000fe4
 8009c48:	20000fd0 	.word	0x20000fd0
 8009c4c:	20000fc8 	.word	0x20000fc8

08009c50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c54:	4b04      	ldr	r3, [pc, #16]	; (8009c68 <vTaskSuspendAll+0x18>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	4a03      	ldr	r2, [pc, #12]	; (8009c68 <vTaskSuspendAll+0x18>)
 8009c5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c5e:	bf00      	nop
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	20000fec 	.word	0x20000fec

08009c6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c7a:	4b42      	ldr	r3, [pc, #264]	; (8009d84 <xTaskResumeAll+0x118>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	603b      	str	r3, [r7, #0]
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c98:	f001 f924 	bl	800aee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c9c:	4b39      	ldr	r3, [pc, #228]	; (8009d84 <xTaskResumeAll+0x118>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	4a38      	ldr	r2, [pc, #224]	; (8009d84 <xTaskResumeAll+0x118>)
 8009ca4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca6:	4b37      	ldr	r3, [pc, #220]	; (8009d84 <xTaskResumeAll+0x118>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d162      	bne.n	8009d74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cae:	4b36      	ldr	r3, [pc, #216]	; (8009d88 <xTaskResumeAll+0x11c>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d05e      	beq.n	8009d74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cb6:	e02f      	b.n	8009d18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cb8:	4b34      	ldr	r3, [pc, #208]	; (8009d8c <xTaskResumeAll+0x120>)
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	3318      	adds	r3, #24
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe ffdf 	bl	8008c88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe ffda 	bl	8008c88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4b2d      	ldr	r3, [pc, #180]	; (8009d90 <xTaskResumeAll+0x124>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d903      	bls.n	8009ce8 <xTaskResumeAll+0x7c>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a2a      	ldr	r2, [pc, #168]	; (8009d90 <xTaskResumeAll+0x124>)
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4a27      	ldr	r2, [pc, #156]	; (8009d94 <xTaskResumeAll+0x128>)
 8009cf6:	441a      	add	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f7fe ff65 	bl	8008bce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d08:	4b23      	ldr	r3, [pc, #140]	; (8009d98 <xTaskResumeAll+0x12c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d302      	bcc.n	8009d18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d12:	4b22      	ldr	r3, [pc, #136]	; (8009d9c <xTaskResumeAll+0x130>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d18:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <xTaskResumeAll+0x120>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1cb      	bne.n	8009cb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d26:	f000 fb5f 	bl	800a3e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d2a:	4b1d      	ldr	r3, [pc, #116]	; (8009da0 <xTaskResumeAll+0x134>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d010      	beq.n	8009d58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d36:	f000 f847 	bl	8009dc8 <xTaskIncrementTick>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d40:	4b16      	ldr	r3, [pc, #88]	; (8009d9c <xTaskResumeAll+0x130>)
 8009d42:	2201      	movs	r2, #1
 8009d44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1f1      	bne.n	8009d36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d52:	4b13      	ldr	r3, [pc, #76]	; (8009da0 <xTaskResumeAll+0x134>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d58:	4b10      	ldr	r3, [pc, #64]	; (8009d9c <xTaskResumeAll+0x130>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d009      	beq.n	8009d74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d60:	2301      	movs	r3, #1
 8009d62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d64:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <xTaskResumeAll+0x138>)
 8009d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d74:	f001 f8e6 	bl	800af44 <vPortExitCritical>

	return xAlreadyYielded;
 8009d78:	68bb      	ldr	r3, [r7, #8]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	20000fec 	.word	0x20000fec
 8009d88:	20000fc4 	.word	0x20000fc4
 8009d8c:	20000f84 	.word	0x20000f84
 8009d90:	20000fcc 	.word	0x20000fcc
 8009d94:	20000af4 	.word	0x20000af4
 8009d98:	20000af0 	.word	0x20000af0
 8009d9c:	20000fd8 	.word	0x20000fd8
 8009da0:	20000fd4 	.word	0x20000fd4
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <xTaskGetTickCount+0x1c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009db4:	687b      	ldr	r3, [r7, #4]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	20000fc8 	.word	0x20000fc8

08009dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd2:	4b4f      	ldr	r3, [pc, #316]	; (8009f10 <xTaskIncrementTick+0x148>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f040 808f 	bne.w	8009efa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ddc:	4b4d      	ldr	r3, [pc, #308]	; (8009f14 <xTaskIncrementTick+0x14c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009de4:	4a4b      	ldr	r2, [pc, #300]	; (8009f14 <xTaskIncrementTick+0x14c>)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d120      	bne.n	8009e32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009df0:	4b49      	ldr	r3, [pc, #292]	; (8009f18 <xTaskIncrementTick+0x150>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	603b      	str	r3, [r7, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <xTaskIncrementTick+0x46>
 8009e10:	4b41      	ldr	r3, [pc, #260]	; (8009f18 <xTaskIncrementTick+0x150>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
 8009e16:	4b41      	ldr	r3, [pc, #260]	; (8009f1c <xTaskIncrementTick+0x154>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a3f      	ldr	r2, [pc, #252]	; (8009f18 <xTaskIncrementTick+0x150>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	4a3f      	ldr	r2, [pc, #252]	; (8009f1c <xTaskIncrementTick+0x154>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	4b3e      	ldr	r3, [pc, #248]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	4a3d      	ldr	r2, [pc, #244]	; (8009f20 <xTaskIncrementTick+0x158>)
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	f000 fadb 	bl	800a3e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e32:	4b3c      	ldr	r3, [pc, #240]	; (8009f24 <xTaskIncrementTick+0x15c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d349      	bcc.n	8009ed0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e3c:	4b36      	ldr	r3, [pc, #216]	; (8009f18 <xTaskIncrementTick+0x150>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d104      	bne.n	8009e50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e46:	4b37      	ldr	r3, [pc, #220]	; (8009f24 <xTaskIncrementTick+0x15c>)
 8009e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e4c:	601a      	str	r2, [r3, #0]
					break;
 8009e4e:	e03f      	b.n	8009ed0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e50:	4b31      	ldr	r3, [pc, #196]	; (8009f18 <xTaskIncrementTick+0x150>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d203      	bcs.n	8009e70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e68:	4a2e      	ldr	r2, [pc, #184]	; (8009f24 <xTaskIncrementTick+0x15c>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e6e:	e02f      	b.n	8009ed0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe ff07 	bl	8008c88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d004      	beq.n	8009e8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	3318      	adds	r3, #24
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe fefe 	bl	8008c88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e90:	4b25      	ldr	r3, [pc, #148]	; (8009f28 <xTaskIncrementTick+0x160>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d903      	bls.n	8009ea0 <xTaskIncrementTick+0xd8>
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a22      	ldr	r2, [pc, #136]	; (8009f28 <xTaskIncrementTick+0x160>)
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	4a1f      	ldr	r2, [pc, #124]	; (8009f2c <xTaskIncrementTick+0x164>)
 8009eae:	441a      	add	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fe fe89 	bl	8008bce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4b1b      	ldr	r3, [pc, #108]	; (8009f30 <xTaskIncrementTick+0x168>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d3b8      	bcc.n	8009e3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ece:	e7b5      	b.n	8009e3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ed0:	4b17      	ldr	r3, [pc, #92]	; (8009f30 <xTaskIncrementTick+0x168>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4915      	ldr	r1, [pc, #84]	; (8009f2c <xTaskIncrementTick+0x164>)
 8009ed8:	4613      	mov	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4413      	add	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d901      	bls.n	8009eec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009eec:	4b11      	ldr	r3, [pc, #68]	; (8009f34 <xTaskIncrementTick+0x16c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d007      	beq.n	8009f04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e004      	b.n	8009f04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009efa:	4b0f      	ldr	r3, [pc, #60]	; (8009f38 <xTaskIncrementTick+0x170>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	4a0d      	ldr	r2, [pc, #52]	; (8009f38 <xTaskIncrementTick+0x170>)
 8009f02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f04:	697b      	ldr	r3, [r7, #20]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000fec 	.word	0x20000fec
 8009f14:	20000fc8 	.word	0x20000fc8
 8009f18:	20000f7c 	.word	0x20000f7c
 8009f1c:	20000f80 	.word	0x20000f80
 8009f20:	20000fdc 	.word	0x20000fdc
 8009f24:	20000fe4 	.word	0x20000fe4
 8009f28:	20000fcc 	.word	0x20000fcc
 8009f2c:	20000af4 	.word	0x20000af4
 8009f30:	20000af0 	.word	0x20000af0
 8009f34:	20000fd8 	.word	0x20000fd8
 8009f38:	20000fd4 	.word	0x20000fd4

08009f3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f42:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <vTaskSwitchContext+0xb0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f4a:	4b29      	ldr	r3, [pc, #164]	; (8009ff0 <vTaskSwitchContext+0xb4>)
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f50:	e046      	b.n	8009fe0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f52:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <vTaskSwitchContext+0xb4>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f58:	4b26      	ldr	r3, [pc, #152]	; (8009ff4 <vTaskSwitchContext+0xb8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e010      	b.n	8009f82 <vTaskSwitchContext+0x46>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <vTaskSwitchContext+0x40>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	607b      	str	r3, [r7, #4]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <vTaskSwitchContext+0x3e>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	491d      	ldr	r1, [pc, #116]	; (8009ff8 <vTaskSwitchContext+0xbc>)
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d0e4      	beq.n	8009f60 <vTaskSwitchContext+0x24>
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4a15      	ldr	r2, [pc, #84]	; (8009ff8 <vTaskSwitchContext+0xbc>)
 8009fa2:	4413      	add	r3, r2
 8009fa4:	60bb      	str	r3, [r7, #8]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	605a      	str	r2, [r3, #4]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d104      	bne.n	8009fc6 <vTaskSwitchContext+0x8a>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	605a      	str	r2, [r3, #4]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <vTaskSwitchContext+0xc0>)
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <vTaskSwitchContext+0xb8>)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fd6:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <vTaskSwitchContext+0xc0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3354      	adds	r3, #84	; 0x54
 8009fdc:	4a08      	ldr	r2, [pc, #32]	; (800a000 <vTaskSwitchContext+0xc4>)
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20000fec 	.word	0x20000fec
 8009ff0:	20000fd8 	.word	0x20000fd8
 8009ff4:	20000fcc 	.word	0x20000fcc
 8009ff8:	20000af4 	.word	0x20000af4
 8009ffc:	20000af0 	.word	0x20000af0
 800a000:	2000005c 	.word	0x2000005c

0800a004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	60fb      	str	r3, [r7, #12]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a02a:	4b07      	ldr	r3, [pc, #28]	; (800a048 <vTaskPlaceOnEventList+0x44>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3318      	adds	r3, #24
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7fe fdef 	bl	8008c16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a038:	2101      	movs	r1, #1
 800a03a:	6838      	ldr	r0, [r7, #0]
 800a03c:	f000 fa80 	bl	800a540 <prvAddCurrentTaskToDelayedList>
}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20000af0 	.word	0x20000af0

0800a04c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	617b      	str	r3, [r7, #20]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3318      	adds	r3, #24
 800a07a:	4619      	mov	r1, r3
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7fe fda6 	bl	8008bce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a08c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	68b8      	ldr	r0, [r7, #8]
 800a092:	f000 fa55 	bl	800a540 <prvAddCurrentTaskToDelayedList>
	}
 800a096:	bf00      	nop
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000af0 	.word	0x20000af0

0800a0a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d10a      	bne.n	800a0d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	60fb      	str	r3, [r7, #12]
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	3318      	adds	r3, #24
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe fdd7 	bl	8008c88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0da:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <xTaskRemoveFromEventList+0xb0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d11d      	bne.n	800a11e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fdce 	bl	8008c88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f0:	4b19      	ldr	r3, [pc, #100]	; (800a158 <xTaskRemoveFromEventList+0xb4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d903      	bls.n	800a100 <xTaskRemoveFromEventList+0x5c>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	4a16      	ldr	r2, [pc, #88]	; (800a158 <xTaskRemoveFromEventList+0xb4>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4a13      	ldr	r2, [pc, #76]	; (800a15c <xTaskRemoveFromEventList+0xb8>)
 800a10e:	441a      	add	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fe fd59 	bl	8008bce <vListInsertEnd>
 800a11c:	e005      	b.n	800a12a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	3318      	adds	r3, #24
 800a122:	4619      	mov	r1, r3
 800a124:	480e      	ldr	r0, [pc, #56]	; (800a160 <xTaskRemoveFromEventList+0xbc>)
 800a126:	f7fe fd52 	bl	8008bce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a12e:	4b0d      	ldr	r3, [pc, #52]	; (800a164 <xTaskRemoveFromEventList+0xc0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	429a      	cmp	r2, r3
 800a136:	d905      	bls.n	800a144 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a138:	2301      	movs	r3, #1
 800a13a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <xTaskRemoveFromEventList+0xc4>)
 800a13e:	2201      	movs	r2, #1
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	e001      	b.n	800a148 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a148:	697b      	ldr	r3, [r7, #20]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20000fec 	.word	0x20000fec
 800a158:	20000fcc 	.word	0x20000fcc
 800a15c:	20000af4 	.word	0x20000af4
 800a160:	20000f84 	.word	0x20000f84
 800a164:	20000af0 	.word	0x20000af0
 800a168:	20000fd8 	.word	0x20000fd8

0800a16c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a174:	4b06      	ldr	r3, [pc, #24]	; (800a190 <vTaskInternalSetTimeOutState+0x24>)
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <vTaskInternalSetTimeOutState+0x28>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	605a      	str	r2, [r3, #4]
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	20000fdc 	.word	0x20000fdc
 800a194:	20000fc8 	.word	0x20000fc8

0800a198 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	613b      	str	r3, [r7, #16]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1da:	f000 fe83 	bl	800aee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1de:	4b1d      	ldr	r3, [pc, #116]	; (800a254 <xTaskCheckForTimeOut+0xbc>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1f6:	d102      	bne.n	800a1fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	e023      	b.n	800a246 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <xTaskCheckForTimeOut+0xc0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	429a      	cmp	r2, r3
 800a208:	d007      	beq.n	800a21a <xTaskCheckForTimeOut+0x82>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	429a      	cmp	r2, r3
 800a212:	d302      	bcc.n	800a21a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a214:	2301      	movs	r3, #1
 800a216:	61fb      	str	r3, [r7, #28]
 800a218:	e015      	b.n	800a246 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	429a      	cmp	r2, r3
 800a222:	d20b      	bcs.n	800a23c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	1ad2      	subs	r2, r2, r3
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff ff9b 	bl	800a16c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a236:	2300      	movs	r3, #0
 800a238:	61fb      	str	r3, [r7, #28]
 800a23a:	e004      	b.n	800a246 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a242:	2301      	movs	r3, #1
 800a244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a246:	f000 fe7d 	bl	800af44 <vPortExitCritical>

	return xReturn;
 800a24a:	69fb      	ldr	r3, [r7, #28]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000fc8 	.word	0x20000fc8
 800a258:	20000fdc 	.word	0x20000fdc

0800a25c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a260:	4b03      	ldr	r3, [pc, #12]	; (800a270 <vTaskMissedYield+0x14>)
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	20000fd8 	.word	0x20000fd8

0800a274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a27c:	f000 f852 	bl	800a324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a280:	4b06      	ldr	r3, [pc, #24]	; (800a29c <prvIdleTask+0x28>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d9f9      	bls.n	800a27c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a288:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <prvIdleTask+0x2c>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a298:	e7f0      	b.n	800a27c <prvIdleTask+0x8>
 800a29a:	bf00      	nop
 800a29c:	20000af4 	.word	0x20000af4
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	607b      	str	r3, [r7, #4]
 800a2ae:	e00c      	b.n	800a2ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4a12      	ldr	r2, [pc, #72]	; (800a304 <prvInitialiseTaskLists+0x60>)
 800a2bc:	4413      	add	r3, r2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fc58 	bl	8008b74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	607b      	str	r3, [r7, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b37      	cmp	r3, #55	; 0x37
 800a2ce:	d9ef      	bls.n	800a2b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2d0:	480d      	ldr	r0, [pc, #52]	; (800a308 <prvInitialiseTaskLists+0x64>)
 800a2d2:	f7fe fc4f 	bl	8008b74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2d6:	480d      	ldr	r0, [pc, #52]	; (800a30c <prvInitialiseTaskLists+0x68>)
 800a2d8:	f7fe fc4c 	bl	8008b74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2dc:	480c      	ldr	r0, [pc, #48]	; (800a310 <prvInitialiseTaskLists+0x6c>)
 800a2de:	f7fe fc49 	bl	8008b74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2e2:	480c      	ldr	r0, [pc, #48]	; (800a314 <prvInitialiseTaskLists+0x70>)
 800a2e4:	f7fe fc46 	bl	8008b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2e8:	480b      	ldr	r0, [pc, #44]	; (800a318 <prvInitialiseTaskLists+0x74>)
 800a2ea:	f7fe fc43 	bl	8008b74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2ee:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <prvInitialiseTaskLists+0x78>)
 800a2f0:	4a05      	ldr	r2, [pc, #20]	; (800a308 <prvInitialiseTaskLists+0x64>)
 800a2f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <prvInitialiseTaskLists+0x7c>)
 800a2f6:	4a05      	ldr	r2, [pc, #20]	; (800a30c <prvInitialiseTaskLists+0x68>)
 800a2f8:	601a      	str	r2, [r3, #0]
}
 800a2fa:	bf00      	nop
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000af4 	.word	0x20000af4
 800a308:	20000f54 	.word	0x20000f54
 800a30c:	20000f68 	.word	0x20000f68
 800a310:	20000f84 	.word	0x20000f84
 800a314:	20000f98 	.word	0x20000f98
 800a318:	20000fb0 	.word	0x20000fb0
 800a31c:	20000f7c 	.word	0x20000f7c
 800a320:	20000f80 	.word	0x20000f80

0800a324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a32a:	e019      	b.n	800a360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a32c:	f000 fdda 	bl	800aee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a330:	4b10      	ldr	r3, [pc, #64]	; (800a374 <prvCheckTasksWaitingTermination+0x50>)
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe fca3 	bl	8008c88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a342:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <prvCheckTasksWaitingTermination+0x54>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3b01      	subs	r3, #1
 800a348:	4a0b      	ldr	r2, [pc, #44]	; (800a378 <prvCheckTasksWaitingTermination+0x54>)
 800a34a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a34c:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <prvCheckTasksWaitingTermination+0x58>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3b01      	subs	r3, #1
 800a352:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <prvCheckTasksWaitingTermination+0x58>)
 800a354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a356:	f000 fdf5 	bl	800af44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f810 	bl	800a380 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a360:	4b06      	ldr	r3, [pc, #24]	; (800a37c <prvCheckTasksWaitingTermination+0x58>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e1      	bne.n	800a32c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000f98 	.word	0x20000f98
 800a378:	20000fc4 	.word	0x20000fc4
 800a37c:	20000fac 	.word	0x20000fac

0800a380 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3354      	adds	r3, #84	; 0x54
 800a38c:	4618      	mov	r0, r3
 800a38e:	f002 f83d 	bl	800c40c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d108      	bne.n	800a3ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 ff8d 	bl	800b2c0 <vPortFree>
				vPortFree( pxTCB );
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 ff8a 	bl	800b2c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3ac:	e018      	b.n	800a3e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d103      	bne.n	800a3c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 ff81 	bl	800b2c0 <vPortFree>
	}
 800a3be:	e00f      	b.n	800a3e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d00a      	beq.n	800a3e0 <prvDeleteTCB+0x60>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	60fb      	str	r3, [r7, #12]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <prvDeleteTCB+0x5e>
	}
 800a3e0:	bf00      	nop
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <prvResetNextTaskUnblockTime+0x38>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d104      	bne.n	800a402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3f8:	4b0a      	ldr	r3, [pc, #40]	; (800a424 <prvResetNextTaskUnblockTime+0x3c>)
 800a3fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a400:	e008      	b.n	800a414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a402:	4b07      	ldr	r3, [pc, #28]	; (800a420 <prvResetNextTaskUnblockTime+0x38>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4a04      	ldr	r2, [pc, #16]	; (800a424 <prvResetNextTaskUnblockTime+0x3c>)
 800a412:	6013      	str	r3, [r2, #0]
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20000f7c 	.word	0x20000f7c
 800a424:	20000fe4 	.word	0x20000fe4

0800a428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a42e:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <xTaskGetSchedulerState+0x34>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a436:	2301      	movs	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
 800a43a:	e008      	b.n	800a44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a43c:	4b08      	ldr	r3, [pc, #32]	; (800a460 <xTaskGetSchedulerState+0x38>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a444:	2302      	movs	r3, #2
 800a446:	607b      	str	r3, [r7, #4]
 800a448:	e001      	b.n	800a44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a44e:	687b      	ldr	r3, [r7, #4]
	}
 800a450:	4618      	mov	r0, r3
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20000fd0 	.word	0x20000fd0
 800a460:	20000fec 	.word	0x20000fec

0800a464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d056      	beq.n	800a528 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a47a:	4b2e      	ldr	r3, [pc, #184]	; (800a534 <xTaskPriorityDisinherit+0xd0>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	429a      	cmp	r2, r3
 800a482:	d00a      	beq.n	800a49a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	60fb      	str	r3, [r7, #12]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	60bb      	str	r3, [r7, #8]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4bc:	1e5a      	subs	r2, r3, #1
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d02c      	beq.n	800a528 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d128      	bne.n	800a528 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fbd4 	bl	8008c88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f8:	4b0f      	ldr	r3, [pc, #60]	; (800a538 <xTaskPriorityDisinherit+0xd4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d903      	bls.n	800a508 <xTaskPriorityDisinherit+0xa4>
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	4a0c      	ldr	r2, [pc, #48]	; (800a538 <xTaskPriorityDisinherit+0xd4>)
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	4613      	mov	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4a09      	ldr	r2, [pc, #36]	; (800a53c <xTaskPriorityDisinherit+0xd8>)
 800a516:	441a      	add	r2, r3
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4619      	mov	r1, r3
 800a51e:	4610      	mov	r0, r2
 800a520:	f7fe fb55 	bl	8008bce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a528:	697b      	ldr	r3, [r7, #20]
	}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000af0 	.word	0x20000af0
 800a538:	20000fcc 	.word	0x20000fcc
 800a53c:	20000af4 	.word	0x20000af4

0800a540 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a54a:	4b21      	ldr	r3, [pc, #132]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a550:	4b20      	ldr	r3, [pc, #128]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3304      	adds	r3, #4
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fb96 	bl	8008c88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a562:	d10a      	bne.n	800a57a <prvAddCurrentTaskToDelayedList+0x3a>
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d007      	beq.n	800a57a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a56a:	4b1a      	ldr	r3, [pc, #104]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4819      	ldr	r0, [pc, #100]	; (800a5d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a574:	f7fe fb2b 	bl	8008bce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a578:	e026      	b.n	800a5c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4413      	add	r3, r2
 800a580:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a582:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d209      	bcs.n	800a5a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a592:	4b12      	ldr	r3, [pc, #72]	; (800a5dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4619      	mov	r1, r3
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fe fb39 	bl	8008c16 <vListInsert>
}
 800a5a4:	e010      	b.n	800a5c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5a6:	4b0e      	ldr	r3, [pc, #56]	; (800a5e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fe fb2f 	bl	8008c16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d202      	bcs.n	800a5c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5c2:	4a08      	ldr	r2, [pc, #32]	; (800a5e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	6013      	str	r3, [r2, #0]
}
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000fc8 	.word	0x20000fc8
 800a5d4:	20000af0 	.word	0x20000af0
 800a5d8:	20000fb0 	.word	0x20000fb0
 800a5dc:	20000f80 	.word	0x20000f80
 800a5e0:	20000f7c 	.word	0x20000f7c
 800a5e4:	20000fe4 	.word	0x20000fe4

0800a5e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08a      	sub	sp, #40	; 0x28
 800a5ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5f2:	f000 fb07 	bl	800ac04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5f6:	4b1c      	ldr	r3, [pc, #112]	; (800a668 <xTimerCreateTimerTask+0x80>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d021      	beq.n	800a642 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a606:	1d3a      	adds	r2, r7, #4
 800a608:	f107 0108 	add.w	r1, r7, #8
 800a60c:	f107 030c 	add.w	r3, r7, #12
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fa95 	bl	8008b40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	9202      	str	r2, [sp, #8]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	2302      	movs	r3, #2
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	2300      	movs	r3, #0
 800a626:	460a      	mov	r2, r1
 800a628:	4910      	ldr	r1, [pc, #64]	; (800a66c <xTimerCreateTimerTask+0x84>)
 800a62a:	4811      	ldr	r0, [pc, #68]	; (800a670 <xTimerCreateTimerTask+0x88>)
 800a62c:	f7ff f842 	bl	80096b4 <xTaskCreateStatic>
 800a630:	4603      	mov	r3, r0
 800a632:	4a10      	ldr	r2, [pc, #64]	; (800a674 <xTimerCreateTimerTask+0x8c>)
 800a634:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a636:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <xTimerCreateTimerTask+0x8c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a63e:	2301      	movs	r3, #1
 800a640:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	613b      	str	r3, [r7, #16]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a65e:	697b      	ldr	r3, [r7, #20]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20001020 	.word	0x20001020
 800a66c:	0800c68c 	.word	0x0800c68c
 800a670:	0800a7ad 	.word	0x0800a7ad
 800a674:	20001024 	.word	0x20001024

0800a678 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08a      	sub	sp, #40	; 0x28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a686:	2300      	movs	r3, #0
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	623b      	str	r3, [r7, #32]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6a6:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <xTimerGenericCommand+0x98>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d02a      	beq.n	800a704 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b05      	cmp	r3, #5
 800a6be:	dc18      	bgt.n	800a6f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6c0:	f7ff feb2 	bl	800a428 <xTaskGetSchedulerState>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d109      	bne.n	800a6de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6ca:	4b11      	ldr	r3, [pc, #68]	; (800a710 <xTimerGenericCommand+0x98>)
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	f107 0110 	add.w	r1, r7, #16
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	f7fe fc05 	bl	8008ee4 <xQueueGenericSend>
 800a6da:	6278      	str	r0, [r7, #36]	; 0x24
 800a6dc:	e012      	b.n	800a704 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6de:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <xTimerGenericCommand+0x98>)
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	f107 0110 	add.w	r1, r7, #16
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f7fe fbfb 	bl	8008ee4 <xQueueGenericSend>
 800a6ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f0:	e008      	b.n	800a704 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6f2:	4b07      	ldr	r3, [pc, #28]	; (800a710 <xTimerGenericCommand+0x98>)
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f107 0110 	add.w	r1, r7, #16
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	f7fe fcef 	bl	80090e0 <xQueueGenericSendFromISR>
 800a702:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a706:	4618      	mov	r0, r3
 800a708:	3728      	adds	r7, #40	; 0x28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20001020 	.word	0x20001020

0800a714 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af02      	add	r7, sp, #8
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a71e:	4b22      	ldr	r3, [pc, #136]	; (800a7a8 <prvProcessExpiredTimer+0x94>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7fe faab 	bl	8008c88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d022      	beq.n	800a786 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	699a      	ldr	r2, [r3, #24]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	18d1      	adds	r1, r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	6978      	ldr	r0, [r7, #20]
 800a74e:	f000 f8d1 	bl	800a8f4 <prvInsertTimerInActiveList>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d01f      	beq.n	800a798 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a758:	2300      	movs	r3, #0
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	2300      	movs	r3, #0
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	2100      	movs	r1, #0
 800a762:	6978      	ldr	r0, [r7, #20]
 800a764:	f7ff ff88 	bl	800a678 <xTimerGenericCommand>
 800a768:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d113      	bne.n	800a798 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	60fb      	str	r3, [r7, #12]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a78c:	f023 0301 	bic.w	r3, r3, #1
 800a790:	b2da      	uxtb	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	6978      	ldr	r0, [r7, #20]
 800a79e:	4798      	blx	r3
}
 800a7a0:	bf00      	nop
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20001018 	.word	0x20001018

0800a7ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7b4:	f107 0308 	add.w	r3, r7, #8
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f857 	bl	800a86c <prvGetNextExpireTime>
 800a7be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f803 	bl	800a7d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7ca:	f000 f8d5 	bl	800a978 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7ce:	e7f1      	b.n	800a7b4 <prvTimerTask+0x8>

0800a7d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7da:	f7ff fa39 	bl	8009c50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f000 f866 	bl	800a8b4 <prvSampleTimeNow>
 800a7e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d130      	bne.n	800a852 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10a      	bne.n	800a80c <prvProcessTimerOrBlockTask+0x3c>
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d806      	bhi.n	800a80c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7fe:	f7ff fa35 	bl	8009c6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff ff85 	bl	800a714 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a80a:	e024      	b.n	800a856 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d008      	beq.n	800a824 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a812:	4b13      	ldr	r3, [pc, #76]	; (800a860 <prvProcessTimerOrBlockTask+0x90>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d101      	bne.n	800a820 <prvProcessTimerOrBlockTask+0x50>
 800a81c:	2301      	movs	r3, #1
 800a81e:	e000      	b.n	800a822 <prvProcessTimerOrBlockTask+0x52>
 800a820:	2300      	movs	r3, #0
 800a822:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <prvProcessTimerOrBlockTask+0x94>)
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	4619      	mov	r1, r3
 800a832:	f7fe ff0b 	bl	800964c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a836:	f7ff fa19 	bl	8009c6c <xTaskResumeAll>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10a      	bne.n	800a856 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a840:	4b09      	ldr	r3, [pc, #36]	; (800a868 <prvProcessTimerOrBlockTask+0x98>)
 800a842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a846:	601a      	str	r2, [r3, #0]
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	f3bf 8f6f 	isb	sy
}
 800a850:	e001      	b.n	800a856 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a852:	f7ff fa0b 	bl	8009c6c <xTaskResumeAll>
}
 800a856:	bf00      	nop
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	2000101c 	.word	0x2000101c
 800a864:	20001020 	.word	0x20001020
 800a868:	e000ed04 	.word	0xe000ed04

0800a86c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a874:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <prvGetNextExpireTime+0x44>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <prvGetNextExpireTime+0x16>
 800a87e:	2201      	movs	r2, #1
 800a880:	e000      	b.n	800a884 <prvGetNextExpireTime+0x18>
 800a882:	2200      	movs	r2, #0
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d105      	bne.n	800a89c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <prvGetNextExpireTime+0x44>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]
 800a89a:	e001      	b.n	800a8a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	20001018 	.word	0x20001018

0800a8b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8bc:	f7ff fa74 	bl	8009da8 <xTaskGetTickCount>
 800a8c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8c2:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <prvSampleTimeNow+0x3c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d205      	bcs.n	800a8d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8cc:	f000 f936 	bl	800ab3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	e002      	b.n	800a8de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8de:	4a04      	ldr	r2, [pc, #16]	; (800a8f0 <prvSampleTimeNow+0x3c>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20001028 	.word	0x20001028

0800a8f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a902:	2300      	movs	r3, #0
 800a904:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	429a      	cmp	r2, r3
 800a918:	d812      	bhi.n	800a940 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	429a      	cmp	r2, r3
 800a926:	d302      	bcc.n	800a92e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a928:	2301      	movs	r3, #1
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	e01b      	b.n	800a966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a92e:	4b10      	ldr	r3, [pc, #64]	; (800a970 <prvInsertTimerInActiveList+0x7c>)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	3304      	adds	r3, #4
 800a936:	4619      	mov	r1, r3
 800a938:	4610      	mov	r0, r2
 800a93a:	f7fe f96c 	bl	8008c16 <vListInsert>
 800a93e:	e012      	b.n	800a966 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d206      	bcs.n	800a956 <prvInsertTimerInActiveList+0x62>
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d302      	bcc.n	800a956 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a950:	2301      	movs	r3, #1
 800a952:	617b      	str	r3, [r7, #20]
 800a954:	e007      	b.n	800a966 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a956:	4b07      	ldr	r3, [pc, #28]	; (800a974 <prvInsertTimerInActiveList+0x80>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3304      	adds	r3, #4
 800a95e:	4619      	mov	r1, r3
 800a960:	4610      	mov	r0, r2
 800a962:	f7fe f958 	bl	8008c16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a966:	697b      	ldr	r3, [r7, #20]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	2000101c 	.word	0x2000101c
 800a974:	20001018 	.word	0x20001018

0800a978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08e      	sub	sp, #56	; 0x38
 800a97c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a97e:	e0ca      	b.n	800ab16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	da18      	bge.n	800a9b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a986:	1d3b      	adds	r3, r7, #4
 800a988:	3304      	adds	r3, #4
 800a98a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10a      	bne.n	800a9a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	61fb      	str	r3, [r7, #28]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ae:	6850      	ldr	r0, [r2, #4]
 800a9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9b2:	6892      	ldr	r2, [r2, #8]
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f2c0 80ab 	blt.w	800ab16 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d004      	beq.n	800a9d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7fe f959 	bl	8008c88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9d6:	463b      	mov	r3, r7
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff ff6b 	bl	800a8b4 <prvSampleTimeNow>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b09      	cmp	r3, #9
 800a9e4:	f200 8096 	bhi.w	800ab14 <prvProcessReceivedCommands+0x19c>
 800a9e8:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <prvProcessReceivedCommands+0x78>)
 800a9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ee:	bf00      	nop
 800a9f0:	0800aa19 	.word	0x0800aa19
 800a9f4:	0800aa19 	.word	0x0800aa19
 800a9f8:	0800aa19 	.word	0x0800aa19
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aaa1 	.word	0x0800aaa1
 800aa04:	0800aaeb 	.word	0x0800aaeb
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa19 	.word	0x0800aa19
 800aa10:	0800aa8d 	.word	0x0800aa8d
 800aa14:	0800aaa1 	.word	0x0800aaa1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa1e:	f043 0301 	orr.w	r3, r3, #1
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	18d1      	adds	r1, r2, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa38:	f7ff ff5c 	bl	800a8f4 <prvInsertTimerInActiveList>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d069      	beq.n	800ab16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa50:	f003 0304 	and.w	r3, r3, #4
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d05e      	beq.n	800ab16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	441a      	add	r2, r3
 800aa60:	2300      	movs	r3, #0
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	2300      	movs	r3, #0
 800aa66:	2100      	movs	r1, #0
 800aa68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa6a:	f7ff fe05 	bl	800a678 <xTimerGenericCommand>
 800aa6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d14f      	bne.n	800ab16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	61bb      	str	r3, [r7, #24]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa92:	f023 0301 	bic.w	r3, r3, #1
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa9e:	e03a      	b.n	800ab16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10a      	bne.n	800aad6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	617b      	str	r3, [r7, #20]
}
 800aad2:	bf00      	nop
 800aad4:	e7fe      	b.n	800aad4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	699a      	ldr	r2, [r3, #24]
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	18d1      	adds	r1, r2, r3
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae4:	f7ff ff06 	bl	800a8f4 <prvInsertTimerInActiveList>
					break;
 800aae8:	e015      	b.n	800ab16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d103      	bne.n	800ab00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aaf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aafa:	f000 fbe1 	bl	800b2c0 <vPortFree>
 800aafe:	e00a      	b.n	800ab16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab06:	f023 0301 	bic.w	r3, r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab12:	e000      	b.n	800ab16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ab14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab16:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <prvProcessReceivedCommands+0x1c0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	1d39      	adds	r1, r7, #4
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fb7a 	bl	8009218 <xQueueReceive>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f47f af2a 	bne.w	800a980 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	3730      	adds	r7, #48	; 0x30
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20001020 	.word	0x20001020

0800ab3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab42:	e048      	b.n	800abd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab44:	4b2d      	ldr	r3, [pc, #180]	; (800abfc <prvSwitchTimerLists+0xc0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab4e:	4b2b      	ldr	r3, [pc, #172]	; (800abfc <prvSwitchTimerLists+0xc0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe f893 	bl	8008c88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d02e      	beq.n	800abd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	4413      	add	r3, r2
 800ab80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d90e      	bls.n	800aba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab96:	4b19      	ldr	r3, [pc, #100]	; (800abfc <prvSwitchTimerLists+0xc0>)
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	4619      	mov	r1, r3
 800aba0:	4610      	mov	r0, r2
 800aba2:	f7fe f838 	bl	8008c16 <vListInsert>
 800aba6:	e016      	b.n	800abd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aba8:	2300      	movs	r3, #0
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	2300      	movs	r3, #0
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	2100      	movs	r1, #0
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f7ff fd60 	bl	800a678 <xTimerGenericCommand>
 800abb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	603b      	str	r3, [r7, #0]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abd6:	4b09      	ldr	r3, [pc, #36]	; (800abfc <prvSwitchTimerLists+0xc0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1b1      	bne.n	800ab44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abe0:	4b06      	ldr	r3, [pc, #24]	; (800abfc <prvSwitchTimerLists+0xc0>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abe6:	4b06      	ldr	r3, [pc, #24]	; (800ac00 <prvSwitchTimerLists+0xc4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a04      	ldr	r2, [pc, #16]	; (800abfc <prvSwitchTimerLists+0xc0>)
 800abec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abee:	4a04      	ldr	r2, [pc, #16]	; (800ac00 <prvSwitchTimerLists+0xc4>)
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	6013      	str	r3, [r2, #0]
}
 800abf4:	bf00      	nop
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20001018 	.word	0x20001018
 800ac00:	2000101c 	.word	0x2000101c

0800ac04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac0a:	f000 f96b 	bl	800aee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac0e:	4b15      	ldr	r3, [pc, #84]	; (800ac64 <prvCheckForValidListAndQueue+0x60>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d120      	bne.n	800ac58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac16:	4814      	ldr	r0, [pc, #80]	; (800ac68 <prvCheckForValidListAndQueue+0x64>)
 800ac18:	f7fd ffac 	bl	8008b74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac1c:	4813      	ldr	r0, [pc, #76]	; (800ac6c <prvCheckForValidListAndQueue+0x68>)
 800ac1e:	f7fd ffa9 	bl	8008b74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <prvCheckForValidListAndQueue+0x6c>)
 800ac24:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <prvCheckForValidListAndQueue+0x64>)
 800ac26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac28:	4b12      	ldr	r3, [pc, #72]	; (800ac74 <prvCheckForValidListAndQueue+0x70>)
 800ac2a:	4a10      	ldr	r2, [pc, #64]	; (800ac6c <prvCheckForValidListAndQueue+0x68>)
 800ac2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	4b11      	ldr	r3, [pc, #68]	; (800ac78 <prvCheckForValidListAndQueue+0x74>)
 800ac34:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <prvCheckForValidListAndQueue+0x78>)
 800ac36:	2110      	movs	r1, #16
 800ac38:	200a      	movs	r0, #10
 800ac3a:	f7fe f8b7 	bl	8008dac <xQueueGenericCreateStatic>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	4a08      	ldr	r2, [pc, #32]	; (800ac64 <prvCheckForValidListAndQueue+0x60>)
 800ac42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac44:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <prvCheckForValidListAndQueue+0x60>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d005      	beq.n	800ac58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <prvCheckForValidListAndQueue+0x60>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	490b      	ldr	r1, [pc, #44]	; (800ac80 <prvCheckForValidListAndQueue+0x7c>)
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe fcd0 	bl	80095f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac58:	f000 f974 	bl	800af44 <vPortExitCritical>
}
 800ac5c:	bf00      	nop
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20001020 	.word	0x20001020
 800ac68:	20000ff0 	.word	0x20000ff0
 800ac6c:	20001004 	.word	0x20001004
 800ac70:	20001018 	.word	0x20001018
 800ac74:	2000101c 	.word	0x2000101c
 800ac78:	200010cc 	.word	0x200010cc
 800ac7c:	2000102c 	.word	0x2000102c
 800ac80:	0800c694 	.word	0x0800c694

0800ac84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3b04      	subs	r3, #4
 800ac94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	3b04      	subs	r3, #4
 800aca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f023 0201 	bic.w	r2, r3, #1
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3b04      	subs	r3, #4
 800acb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acb4:	4a0c      	ldr	r2, [pc, #48]	; (800ace8 <pxPortInitialiseStack+0x64>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3b14      	subs	r3, #20
 800acbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3b04      	subs	r3, #4
 800acca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f06f 0202 	mvn.w	r2, #2
 800acd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3b20      	subs	r3, #32
 800acd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acda:	68fb      	ldr	r3, [r7, #12]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	0800aced 	.word	0x0800aced

0800acec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acf6:	4b12      	ldr	r3, [pc, #72]	; (800ad40 <prvTaskExitError+0x54>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acfe:	d00a      	beq.n	800ad16 <prvTaskExitError+0x2a>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <prvTaskExitError+0x28>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60bb      	str	r3, [r7, #8]
}
 800ad28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad2a:	bf00      	nop
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0fc      	beq.n	800ad2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	2000000c 	.word	0x2000000c
	...

0800ad50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad50:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <pxCurrentTCBConst2>)
 800ad52:	6819      	ldr	r1, [r3, #0]
 800ad54:	6808      	ldr	r0, [r1, #0]
 800ad56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5a:	f380 8809 	msr	PSP, r0
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f04f 0000 	mov.w	r0, #0
 800ad66:	f380 8811 	msr	BASEPRI, r0
 800ad6a:	4770      	bx	lr
 800ad6c:	f3af 8000 	nop.w

0800ad70 <pxCurrentTCBConst2>:
 800ad70:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop

0800ad78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad78:	4808      	ldr	r0, [pc, #32]	; (800ad9c <prvPortStartFirstTask+0x24>)
 800ad7a:	6800      	ldr	r0, [r0, #0]
 800ad7c:	6800      	ldr	r0, [r0, #0]
 800ad7e:	f380 8808 	msr	MSP, r0
 800ad82:	f04f 0000 	mov.w	r0, #0
 800ad86:	f380 8814 	msr	CONTROL, r0
 800ad8a:	b662      	cpsie	i
 800ad8c:	b661      	cpsie	f
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	df00      	svc	0
 800ad98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad9a:	bf00      	nop
 800ad9c:	e000ed08 	.word	0xe000ed08

0800ada0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ada6:	4b46      	ldr	r3, [pc, #280]	; (800aec0 <xPortStartScheduler+0x120>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a46      	ldr	r2, [pc, #280]	; (800aec4 <xPortStartScheduler+0x124>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d10a      	bne.n	800adc6 <xPortStartScheduler+0x26>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	613b      	str	r3, [r7, #16]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800adc6:	4b3e      	ldr	r3, [pc, #248]	; (800aec0 <xPortStartScheduler+0x120>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a3f      	ldr	r2, [pc, #252]	; (800aec8 <xPortStartScheduler+0x128>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d10a      	bne.n	800ade6 <xPortStartScheduler+0x46>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	60fb      	str	r3, [r7, #12]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ade6:	4b39      	ldr	r3, [pc, #228]	; (800aecc <xPortStartScheduler+0x12c>)
 800ade8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	22ff      	movs	r2, #255	; 0xff
 800adf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae00:	78fb      	ldrb	r3, [r7, #3]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	4b31      	ldr	r3, [pc, #196]	; (800aed0 <xPortStartScheduler+0x130>)
 800ae0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae0e:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae10:	2207      	movs	r2, #7
 800ae12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae14:	e009      	b.n	800ae2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae16:	4b2f      	ldr	r3, [pc, #188]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4a2d      	ldr	r2, [pc, #180]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	005b      	lsls	r3, r3, #1
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae2a:	78fb      	ldrb	r3, [r7, #3]
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae32:	2b80      	cmp	r3, #128	; 0x80
 800ae34:	d0ef      	beq.n	800ae16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae36:	4b27      	ldr	r3, [pc, #156]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f1c3 0307 	rsb	r3, r3, #7
 800ae3e:	2b04      	cmp	r3, #4
 800ae40:	d00a      	beq.n	800ae58 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	60bb      	str	r3, [r7, #8]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae58:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	4a1d      	ldr	r2, [pc, #116]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae62:	4b1c      	ldr	r3, [pc, #112]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae6a:	4a1a      	ldr	r2, [pc, #104]	; (800aed4 <xPortStartScheduler+0x134>)
 800ae6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae76:	4b18      	ldr	r3, [pc, #96]	; (800aed8 <xPortStartScheduler+0x138>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <xPortStartScheduler+0x138>)
 800ae7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <xPortStartScheduler+0x138>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a14      	ldr	r2, [pc, #80]	; (800aed8 <xPortStartScheduler+0x138>)
 800ae88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae8e:	f000 f8dd 	bl	800b04c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae92:	4b12      	ldr	r3, [pc, #72]	; (800aedc <xPortStartScheduler+0x13c>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae98:	f000 f8fc 	bl	800b094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <xPortStartScheduler+0x140>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0f      	ldr	r2, [pc, #60]	; (800aee0 <xPortStartScheduler+0x140>)
 800aea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aea8:	f7ff ff66 	bl	800ad78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aeac:	f7ff f846 	bl	8009f3c <vTaskSwitchContext>
	prvTaskExitError();
 800aeb0:	f7ff ff1c 	bl	800acec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	e000ed00 	.word	0xe000ed00
 800aec4:	410fc271 	.word	0x410fc271
 800aec8:	410fc270 	.word	0x410fc270
 800aecc:	e000e400 	.word	0xe000e400
 800aed0:	2000111c 	.word	0x2000111c
 800aed4:	20001120 	.word	0x20001120
 800aed8:	e000ed20 	.word	0xe000ed20
 800aedc:	2000000c 	.word	0x2000000c
 800aee0:	e000ef34 	.word	0xe000ef34

0800aee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	607b      	str	r3, [r7, #4]
}
 800aefc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aefe:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <vPortEnterCritical+0x58>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	4a0d      	ldr	r2, [pc, #52]	; (800af3c <vPortEnterCritical+0x58>)
 800af06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af08:	4b0c      	ldr	r3, [pc, #48]	; (800af3c <vPortEnterCritical+0x58>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d10f      	bne.n	800af30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af10:	4b0b      	ldr	r3, [pc, #44]	; (800af40 <vPortEnterCritical+0x5c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00a      	beq.n	800af30 <vPortEnterCritical+0x4c>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	603b      	str	r3, [r7, #0]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <vPortEnterCritical+0x4a>
	}
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	2000000c 	.word	0x2000000c
 800af40:	e000ed04 	.word	0xe000ed04

0800af44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af4a:	4b12      	ldr	r3, [pc, #72]	; (800af94 <vPortExitCritical+0x50>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <vPortExitCritical+0x24>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	607b      	str	r3, [r7, #4]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af68:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <vPortExitCritical+0x50>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	4a09      	ldr	r2, [pc, #36]	; (800af94 <vPortExitCritical+0x50>)
 800af70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af72:	4b08      	ldr	r3, [pc, #32]	; (800af94 <vPortExitCritical+0x50>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d105      	bne.n	800af86 <vPortExitCritical+0x42>
 800af7a:	2300      	movs	r3, #0
 800af7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	f383 8811 	msr	BASEPRI, r3
}
 800af84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af86:	bf00      	nop
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	2000000c 	.word	0x2000000c
	...

0800afa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afa0:	f3ef 8009 	mrs	r0, PSP
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	4b15      	ldr	r3, [pc, #84]	; (800b000 <pxCurrentTCBConst>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	f01e 0f10 	tst.w	lr, #16
 800afb0:	bf08      	it	eq
 800afb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afba:	6010      	str	r0, [r2, #0]
 800afbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afc4:	f380 8811 	msr	BASEPRI, r0
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f7fe ffb4 	bl	8009f3c <vTaskSwitchContext>
 800afd4:	f04f 0000 	mov.w	r0, #0
 800afd8:	f380 8811 	msr	BASEPRI, r0
 800afdc:	bc09      	pop	{r0, r3}
 800afde:	6819      	ldr	r1, [r3, #0]
 800afe0:	6808      	ldr	r0, [r1, #0]
 800afe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe6:	f01e 0f10 	tst.w	lr, #16
 800afea:	bf08      	it	eq
 800afec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aff0:	f380 8809 	msr	PSP, r0
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	f3af 8000 	nop.w

0800b000 <pxCurrentTCBConst>:
 800b000:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop

0800b008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	607b      	str	r3, [r7, #4]
}
 800b020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b022:	f7fe fed1 	bl	8009dc8 <xTaskIncrementTick>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b02c:	4b06      	ldr	r3, [pc, #24]	; (800b048 <xPortSysTickHandler+0x40>)
 800b02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	2300      	movs	r3, #0
 800b036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	f383 8811 	msr	BASEPRI, r3
}
 800b03e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	e000ed04 	.word	0xe000ed04

0800b04c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b050:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <vPortSetupTimerInterrupt+0x34>)
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b056:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <vPortSetupTimerInterrupt+0x38>)
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b05c:	4b0a      	ldr	r3, [pc, #40]	; (800b088 <vPortSetupTimerInterrupt+0x3c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <vPortSetupTimerInterrupt+0x40>)
 800b062:	fba2 2303 	umull	r2, r3, r2, r3
 800b066:	099b      	lsrs	r3, r3, #6
 800b068:	4a09      	ldr	r2, [pc, #36]	; (800b090 <vPortSetupTimerInterrupt+0x44>)
 800b06a:	3b01      	subs	r3, #1
 800b06c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b06e:	4b04      	ldr	r3, [pc, #16]	; (800b080 <vPortSetupTimerInterrupt+0x34>)
 800b070:	2207      	movs	r2, #7
 800b072:	601a      	str	r2, [r3, #0]
}
 800b074:	bf00      	nop
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	e000e010 	.word	0xe000e010
 800b084:	e000e018 	.word	0xe000e018
 800b088:	20000000 	.word	0x20000000
 800b08c:	10624dd3 	.word	0x10624dd3
 800b090:	e000e014 	.word	0xe000e014

0800b094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0a4 <vPortEnableVFP+0x10>
 800b098:	6801      	ldr	r1, [r0, #0]
 800b09a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b09e:	6001      	str	r1, [r0, #0]
 800b0a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0a2:	bf00      	nop
 800b0a4:	e000ed88 	.word	0xe000ed88

0800b0a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0ae:	f3ef 8305 	mrs	r3, IPSR
 800b0b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2b0f      	cmp	r3, #15
 800b0b8:	d914      	bls.n	800b0e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <vPortValidateInterruptPriority+0x70>)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0c4:	4b15      	ldr	r3, [pc, #84]	; (800b11c <vPortValidateInterruptPriority+0x74>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	7afa      	ldrb	r2, [r7, #11]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d20a      	bcs.n	800b0e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	607b      	str	r3, [r7, #4]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	; (800b120 <vPortValidateInterruptPriority+0x78>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0ec:	4b0d      	ldr	r3, [pc, #52]	; (800b124 <vPortValidateInterruptPriority+0x7c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d90a      	bls.n	800b10a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	603b      	str	r3, [r7, #0]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <vPortValidateInterruptPriority+0x60>
	}
 800b10a:	bf00      	nop
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	e000e3f0 	.word	0xe000e3f0
 800b11c:	2000111c 	.word	0x2000111c
 800b120:	e000ed0c 	.word	0xe000ed0c
 800b124:	20001120 	.word	0x20001120

0800b128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	; 0x28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b130:	2300      	movs	r3, #0
 800b132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b134:	f7fe fd8c 	bl	8009c50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b138:	4b5b      	ldr	r3, [pc, #364]	; (800b2a8 <pvPortMalloc+0x180>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b140:	f000 f920 	bl	800b384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b144:	4b59      	ldr	r3, [pc, #356]	; (800b2ac <pvPortMalloc+0x184>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4013      	ands	r3, r2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f040 8093 	bne.w	800b278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01d      	beq.n	800b194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b158:	2208      	movs	r2, #8
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f003 0307 	and.w	r3, r3, #7
 800b166:	2b00      	cmp	r3, #0
 800b168:	d014      	beq.n	800b194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f023 0307 	bic.w	r3, r3, #7
 800b170:	3308      	adds	r3, #8
 800b172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <pvPortMalloc+0x6c>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	617b      	str	r3, [r7, #20]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d06e      	beq.n	800b278 <pvPortMalloc+0x150>
 800b19a:	4b45      	ldr	r3, [pc, #276]	; (800b2b0 <pvPortMalloc+0x188>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d869      	bhi.n	800b278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1a4:	4b43      	ldr	r3, [pc, #268]	; (800b2b4 <pvPortMalloc+0x18c>)
 800b1a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1a8:	4b42      	ldr	r3, [pc, #264]	; (800b2b4 <pvPortMalloc+0x18c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ae:	e004      	b.n	800b1ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d903      	bls.n	800b1cc <pvPortMalloc+0xa4>
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1f1      	bne.n	800b1b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1cc:	4b36      	ldr	r3, [pc, #216]	; (800b2a8 <pvPortMalloc+0x180>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d050      	beq.n	800b278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2208      	movs	r2, #8
 800b1dc:	4413      	add	r3, r2
 800b1de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	2308      	movs	r3, #8
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d91f      	bls.n	800b238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00a      	beq.n	800b220 <pvPortMalloc+0xf8>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	613b      	str	r3, [r7, #16]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	1ad2      	subs	r2, r2, r3
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b232:	69b8      	ldr	r0, [r7, #24]
 800b234:	f000 f908 	bl	800b448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b238:	4b1d      	ldr	r3, [pc, #116]	; (800b2b0 <pvPortMalloc+0x188>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	4a1b      	ldr	r2, [pc, #108]	; (800b2b0 <pvPortMalloc+0x188>)
 800b244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b246:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <pvPortMalloc+0x188>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <pvPortMalloc+0x190>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d203      	bcs.n	800b25a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b252:	4b17      	ldr	r3, [pc, #92]	; (800b2b0 <pvPortMalloc+0x188>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a18      	ldr	r2, [pc, #96]	; (800b2b8 <pvPortMalloc+0x190>)
 800b258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	4b13      	ldr	r3, [pc, #76]	; (800b2ac <pvPortMalloc+0x184>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	431a      	orrs	r2, r3
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <pvPortMalloc+0x194>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	4a11      	ldr	r2, [pc, #68]	; (800b2bc <pvPortMalloc+0x194>)
 800b276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b278:	f7fe fcf8 	bl	8009c6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <pvPortMalloc+0x174>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	60fb      	str	r3, [r7, #12]
}
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <pvPortMalloc+0x172>
	return pvReturn;
 800b29c:	69fb      	ldr	r3, [r7, #28]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3728      	adds	r7, #40	; 0x28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	2001012c 	.word	0x2001012c
 800b2ac:	20010140 	.word	0x20010140
 800b2b0:	20010130 	.word	0x20010130
 800b2b4:	20010124 	.word	0x20010124
 800b2b8:	20010134 	.word	0x20010134
 800b2bc:	20010138 	.word	0x20010138

0800b2c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d04d      	beq.n	800b36e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2d2:	2308      	movs	r3, #8
 800b2d4:	425b      	negs	r3, r3
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	4413      	add	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	4b24      	ldr	r3, [pc, #144]	; (800b378 <vPortFree+0xb8>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10a      	bne.n	800b304 <vPortFree+0x44>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	60fb      	str	r3, [r7, #12]
}
 800b300:	bf00      	nop
 800b302:	e7fe      	b.n	800b302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <vPortFree+0x62>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	60bb      	str	r3, [r7, #8]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <vPortFree+0xb8>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4013      	ands	r3, r2
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d01e      	beq.n	800b36e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d11a      	bne.n	800b36e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <vPortFree+0xb8>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	43db      	mvns	r3, r3
 800b342:	401a      	ands	r2, r3
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b348:	f7fe fc82 	bl	8009c50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	4b0a      	ldr	r3, [pc, #40]	; (800b37c <vPortFree+0xbc>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4413      	add	r3, r2
 800b356:	4a09      	ldr	r2, [pc, #36]	; (800b37c <vPortFree+0xbc>)
 800b358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b35a:	6938      	ldr	r0, [r7, #16]
 800b35c:	f000 f874 	bl	800b448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <vPortFree+0xc0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	4a06      	ldr	r2, [pc, #24]	; (800b380 <vPortFree+0xc0>)
 800b368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b36a:	f7fe fc7f 	bl	8009c6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b36e:	bf00      	nop
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	20010140 	.word	0x20010140
 800b37c:	20010130 	.word	0x20010130
 800b380:	2001013c 	.word	0x2001013c

0800b384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b38a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b38e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b390:	4b27      	ldr	r3, [pc, #156]	; (800b430 <prvHeapInit+0xac>)
 800b392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00c      	beq.n	800b3b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3307      	adds	r3, #7
 800b3a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0307 	bic.w	r3, r3, #7
 800b3aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	4a1f      	ldr	r2, [pc, #124]	; (800b430 <prvHeapInit+0xac>)
 800b3b4:	4413      	add	r3, r2
 800b3b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3bc:	4a1d      	ldr	r2, [pc, #116]	; (800b434 <prvHeapInit+0xb0>)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3c2:	4b1c      	ldr	r3, [pc, #112]	; (800b434 <prvHeapInit+0xb0>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3d0:	2208      	movs	r2, #8
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	1a9b      	subs	r3, r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0307 	bic.w	r3, r3, #7
 800b3de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4a15      	ldr	r2, [pc, #84]	; (800b438 <prvHeapInit+0xb4>)
 800b3e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3e6:	4b14      	ldr	r3, [pc, #80]	; (800b438 <prvHeapInit+0xb4>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <prvHeapInit+0xb4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b404:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <prvHeapInit+0xb4>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4a0a      	ldr	r2, [pc, #40]	; (800b43c <prvHeapInit+0xb8>)
 800b412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	4a09      	ldr	r2, [pc, #36]	; (800b440 <prvHeapInit+0xbc>)
 800b41a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b41c:	4b09      	ldr	r3, [pc, #36]	; (800b444 <prvHeapInit+0xc0>)
 800b41e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b422:	601a      	str	r2, [r3, #0]
}
 800b424:	bf00      	nop
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	20001124 	.word	0x20001124
 800b434:	20010124 	.word	0x20010124
 800b438:	2001012c 	.word	0x2001012c
 800b43c:	20010134 	.word	0x20010134
 800b440:	20010130 	.word	0x20010130
 800b444:	20010140 	.word	0x20010140

0800b448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b450:	4b28      	ldr	r3, [pc, #160]	; (800b4f4 <prvInsertBlockIntoFreeList+0xac>)
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	e002      	b.n	800b45c <prvInsertBlockIntoFreeList+0x14>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	429a      	cmp	r2, r3
 800b464:	d8f7      	bhi.n	800b456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	d108      	bne.n	800b48a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	441a      	add	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	441a      	add	r2, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d118      	bne.n	800b4d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b15      	ldr	r3, [pc, #84]	; (800b4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d00d      	beq.n	800b4c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	441a      	add	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	e008      	b.n	800b4d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	e003      	b.n	800b4d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d002      	beq.n	800b4e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4e6:	bf00      	nop
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	20010124 	.word	0x20010124
 800b4f8:	2001012c 	.word	0x2001012c

0800b4fc <_ZN13Communication4initEv>:
#include "Communication.h"
#include "Thread.h"
#include "FDCANTerminal.h"


void Communication::init(void) {
 800b4fc:	b598      	push	{r3, r4, r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
	static FDCANTerminal* fdcanterm = new FDCANTerminal(&hfdcan1);
 800b500:	4b16      	ldr	r3, [pc, #88]	; (800b55c <_ZN13Communication4initEv+0x60>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f3bf 8f5b 	dmb	ish
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bf0c      	ite	eq
 800b510:	2301      	moveq	r3, #1
 800b512:	2300      	movne	r3, #0
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d018      	beq.n	800b54c <_ZN13Communication4initEv+0x50>
 800b51a:	4810      	ldr	r0, [pc, #64]	; (800b55c <_ZN13Communication4initEv+0x60>)
 800b51c:	f000 fe6c 	bl	800c1f8 <__cxa_guard_acquire>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	bf14      	ite	ne
 800b526:	2301      	movne	r3, #1
 800b528:	2300      	moveq	r3, #0
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00d      	beq.n	800b54c <_ZN13Communication4initEv+0x50>
 800b530:	203c      	movs	r0, #60	; 0x3c
 800b532:	f000 fe70 	bl	800c216 <_Znwj>
 800b536:	4603      	mov	r3, r0
 800b538:	461c      	mov	r4, r3
 800b53a:	4909      	ldr	r1, [pc, #36]	; (800b560 <_ZN13Communication4initEv+0x64>)
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 f87d 	bl	800b63c <_ZN13FDCANTerminalC1EP19FDCAN_HandleTypeDef>
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <_ZN13Communication4initEv+0x68>)
 800b544:	601c      	str	r4, [r3, #0]
 800b546:	4805      	ldr	r0, [pc, #20]	; (800b55c <_ZN13Communication4initEv+0x60>)
 800b548:	f000 fe62 	bl	800c210 <__cxa_guard_release>
	fdcanterm->set_tick_delay(100);
 800b54c:	4b05      	ldr	r3, [pc, #20]	; (800b564 <_ZN13Communication4initEv+0x68>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2164      	movs	r1, #100	; 0x64
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fc31 	bl	800bdba <_ZN6Thread14set_tick_delayEm>
}
 800b558:	bf00      	nop
 800b55a:	bd98      	pop	{r3, r4, r7, pc}
 800b55c:	20010148 	.word	0x20010148
 800b560:	200000a0 	.word	0x200000a0
 800b564:	20010144 	.word	0x20010144

0800b568 <_ZN6System4initEv>:
#include "System.h"
#include "Thread.h"
#include "PowerMonitor.h"


void System::init(void) {
 800b568:	b598      	push	{r3, r4, r7, lr}
 800b56a:	af00      	add	r7, sp, #0
//    while (true) {
//    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
//    	HAL_Delay(1000);
//    }

	static PowerMonitor* powermonitor = new PowerMonitor(&hspi1);
 800b56c:	4b16      	ldr	r3, [pc, #88]	; (800b5c8 <_ZN6System4initEv+0x60>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f3bf 8f5b 	dmb	ish
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bf0c      	ite	eq
 800b57c:	2301      	moveq	r3, #1
 800b57e:	2300      	movne	r3, #0
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d018      	beq.n	800b5b8 <_ZN6System4initEv+0x50>
 800b586:	4810      	ldr	r0, [pc, #64]	; (800b5c8 <_ZN6System4initEv+0x60>)
 800b588:	f000 fe36 	bl	800c1f8 <__cxa_guard_acquire>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	bf14      	ite	ne
 800b592:	2301      	movne	r3, #1
 800b594:	2300      	moveq	r3, #0
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00d      	beq.n	800b5b8 <_ZN6System4initEv+0x50>
 800b59c:	2040      	movs	r0, #64	; 0x40
 800b59e:	f000 fe3a 	bl	800c216 <_Znwj>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	461c      	mov	r4, r3
 800b5a6:	4909      	ldr	r1, [pc, #36]	; (800b5cc <_ZN6System4initEv+0x64>)
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 f951 	bl	800b850 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef>
 800b5ae:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <_ZN6System4initEv+0x68>)
 800b5b0:	601c      	str	r4, [r3, #0]
 800b5b2:	4805      	ldr	r0, [pc, #20]	; (800b5c8 <_ZN6System4initEv+0x60>)
 800b5b4:	f000 fe2c 	bl	800c210 <__cxa_guard_release>
	powermonitor->set_tick_delay(100);
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <_ZN6System4initEv+0x68>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2164      	movs	r1, #100	; 0x64
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 fbfb 	bl	800bdba <_ZN6Thread14set_tick_delayEm>
}
 800b5c4:	bf00      	nop
 800b5c6:	bd98      	pop	{r3, r4, r7, pc}
 800b5c8:	20010150 	.word	0x20010150
 800b5cc:	20000224 	.word	0x20000224
 800b5d0:	2001014c 	.word	0x2001014c

0800b5d4 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stack_size);
	Thread(const char* name, osPriority_t priority, uint32_t stack_size);
	virtual ~Thread() {};
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	4a04      	ldr	r2, [pc, #16]	; (800b5f0 <_ZN6ThreadD1Ev+0x1c>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	0800c740 	.word	0x0800c740

0800b5f4 <_ZN6ThreadD0Ev>:
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff ffe9 	bl	800b5d4 <_ZN6ThreadD1Ev>
 800b602:	2138      	movs	r1, #56	; 0x38
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fdf5 	bl	800c1f4 <_ZdlPvj>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <_Z7to_enumPKc>:
 */


#include <FDCANTerminal.h>

Command to_enum(const char* command) {
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
	if (std::strcmp(command, "STATUS") == 0) return STATUS;
 800b61c:	4906      	ldr	r1, [pc, #24]	; (800b638 <_Z7to_enumPKc+0x24>)
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7f4 fe06 	bl	8000230 <strcmp>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <_Z7to_enumPKc+0x1a>
 800b62a:	2300      	movs	r3, #0
 800b62c:	e000      	b.n	800b630 <_Z7to_enumPKc+0x1c>
	else return UNKNOWN;
 800b62e:	2301      	movs	r3, #1
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	0800c69c 	.word	0x0800c69c

0800b63c <_ZN13FDCANTerminalC1EP19FDCAN_HandleTypeDef>:

FDCANTerminal::FDCANTerminal(FDCAN_HandleTypeDef* fdcan_handle) : Thread("FDCANTerminal"), fdcan(fdcan_handle) {}
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4907      	ldr	r1, [pc, #28]	; (800b668 <_ZN13FDCANTerminalC1EP19FDCAN_HandleTypeDef+0x2c>)
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fb4b 	bl	800bce6 <_ZN6ThreadC1EPKc>
 800b650:	4a06      	ldr	r2, [pc, #24]	; (800b66c <_ZN13FDCANTerminalC1EP19FDCAN_HandleTypeDef+0x30>)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	601a      	str	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	639a      	str	r2, [r3, #56]	; 0x38
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	0800c6a4 	.word	0x0800c6a4
 800b66c:	0800c728 	.word	0x0800c728

0800b670 <_ZN13FDCANTerminal4initEv>:


void FDCANTerminal::init() {
 800b670:	b5b0      	push	{r4, r5, r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef s_filter_config = {
 800b678:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <_ZN13FDCANTerminal4initEv+0x4c>)
 800b67a:	f107 0408 	add.w	r4, r7, #8
 800b67e:	461d      	mov	r5, r3
 800b680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b684:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b688:	e884 0003 	stmia.w	r4, {r0, r1}
		.FilterConfig = FDCAN_FILTER_TO_RXFIFO0,
		.FilterID1 = 0x123, // EXAMPLE ID
		.FilterID2 = 0x7FF, // GENERAL ID
	};

    HAL_FDCAN_ConfigFilter(fdcan, &s_filter_config);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b690:	f107 0208 	add.w	r2, r7, #8
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f7f5 ffea 	bl	8001670 <HAL_FDCAN_ConfigFilter>
    HAL_FDCAN_Start(fdcan);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f6 f83f 	bl	8001724 <HAL_FDCAN_Start>
    HAL_FDCAN_ActivateNotification(fdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7f6 f9ac 	bl	8001a0c <HAL_FDCAN_ActivateNotification>
}
 800b6b4:	bf00      	nop
 800b6b6:	3720      	adds	r7, #32
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bdb0      	pop	{r4, r5, r7, pc}
 800b6bc:	0800c6b4 	.word	0x0800c6b4

0800b6c0 <_ZN13FDCANTerminal4loopEv>:

void FDCANTerminal::loop() {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b092      	sub	sp, #72	; 0x48
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
    FDCAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    if (HAL_FDCAN_GetRxMessage(fdcan, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK) {
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b6cc:	f107 0318 	add.w	r3, r7, #24
 800b6d0:	f107 0220 	add.w	r2, r7, #32
 800b6d4:	2140      	movs	r1, #64	; 0x40
 800b6d6:	f7f6 f891 	bl	80017fc <HAL_FDCAN_GetRxMessage>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bf0c      	ite	eq
 800b6e0:	2301      	moveq	r3, #1
 800b6e2:	2300      	movne	r3, #0
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d015      	beq.n	800b716 <_ZN13FDCANTerminal4loopEv+0x56>
        char message[9];
        std::memcpy(message, rx_data, rx_header.DataLength >> 16);
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	0c1a      	lsrs	r2, r3, #16
 800b6ee:	f107 0118 	add.w	r1, r7, #24
 800b6f2:	f107 030c 	add.w	r3, r7, #12
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 ff5e 	bl	800c5b8 <memcpy>
        message[rx_header.DataLength >> 16] = '\0';
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	0c1b      	lsrs	r3, r3, #16
 800b700:	3348      	adds	r3, #72	; 0x48
 800b702:	443b      	add	r3, r7
 800b704:	2200      	movs	r2, #0
 800b706:	f803 2c3c 	strb.w	r2, [r3, #-60]
        handle_message(message);
 800b70a:	f107 030c 	add.w	r3, r7, #12
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f837 	bl	800b784 <_ZN13FDCANTerminal14handle_messageEPKc>
    }
}
 800b716:	bf00      	nop
 800b718:	3748      	adds	r7, #72	; 0x48
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <_ZN13FDCANTerminal13send_responseEPKc>:

void FDCANTerminal::send_response(const char* response) {
 800b71e:	b580      	push	{r7, lr}
 800b720:	b08e      	sub	sp, #56	; 0x38
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
    FDCAN_TxHeaderTypeDef tx_header;
    tx_header.Identifier = 0x321; // EXAMPLE ID
 800b728:	f240 3321 	movw	r3, #801	; 0x321
 800b72c:	617b      	str	r3, [r7, #20]
    tx_header.IdType = FDCAN_STANDARD_ID;
 800b72e:	2300      	movs	r3, #0
 800b730:	61bb      	str	r3, [r7, #24]
    tx_header.TxFrameType = FDCAN_DATA_FRAME;
 800b732:	2300      	movs	r3, #0
 800b734:	61fb      	str	r3, [r7, #28]
    tx_header.DataLength = std::strlen(response) << 16;
 800b736:	6838      	ldr	r0, [r7, #0]
 800b738:	f7f4 fd72 	bl	8000220 <strlen>
 800b73c:	4603      	mov	r3, r0
 800b73e:	041b      	lsls	r3, r3, #16
 800b740:	623b      	str	r3, [r7, #32]
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b742:	2300      	movs	r3, #0
 800b744:	627b      	str	r3, [r7, #36]	; 0x24
    tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800b746:	2300      	movs	r3, #0
 800b748:	62bb      	str	r3, [r7, #40]	; 0x28
    tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800b74a:	2300      	movs	r3, #0
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800b74e:	2300      	movs	r3, #0
 800b750:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.MessageMarker = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	637b      	str	r3, [r7, #52]	; 0x34

    uint8_t tx_data[8];
    std::memcpy(tx_data, response, std::strlen(response));
 800b756:	6838      	ldr	r0, [r7, #0]
 800b758:	f7f4 fd62 	bl	8000220 <strlen>
 800b75c:	4602      	mov	r2, r0
 800b75e:	f107 030c 	add.w	r3, r7, #12
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	4618      	mov	r0, r3
 800b766:	f000 ff27 	bl	800c5b8 <memcpy>

    HAL_FDCAN_AddMessageToTxFifoQ(fdcan, &tx_header, tx_data);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	f107 020c 	add.w	r2, r7, #12
 800b772:	f107 0114 	add.w	r1, r7, #20
 800b776:	4618      	mov	r0, r3
 800b778:	f7f5 fffc 	bl	8001774 <HAL_FDCAN_AddMessageToTxFifoQ>
}
 800b77c:	bf00      	nop
 800b77e:	3738      	adds	r7, #56	; 0x38
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <_ZN13FDCANTerminal14handle_messageEPKc>:

void FDCANTerminal::handle_message(const char* message) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
    char trimmed[9]; // trim trailing characters
    std::strncpy(trimmed, message, std::strlen(message));
 800b78e:	6838      	ldr	r0, [r7, #0]
 800b790:	f7f4 fd46 	bl	8000220 <strlen>
 800b794:	4602      	mov	r2, r0
 800b796:	f107 030c 	add.w	r3, r7, #12
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 fe19 	bl	800c3d4 <strncpy>
    trimmed[std::strlen(message)] = '\0';
 800b7a2:	6838      	ldr	r0, [r7, #0]
 800b7a4:	f7f4 fd3c 	bl	8000220 <strlen>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	3318      	adds	r3, #24
 800b7ac:	443b      	add	r3, r7
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    Command command = to_enum(trimmed);
 800b7b4:	f107 030c 	add.w	r3, r7, #12
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff ff2b 	bl	800b614 <_Z7to_enumPKc>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	75fb      	strb	r3, [r7, #23]
    execute_command(command);
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f804 	bl	800b7d4 <_ZN13FDCANTerminal15execute_commandE7Command>
}
 800b7cc:	bf00      	nop
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <_ZN13FDCANTerminal15execute_commandE7Command>:

void FDCANTerminal::execute_command(Command command) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
	switch (command) {
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d104      	bne.n	800b7f0 <_ZN13FDCANTerminal15execute_commandE7Command+0x1c>
	case STATUS:
		send_response("System is running");
 800b7e6:	4907      	ldr	r1, [pc, #28]	; (800b804 <_ZN13FDCANTerminal15execute_commandE7Command+0x30>)
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff ff98 	bl	800b71e <_ZN13FDCANTerminal13send_responseEPKc>
		break;
 800b7ee:	e004      	b.n	800b7fa <_ZN13FDCANTerminal15execute_commandE7Command+0x26>
	case UNKNOWN:
	default:
		send_response("Unknown command");
 800b7f0:	4905      	ldr	r1, [pc, #20]	; (800b808 <_ZN13FDCANTerminal15execute_commandE7Command+0x34>)
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff ff93 	bl	800b71e <_ZN13FDCANTerminal13send_responseEPKc>
		break;
 800b7f8:	bf00      	nop
	}
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	0800c6cc 	.word	0x0800c6cc
 800b808:	0800c6e0 	.word	0x0800c6e0

0800b80c <_ZN13FDCANTerminalD1Ev>:
	UNKNOWN
} Command;

Command to_enum(const char* command);

class FDCANTerminal : public Thread {
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	4a05      	ldr	r2, [pc, #20]	; (800b82c <_ZN13FDCANTerminalD1Ev+0x20>)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7ff fed9 	bl	800b5d4 <_ZN6ThreadD1Ev>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	0800c728 	.word	0x0800c728

0800b830 <_ZN13FDCANTerminalD0Ev>:
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ffe7 	bl	800b80c <_ZN13FDCANTerminalD1Ev>
 800b83e:	213c      	movs	r1, #60	; 0x3c
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fcd7 	bl	800c1f4 <_ZdlPvj>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef>:
#define SHUNT_VALUE	0.3e-3f // Ohm

#define CURRENT_LSB (MAX_CURRENT >> 15)


PowerMonitor::PowerMonitor(SPI_HandleTypeDef* spi) : Thread("PowerMonitor"), spi(spi), measurements(nullptr) {};
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4908      	ldr	r1, [pc, #32]	; (800b880 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef+0x30>)
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 fa41 	bl	800bce6 <_ZN6ThreadC1EPKc>
 800b864:	4a07      	ldr	r2, [pc, #28]	; (800b884 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef+0x34>)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	639a      	str	r2, [r3, #56]	; 0x38
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	63da      	str	r2, [r3, #60]	; 0x3c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	0800c6f0 	.word	0x0800c6f0
 800b884:	0800c758 	.word	0x0800c758

0800b888 <_ZN12PowerMonitor4initEv>:


void PowerMonitor::init() {
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	osDelay(100 / portTICK_PERIOD_MS);
 800b890:	2064      	movs	r0, #100	; 0x64
 800b892:	f7fd f91f 	bl	8008ad4 <osDelay>

	uint8_t attempts = 3;
 800b896:	2303      	movs	r3, #3
 800b898:	73fb      	strb	r3, [r7, #15]
	bool init_success = false;
 800b89a:	2300      	movs	r3, #0
 800b89c:	73bb      	strb	r3, [r7, #14]

	while (attempts-- > 0) {
 800b89e:	e011      	b.n	800b8c4 <_ZN12PowerMonitor4initEv+0x3c>
		if (get(INA239_DEVICE_ID_REG) == INA239_DEV_ID) {
 800b8a0:	213f      	movs	r1, #63	; 0x3f
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f91d 	bl	800bae2 <_ZN12PowerMonitor3getEh>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f242 3391 	movw	r3, #9105	; 0x2391
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	bf0c      	ite	eq
 800b8b4:	2301      	moveq	r3, #1
 800b8b6:	2300      	movne	r3, #0
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <_ZN12PowerMonitor4initEv+0x3c>
			init_success = true;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	73bb      	strb	r3, [r7, #14]
			break;
 800b8c2:	e009      	b.n	800b8d8 <_ZN12PowerMonitor4initEv+0x50>
	while (attempts-- > 0) {
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	1e5a      	subs	r2, r3, #1
 800b8c8:	73fa      	strb	r2, [r7, #15]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bf14      	ite	ne
 800b8ce:	2301      	movne	r3, #1
 800b8d0:	2300      	moveq	r3, #0
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1e3      	bne.n	800b8a0 <_ZN12PowerMonitor4initEv+0x18>
		}
	}

	if (init_success) {
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d045      	beq.n	800b96a <_ZN12PowerMonitor4initEv+0xe2>
		bool config_success = set(INA239_CONFIG_REG, INA239_CONFIG_ADCRANGE);
 800b8de:	2210      	movs	r2, #16
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 f911 	bl	800bb0a <_ZN12PowerMonitor3setEht>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	737b      	strb	r3, [r7, #13]

		uint16_t adc_config = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_MODE & (0xF << INA239_ADCCONFIG_MODE_BIT);
 800b8f0:	897b      	ldrh	r3, [r7, #10]
 800b8f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b8f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b8fa:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VBUSCT & (0x2 << INA239_ADCCONFIG_VBUSCT_BIT);
 800b8fc:	897b      	ldrh	r3, [r7, #10]
 800b8fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b902:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VSHCT & (0x2 << INA239_ADCCONFIG_VSHCT_BIT);
 800b904:	897b      	ldrh	r3, [r7, #10]
 800b906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90a:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VTCT & (0x7 << INA239_ADCCONFIG_VTCT_BIT);
 800b90c:	897b      	ldrh	r3, [r7, #10]
 800b90e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800b912:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_AVG & (0x3 << INA239_ADCCONFIG_AVG_BIT);
 800b914:	897b      	ldrh	r3, [r7, #10]
 800b916:	f043 0303 	orr.w	r3, r3, #3
 800b91a:	817b      	strh	r3, [r7, #10]

		config_success |= set(INA239_ADC_CONFIG_REG, adc_config);
 800b91c:	897b      	ldrh	r3, [r7, #10]
 800b91e:	461a      	mov	r2, r3
 800b920:	2101      	movs	r1, #1
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f8f1 	bl	800bb0a <_ZN12PowerMonitor3setEht>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	7b7b      	ldrb	r3, [r7, #13]
 800b92e:	4313      	orrs	r3, r2
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	bf14      	ite	ne
 800b936:	2301      	movne	r3, #1
 800b938:	2300      	moveq	r3, #0
 800b93a:	737b      	strb	r3, [r7, #13]

		config_success |= set(INA239_SHUNT_CAL_REG, 4 * SHUNT_CAL_CONST * MAX_CURRENT * SHUNT_VALUE);
 800b93c:	2200      	movs	r2, #0
 800b93e:	2102      	movs	r1, #2
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f8e2 	bl	800bb0a <_ZN12PowerMonitor3setEht>
 800b946:	4603      	mov	r3, r0
 800b948:	461a      	mov	r2, r3
 800b94a:	7b7b      	ldrb	r3, [r7, #13]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	bf14      	ite	ne
 800b954:	2301      	movne	r3, #1
 800b956:	2300      	moveq	r3, #0
 800b958:	737b      	strb	r3, [r7, #13]

		if (config_success) {
 800b95a:	7b7b      	ldrb	r3, [r7, #13]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d108      	bne.n	800b972 <_ZN12PowerMonitor4initEv+0xea>
			// TODO: print that the device has been initialized successfully
		} else {
			// TODO: print that the device config has failed
			terminate();
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fa1c 	bl	800bda0 <_ZN6Thread9terminateEv>
		// TODO: print that the device hasnt been initialized
		terminate();
	}

	//loop();
}
 800b968:	e003      	b.n	800b972 <_ZN12PowerMonitor4initEv+0xea>
		terminate();
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f000 fa17 	bl	800bda0 <_ZN6Thread9terminateEv>
}
 800b972:	bf00      	nop
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <_ZN12PowerMonitor4loopEv>:

void PowerMonitor::loop() {
 800b97a:	b590      	push	{r4, r7, lr}
 800b97c:	b083      	sub	sp, #12
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
	measurements->shunt_voltage = read_shunt_voltage();
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f82c 	bl	800b9e4 <_ZN12PowerMonitor18read_shunt_voltageEv>
 800b98c:	eef0 7a40 	vmov.f32	s15, s0
 800b990:	edc4 7a00 	vstr	s15, [r4]
	measurements->bus_voltage = read_bus_voltage();
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f83b 	bl	800ba14 <_ZN12PowerMonitor16read_bus_voltageEv>
 800b99e:	eef0 7a40 	vmov.f32	s15, s0
 800b9a2:	edc4 7a01 	vstr	s15, [r4, #4]
	measurements->current = read_current();
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f84a 	bl	800ba44 <_ZN12PowerMonitor12read_currentEv>
 800b9b0:	eef0 7a40 	vmov.f32	s15, s0
 800b9b4:	edc4 7a02 	vstr	s15, [r4, #8]
	measurements->power = read_power();
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f859 	bl	800ba74 <_ZN12PowerMonitor10read_powerEv>
 800b9c2:	eef0 7a40 	vmov.f32	s15, s0
 800b9c6:	edc4 7a03 	vstr	s15, [r4, #12]
	measurements->temperature = read_temperature();
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f86e 	bl	800bab0 <_ZN12PowerMonitor16read_temperatureEv>
 800b9d4:	eef0 7a40 	vmov.f32	s15, s0
 800b9d8:	edc4 7a04 	vstr	s15, [r4, #16]
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd90      	pop	{r4, r7, pc}

0800b9e4 <_ZN12PowerMonitor18read_shunt_voltageEv>:

float PowerMonitor::read_shunt_voltage() {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	return 1.25e-6f * get(INA239_VSHUNT_REG); // [V]
 800b9ec:	2104      	movs	r1, #4
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f877 	bl	800bae2 <_ZN12PowerMonitor3getEh>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	ee07 3a90 	vmov	s15, r3
 800b9fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9fe:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800ba10 <_ZN12PowerMonitor18read_shunt_voltageEv+0x2c>
 800ba02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ba06:	eeb0 0a67 	vmov.f32	s0, s15
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	35a7c5ac 	.word	0x35a7c5ac

0800ba14 <_ZN12PowerMonitor16read_bus_voltageEv>:

float PowerMonitor::read_bus_voltage() {
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	return 3.125e-3f * get(INA239_VBUS_REG); // [V]
 800ba1c:	2105      	movs	r1, #5
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f85f 	bl	800bae2 <_ZN12PowerMonitor3getEh>
 800ba24:	4603      	mov	r3, r0
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba2e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800ba40 <_ZN12PowerMonitor16read_bus_voltageEv+0x2c>
 800ba32:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ba36:	eeb0 0a67 	vmov.f32	s0, s15
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	3b4ccccd 	.word	0x3b4ccccd

0800ba44 <_ZN12PowerMonitor12read_currentEv>:

float PowerMonitor::read_current() {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	return (float) CURRENT_LSB * get(INA239_CURRENT_REG); // [A]
 800ba4c:	2107      	movs	r1, #7
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f847 	bl	800bae2 <_ZN12PowerMonitor3getEh>
 800ba54:	4603      	mov	r3, r0
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba5e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800ba70 <_ZN12PowerMonitor12read_currentEv+0x2c>
 800ba62:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800ba66:	eeb0 0a67 	vmov.f32	s0, s15
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	00000000 	.word	0x00000000

0800ba74 <_ZN12PowerMonitor10read_powerEv>:

float PowerMonitor::read_power() {
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
	int32_t raw_power = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60fb      	str	r3, [r7, #12]
	read(INA239_POWER_REG, (uint8_t*) &raw_power, 3);
 800ba80:	f107 020c 	add.w	r2, r7, #12
 800ba84:	2303      	movs	r3, #3
 800ba86:	2108      	movs	r1, #8
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f891 	bl	800bbb0 <_ZN12PowerMonitor4readEhPhh>
	return 0.2f * CURRENT_LSB * raw_power;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba98:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800baac <_ZN12PowerMonitor10read_powerEv+0x38>
 800ba9c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800baa0:	eeb0 0a67 	vmov.f32	s0, s15
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	00000000 	.word	0x00000000

0800bab0 <_ZN12PowerMonitor16read_temperatureEv>:

//x * 2**n == x << n
//
//generally, you can use x * y = x << ilog2(y);

float PowerMonitor::read_temperature() {
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
	return 125e-3f * ((int16_t) get(INA239_DIETEMP_REG) >> INA239_DIETEMP_BIT); // [deg C]
 800bab8:	2106      	movs	r1, #6
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f811 	bl	800bae2 <_ZN12PowerMonitor3getEh>
 800bac0:	4603      	mov	r3, r0
 800bac2:	b21b      	sxth	r3, r3
 800bac4:	111b      	asrs	r3, r3, #4
 800bac6:	b21b      	sxth	r3, r3
 800bac8:	ee07 3a90 	vmov	s15, r3
 800bacc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800bad4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800bad8:	eeb0 0a67 	vmov.f32	s0, s15
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <_ZN12PowerMonitor3getEh>:

uint16_t PowerMonitor::get(uint8_t reg) {
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
	uint16_t value = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	81fb      	strh	r3, [r7, #14]
	read(reg, (uint8_t*) &value, 2);
 800baf2:	f107 020e 	add.w	r2, r7, #14
 800baf6:	78f9      	ldrb	r1, [r7, #3]
 800baf8:	2302      	movs	r3, #2
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f858 	bl	800bbb0 <_ZN12PowerMonitor4readEhPhh>
	return value;
 800bb00:	89fb      	ldrh	r3, [r7, #14]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <_ZN12PowerMonitor3setEht>:

bool PowerMonitor::set(uint8_t reg, uint16_t value) {
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
 800bb16:	4613      	mov	r3, r2
 800bb18:	803b      	strh	r3, [r7, #0]
	return write(reg, (uint8_t*) &value, 2);
 800bb1a:	463a      	mov	r2, r7
 800bb1c:	78f9      	ldrb	r1, [r7, #3]
 800bb1e:	2302      	movs	r3, #2
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f805 	bl	800bb30 <_ZN12PowerMonitor5writeEhPhh>
 800bb26:	4603      	mov	r3, r0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <_ZN12PowerMonitor5writeEhPhh>:

bool PowerMonitor::write(uint8_t reg, uint8_t* data, uint8_t size) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	607a      	str	r2, [r7, #4]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	72fb      	strb	r3, [r7, #11]
 800bb40:	4613      	mov	r3, r2
 800bb42:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_buffer[4];
	tx_buffer[0] = (reg << 2) | 0b00;
 800bb44:	7afb      	ldrb	r3, [r7, #11]
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < size; i++) {
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	75fb      	strb	r3, [r7, #23]
 800bb50:	e00f      	b.n	800bb72 <_ZN12PowerMonitor5writeEhPhh+0x42>
		tx_buffer[i+1] = data[size-i-1];
 800bb52:	7aba      	ldrb	r2, [r7, #10]
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	3301      	adds	r3, #1
 800bb62:	7812      	ldrb	r2, [r2, #0]
 800bb64:	3318      	adds	r3, #24
 800bb66:	443b      	add	r3, r7
 800bb68:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < size; i++) {
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	75fb      	strb	r3, [r7, #23]
 800bb72:	7dfa      	ldrb	r2, [r7, #23]
 800bb74:	7abb      	ldrb	r3, [r7, #10]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d3eb      	bcc.n	800bb52 <_ZN12PowerMonitor5writeEhPhh+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 800bb7a:	b672      	cpsid	i
}
 800bb7c:	bf00      	nop
	}

	__disable_irq();
	HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, tx_buffer, size+1, 10 / portTICK_PERIOD_MS);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bb82:	7abb      	ldrb	r3, [r7, #10]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	3301      	adds	r3, #1
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	f107 0110 	add.w	r1, r7, #16
 800bb8e:	230a      	movs	r3, #10
 800bb90:	f7f9 f82f 	bl	8004bf2 <HAL_SPI_Transmit>
 800bb94:	4603      	mov	r3, r0
 800bb96:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsie i" : : : "memory");
 800bb98:	b662      	cpsie	i
}
 800bb9a:	bf00      	nop
	__enable_irq();

	return status == HAL_OK;
 800bb9c:	7dbb      	ldrb	r3, [r7, #22]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	bf0c      	ite	eq
 800bba2:	2301      	moveq	r3, #1
 800bba4:	2300      	movne	r3, #0
 800bba6:	b2db      	uxtb	r3, r3
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <_ZN12PowerMonitor4readEhPhh>:

bool PowerMonitor::read(uint8_t reg, uint8_t* data, uint8_t size) {
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b089      	sub	sp, #36	; 0x24
 800bbb4:	af02      	add	r7, sp, #8
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	607a      	str	r2, [r7, #4]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	72fb      	strb	r3, [r7, #11]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	72bb      	strb	r3, [r7, #10]
	uint8_t rx_buffer[4];
	rx_buffer[0] = (reg << 2) | 0b01;
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	b25b      	sxtb	r3, r3
 800bbca:	f043 0301 	orr.w	r3, r3, #1
 800bbce:	b25b      	sxtb	r3, r3
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbd4:	b672      	cpsid	i
}
 800bbd6:	bf00      	nop

	__disable_irq();
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(spi, rx_buffer, rx_buffer, size+1, 100 / portTICK_PERIOD_MS);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bbdc:	7abb      	ldrb	r3, [r7, #10]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	f107 0210 	add.w	r2, r7, #16
 800bbe8:	f107 0110 	add.w	r1, r7, #16
 800bbec:	2464      	movs	r4, #100	; 0x64
 800bbee:	9400      	str	r4, [sp, #0]
 800bbf0:	f7f9 f974 	bl	8004edc <HAL_SPI_TransmitReceive>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsie i" : : : "memory");
 800bbf8:	b662      	cpsie	i
}
 800bbfa:	bf00      	nop
	__enable_irq();

	for (uint8_t i = 0; i < size; i++) {
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	75fb      	strb	r3, [r7, #23]
 800bc00:	e00d      	b.n	800bc1e <_ZN12PowerMonitor4readEhPhh+0x6e>
		data[i] = rx_buffer[size-i];
 800bc02:	7aba      	ldrb	r2, [r7, #10]
 800bc04:	7dfb      	ldrb	r3, [r7, #23]
 800bc06:	1ad2      	subs	r2, r2, r3
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	440b      	add	r3, r1
 800bc0e:	3218      	adds	r2, #24
 800bc10:	443a      	add	r2, r7
 800bc12:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800bc16:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	75fb      	strb	r3, [r7, #23]
 800bc1e:	7dfa      	ldrb	r2, [r7, #23]
 800bc20:	7abb      	ldrb	r3, [r7, #10]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d3ed      	bcc.n	800bc02 <_ZN12PowerMonitor4readEhPhh+0x52>
	}

	return status == HAL_OK;
 800bc26:	7dbb      	ldrb	r3, [r7, #22]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	bf0c      	ite	eq
 800bc2c:	2301      	moveq	r3, #1
 800bc2e:	2300      	movne	r3, #0
 800bc30:	b2db      	uxtb	r3, r3
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd90      	pop	{r4, r7, pc}
	...

0800bc3c <_ZN12PowerMonitorD1Ev>:
	float power;
	float temperature;
} Measurements;


class PowerMonitor : public Thread {
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	4a05      	ldr	r2, [pc, #20]	; (800bc5c <_ZN12PowerMonitorD1Ev+0x20>)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7ff fcc1 	bl	800b5d4 <_ZN6ThreadD1Ev>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0800c758 	.word	0x0800c758

0800bc60 <_ZN12PowerMonitorD0Ev>:
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ffe7 	bl	800bc3c <_ZN12PowerMonitorD1Ev>
 800bc6e:	2140      	movs	r1, #64	; 0x40
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fabf 	bl	800c1f4 <_ZdlPvj>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <_Z10__task_runPv>:
#include "task.h"


#define DEFAULT_STACK_SIZE (1024)

void __task_run(void* arg) {
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
 800bc8c:	2064      	movs	r0, #100	; 0x64
 800bc8e:	f7fc ff21 	bl	8008ad4 <osDelay>

	thread->init();
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	4798      	blx	r3

	while(thread->is_running()) {
 800bc9e:	e00c      	b.n	800bcba <_Z10__task_runPv+0x3a>
		thread->loop();
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	330c      	adds	r3, #12
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	4798      	blx	r3
		osDelay(thread->get_tick_delay() / portTICK_PERIOD_MS);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 f892 	bl	800bdd6 <_ZN6Thread14get_tick_delayEv>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fc ff0d 	bl	8008ad4 <osDelay>
	while(thread->is_running()) {
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 f864 	bl	800bd88 <_ZN6Thread10is_runningEv>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1ec      	bne.n	800bca0 <_Z10__task_runPv+0x20>
	}

	delete thread;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d004      	beq.n	800bcd6 <_Z10__task_runPv+0x56>
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	3204      	adds	r2, #4
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	4790      	blx	r2

	vTaskDelete(nullptr);
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	f7fd fea4 	bl	8009a24 <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 800bcdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bce0:	f7fc fef8 	bl	8008ad4 <osDelay>
 800bce4:	e7fa      	b.n	800bcdc <_Z10__task_runPv+0x5c>

0800bce6 <_ZN6ThreadC1EPKc>:
	}
}


Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {};
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	6039      	str	r1, [r7, #0]
 800bcf0:	2218      	movs	r2, #24
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f805 	bl	800bd04 <_ZN6ThreadC1EPKc12osPriority_t>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <_ZN6ThreadC1EPKc12osPriority_t>:


Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {};
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	68b9      	ldr	r1, [r7, #8]
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 f805 	bl	800bd28 <_ZN6ThreadC1EPKc12osPriority_tm>
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <_ZN6ThreadC1EPKc12osPriority_tm>:


Thread::Thread(const char* name, uint32_t stack_size) : Thread(name, (osPriority_t) osPriorityNormal, stack_size) {};


Thread::Thread(const char* name, osPriority_t priority, uint32_t stack_size) {
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08e      	sub	sp, #56	; 0x38
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
 800bd36:	4a12      	ldr	r2, [pc, #72]	; (800bd80 <_ZN6ThreadC1EPKc12osPriority_tm+0x58>)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	731a      	strb	r2, [r3, #12]
	const osThreadAttr_t thread_attributes = {
 800bd42:	f107 0314 	add.w	r3, r7, #20
 800bd46:	2224      	movs	r2, #36	; 0x24
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 fb55 	bl	800c3fa <memset>
		.name = (char*) name,
		.stack_size = stack_size,
		.priority = (osPriority_t) priority,
	};
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	617b      	str	r3, [r7, #20]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	this->handle = (osThreadId_t) osThreadNew(&__task_run, this, &thread_attributes);
 800bd5c:	f107 0314 	add.w	r3, r7, #20
 800bd60:	461a      	mov	r2, r3
 800bd62:	68f9      	ldr	r1, [r7, #12]
 800bd64:	4807      	ldr	r0, [pc, #28]	; (800bd84 <_ZN6ThreadC1EPKc12osPriority_tm+0x5c>)
 800bd66:	f7fc fe23 	bl	80089b0 <osThreadNew>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	605a      	str	r2, [r3, #4]
	this->name = name;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	609a      	str	r2, [r3, #8]
}
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3738      	adds	r7, #56	; 0x38
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	0800c740 	.word	0x0800c740
 800bd84:	0800bc81 	.word	0x0800bc81

0800bd88 <_ZN6Thread10is_runningEv>:

bool Thread::is_running() {
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	return running;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7b1b      	ldrb	r3, [r3, #12]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <_ZN6Thread9terminateEv>:

void Thread::terminate() {
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	running = false;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	731a      	strb	r2, [r3, #12]
}
 800bdae:	bf00      	nop
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <_ZN6Thread14set_tick_delayEm>:

osThreadId_t Thread::get_handle() {
	return handle;
}

void Thread::set_tick_delay(uint32_t ms) {
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
	delay = ms;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	611a      	str	r2, [r3, #16]
}
 800bdca:	bf00      	nop
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <_ZN6Thread14get_tick_delayEv>:

uint32_t Thread::get_tick_delay() {
 800bdd6:	b480      	push	{r7}
 800bdd8:	b083      	sub	sp, #12
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
	return delay;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	691b      	ldr	r3, [r3, #16]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800be02:	4619      	mov	r1, r3
 800be04:	4610      	mov	r0, r2
 800be06:	f7fb fd54 	bl	80078b2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800be0a:	bf00      	nop
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b082      	sub	sp, #8
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	460b      	mov	r3, r1
 800be1c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800be24:	78fa      	ldrb	r2, [r7, #3]
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	4613      	mov	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	00db      	lsls	r3, r3, #3
 800be30:	440b      	add	r3, r1
 800be32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	78fb      	ldrb	r3, [r7, #3]
 800be3a:	4619      	mov	r1, r3
 800be3c:	f7fb fd8e 	bl	800795c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	440b      	add	r3, r1
 800be68:	3324      	adds	r3, #36	; 0x24
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	78fb      	ldrb	r3, [r7, #3]
 800be6e:	4619      	mov	r1, r3
 800be70:	f7fb fdd7 	bl	8007a22 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fb feeb 	bl	8007c66 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bea0:	2301      	movs	r3, #1
 800bea2:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	795b      	ldrb	r3, [r3, #5]
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d001      	beq.n	800beb0 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800beac:	f7f4 fdd1 	bl	8000a52 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800beb6:	7bfa      	ldrb	r2, [r7, #15]
 800beb8:	4611      	mov	r1, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fb fe95 	bl	8007bea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7fb fe41 	bl	8007b4e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fb fe91 	bl	8007c0a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7a5b      	ldrb	r3, [r3, #9]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d005      	beq.n	800befc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bef0:	4b04      	ldr	r3, [pc, #16]	; (800bf04 <HAL_PCD_SuspendCallback+0x30>)
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	4a03      	ldr	r2, [pc, #12]	; (800bf04 <HAL_PCD_SuspendCallback+0x30>)
 800bef6:	f043 0306 	orr.w	r3, r3, #6
 800befa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800befc:	bf00      	nop
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	e000ed00 	.word	0xe000ed00

0800bf08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7a5b      	ldrb	r3, [r3, #9]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d007      	beq.n	800bf28 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf18:	4b08      	ldr	r3, [pc, #32]	; (800bf3c <HAL_PCD_ResumeCallback+0x34>)
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	4a07      	ldr	r2, [pc, #28]	; (800bf3c <HAL_PCD_ResumeCallback+0x34>)
 800bf1e:	f023 0306 	bic.w	r3, r3, #6
 800bf22:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf24:	f000 f934 	bl	800c190 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fb fe81 	bl	8007c36 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	e000ed00 	.word	0xe000ed00

0800bf40 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	4608      	mov	r0, r1
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	4603      	mov	r3, r0
 800bf50:	70fb      	strb	r3, [r7, #3]
 800bf52:	460b      	mov	r3, r1
 800bf54:	70bb      	strb	r3, [r7, #2]
 800bf56:	4613      	mov	r3, r2
 800bf58:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf68:	78bb      	ldrb	r3, [r7, #2]
 800bf6a:	883a      	ldrh	r2, [r7, #0]
 800bf6c:	78f9      	ldrb	r1, [r7, #3]
 800bf6e:	f7f6 fb81 	bl	8002674 <HAL_PCD_EP_Open>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 f90f 	bl	800c19c <USBD_Get_USB_Status>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfa6:	78fa      	ldrb	r2, [r7, #3]
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7f6 fc27 	bl	80027fe <HAL_PCD_EP_SetStall>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 f8f0 	bl	800c19c <USBD_Get_USB_Status>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfe4:	78fa      	ldrb	r2, [r7, #3]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7f6 fc5a 	bl	80028a2 <HAL_PCD_EP_ClrStall>
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f8d1 	bl	800c19c <USBD_Get_USB_Status>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bffe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c01a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c01c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c020:	2b00      	cmp	r3, #0
 800c022:	da0b      	bge.n	800c03c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c024:	78fb      	ldrb	r3, [r7, #3]
 800c026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c02a:	68f9      	ldr	r1, [r7, #12]
 800c02c:	4613      	mov	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	440b      	add	r3, r1
 800c036:	3312      	adds	r3, #18
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	e00b      	b.n	800c054 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c042:	68f9      	ldr	r1, [r7, #12]
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	440b      	add	r3, r1
 800c04e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c052:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c07a:	78fa      	ldrb	r2, [r7, #3]
 800c07c:	4611      	mov	r1, r2
 800c07e:	4618      	mov	r0, r3
 800c080:	f7f6 fad4 	bl	800262c <HAL_PCD_SetAddress>
 800c084:	4603      	mov	r3, r0
 800c086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c088:	7bfb      	ldrb	r3, [r7, #15]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 f886 	bl	800c19c <USBD_Get_USB_Status>
 800c090:	4603      	mov	r3, r0
 800c092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c094:	7bbb      	ldrb	r3, [r7, #14]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b086      	sub	sp, #24
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0bc:	7af9      	ldrb	r1, [r7, #11]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	f7f6 fb65 	bl	8002790 <HAL_PCD_EP_Transmit>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 f865 	bl	800c19c <USBD_Get_USB_Status>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	607a      	str	r2, [r7, #4]
 800c0ea:	603b      	str	r3, [r7, #0]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0fe:	7af9      	ldrb	r1, [r7, #11]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	f7f6 fb13 	bl	800272e <HAL_PCD_EP_Receive>
 800c108:	4603      	mov	r3, r0
 800c10a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 f844 	bl	800c19c <USBD_Get_USB_Status>
 800c114:	4603      	mov	r3, r0
 800c116:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c118:	7dbb      	ldrb	r3, [r7, #22]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <HAL_PCDEx_LPM_Callback+0x18>
 800c136:	2b01      	cmp	r3, #1
 800c138:	d013      	beq.n	800c162 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c13a:	e023      	b.n	800c184 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	7a5b      	ldrb	r3, [r3, #9]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d007      	beq.n	800c154 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c144:	f000 f824 	bl	800c190 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c148:	4b10      	ldr	r3, [pc, #64]	; (800c18c <HAL_PCDEx_LPM_Callback+0x68>)
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	4a0f      	ldr	r2, [pc, #60]	; (800c18c <HAL_PCDEx_LPM_Callback+0x68>)
 800c14e:	f023 0306 	bic.w	r3, r3, #6
 800c152:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fb fd6b 	bl	8007c36 <USBD_LL_Resume>
    break;
 800c160:	e010      	b.n	800c184 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fb fd4e 	bl	8007c0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	7a5b      	ldrb	r3, [r3, #9]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d005      	beq.n	800c182 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <HAL_PCDEx_LPM_Callback+0x68>)
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	4a04      	ldr	r2, [pc, #16]	; (800c18c <HAL_PCDEx_LPM_Callback+0x68>)
 800c17c:	f043 0306 	orr.w	r3, r3, #6
 800c180:	6113      	str	r3, [r2, #16]
    break;
 800c182:	bf00      	nop
}
 800c184:	bf00      	nop
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	e000ed00 	.word	0xe000ed00

0800c190 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c194:	f7f4 fc11 	bl	80009ba <SystemClock_Config>
}
 800c198:	bf00      	nop
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d817      	bhi.n	800c1e0 <USBD_Get_USB_Status+0x44>
 800c1b0:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <USBD_Get_USB_Status+0x1c>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1c9 	.word	0x0800c1c9
 800c1bc:	0800c1cf 	.word	0x0800c1cf
 800c1c0:	0800c1d5 	.word	0x0800c1d5
 800c1c4:	0800c1db 	.word	0x0800c1db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c1cc:	e00b      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d2:	e008      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d8:	e005      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c1de:	e002      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1e4:	bf00      	nop
  }
  return usb_status;
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <_ZdlPvj>:
 800c1f4:	f000 b820 	b.w	800c238 <_ZdlPv>

0800c1f8 <__cxa_guard_acquire>:
 800c1f8:	6803      	ldr	r3, [r0, #0]
 800c1fa:	07db      	lsls	r3, r3, #31
 800c1fc:	d406      	bmi.n	800c20c <__cxa_guard_acquire+0x14>
 800c1fe:	7843      	ldrb	r3, [r0, #1]
 800c200:	b103      	cbz	r3, 800c204 <__cxa_guard_acquire+0xc>
 800c202:	deff      	udf	#255	; 0xff
 800c204:	2301      	movs	r3, #1
 800c206:	7043      	strb	r3, [r0, #1]
 800c208:	4618      	mov	r0, r3
 800c20a:	4770      	bx	lr
 800c20c:	2000      	movs	r0, #0
 800c20e:	4770      	bx	lr

0800c210 <__cxa_guard_release>:
 800c210:	2301      	movs	r3, #1
 800c212:	6003      	str	r3, [r0, #0]
 800c214:	4770      	bx	lr

0800c216 <_Znwj>:
 800c216:	2801      	cmp	r0, #1
 800c218:	bf38      	it	cc
 800c21a:	2001      	movcc	r0, #1
 800c21c:	b510      	push	{r4, lr}
 800c21e:	4604      	mov	r4, r0
 800c220:	4620      	mov	r0, r4
 800c222:	f000 f81b 	bl	800c25c <malloc>
 800c226:	b100      	cbz	r0, 800c22a <_Znwj+0x14>
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	f000 f807 	bl	800c23c <_ZSt15get_new_handlerv>
 800c22e:	b908      	cbnz	r0, 800c234 <_Znwj+0x1e>
 800c230:	f000 f80c 	bl	800c24c <abort>
 800c234:	4780      	blx	r0
 800c236:	e7f3      	b.n	800c220 <_Znwj+0xa>

0800c238 <_ZdlPv>:
 800c238:	f000 b818 	b.w	800c26c <free>

0800c23c <_ZSt15get_new_handlerv>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <_ZSt15get_new_handlerv+0xc>)
 800c23e:	6818      	ldr	r0, [r3, #0]
 800c240:	f3bf 8f5b 	dmb	ish
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20010430 	.word	0x20010430

0800c24c <abort>:
 800c24c:	b508      	push	{r3, lr}
 800c24e:	2006      	movs	r0, #6
 800c250:	f000 f95a 	bl	800c508 <raise>
 800c254:	2001      	movs	r0, #1
 800c256:	f7f4 fdef 	bl	8000e38 <_exit>
	...

0800c25c <malloc>:
 800c25c:	4b02      	ldr	r3, [pc, #8]	; (800c268 <malloc+0xc>)
 800c25e:	4601      	mov	r1, r0
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	f000 b82b 	b.w	800c2bc <_malloc_r>
 800c266:	bf00      	nop
 800c268:	2000005c 	.word	0x2000005c

0800c26c <free>:
 800c26c:	4b02      	ldr	r3, [pc, #8]	; (800c278 <free+0xc>)
 800c26e:	4601      	mov	r1, r0
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	f000 b9af 	b.w	800c5d4 <_free_r>
 800c276:	bf00      	nop
 800c278:	2000005c 	.word	0x2000005c

0800c27c <sbrk_aligned>:
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	4e0e      	ldr	r6, [pc, #56]	; (800c2b8 <sbrk_aligned+0x3c>)
 800c280:	460c      	mov	r4, r1
 800c282:	6831      	ldr	r1, [r6, #0]
 800c284:	4605      	mov	r5, r0
 800c286:	b911      	cbnz	r1, 800c28e <sbrk_aligned+0x12>
 800c288:	f000 f95a 	bl	800c540 <_sbrk_r>
 800c28c:	6030      	str	r0, [r6, #0]
 800c28e:	4621      	mov	r1, r4
 800c290:	4628      	mov	r0, r5
 800c292:	f000 f955 	bl	800c540 <_sbrk_r>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d00a      	beq.n	800c2b0 <sbrk_aligned+0x34>
 800c29a:	1cc4      	adds	r4, r0, #3
 800c29c:	f024 0403 	bic.w	r4, r4, #3
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d007      	beq.n	800c2b4 <sbrk_aligned+0x38>
 800c2a4:	1a21      	subs	r1, r4, r0
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 f94a 	bl	800c540 <_sbrk_r>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	d101      	bne.n	800c2b4 <sbrk_aligned+0x38>
 800c2b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	20010438 	.word	0x20010438

0800c2bc <_malloc_r>:
 800c2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c0:	1ccd      	adds	r5, r1, #3
 800c2c2:	f025 0503 	bic.w	r5, r5, #3
 800c2c6:	3508      	adds	r5, #8
 800c2c8:	2d0c      	cmp	r5, #12
 800c2ca:	bf38      	it	cc
 800c2cc:	250c      	movcc	r5, #12
 800c2ce:	2d00      	cmp	r5, #0
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	db01      	blt.n	800c2d8 <_malloc_r+0x1c>
 800c2d4:	42a9      	cmp	r1, r5
 800c2d6:	d905      	bls.n	800c2e4 <_malloc_r+0x28>
 800c2d8:	230c      	movs	r3, #12
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	2600      	movs	r6, #0
 800c2de:	4630      	mov	r0, r6
 800c2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3b8 <_malloc_r+0xfc>
 800c2e8:	f000 f868 	bl	800c3bc <__malloc_lock>
 800c2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800c2f0:	461c      	mov	r4, r3
 800c2f2:	bb5c      	cbnz	r4, 800c34c <_malloc_r+0x90>
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	f7ff ffc0 	bl	800c27c <sbrk_aligned>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	4604      	mov	r4, r0
 800c300:	d155      	bne.n	800c3ae <_malloc_r+0xf2>
 800c302:	f8d8 4000 	ldr.w	r4, [r8]
 800c306:	4626      	mov	r6, r4
 800c308:	2e00      	cmp	r6, #0
 800c30a:	d145      	bne.n	800c398 <_malloc_r+0xdc>
 800c30c:	2c00      	cmp	r4, #0
 800c30e:	d048      	beq.n	800c3a2 <_malloc_r+0xe6>
 800c310:	6823      	ldr	r3, [r4, #0]
 800c312:	4631      	mov	r1, r6
 800c314:	4638      	mov	r0, r7
 800c316:	eb04 0903 	add.w	r9, r4, r3
 800c31a:	f000 f911 	bl	800c540 <_sbrk_r>
 800c31e:	4581      	cmp	r9, r0
 800c320:	d13f      	bne.n	800c3a2 <_malloc_r+0xe6>
 800c322:	6821      	ldr	r1, [r4, #0]
 800c324:	1a6d      	subs	r5, r5, r1
 800c326:	4629      	mov	r1, r5
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff ffa7 	bl	800c27c <sbrk_aligned>
 800c32e:	3001      	adds	r0, #1
 800c330:	d037      	beq.n	800c3a2 <_malloc_r+0xe6>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	442b      	add	r3, r5
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	f8d8 3000 	ldr.w	r3, [r8]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d038      	beq.n	800c3b2 <_malloc_r+0xf6>
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	42a2      	cmp	r2, r4
 800c344:	d12b      	bne.n	800c39e <_malloc_r+0xe2>
 800c346:	2200      	movs	r2, #0
 800c348:	605a      	str	r2, [r3, #4]
 800c34a:	e00f      	b.n	800c36c <_malloc_r+0xb0>
 800c34c:	6822      	ldr	r2, [r4, #0]
 800c34e:	1b52      	subs	r2, r2, r5
 800c350:	d41f      	bmi.n	800c392 <_malloc_r+0xd6>
 800c352:	2a0b      	cmp	r2, #11
 800c354:	d917      	bls.n	800c386 <_malloc_r+0xca>
 800c356:	1961      	adds	r1, r4, r5
 800c358:	42a3      	cmp	r3, r4
 800c35a:	6025      	str	r5, [r4, #0]
 800c35c:	bf18      	it	ne
 800c35e:	6059      	strne	r1, [r3, #4]
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	bf08      	it	eq
 800c364:	f8c8 1000 	streq.w	r1, [r8]
 800c368:	5162      	str	r2, [r4, r5]
 800c36a:	604b      	str	r3, [r1, #4]
 800c36c:	4638      	mov	r0, r7
 800c36e:	f104 060b 	add.w	r6, r4, #11
 800c372:	f000 f829 	bl	800c3c8 <__malloc_unlock>
 800c376:	f026 0607 	bic.w	r6, r6, #7
 800c37a:	1d23      	adds	r3, r4, #4
 800c37c:	1af2      	subs	r2, r6, r3
 800c37e:	d0ae      	beq.n	800c2de <_malloc_r+0x22>
 800c380:	1b9b      	subs	r3, r3, r6
 800c382:	50a3      	str	r3, [r4, r2]
 800c384:	e7ab      	b.n	800c2de <_malloc_r+0x22>
 800c386:	42a3      	cmp	r3, r4
 800c388:	6862      	ldr	r2, [r4, #4]
 800c38a:	d1dd      	bne.n	800c348 <_malloc_r+0x8c>
 800c38c:	f8c8 2000 	str.w	r2, [r8]
 800c390:	e7ec      	b.n	800c36c <_malloc_r+0xb0>
 800c392:	4623      	mov	r3, r4
 800c394:	6864      	ldr	r4, [r4, #4]
 800c396:	e7ac      	b.n	800c2f2 <_malloc_r+0x36>
 800c398:	4634      	mov	r4, r6
 800c39a:	6876      	ldr	r6, [r6, #4]
 800c39c:	e7b4      	b.n	800c308 <_malloc_r+0x4c>
 800c39e:	4613      	mov	r3, r2
 800c3a0:	e7cc      	b.n	800c33c <_malloc_r+0x80>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	603b      	str	r3, [r7, #0]
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	f000 f80e 	bl	800c3c8 <__malloc_unlock>
 800c3ac:	e797      	b.n	800c2de <_malloc_r+0x22>
 800c3ae:	6025      	str	r5, [r4, #0]
 800c3b0:	e7dc      	b.n	800c36c <_malloc_r+0xb0>
 800c3b2:	605b      	str	r3, [r3, #4]
 800c3b4:	deff      	udf	#255	; 0xff
 800c3b6:	bf00      	nop
 800c3b8:	20010434 	.word	0x20010434

0800c3bc <__malloc_lock>:
 800c3bc:	4801      	ldr	r0, [pc, #4]	; (800c3c4 <__malloc_lock+0x8>)
 800c3be:	f000 b8f9 	b.w	800c5b4 <__retarget_lock_acquire_recursive>
 800c3c2:	bf00      	nop
 800c3c4:	20010578 	.word	0x20010578

0800c3c8 <__malloc_unlock>:
 800c3c8:	4801      	ldr	r0, [pc, #4]	; (800c3d0 <__malloc_unlock+0x8>)
 800c3ca:	f000 b8f4 	b.w	800c5b6 <__retarget_lock_release_recursive>
 800c3ce:	bf00      	nop
 800c3d0:	20010578 	.word	0x20010578

0800c3d4 <strncpy>:
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	3901      	subs	r1, #1
 800c3d8:	4603      	mov	r3, r0
 800c3da:	b132      	cbz	r2, 800c3ea <strncpy+0x16>
 800c3dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c3e0:	f803 4b01 	strb.w	r4, [r3], #1
 800c3e4:	3a01      	subs	r2, #1
 800c3e6:	2c00      	cmp	r4, #0
 800c3e8:	d1f7      	bne.n	800c3da <strncpy+0x6>
 800c3ea:	441a      	add	r2, r3
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d100      	bne.n	800c3f4 <strncpy+0x20>
 800c3f2:	bd10      	pop	{r4, pc}
 800c3f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f8:	e7f9      	b.n	800c3ee <strncpy+0x1a>

0800c3fa <memset>:
 800c3fa:	4402      	add	r2, r0
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d100      	bne.n	800c404 <memset+0xa>
 800c402:	4770      	bx	lr
 800c404:	f803 1b01 	strb.w	r1, [r3], #1
 800c408:	e7f9      	b.n	800c3fe <memset+0x4>
	...

0800c40c <_reclaim_reent>:
 800c40c:	4b29      	ldr	r3, [pc, #164]	; (800c4b4 <_reclaim_reent+0xa8>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4283      	cmp	r3, r0
 800c412:	b570      	push	{r4, r5, r6, lr}
 800c414:	4604      	mov	r4, r0
 800c416:	d04b      	beq.n	800c4b0 <_reclaim_reent+0xa4>
 800c418:	69c3      	ldr	r3, [r0, #28]
 800c41a:	b143      	cbz	r3, 800c42e <_reclaim_reent+0x22>
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d144      	bne.n	800c4ac <_reclaim_reent+0xa0>
 800c422:	69e3      	ldr	r3, [r4, #28]
 800c424:	6819      	ldr	r1, [r3, #0]
 800c426:	b111      	cbz	r1, 800c42e <_reclaim_reent+0x22>
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 f8d3 	bl	800c5d4 <_free_r>
 800c42e:	6961      	ldr	r1, [r4, #20]
 800c430:	b111      	cbz	r1, 800c438 <_reclaim_reent+0x2c>
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f8ce 	bl	800c5d4 <_free_r>
 800c438:	69e1      	ldr	r1, [r4, #28]
 800c43a:	b111      	cbz	r1, 800c442 <_reclaim_reent+0x36>
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 f8c9 	bl	800c5d4 <_free_r>
 800c442:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c444:	b111      	cbz	r1, 800c44c <_reclaim_reent+0x40>
 800c446:	4620      	mov	r0, r4
 800c448:	f000 f8c4 	bl	800c5d4 <_free_r>
 800c44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c44e:	b111      	cbz	r1, 800c456 <_reclaim_reent+0x4a>
 800c450:	4620      	mov	r0, r4
 800c452:	f000 f8bf 	bl	800c5d4 <_free_r>
 800c456:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c458:	b111      	cbz	r1, 800c460 <_reclaim_reent+0x54>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f8ba 	bl	800c5d4 <_free_r>
 800c460:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c462:	b111      	cbz	r1, 800c46a <_reclaim_reent+0x5e>
 800c464:	4620      	mov	r0, r4
 800c466:	f000 f8b5 	bl	800c5d4 <_free_r>
 800c46a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c46c:	b111      	cbz	r1, 800c474 <_reclaim_reent+0x68>
 800c46e:	4620      	mov	r0, r4
 800c470:	f000 f8b0 	bl	800c5d4 <_free_r>
 800c474:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c476:	b111      	cbz	r1, 800c47e <_reclaim_reent+0x72>
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f8ab 	bl	800c5d4 <_free_r>
 800c47e:	6a23      	ldr	r3, [r4, #32]
 800c480:	b1b3      	cbz	r3, 800c4b0 <_reclaim_reent+0xa4>
 800c482:	4620      	mov	r0, r4
 800c484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c488:	4718      	bx	r3
 800c48a:	5949      	ldr	r1, [r1, r5]
 800c48c:	b941      	cbnz	r1, 800c4a0 <_reclaim_reent+0x94>
 800c48e:	3504      	adds	r5, #4
 800c490:	69e3      	ldr	r3, [r4, #28]
 800c492:	2d80      	cmp	r5, #128	; 0x80
 800c494:	68d9      	ldr	r1, [r3, #12]
 800c496:	d1f8      	bne.n	800c48a <_reclaim_reent+0x7e>
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 f89b 	bl	800c5d4 <_free_r>
 800c49e:	e7c0      	b.n	800c422 <_reclaim_reent+0x16>
 800c4a0:	680e      	ldr	r6, [r1, #0]
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f896 	bl	800c5d4 <_free_r>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	e7ef      	b.n	800c48c <_reclaim_reent+0x80>
 800c4ac:	2500      	movs	r5, #0
 800c4ae:	e7ef      	b.n	800c490 <_reclaim_reent+0x84>
 800c4b0:	bd70      	pop	{r4, r5, r6, pc}
 800c4b2:	bf00      	nop
 800c4b4:	2000005c 	.word	0x2000005c

0800c4b8 <_raise_r>:
 800c4b8:	291f      	cmp	r1, #31
 800c4ba:	b538      	push	{r3, r4, r5, lr}
 800c4bc:	4604      	mov	r4, r0
 800c4be:	460d      	mov	r5, r1
 800c4c0:	d904      	bls.n	800c4cc <_raise_r+0x14>
 800c4c2:	2316      	movs	r3, #22
 800c4c4:	6003      	str	r3, [r0, #0]
 800c4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4ce:	b112      	cbz	r2, 800c4d6 <_raise_r+0x1e>
 800c4d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4d4:	b94b      	cbnz	r3, 800c4ea <_raise_r+0x32>
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 f830 	bl	800c53c <_getpid_r>
 800c4dc:	462a      	mov	r2, r5
 800c4de:	4601      	mov	r1, r0
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4e6:	f000 b817 	b.w	800c518 <_kill_r>
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d00a      	beq.n	800c504 <_raise_r+0x4c>
 800c4ee:	1c59      	adds	r1, r3, #1
 800c4f0:	d103      	bne.n	800c4fa <_raise_r+0x42>
 800c4f2:	2316      	movs	r3, #22
 800c4f4:	6003      	str	r3, [r0, #0]
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	e7e7      	b.n	800c4ca <_raise_r+0x12>
 800c4fa:	2400      	movs	r4, #0
 800c4fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c500:	4628      	mov	r0, r5
 800c502:	4798      	blx	r3
 800c504:	2000      	movs	r0, #0
 800c506:	e7e0      	b.n	800c4ca <_raise_r+0x12>

0800c508 <raise>:
 800c508:	4b02      	ldr	r3, [pc, #8]	; (800c514 <raise+0xc>)
 800c50a:	4601      	mov	r1, r0
 800c50c:	6818      	ldr	r0, [r3, #0]
 800c50e:	f7ff bfd3 	b.w	800c4b8 <_raise_r>
 800c512:	bf00      	nop
 800c514:	2000005c 	.word	0x2000005c

0800c518 <_kill_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d07      	ldr	r5, [pc, #28]	; (800c538 <_kill_r+0x20>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	4608      	mov	r0, r1
 800c522:	4611      	mov	r1, r2
 800c524:	602b      	str	r3, [r5, #0]
 800c526:	f7f4 fc77 	bl	8000e18 <_kill>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	d102      	bne.n	800c534 <_kill_r+0x1c>
 800c52e:	682b      	ldr	r3, [r5, #0]
 800c530:	b103      	cbz	r3, 800c534 <_kill_r+0x1c>
 800c532:	6023      	str	r3, [r4, #0]
 800c534:	bd38      	pop	{r3, r4, r5, pc}
 800c536:	bf00      	nop
 800c538:	20010574 	.word	0x20010574

0800c53c <_getpid_r>:
 800c53c:	f7f4 bc64 	b.w	8000e08 <_getpid>

0800c540 <_sbrk_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	4d06      	ldr	r5, [pc, #24]	; (800c55c <_sbrk_r+0x1c>)
 800c544:	2300      	movs	r3, #0
 800c546:	4604      	mov	r4, r0
 800c548:	4608      	mov	r0, r1
 800c54a:	602b      	str	r3, [r5, #0]
 800c54c:	f7f4 fc7e 	bl	8000e4c <_sbrk>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d102      	bne.n	800c55a <_sbrk_r+0x1a>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	b103      	cbz	r3, 800c55a <_sbrk_r+0x1a>
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	bd38      	pop	{r3, r4, r5, pc}
 800c55c:	20010574 	.word	0x20010574

0800c560 <__errno>:
 800c560:	4b01      	ldr	r3, [pc, #4]	; (800c568 <__errno+0x8>)
 800c562:	6818      	ldr	r0, [r3, #0]
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	2000005c 	.word	0x2000005c

0800c56c <__libc_init_array>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4d0d      	ldr	r5, [pc, #52]	; (800c5a4 <__libc_init_array+0x38>)
 800c570:	4c0d      	ldr	r4, [pc, #52]	; (800c5a8 <__libc_init_array+0x3c>)
 800c572:	1b64      	subs	r4, r4, r5
 800c574:	10a4      	asrs	r4, r4, #2
 800c576:	2600      	movs	r6, #0
 800c578:	42a6      	cmp	r6, r4
 800c57a:	d109      	bne.n	800c590 <__libc_init_array+0x24>
 800c57c:	4d0b      	ldr	r5, [pc, #44]	; (800c5ac <__libc_init_array+0x40>)
 800c57e:	4c0c      	ldr	r4, [pc, #48]	; (800c5b0 <__libc_init_array+0x44>)
 800c580:	f000 f874 	bl	800c66c <_init>
 800c584:	1b64      	subs	r4, r4, r5
 800c586:	10a4      	asrs	r4, r4, #2
 800c588:	2600      	movs	r6, #0
 800c58a:	42a6      	cmp	r6, r4
 800c58c:	d105      	bne.n	800c59a <__libc_init_array+0x2e>
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	f855 3b04 	ldr.w	r3, [r5], #4
 800c594:	4798      	blx	r3
 800c596:	3601      	adds	r6, #1
 800c598:	e7ee      	b.n	800c578 <__libc_init_array+0xc>
 800c59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c59e:	4798      	blx	r3
 800c5a0:	3601      	adds	r6, #1
 800c5a2:	e7f2      	b.n	800c58a <__libc_init_array+0x1e>
 800c5a4:	0800c768 	.word	0x0800c768
 800c5a8:	0800c768 	.word	0x0800c768
 800c5ac:	0800c768 	.word	0x0800c768
 800c5b0:	0800c76c 	.word	0x0800c76c

0800c5b4 <__retarget_lock_acquire_recursive>:
 800c5b4:	4770      	bx	lr

0800c5b6 <__retarget_lock_release_recursive>:
 800c5b6:	4770      	bx	lr

0800c5b8 <memcpy>:
 800c5b8:	440a      	add	r2, r1
 800c5ba:	4291      	cmp	r1, r2
 800c5bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5c0:	d100      	bne.n	800c5c4 <memcpy+0xc>
 800c5c2:	4770      	bx	lr
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ce:	4291      	cmp	r1, r2
 800c5d0:	d1f9      	bne.n	800c5c6 <memcpy+0xe>
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <_free_r>:
 800c5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d044      	beq.n	800c664 <_free_r+0x90>
 800c5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5de:	9001      	str	r0, [sp, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c5e6:	bfb8      	it	lt
 800c5e8:	18e4      	addlt	r4, r4, r3
 800c5ea:	f7ff fee7 	bl	800c3bc <__malloc_lock>
 800c5ee:	4a1e      	ldr	r2, [pc, #120]	; (800c668 <_free_r+0x94>)
 800c5f0:	9801      	ldr	r0, [sp, #4]
 800c5f2:	6813      	ldr	r3, [r2, #0]
 800c5f4:	b933      	cbnz	r3, 800c604 <_free_r+0x30>
 800c5f6:	6063      	str	r3, [r4, #4]
 800c5f8:	6014      	str	r4, [r2, #0]
 800c5fa:	b003      	add	sp, #12
 800c5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c600:	f7ff bee2 	b.w	800c3c8 <__malloc_unlock>
 800c604:	42a3      	cmp	r3, r4
 800c606:	d908      	bls.n	800c61a <_free_r+0x46>
 800c608:	6825      	ldr	r5, [r4, #0]
 800c60a:	1961      	adds	r1, r4, r5
 800c60c:	428b      	cmp	r3, r1
 800c60e:	bf01      	itttt	eq
 800c610:	6819      	ldreq	r1, [r3, #0]
 800c612:	685b      	ldreq	r3, [r3, #4]
 800c614:	1949      	addeq	r1, r1, r5
 800c616:	6021      	streq	r1, [r4, #0]
 800c618:	e7ed      	b.n	800c5f6 <_free_r+0x22>
 800c61a:	461a      	mov	r2, r3
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	b10b      	cbz	r3, 800c624 <_free_r+0x50>
 800c620:	42a3      	cmp	r3, r4
 800c622:	d9fa      	bls.n	800c61a <_free_r+0x46>
 800c624:	6811      	ldr	r1, [r2, #0]
 800c626:	1855      	adds	r5, r2, r1
 800c628:	42a5      	cmp	r5, r4
 800c62a:	d10b      	bne.n	800c644 <_free_r+0x70>
 800c62c:	6824      	ldr	r4, [r4, #0]
 800c62e:	4421      	add	r1, r4
 800c630:	1854      	adds	r4, r2, r1
 800c632:	42a3      	cmp	r3, r4
 800c634:	6011      	str	r1, [r2, #0]
 800c636:	d1e0      	bne.n	800c5fa <_free_r+0x26>
 800c638:	681c      	ldr	r4, [r3, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	6053      	str	r3, [r2, #4]
 800c63e:	440c      	add	r4, r1
 800c640:	6014      	str	r4, [r2, #0]
 800c642:	e7da      	b.n	800c5fa <_free_r+0x26>
 800c644:	d902      	bls.n	800c64c <_free_r+0x78>
 800c646:	230c      	movs	r3, #12
 800c648:	6003      	str	r3, [r0, #0]
 800c64a:	e7d6      	b.n	800c5fa <_free_r+0x26>
 800c64c:	6825      	ldr	r5, [r4, #0]
 800c64e:	1961      	adds	r1, r4, r5
 800c650:	428b      	cmp	r3, r1
 800c652:	bf04      	itt	eq
 800c654:	6819      	ldreq	r1, [r3, #0]
 800c656:	685b      	ldreq	r3, [r3, #4]
 800c658:	6063      	str	r3, [r4, #4]
 800c65a:	bf04      	itt	eq
 800c65c:	1949      	addeq	r1, r1, r5
 800c65e:	6021      	streq	r1, [r4, #0]
 800c660:	6054      	str	r4, [r2, #4]
 800c662:	e7ca      	b.n	800c5fa <_free_r+0x26>
 800c664:	b003      	add	sp, #12
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	20010434 	.word	0x20010434

0800c66c <_init>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr

0800c678 <_fini>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	bf00      	nop
 800c67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67e:	bc08      	pop	{r3}
 800c680:	469e      	mov	lr, r3
 800c682:	4770      	bx	lr
