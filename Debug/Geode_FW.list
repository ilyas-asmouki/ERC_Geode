
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae8c  0800ae8c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae8c  0800ae8c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae8c  0800ae8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae8c  0800ae8c  0001ae8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800ae94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001500  20000060  0800aef4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001560  0800aef4  00021560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000210c1  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000534a  00000000  00000000  00041194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  000464e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001532  00000000  00000000  000480e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b6f  00000000  00000000  0004961a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009936  00000000  00000000  00061189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007758  00000000  00000000  0006aac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  00072218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800adfc 	.word	0x0800adfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800adfc 	.word	0x0800adfc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_CRC_Init+0x50>)
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_CRC_Init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_CRC_Init+0x50>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_CRC_Init+0x50>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_CRC_Init+0x50>)
 80002d8:	2207      	movs	r2, #7
 80002da:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_CRC_Init+0x50>)
 80002de:	2208      	movs	r2, #8
 80002e0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_CRC_Init+0x50>)
 80002e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e8:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_CRC_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_CRC_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CRC_Init+0x50>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_CRC_Init+0x50>)
 80002fe:	f000 ffa7 	bl	8001250 <HAL_CRC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 fbdf 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000007c 	.word	0x2000007c
 8000314:	40023000 	.word	0x40023000

08000318 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <HAL_CRC_MspInit+0x38>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d10b      	bne.n	8000342 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 800032c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 8000330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000334:	6493      	str	r3, [r2, #72]	; 0x48
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 8000338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800033a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023000 	.word	0x40023000
 8000354:	40021000 	.word	0x40021000

08000358 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800035e:	4a20      	ldr	r2, [pc, #128]	; (80003e0 <MX_FDCAN1_Init+0x88>)
 8000360:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000376:	2200      	movs	r2, #0
 8000378:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800037c:	2200      	movs	r2, #0
 800037e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000382:	2200      	movs	r2, #0
 8000384:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000388:	2210      	movs	r2, #16
 800038a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800038e:	2201      	movs	r2, #1
 8000390:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000394:	2202      	movs	r2, #2
 8000396:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800039a:	2202      	movs	r2, #2
 800039c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003be:	2200      	movs	r2, #0
 80003c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003ca:	f001 f833 	bl	8001434 <HAL_FDCAN_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80003d4:	f000 fb79 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000a0 	.word	0x200000a0
 80003e0:	40006400 	.word	0x40006400

080003e4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003ea:	4a20      	ldr	r2, [pc, #128]	; (800046c <MX_FDCAN2_Init+0x88>)
 80003ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000402:	2200      	movs	r2, #0
 8000404:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000406:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000408:	2200      	movs	r2, #0
 800040a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800040e:	2200      	movs	r2, #0
 8000410:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000414:	2210      	movs	r2, #16
 8000416:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800041a:	2201      	movs	r2, #1
 800041c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000420:	2202      	movs	r2, #2
 8000422:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000426:	2202      	movs	r2, #2
 8000428:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800042c:	2201      	movs	r2, #1
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000432:	2201      	movs	r2, #1
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000438:	2201      	movs	r2, #1
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800043e:	2201      	movs	r2, #1
 8000440:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800044a:	2200      	movs	r2, #0
 800044c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000450:	2200      	movs	r2, #0
 8000452:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000456:	f000 ffed 	bl	8001434 <HAL_FDCAN_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000460:	f000 fb33 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000104 	.word	0x20000104
 800046c:	40006800 	.word	0x40006800

08000470 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0a0      	sub	sp, #128	; 0x80
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	2254      	movs	r2, #84	; 0x54
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f009 ffd9 	bl	800a448 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a48      	ldr	r2, [pc, #288]	; (80005bc <HAL_FDCAN_MspInit+0x14c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d142      	bne.n	8000526 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004aa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	f107 0318 	add.w	r3, r7, #24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 fdb1 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004bc:	f000 fb05 	bl	8000aca <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004c0:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a3e      	ldr	r2, [pc, #248]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004ca:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d10b      	bne.n	80004ea <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	4a3b      	ldr	r2, [pc, #236]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004dc:	6593      	str	r3, [r2, #88]	; 0x58
 80004de:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a35      	ldr	r2, [pc, #212]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000514:	2309      	movs	r3, #9
 8000516:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051c:	4619      	mov	r1, r3
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <HAL_FDCAN_MspInit+0x158>)
 8000520:	f001 f94e 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000524:	e045      	b.n	80005b2 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a28      	ldr	r2, [pc, #160]	; (80005cc <HAL_FDCAN_MspInit+0x15c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d140      	bne.n	80005b2 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f003 fd69 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 800054c:	f000 fabd 	bl	8000aca <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 8000558:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10b      	bne.n	800057a <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056c:	6593      	str	r3, [r2, #88]	; 0x58
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000592:	2360      	movs	r3, #96	; 0x60
 8000594:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80005a2:	2309      	movs	r3, #9
 80005a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005aa:	4619      	mov	r1, r3
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <HAL_FDCAN_MspInit+0x158>)
 80005ae:	f001 f907 	bl	80017c0 <HAL_GPIO_Init>
}
 80005b2:	bf00      	nop
 80005b4:	3780      	adds	r7, #128	; 0x80
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40006400 	.word	0x40006400
 80005c0:	20000168 	.word	0x20000168
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000400 	.word	0x48000400
 80005cc:	40006800 	.word	0x40006800

080005d0 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

extern void MX_FREERTOS_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	System::init();
 80005d4:	f009 fcdc 	bl	8009f90 <_ZN6System4initEv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <MX_GPIO_Init+0x194>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a5e      	ldr	r2, [pc, #376]	; (8000770 <MX_GPIO_Init+0x194>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b5c      	ldr	r3, [pc, #368]	; (8000770 <MX_GPIO_Init+0x194>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <MX_GPIO_Init+0x194>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a58      	ldr	r2, [pc, #352]	; (8000770 <MX_GPIO_Init+0x194>)
 8000610:	f043 0320 	orr.w	r3, r3, #32
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b56      	ldr	r3, [pc, #344]	; (8000770 <MX_GPIO_Init+0x194>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b53      	ldr	r3, [pc, #332]	; (8000770 <MX_GPIO_Init+0x194>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a52      	ldr	r2, [pc, #328]	; (8000770 <MX_GPIO_Init+0x194>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <MX_GPIO_Init+0x194>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <MX_GPIO_Init+0x194>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <MX_GPIO_Init+0x194>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MX_GPIO_Init+0x194>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <MX_GPIO_Init+0x194>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <MX_GPIO_Init+0x194>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <MX_GPIO_Init+0x194>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 800066a:	2200      	movs	r2, #0
 800066c:	f246 0187 	movw	r1, #24711	; 0x6087
 8000670:	4840      	ldr	r0, [pc, #256]	; (8000774 <MX_GPIO_Init+0x198>)
 8000672:	f001 fa27 	bl	8001ac4 <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	210a      	movs	r1, #10
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fa21 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2187      	movs	r1, #135	; 0x87
 8000686:	483c      	ldr	r0, [pc, #240]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000688:	f001 fa1c 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 800068c:	f246 0387 	movw	r3, #24711	; 0x6087
 8000690:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4833      	ldr	r0, [pc, #204]	; (8000774 <MX_GPIO_Init+0x198>)
 80006a6:	f001 f88b 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 80006aa:	f248 0378 	movw	r3, #32888	; 0x8078
 80006ae:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <MX_GPIO_Init+0x198>)
 80006c0:	f001 f87e 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 80006c4:	f240 4305 	movw	r3, #1029	; 0x405
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f001 f870 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 80006e0:	230a      	movs	r3, #10
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f001 f861 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 80006fe:	2387      	movs	r3, #135	; 0x87
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000716:	f001 f853 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 800071a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000730:	f001 f846 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8000734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	2303      	movs	r3, #3
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0x19c>)
 800074a:	f001 f839 	bl	80017c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 800074e:	2304      	movs	r3, #4
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_GPIO_Init+0x1a0>)
 8000762:	f001 f82d 	bl	80017c0 <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800
 8000778:	48000400 	.word	0x48000400
 800077c:	48000c00 	.word	0x48000c00

08000780 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C2_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C2_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007bc:	f001 f99a 	bl	8001af4 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 f980 	bl	8000aca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007ce:	f001 fa2c 	bl	8001c2a <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 f977 	bl	8000aca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007e0:	f001 fa6e 	bl	8001cc0 <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f96e 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000016c 	.word	0x2000016c
 80007f8:	40005800 	.word	0x40005800
 80007fc:	00e057fd 	.word	0x00e057fd

08000800 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C3_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C3_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C3_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C3_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <MX_I2C3_Init+0x74>)
 800083c:	f001 f95a 	bl	8001af4 <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 f940 	bl	8000aca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C3_Init+0x74>)
 800084e:	f001 f9ec 	bl	8001c2a <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 f937 	bl	8000aca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2C3_Init+0x74>)
 8000860:	f001 fa2e 	bl	8001cc0 <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f92e 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001c0 	.word	0x200001c0
 8000878:	40007800 	.word	0x40007800
 800087c:	00e057fd 	.word	0x00e057fd

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a0      	sub	sp, #128	; 0x80
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	2254      	movs	r2, #84	; 0x54
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f009 fdd1 	bl	800a448 <memset>
  if(i2cHandle->Instance==I2C2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a3e      	ldr	r2, [pc, #248]	; (80009a4 <HAL_I2C_MspInit+0x124>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d138      	bne.n	8000922 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fbab 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008c8:	f000 f8ff 	bl	8000aca <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d8:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	2312      	movs	r3, #18
 80008ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 ff5c 	bl	80017c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800090e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000920:	e03c      	b.n	800099c <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d137      	bne.n	800099c <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fb6c 	bl	8004018 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8000946:	f000 f8c0 	bl	8000aca <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000974:	2308      	movs	r3, #8
 8000976:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_I2C_MspInit+0x130>)
 8000980:	f000 ff1e 	bl	80017c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800098a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800098e:	6593      	str	r3, [r2, #88]	; 0x58
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
}
 800099c:	bf00      	nop
 800099e:	3780      	adds	r7, #128	; 0x80
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005800 	.word	0x40005800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40007800 	.word	0x40007800
 80009b0:	48000800 	.word	0x48000800

080009b4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <MX_IWDG_Init+0x38>)
 80009bc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ca:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009d2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009d6:	f001 f9bf 	bl	8001d58 <HAL_IWDG_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80009e0:	f000 f873 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000214 	.word	0x20000214
 80009ec:	40003000 	.word	0x40003000

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f000 fab5 	bl	8000f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f81b 	bl	8000a32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff fdee 	bl	80005dc <MX_GPIO_Init>
  MX_CRC_Init();
 8000a00:	f7ff fc5e 	bl	80002c0 <MX_CRC_Init>
  MX_FDCAN1_Init();
 8000a04:	f7ff fca8 	bl	8000358 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a08:	f7ff fcec 	bl	80003e4 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000a0c:	f7ff feb8 	bl	8000780 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000a10:	f7ff fef6 	bl	8000800 <MX_I2C3_Init>
  MX_IWDG_Init();
 8000a14:	f7ff ffce 	bl	80009b4 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000a18:	f000 f85c 	bl	8000ad4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a1c:	f000 f898 	bl	8000b50 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a20:	f000 f8d4 	bl	8000bcc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a24:	f006 ff8c 	bl	8007940 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a28:	f7ff fdd2 	bl	80005d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a2c:	f006 ffac 	bl	8007988 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x40>

08000a32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b094      	sub	sp, #80	; 0x50
 8000a36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f009 fd01 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a58:	f002 fd44 	bl	80034e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 8000a72:	2310      	movs	r3, #16
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fdce 	bl	800362c <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a96:	f000 f818 	bl	8000aca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 f8cc 	bl	8003c50 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000abe:	f000 f804 	bl	8000aca <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	; 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ace:	b672      	cpsid	i
}
 8000ad0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <Error_Handler+0x8>

08000ad4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_SPI1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000aee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000af2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b34:	f003 fcbe 	bl	80044b4 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f7ff ffc4 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000224 	.word	0x20000224
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_SPI2_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000bb0:	f003 fc80 	bl	80044b4 <HAL_SPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f7ff ff86 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000288 	.word	0x20000288
 8000bc8:	40003800 	.word	0x40003800

08000bcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_SPI3_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000be6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bfe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c2c:	f003 fc42 	bl	80044b4 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f7ff ff48 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200002ec 	.word	0x200002ec
 8000c44:	40003c00 	.word	0x40003c00

08000c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a55      	ldr	r2, [pc, #340]	; (8000dbc <HAL_SPI_MspInit+0x174>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d129      	bne.n	8000cbe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c74:	6613      	str	r3, [r2, #96]	; 0x60
 8000c76:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23f0      	movs	r3, #240	; 0xf0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fd82 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cbc:	e07a      	b.n	8000db4 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <HAL_SPI_MspInit+0x17c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d129      	bne.n	8000d1c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cf8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <HAL_SPI_MspInit+0x180>)
 8000d16:	f000 fd53 	bl	80017c0 <HAL_GPIO_Init>
}
 8000d1a:	e04b      	b.n	8000db4 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <HAL_SPI_MspInit+0x184>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d146      	bne.n	8000db4 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d80:	2306      	movs	r3, #6
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f000 fd17 	bl	80017c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da4:	2306      	movs	r3, #6
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_SPI_MspInit+0x188>)
 8000db0:	f000 fd06 	bl	80017c0 <HAL_GPIO_Init>
}
 8000db4:	bf00      	nop
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40003800 	.word	0x40003800
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	40003c00 	.word	0x40003c00
 8000dd0:	48000800 	.word	0x48000800

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_MspInit+0x4c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_MspInit+0x4c>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	f06f 0001 	mvn.w	r0, #1
 8000e12:	f000 f9f6 	bl	8001202 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f8d8 	bl	8001008 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e58:	f008 f960 	bl	800911c <xTaskGetSchedulerState>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d001      	beq.n	8000e66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e62:	f008 ff49 	bl	8009cf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USB_LP_IRQHandler+0x10>)
 8000e72:	f000 ffc0 	bl	8001df6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000113c 	.word	0x2000113c

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f009 fb28 	bl	800a504 <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20020000 	.word	0x20020000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000350 	.word	0x20000350
 8000ee8:	20001560 	.word	0x20001560

08000eec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff ffea 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f009 fae7 	bl	800a510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f42:	f7ff fd55 	bl	80009f0 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
  ldr   r0, =_estack
 8000f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f54:	0800ae94 	.word	0x0800ae94
  ldr r2, =_sbss
 8000f58:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f5c:	20001560 	.word	0x20001560

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>

08000f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f93d 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f80e 	bl	8000f94 <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	e001      	b.n	8000f88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f84:	f7ff ff26 	bl	8000dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f88:	79fb      	ldrb	r3, [r7, #7]

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_InitTick+0x68>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d022      	beq.n	8000fee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_InitTick+0x6c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f93a 	bl	8001236 <HAL_SYSTICK_Config>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10f      	bne.n	8000fe8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d809      	bhi.n	8000fe2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd6:	f000 f914 	bl	8001202 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_InitTick+0x70>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e007      	b.n	8000ff2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e004      	b.n	8000ff2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e001      	b.n	8000ff2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x1c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x20>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4413      	add	r3, r2
 8001016:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x1c>)
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000354 	.word	0x20000354
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000354 	.word	0x20000354

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800105c:	d004      	beq.n	8001068 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_Delay+0x40>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001068:	bf00      	nop
 800106a:	f7ff ffdf 	bl	800102c <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	429a      	cmp	r2, r3
 8001078:	d8f7      	bhi.n	800106a <HAL_Delay+0x26>
  {
  }
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb2 	bl	80011a8 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e054      	b.n	800130c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7f5b      	ldrb	r3, [r3, #29]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d105      	bne.n	8001278 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff f850 	bl	8000318 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	791b      	ldrb	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a22      	ldr	r2, [pc, #136]	; (8001314 <HAL_CRC_Init+0xc4>)
 800128c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0218 	bic.w	r2, r2, #24
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e00c      	b.n	80012ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	461a      	mov	r2, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f834 	bl	8001318 <HAL_CRCEx_Polynomial_Set>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e028      	b.n	800130c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	795b      	ldrb	r3, [r3, #5]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ca:	611a      	str	r2, [r3, #16]
 80012cc:	e004      	b.n	80012d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6912      	ldr	r2, [r2, #16]
 80012d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699a      	ldr	r2, [r3, #24]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	04c11db7 	.word	0x04c11db7

08001318 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001328:	231f      	movs	r3, #31
 800132a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]
 800133a:	e063      	b.n	8001404 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800133c:	bf00      	nop
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1e5a      	subs	r2, r3, #1
 8001342:	613a      	str	r2, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <HAL_CRCEx_Polynomial_Set+0x44>
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b18      	cmp	r3, #24
 8001360:	d846      	bhi.n	80013f0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001362:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	080013f7 	.word	0x080013f7
 800136c:	080013f1 	.word	0x080013f1
 8001370:	080013f1 	.word	0x080013f1
 8001374:	080013f1 	.word	0x080013f1
 8001378:	080013f1 	.word	0x080013f1
 800137c:	080013f1 	.word	0x080013f1
 8001380:	080013f1 	.word	0x080013f1
 8001384:	080013f1 	.word	0x080013f1
 8001388:	080013e5 	.word	0x080013e5
 800138c:	080013f1 	.word	0x080013f1
 8001390:	080013f1 	.word	0x080013f1
 8001394:	080013f1 	.word	0x080013f1
 8001398:	080013f1 	.word	0x080013f1
 800139c:	080013f1 	.word	0x080013f1
 80013a0:	080013f1 	.word	0x080013f1
 80013a4:	080013f1 	.word	0x080013f1
 80013a8:	080013d9 	.word	0x080013d9
 80013ac:	080013f1 	.word	0x080013f1
 80013b0:	080013f1 	.word	0x080013f1
 80013b4:	080013f1 	.word	0x080013f1
 80013b8:	080013f1 	.word	0x080013f1
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080013f1 	.word	0x080013f1
 80013c4:	080013f1 	.word	0x080013f1
 80013c8:	080013cd 	.word	0x080013cd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d913      	bls.n	80013fa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80013d6:	e010      	b.n	80013fa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d90f      	bls.n	80013fe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80013e2:	e00c      	b.n	80013fe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	d90b      	bls.n	8001402 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80013ee:	e008      	b.n	8001402 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	75fb      	strb	r3, [r7, #23]
        break;
 80013f4:	e006      	b.n	8001404 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013f6:	bf00      	nop
 80013f8:	e004      	b.n	8001404 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013fa:	bf00      	nop
 80013fc:	e002      	b.n	8001404 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013fe:	bf00      	nop
 8001400:	e000      	b.n	8001404 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001402:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10d      	bne.n	8001426 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f023 0118 	bic.w	r1, r3, #24
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001426:	7dfb      	ldrb	r3, [r7, #23]
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e147      	b.n	80016d6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff f808 	bl	8000470 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0210 	bic.w	r2, r2, #16
 800146e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001470:	f7ff fddc 	bl	800102c <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001476:	e012      	b.n	800149e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001478:	f7ff fdd8 	bl	800102c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d90b      	bls.n	800149e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e11b      	b.n	80016d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d0e5      	beq.n	8001478 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014bc:	f7ff fdb6 	bl	800102c <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014c2:	e012      	b.n	80014ea <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014c4:	f7ff fdb2 	bl	800102c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b0a      	cmp	r3, #10
 80014d0:	d90b      	bls.n	80014ea <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2203      	movs	r2, #3
 80014e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0f5      	b.n	80016d6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0e5      	beq.n	80014c4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0202 	orr.w	r2, r2, #2
 8001506:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a74      	ldr	r2, [pc, #464]	; (80016e0 <HAL_FDCAN_Init+0x2ac>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d103      	bne.n	800151a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001512:	4a74      	ldr	r2, [pc, #464]	; (80016e4 <HAL_FDCAN_Init+0x2b0>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7c1b      	ldrb	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	e007      	b.n	8001544 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001542:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c5b      	ldrb	r3, [r3, #17]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155a:	619a      	str	r2, [r3, #24]
 800155c:	e007      	b.n	800156e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800156c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7c9b      	ldrb	r3, [r3, #18]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e007      	b.n	8001598 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001596:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80015bc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0210 	bic.w	r2, r2, #16
 80015cc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d108      	bne.n	80015e8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699a      	ldr	r2, [r3, #24]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0204 	orr.w	r2, r2, #4
 80015e4:	619a      	str	r2, [r3, #24]
 80015e6:	e02c      	b.n	8001642 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d028      	beq.n	8001642 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d01c      	beq.n	8001632 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001606:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0210 	orr.w	r2, r2, #16
 8001616:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d110      	bne.n	8001642 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0220 	orr.w	r2, r2, #32
 800162e:	619a      	str	r2, [r3, #24]
 8001630:	e007      	b.n	8001642 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	3b01      	subs	r3, #1
 8001648:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	3b01      	subs	r3, #1
 8001650:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001652:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800165a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	3b01      	subs	r3, #1
 8001664:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800166a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800166c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001676:	d115      	bne.n	80016a4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	3b01      	subs	r3, #1
 8001684:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001686:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	3b01      	subs	r3, #1
 800168e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001690:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	3b01      	subs	r3, #1
 800169a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016a0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016a2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f814 	bl	80016e8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40006400 	.word	0x40006400
 80016e4:	40006500 	.word	0x40006500

080016e8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80016f2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d103      	bne.n	8001706 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001704:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d103      	bne.n	8001718 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001716:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001726:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	041a      	lsls	r2, r3, #16
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	061a      	lsls	r2, r3, #24
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e005      	b.n	800179a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3304      	adds	r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3f3      	bcc.n	800178e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	4000a400 	.word	0x4000a400
 80017b8:	40006800 	.word	0x40006800
 80017bc:	40006c00 	.word	0x40006c00

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ce:	e15a      	b.n	8001a86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 814c 	beq.w	8001a80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d005      	beq.n	8001800 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d130      	bne.n	8001862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001836:	2201      	movs	r2, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 0201 	and.w	r2, r3, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b03      	cmp	r3, #3
 800186c:	d017      	beq.n	800189e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d123      	bne.n	80018f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	6939      	ldr	r1, [r7, #16]
 80018ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0203 	and.w	r2, r3, #3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80a6 	beq.w	8001a80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001934:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_GPIO_Init+0x2e4>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001938:	4a5a      	ldr	r2, [pc, #360]	; (8001aa4 <HAL_GPIO_Init+0x2e4>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6613      	str	r3, [r2, #96]	; 0x60
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_GPIO_Init+0x2e4>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194c:	4a56      	ldr	r2, [pc, #344]	; (8001aa8 <HAL_GPIO_Init+0x2e8>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001976:	d01f      	beq.n	80019b8 <HAL_GPIO_Init+0x1f8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x2ec>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d019      	beq.n	80019b4 <HAL_GPIO_Init+0x1f4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_GPIO_Init+0x2f0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d013      	beq.n	80019b0 <HAL_GPIO_Init+0x1f0>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x2f4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1ec>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_GPIO_Init+0x2f8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1e8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2fc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1e4>
 80019a0:	2305      	movs	r3, #5
 80019a2:	e00a      	b.n	80019ba <HAL_GPIO_Init+0x1fa>
 80019a4:	2306      	movs	r3, #6
 80019a6:	e008      	b.n	80019ba <HAL_GPIO_Init+0x1fa>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e006      	b.n	80019ba <HAL_GPIO_Init+0x1fa>
 80019ac:	2303      	movs	r3, #3
 80019ae:	e004      	b.n	80019ba <HAL_GPIO_Init+0x1fa>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e002      	b.n	80019ba <HAL_GPIO_Init+0x1fa>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_GPIO_Init+0x1fa>
 80019b8:	2300      	movs	r3, #0
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	f002 0203 	and.w	r2, r2, #3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4093      	lsls	r3, r2
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ca:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_GPIO_Init+0x2e8>)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d8:	4b39      	ldr	r3, [pc, #228]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019fc:	4a30      	ldr	r2, [pc, #192]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a26:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f47f ae9d 	bne.w	80017d0 <HAL_GPIO_Init+0x10>
  }
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	48000800 	.word	0x48000800
 8001ab4:	48000c00 	.word	0x48000c00
 8001ab8:	48001000 	.word	0x48001000
 8001abc:	48001400 	.word	0x48001400
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e08d      	b.n	8001c22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe feb0 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	e006      	b.n	8001b7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d108      	bne.n	8001b96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	e007      	b.n	8001ba6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69d9      	ldr	r1, [r3, #28]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d138      	bne.n	8001cb2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e032      	b.n	8001cb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2224      	movs	r2, #36	; 0x24
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cb2:	2302      	movs	r3, #2
  }
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d139      	bne.n	8001d4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e033      	b.n	8001d4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	; 0x24
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
  }
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e041      	b.n	8001dee <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001d72:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f245 5255 	movw	r2, #21845	; 0x5555
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6852      	ldr	r2, [r2, #4]
 8001d86:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6892      	ldr	r2, [r2, #8]
 8001d90:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d92:	f7ff f94b 	bl	800102c <HAL_GetTick>
 8001d96:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d98:	e00f      	b.n	8001dba <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d9a:	f7ff f947 	bl	800102c <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b31      	cmp	r3, #49	; 0x31
 8001da6:	d908      	bls.n	8001dba <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e019      	b.n	8001dee <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e8      	bne.n	8001d9a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d005      	beq.n	8001de2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	e004      	b.n	8001dec <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fc8a 	bl	800671c <USB_ReadInterrupts>
 8001e08:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 faa4 	bl	8002362 <PCD_EP_ISR_Handler>

    return;
 8001e1a:	e110      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d013      	beq.n	8001e4e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f008 f91f 	bl	800a082 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e44:	2100      	movs	r1, #0
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8fc 	bl	8002044 <HAL_PCD_SetAddress>

    return;
 8001e4c:	e0f7      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e6a:	b292      	uxth	r2, r2
 8001e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e70:	e0e5      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e94:	e0d3      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d034      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0208 	bic.w	r2, r2, #8
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f008 fa13 	bl	800a310 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f008 f902 	bl	800a0f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f02:	b292      	uxth	r2, r2
 8001f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f08:	e099      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d027      	beq.n	8001f64 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0208 	orr.w	r2, r2, #8
 8001f26:	b292      	uxth	r2, r2
 8001f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0204 	orr.w	r2, r2, #4
 8001f56:	b292      	uxth	r2, r2
 8001f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f008 f8af 	bl	800a0c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f62:	e06c      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d040      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f80:	b292      	uxth	r2, r2
 8001f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d12b      	bne.n	8001fe8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0204 	orr.w	r2, r2, #4
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0208 	orr.w	r2, r2, #8
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f008 f995 	bl	800a310 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fe6:	e02a      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f008 f869 	bl	800a0c0 <HAL_PCD_SuspendCallback>
    return;
 8001fee:	e026      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00f      	beq.n	800201a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800200c:	b292      	uxth	r2, r2
 800200e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f008 f827 	bl	800a066 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002018:	e011      	b.n	800203e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00c      	beq.n	800203e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002036:	b292      	uxth	r2, r2
 8002038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800203c:	bf00      	nop
  }
}
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_PCD_SetAddress+0x1a>
 800205a:	2302      	movs	r3, #2
 800205c:	e012      	b.n	8002084 <HAL_PCD_SetAddress+0x40>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fb3d 	bl	80066f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	461a      	mov	r2, r3
 800209a:	4603      	mov	r3, r0
 800209c:	70fb      	strb	r3, [r7, #3]
 800209e:	460b      	mov	r3, r1
 80020a0:	803b      	strh	r3, [r7, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da0e      	bge.n	80020d0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	f003 0207 	and.w	r2, r3, #7
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	3310      	adds	r3, #16
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	705a      	strb	r2, [r3, #1]
 80020ce:	e00e      	b.n	80020ee <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 0207 	and.w	r2, r3, #7
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020fa:	883a      	ldrh	r2, [r7, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	78ba      	ldrb	r2, [r7, #2]
 8002104:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002106:	78bb      	ldrb	r3, [r7, #2]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d102      	bne.n	8002112 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_PCD_EP_Open+0x94>
 800211c:	2302      	movs	r3, #2
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_Open+0xb2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68f9      	ldr	r1, [r7, #12]
 800212e:	4618      	mov	r0, r3
 8002130:	f002 fa6c 	bl	800460c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800213c:	7afb      	ldrb	r3, [r7, #11]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	460b      	mov	r3, r1
 8002154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f003 0207 	and.w	r2, r3, #7
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2200      	movs	r2, #0
 8002184:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	b2da      	uxtb	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	4618      	mov	r0, r3
 800219a:	f002 fdfb 	bl	8004d94 <USB_EPStartXfer>

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	460b      	mov	r3, r1
 80021b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	f003 0207 	and.w	r2, r3, #7
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	3310      	adds	r3, #16
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2201      	movs	r2, #1
 80021f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f4:	7afb      	ldrb	r3, [r7, #11]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fdc4 	bl	8004d94 <USB_EPStartXfer>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	7912      	ldrb	r2, [r2, #4]
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e03e      	b.n	80022b2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da0e      	bge.n	800225a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 0207 	and.w	r2, r3, #7
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	3310      	adds	r3, #16
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00c      	b.n	8002274 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_SetStall+0x7e>
 8002290:	2302      	movs	r3, #2
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_SetStall+0x9c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f927 	bl	80064f6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	7912      	ldrb	r2, [r2, #4]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e040      	b.n	800235a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da0e      	bge.n	80022fe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0207 	and.w	r2, r3, #7
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3310      	adds	r3, #16
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	705a      	strb	r2, [r3, #1]
 80022fc:	e00e      	b.n	800231c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022fe:	78fb      	ldrb	r3, [r7, #3]
 8002300:	f003 0207 	and.w	r2, r3, #7
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_PCD_EP_ClrStall+0x82>
 8002338:	2302      	movs	r3, #2
 800233a:	e00e      	b.n	800235a <HAL_PCD_EP_ClrStall+0xa0>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68f9      	ldr	r1, [r7, #12]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 f924 	bl	8006598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b096      	sub	sp, #88	; 0x58
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800236a:	e3ae      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002374:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002386:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 8170 	bne.w	8002670 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002390:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d14d      	bne.n	8002438 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	81fb      	strh	r3, [r7, #14]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3310      	adds	r3, #16
 80023c4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	441a      	add	r2, r3
 80023f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023fc:	2100      	movs	r1, #0
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f007 fe17 	bl	800a032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7b1b      	ldrb	r3, [r3, #12]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 835d 	beq.w	8002aca <PCD_EP_ISR_Handler+0x768>
 8002410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 8358 	bne.w	8002aca <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7b1b      	ldrb	r3, [r3, #12]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002424:	b2da      	uxtb	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b292      	uxth	r2, r2
 800242c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	731a      	strb	r2, [r3, #12]
 8002436:	e348      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800243e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800244a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800244e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002452:	2b00      	cmp	r3, #0
 8002454:	d032      	beq.n	80024bc <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4413      	add	r3, r2
 8002470:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800247a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800247c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800248c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002490:	b29b      	uxth	r3, r3
 8002492:	f004 f995 	bl	80067c0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29a      	uxth	r2, r3
 800249e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024a2:	4013      	ands	r3, r2
 80024a4:	823b      	strh	r3, [r7, #16]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	8a3a      	ldrh	r2, [r7, #16]
 80024ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024b0:	b292      	uxth	r2, r2
 80024b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f007 fd8f 	bl	8009fd8 <HAL_PCD_SetupStageCallback>
 80024ba:	e306      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f280 8302 	bge.w	8002aca <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024d2:	4013      	ands	r3, r2
 80024d4:	83fb      	strh	r3, [r7, #30]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	8bfa      	ldrh	r2, [r7, #30]
 80024dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e0:	b292      	uxth	r2, r2
 80024e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800250c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d019      	beq.n	8002548 <PCD_EP_ISR_Handler+0x1e6>
 8002514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002522:	6959      	ldr	r1, [r3, #20]
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800252c:	b29b      	uxth	r3, r3
 800252e:	f004 f947 	bl	80067c0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	441a      	add	r2, r3
 800253c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002540:	2100      	movs	r1, #0
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f007 fd5a 	bl	8009ffc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002552:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 82b5 	bne.w	8002aca <PCD_EP_ISR_Handler+0x768>
 8002560:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002564:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002568:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800256c:	f000 82ad 	beq.w	8002aca <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4413      	add	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	b29a      	uxth	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b3e      	cmp	r3, #62	; 0x3e
 80025a6:	d91d      	bls.n	80025e4 <PCD_EP_ISR_Handler+0x282>
 80025a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	647b      	str	r3, [r7, #68]	; 0x44
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <PCD_EP_ISR_Handler+0x260>
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	3b01      	subs	r3, #1
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	029b      	lsls	r3, r3, #10
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29a      	uxth	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	e026      	b.n	8002632 <PCD_EP_ISR_Handler+0x2d0>
 80025e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <PCD_EP_ISR_Handler+0x2a0>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e017      	b.n	8002632 <PCD_EP_ISR_Handler+0x2d0>
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <PCD_EP_ISR_Handler+0x2ba>
 8002616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002618:	3301      	adds	r3, #1
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29a      	uxth	r2, r3
 8002622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002624:	b29b      	uxth	r3, r3
 8002626:	029b      	lsls	r3, r3, #10
 8002628:	b29b      	uxth	r3, r3
 800262a:	4313      	orrs	r3, r2
 800262c:	b29a      	uxth	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	827b      	strh	r3, [r7, #18]
 8002644:	8a7b      	ldrh	r3, [r7, #18]
 8002646:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800264a:	827b      	strh	r3, [r7, #18]
 800264c:	8a7b      	ldrh	r3, [r7, #18]
 800264e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002652:	827b      	strh	r3, [r7, #18]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	8a7b      	ldrh	r3, [r7, #18]
 800265a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800265e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800266a:	b29b      	uxth	r3, r3
 800266c:	8013      	strh	r3, [r2, #0]
 800266e:	e22c      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002684:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002688:	2b00      	cmp	r3, #0
 800268a:	f280 80f6 	bge.w	800287a <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026a4:	4013      	ands	r3, r2
 80026a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80026bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c0:	b292      	uxth	r2, r2
 80026c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80026c4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026dc:	7b1b      	ldrb	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d123      	bne.n	800272a <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002706:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800270a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 808e 	beq.w	8002830 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	6959      	ldr	r1, [r3, #20]
 800271c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271e:	88da      	ldrh	r2, [r3, #6]
 8002720:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002724:	f004 f84c 	bl	80067c0 <USB_ReadPMA>
 8002728:	e082      	b.n	8002830 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272c:	78db      	ldrb	r3, [r3, #3]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d10a      	bne.n	8002748 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002732:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002736:	461a      	mov	r2, r3
 8002738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9d3 	bl	8002ae6 <HAL_PCD_EP_DB_Receive>
 8002740:	4603      	mov	r3, r0
 8002742:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002746:	e073      	b.n	8002830 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	441a      	add	r2, r3
 8002774:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d022      	beq.n	80027ec <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02c      	beq.n	8002830 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027dc:	6959      	ldr	r1, [r3, #20]
 80027de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e0:	891a      	ldrh	r2, [r3, #8]
 80027e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027e6:	f003 ffeb 	bl	80067c0 <USB_ReadPMA>
 80027ea:	e021      	b.n	8002830 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	4413      	add	r3, r2
 8002806:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002810:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002814:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002818:	2b00      	cmp	r3, #0
 800281a:	d009      	beq.n	8002830 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002822:	6959      	ldr	r1, [r3, #20]
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	895a      	ldrh	r2, [r3, #10]
 8002828:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800282c:	f003 ffc8 	bl	80067c0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002838:	441a      	add	r2, r3
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002846:	441a      	add	r2, r3
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <PCD_EP_ISR_Handler+0x4fe>
 8002854:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	429a      	cmp	r2, r3
 800285e:	d206      	bcs.n	800286e <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f007 fbc8 	bl	8009ffc <HAL_PCD_DataOutStageCallback>
 800286c:	e005      	b.n	800287a <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fa8d 	bl	8004d94 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800287a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8121 	beq.w	8002aca <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002888:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3310      	adds	r3, #16
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	441a      	add	r2, r3
 80028c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80028cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80028d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028da:	78db      	ldrb	r3, [r3, #3]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	f040 80a2 	bne.w	8002a26 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	7b1b      	ldrb	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8093 	beq.w	8002a18 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d046      	beq.n	800298c <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	785b      	ldrb	r3, [r3, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d126      	bne.n	8002954 <PCD_EP_ISR_Handler+0x5f2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	4413      	add	r3, r2
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	00da      	lsls	r2, r3, #3
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	4413      	add	r3, r2
 8002928:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800292c:	623b      	str	r3, [r7, #32]
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002938:	b29a      	uxth	r2, r3
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	801a      	strh	r2, [r3, #0]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294c:	b29a      	uxth	r2, r3
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	e061      	b.n	8002a18 <PCD_EP_ISR_Handler+0x6b6>
 8002954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d15d      	bne.n	8002a18 <PCD_EP_ISR_Handler+0x6b6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	4413      	add	r3, r2
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	00da      	lsls	r2, r3, #3
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	4413      	add	r3, r2
 800297e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	2200      	movs	r2, #0
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	e045      	b.n	8002a18 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d126      	bne.n	80029e8 <PCD_EP_ISR_Handler+0x686>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	637b      	str	r3, [r7, #52]	; 0x34
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	4413      	add	r3, r2
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	00da      	lsls	r2, r3, #3
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	4413      	add	r3, r2
 80029bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e017      	b.n	8002a18 <PCD_EP_ISR_Handler+0x6b6>
 80029e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d113      	bne.n	8002a18 <PCD_EP_ISR_Handler+0x6b6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fe:	4413      	add	r3, r2
 8002a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	00da      	lsls	r2, r3, #3
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2200      	movs	r2, #0
 8002a16:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f007 fb07 	bl	800a032 <HAL_PCD_DataInStageCallback>
 8002a24:	e051      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d144      	bne.n	8002abc <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d907      	bls.n	8002a76 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	699a      	ldr	r2, [r3, #24]
 8002a6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a6e:	1ad2      	subs	r2, r2, r3
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	619a      	str	r2, [r3, #24]
 8002a74:	e002      	b.n	8002a7c <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f007 fad1 	bl	800a032 <HAL_PCD_DataInStageCallback>
 8002a90:	e01b      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a9a:	441a      	add	r2, r3
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002aa8:	441a      	add	r2, r3
 8002aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f002 f96d 	bl	8004d94 <USB_EPStartXfer>
 8002aba:	e006      	b.n	8002aca <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f917 	bl	8002cf8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f6ff ac48 	blt.w	800236c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3758      	adds	r7, #88	; 0x58
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07c      	beq.n	8002bf8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d306      	bcc.n	8002b3c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	8b7b      	ldrh	r3, [r7, #26]
 8002b34:	1ad2      	subs	r2, r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	619a      	str	r2, [r3, #24]
 8002b3a:	e002      	b.n	8002b42 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d123      	bne.n	8002b92 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b64:	833b      	strh	r3, [r7, #24]
 8002b66:	8b3b      	ldrh	r3, [r7, #24]
 8002b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b6c:	833b      	strh	r3, [r7, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	8b3b      	ldrh	r3, [r7, #24]
 8002b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01f      	beq.n	8002bdc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	82fb      	strh	r3, [r7, #22]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	8afb      	ldrh	r3, [r7, #22]
 8002bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bdc:	8b7b      	ldrh	r3, [r7, #26]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8085 	beq.w	8002cee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6959      	ldr	r1, [r3, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	891a      	ldrh	r2, [r3, #8]
 8002bf0:	8b7b      	ldrh	r3, [r7, #26]
 8002bf2:	f003 fde5 	bl	80067c0 <USB_ReadPMA>
 8002bf6:	e07a      	b.n	8002cee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	4413      	add	r3, r2
 8002c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	8b7b      	ldrh	r3, [r7, #26]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d306      	bcc.n	8002c36 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	8b7b      	ldrh	r3, [r7, #26]
 8002c2e:	1ad2      	subs	r2, r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	619a      	str	r2, [r3, #24]
 8002c34:	e002      	b.n	8002c3c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d123      	bne.n	8002c8c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c5e:	83fb      	strh	r3, [r7, #30]
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
 8002c62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c66:	83fb      	strh	r3, [r7, #30]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	8bfb      	ldrh	r3, [r7, #30]
 8002c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11f      	bne.n	8002cd6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb0:	83bb      	strh	r3, [r7, #28]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	8bbb      	ldrh	r3, [r7, #28]
 8002cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cd6:	8b7b      	ldrh	r3, [r7, #26]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6959      	ldr	r1, [r3, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	895a      	ldrh	r2, [r3, #10]
 8002ce8:	8b7b      	ldrh	r3, [r7, #26]
 8002cea:	f003 fd69 	bl	80067c0 <USB_ReadPMA>
    }
  }

  return count;
 8002cee:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0a4      	sub	sp, #144	; 0x90
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 81db 	beq.w	80030c8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4413      	add	r3, r2
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d907      	bls.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	619a      	str	r2, [r3, #24]
 8002d54:	e002      	b.n	8002d5c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 80b9 	bne.w	8002ed8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d126      	bne.n	8002dbc <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	4413      	add	r3, r2
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	00da      	lsls	r2, r3, #3
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	4413      	add	r3, r2
 8002d90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e01a      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d116      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	4413      	add	r3, r2
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	00da      	lsls	r2, r3, #3
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d126      	bne.n	8002e4e <HAL_PCD_EP_DB_Transmit+0x156>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	00da      	lsls	r2, r3, #3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	801a      	strh	r2, [r3, #0]
 8002e4c:	e017      	b.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x186>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d113      	bne.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x186>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	4413      	add	r3, r2
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	00da      	lsls	r2, r3, #3
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	4413      	add	r3, r2
 8002e72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f007 f8d4 	bl	800a032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 82fa 	beq.w	800348a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb0:	82fb      	strh	r3, [r7, #22]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	8afb      	ldrh	r3, [r7, #22]
 8002ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	8013      	strh	r3, [r2, #0]
 8002ed6:	e2d8      	b.n	800348a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d021      	beq.n	8002f26 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	f040 82ac 	bne.w	800348a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f3a:	441a      	add	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f48:	441a      	add	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d30b      	bcc.n	8002f72 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f6a:	1ad2      	subs	r2, r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	621a      	str	r2, [r3, #32]
 8002f70:	e017      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d108      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f8a:	e00a      	b.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d165      	bne.n	8003076 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	4413      	add	r3, r2
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	00da      	lsls	r2, r3, #3
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fca:	4413      	add	r3, r2
 8002fcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8002fe8:	d91d      	bls.n	8003026 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003000:	3b01      	subs	r3, #1
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29a      	uxth	r2, r3
 800300a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300c:	b29b      	uxth	r3, r3
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	b29b      	uxth	r3, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301e:	b29a      	uxth	r2, r3
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	e044      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_PCD_EP_DB_Transmit+0x34c>
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303c:	b29a      	uxth	r2, r3
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	e035      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <HAL_PCD_EP_DB_Transmit+0x366>
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	3301      	adds	r3, #1
 800305c:	64bb      	str	r3, [r7, #72]	; 0x48
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29a      	uxth	r2, r3
 8003064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003066:	b29b      	uxth	r3, r3
 8003068:	029b      	lsls	r3, r3, #10
 800306a:	b29b      	uxth	r3, r3
 800306c:	4313      	orrs	r3, r2
 800306e:	b29a      	uxth	r2, r3
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	801a      	strh	r2, [r3, #0]
 8003074:	e01c      	b.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d118      	bne.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003092:	4413      	add	r3, r2
 8003094:	647b      	str	r3, [r7, #68]	; 0x44
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	00da      	lsls	r2, r3, #3
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	4413      	add	r3, r2
 80030a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030a4:	643b      	str	r3, [r7, #64]	; 0x40
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6959      	ldr	r1, [r3, #20]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	891a      	ldrh	r2, [r3, #8]
 80030bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f003 fb3b 	bl	800673c <USB_WritePMA>
 80030c6:	e1e0      	b.n	800348a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d307      	bcc.n	800310c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003104:	1ad2      	subs	r2, r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	619a      	str	r2, [r3, #24]
 800310a:	e002      	b.n	8003112 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 80c0 	bne.w	800329c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d126      	bne.n	8003172 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	67fb      	str	r3, [r7, #124]	; 0x7c
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003138:	4413      	add	r3, r2
 800313a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	00da      	lsls	r2, r3, #3
 8003142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003144:	4413      	add	r3, r2
 8003146:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800314a:	67bb      	str	r3, [r7, #120]	; 0x78
 800314c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003156:	b29a      	uxth	r2, r3
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800316a:	b29a      	uxth	r2, r3
 800316c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	e01a      	b.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d116      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	667b      	str	r3, [r7, #100]	; 0x64
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003188:	b29b      	uxth	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800318e:	4413      	add	r3, r2
 8003190:	667b      	str	r3, [r7, #100]	; 0x64
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	00da      	lsls	r2, r3, #3
 8003198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319a:	4413      	add	r3, r2
 800319c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80031a0:	663b      	str	r3, [r7, #96]	; 0x60
 80031a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a4:	2200      	movs	r2, #0
 80031a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	677b      	str	r3, [r7, #116]	; 0x74
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d12b      	bne.n	800320e <HAL_PCD_EP_DB_Transmit+0x516>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	4413      	add	r3, r2
 80031cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	00da      	lsls	r2, r3, #3
 80031d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d6:	4413      	add	r3, r2
 80031d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003204:	b29a      	uxth	r2, r3
 8003206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	e017      	b.n	800323e <HAL_PCD_EP_DB_Transmit+0x546>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d113      	bne.n	800323e <HAL_PCD_EP_DB_Transmit+0x546>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003224:	4413      	add	r3, r2
 8003226:	677b      	str	r3, [r7, #116]	; 0x74
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	00da      	lsls	r2, r3, #3
 800322e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003230:	4413      	add	r3, r2
 8003232:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003236:	673b      	str	r3, [r7, #112]	; 0x70
 8003238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800323a:	2200      	movs	r2, #0
 800323c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f006 fef4 	bl	800a032 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 811a 	bne.w	800348a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800328e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003296:	b29b      	uxth	r3, r3
 8003298:	8013      	strh	r3, [r2, #0]
 800329a:	e0f6      	b.n	800348a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d121      	bne.n	80032ea <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 80ca 	bne.w	800348a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032fe:	441a      	add	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800330c:	441a      	add	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d30b      	bcc.n	8003336 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	6a1a      	ldr	r2, [r3, #32]
 800332a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	621a      	str	r2, [r3, #32]
 8003334:	e017      	b.n	8003366 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d108      	bne.n	8003350 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800333e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800334e:	e00a      	b.n	8003366 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	657b      	str	r3, [r7, #84]	; 0x54
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	785b      	ldrb	r3, [r3, #1]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d165      	bne.n	8003440 <HAL_PCD_EP_DB_Transmit+0x748>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003388:	4413      	add	r3, r2
 800338a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00da      	lsls	r2, r3, #3
 8003392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003394:	4413      	add	r3, r2
 8003396:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b0:	2b3e      	cmp	r3, #62	; 0x3e
 80033b2:	d91d      	bls.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80033b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_PCD_EP_DB_Transmit+0x6d6>
 80033c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ca:	3b01      	subs	r3, #1
 80033cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	029b      	lsls	r3, r3, #10
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4313      	orrs	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ec:	801a      	strh	r2, [r3, #0]
 80033ee:	e041      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <HAL_PCD_EP_DB_Transmit+0x716>
 80033f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003406:	b29a      	uxth	r2, r3
 8003408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340a:	801a      	strh	r2, [r3, #0]
 800340c:	e032      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x77c>
 800340e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	66bb      	str	r3, [r7, #104]	; 0x68
 8003416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_PCD_EP_DB_Transmit+0x730>
 8003422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003424:	3301      	adds	r3, #1
 8003426:	66bb      	str	r3, [r7, #104]	; 0x68
 8003428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29a      	uxth	r2, r3
 800342e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003430:	b29b      	uxth	r3, r3
 8003432:	029b      	lsls	r3, r3, #10
 8003434:	b29b      	uxth	r3, r3
 8003436:	4313      	orrs	r3, r2
 8003438:	b29a      	uxth	r2, r3
 800343a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	e019      	b.n	8003474 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d115      	bne.n	8003474 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003450:	b29b      	uxth	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003456:	4413      	add	r3, r2
 8003458:	657b      	str	r3, [r7, #84]	; 0x54
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	00da      	lsls	r2, r3, #3
 8003460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003462:	4413      	add	r3, r2
 8003464:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003468:	653b      	str	r3, [r7, #80]	; 0x50
 800346a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346e:	b29a      	uxth	r2, r3
 8003470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003472:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	6959      	ldr	r1, [r3, #20]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	895a      	ldrh	r2, [r3, #10]
 8003480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003484:	b29b      	uxth	r3, r3
 8003486:	f003 f959 	bl	800673c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a4:	82bb      	strh	r3, [r7, #20]
 80034a6:	8abb      	ldrh	r3, [r7, #20]
 80034a8:	f083 0310 	eor.w	r3, r3, #16
 80034ac:	82bb      	strh	r3, [r7, #20]
 80034ae:	8abb      	ldrh	r3, [r7, #20]
 80034b0:	f083 0320 	eor.w	r3, r3, #32
 80034b4:	82bb      	strh	r3, [r7, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8abb      	ldrh	r3, [r7, #20]
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3790      	adds	r7, #144	; 0x90
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d141      	bne.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f2:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d131      	bne.n	8003564 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003500:	4b47      	ldr	r3, [pc, #284]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003506:	4a46      	ldr	r2, [pc, #280]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003518:	4a41      	ldr	r2, [pc, #260]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003520:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2232      	movs	r2, #50	; 0x32
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	4a3f      	ldr	r2, [pc, #252]	; (8003628 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0c9b      	lsrs	r3, r3, #18
 8003532:	3301      	adds	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003536:	e002      	b.n	800353e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3b01      	subs	r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800353e:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d102      	bne.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f2      	bne.n	8003538 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355e:	d158      	bne.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e057      	b.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003564:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800356a:	4a2d      	ldr	r2, [pc, #180]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003570:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003574:	e04d      	b.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d141      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800357e:	4b28      	ldr	r3, [pc, #160]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358a:	d131      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003592:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035a4:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2232      	movs	r2, #50	; 0x32
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c2:	e002      	b.n	80035ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d102      	bne.n	80035de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f2      	bne.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d112      	bne.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e011      	b.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003600:	e007      	b.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003610:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40007000 	.word	0x40007000
 8003624:	20000000 	.word	0x20000000
 8003628:	431bde83 	.word	0x431bde83

0800362c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e2fe      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d075      	beq.n	8003736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364a:	4b97      	ldr	r3, [pc, #604]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003654:	4b94      	ldr	r3, [pc, #592]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d102      	bne.n	800366a <HAL_RCC_OscConfig+0x3e>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d002      	beq.n	8003670 <HAL_RCC_OscConfig+0x44>
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d10b      	bne.n	8003688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	4b8d      	ldr	r3, [pc, #564]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d05b      	beq.n	8003734 <HAL_RCC_OscConfig+0x108>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d157      	bne.n	8003734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e2d9      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x74>
 8003692:	4b85      	ldr	r3, [pc, #532]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a84      	ldr	r2, [pc, #528]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x98>
 80036aa:	4b7f      	ldr	r3, [pc, #508]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7e      	ldr	r2, [pc, #504]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7b      	ldr	r2, [pc, #492]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xb0>
 80036c4:	4b78      	ldr	r3, [pc, #480]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a77      	ldr	r2, [pc, #476]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a74      	ldr	r2, [pc, #464]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd fca2 	bl	800102c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fd fc9e 	bl	800102c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e29e      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fe:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xc0>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd fc8e 	bl	800102c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fd fc8a 	bl	800102c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e28a      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003726:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0xe8>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d075      	beq.n	800382e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003742:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800374c:	4b56      	ldr	r3, [pc, #344]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d102      	bne.n	8003762 <HAL_RCC_OscConfig+0x136>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d002      	beq.n	8003768 <HAL_RCC_OscConfig+0x13c>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11f      	bne.n	80037a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003768:	4b4f      	ldr	r3, [pc, #316]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x154>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e25d      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b49      	ldr	r3, [pc, #292]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	4946      	ldr	r1, [pc, #280]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003794:	4b45      	ldr	r3, [pc, #276]	; (80038ac <HAL_RCC_OscConfig+0x280>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd fbfb 	bl	8000f94 <HAL_InitTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d043      	beq.n	800382c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e249      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b0:	4b3d      	ldr	r3, [pc, #244]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a3c      	ldr	r2, [pc, #240]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fd fc36 	bl	800102c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fd fc32 	bl	800102c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e232      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d6:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	492d      	ldr	r1, [pc, #180]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
 80037f6:	e01a      	b.n	800382e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f8:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a2a      	ldr	r2, [pc, #168]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 80037fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fd fc12 	bl	800102c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380c:	f7fd fc0e 	bl	800102c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e20e      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1e0>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d041      	beq.n	80038be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01c      	beq.n	800387c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003842:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003848:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003852:	f7fd fbeb 	bl	800102c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385a:	f7fd fbe7 	bl	800102c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1e7      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ef      	beq.n	800385a <HAL_RCC_OscConfig+0x22e>
 800387a:	e020      	b.n	80038be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_OscConfig+0x27c>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fd fbce 	bl	800102c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003892:	e00d      	b.n	80038b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003894:	f7fd fbca 	bl	800102c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d906      	bls.n	80038b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e1ca      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b0:	4b8c      	ldr	r3, [pc, #560]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ea      	bne.n	8003894 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a6 	beq.w	8003a18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038d0:	4b84      	ldr	r3, [pc, #528]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_OscConfig+0x2b4>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x2b6>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	4b7f      	ldr	r3, [pc, #508]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	4a7e      	ldr	r2, [pc, #504]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6593      	str	r3, [r2, #88]	; 0x58
 80038f2:	4b7c      	ldr	r3, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003902:	4b79      	ldr	r3, [pc, #484]	; (8003ae8 <HAL_RCC_OscConfig+0x4bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390e:	4b76      	ldr	r3, [pc, #472]	; (8003ae8 <HAL_RCC_OscConfig+0x4bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a75      	ldr	r2, [pc, #468]	; (8003ae8 <HAL_RCC_OscConfig+0x4bc>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7fd fb87 	bl	800102c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fd fb83 	bl	800102c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e183      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003934:	4b6c      	ldr	r3, [pc, #432]	; (8003ae8 <HAL_RCC_OscConfig+0x4bc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d108      	bne.n	800395a <HAL_RCC_OscConfig+0x32e>
 8003948:	4b66      	ldr	r3, [pc, #408]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a65      	ldr	r2, [pc, #404]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003958:	e024      	b.n	80039a4 <HAL_RCC_OscConfig+0x378>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b05      	cmp	r3, #5
 8003960:	d110      	bne.n	8003984 <HAL_RCC_OscConfig+0x358>
 8003962:	4b60      	ldr	r3, [pc, #384]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	4a5e      	ldr	r2, [pc, #376]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003972:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003982:	e00f      	b.n	80039a4 <HAL_RCC_OscConfig+0x378>
 8003984:	4b57      	ldr	r3, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a56      	ldr	r2, [pc, #344]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003994:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f023 0304 	bic.w	r3, r3, #4
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d016      	beq.n	80039da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fd fb3e 	bl	800102c <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd fb3a 	bl	800102c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e138      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ca:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ed      	beq.n	80039b4 <HAL_RCC_OscConfig+0x388>
 80039d8:	e015      	b.n	8003a06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fd fb27 	bl	800102c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd fb23 	bl	800102c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e121      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f8:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ed      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01c      	beq.n	8003a66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a32:	4a2c      	ldr	r2, [pc, #176]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd faf6 	bl	800102c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a44:	f7fd faf2 	bl	800102c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0f2      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCC_OscConfig+0x418>
 8003a64:	e01b      	b.n	8003a9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a66:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fad9 	bl	800102c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7e:	f7fd fad5 	bl	800102c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e0d5      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1ef      	bne.n	8003a7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80c9 	beq.w	8003c3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	f000 8083 	beq.w	8003bbc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d15e      	bne.n	8003b7c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd faaf 	bl	800102c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad0:	e00c      	b.n	8003aec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fd faab 	bl	800102c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d905      	bls.n	8003aec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0ab      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aec:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1ec      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af8:	4b52      	ldr	r3, [pc, #328]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <HAL_RCC_OscConfig+0x61c>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6a11      	ldr	r1, [r2, #32]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b08:	3a01      	subs	r2, #1
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b12:	0212      	lsls	r2, r2, #8
 8003b14:	4311      	orrs	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b1a:	0852      	lsrs	r2, r2, #1
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0552      	lsls	r2, r2, #21
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	0652      	lsls	r2, r2, #25
 8003b2c:	4311      	orrs	r1, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b32:	06d2      	lsls	r2, r2, #27
 8003b34:	430a      	orrs	r2, r1
 8003b36:	4943      	ldr	r1, [pc, #268]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a40      	ldr	r2, [pc, #256]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b46:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b48:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a3d      	ldr	r2, [pc, #244]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fa6a 	bl	800102c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd fa66 	bl	800102c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e066      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x530>
 8003b7a:	e05e      	b.n	8003c3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a30      	ldr	r2, [pc, #192]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd fa50 	bl	800102c <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fa4c 	bl	800102c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e04c      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba2:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003bae:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	4924      	ldr	r1, [pc, #144]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCC_OscConfig+0x620>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60cb      	str	r3, [r1, #12]
 8003bba:	e03e      	b.n	8003c3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e039      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCC_OscConfig+0x618>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0203 	and.w	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d12c      	bne.n	8003c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	3b01      	subs	r3, #1
 8003be8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d123      	bne.n	8003c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d11b      	bne.n	8003c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d113      	bne.n	8003c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d109      	bne.n	8003c36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	019f800c 	.word	0x019f800c
 8003c4c:	feeefffc 	.word	0xfeeefffc

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e11e      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b91      	ldr	r3, [pc, #580]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d910      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b8e      	ldr	r3, [pc, #568]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 020f 	bic.w	r2, r3, #15
 8003c7e:	498c      	ldr	r1, [pc, #560]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b8a      	ldr	r3, [pc, #552]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e106      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d073      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d129      	bne.n	8003d00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cac:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0f4      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cbc:	f000 f966 	bl	8003f8c <RCC_GetSysClockFreqFromPLLSource>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4a7c      	ldr	r2, [pc, #496]	; (8003eb8 <HAL_RCC_ClockConfig+0x268>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d93f      	bls.n	8003d4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cca:	4b7a      	ldr	r3, [pc, #488]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d033      	beq.n	8003d4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d12f      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cea:	4b72      	ldr	r3, [pc, #456]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf2:	4a70      	ldr	r2, [pc, #448]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e024      	b.n	8003d4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d08:	4b6a      	ldr	r3, [pc, #424]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0c6      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d18:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0be      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d28:	f000 f8ce 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4a61      	ldr	r2, [pc, #388]	; (8003eb8 <HAL_RCC_ClockConfig+0x268>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d909      	bls.n	8003d4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b5a      	ldr	r3, [pc, #360]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4957      	ldr	r1, [pc, #348]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd f966 	bl	800102c <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fd f962 	bl	800102c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e095      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d023      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da4:	4b43      	ldr	r3, [pc, #268]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4a42      	ldr	r2, [pc, #264]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003dbc:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dc4:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003dc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4936      	ldr	r1, [pc, #216]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b80      	cmp	r3, #128	; 0x80
 8003de4:	d105      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003de6:	4b33      	ldr	r3, [pc, #204]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d21d      	bcs.n	8003e3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 020f 	bic.w	r2, r3, #15
 8003e08:	4929      	ldr	r1, [pc, #164]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e10:	f7fd f90c 	bl	800102c <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fd f908 	bl	800102c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e03b      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b20      	ldr	r3, [pc, #128]	; (8003eb0 <HAL_RCC_ClockConfig+0x260>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d1ed      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4917      	ldr	r1, [pc, #92]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	490f      	ldr	r1, [pc, #60]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e7a:	f000 f825 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_ClockConfig+0x264>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	490c      	ldr	r1, [pc, #48]	; (8003ebc <HAL_RCC_ClockConfig+0x26c>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_RCC_ClockConfig+0x270>)
 8003e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x274>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd f878 	bl	8000f94 <HAL_InitTick>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40022000 	.word	0x40022000
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	04c4b400 	.word	0x04c4b400
 8003ebc:	0800ae48 	.word	0x0800ae48
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	20000004 	.word	0x20000004

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ece:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eda:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	e047      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d102      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eec:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e03e      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ef2:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d136      	bne.n	8003f6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003efe:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	3301      	adds	r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f26:	68d2      	ldr	r2, [r2, #12]
 8003f28:	0a12      	lsrs	r2, r2, #8
 8003f2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	617b      	str	r3, [r7, #20]
      break;
 8003f34:	e00c      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	4a10      	ldr	r2, [pc, #64]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f40:	68d2      	ldr	r2, [r2, #12]
 8003f42:	0a12      	lsrs	r2, r2, #8
 8003f44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
      break;
 8003f4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0e5b      	lsrs	r3, r3, #25
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e001      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f70:	693b      	ldr	r3, [r7, #16]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	02dc6c00 	.word	0x02dc6c00

08003f8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d10c      	bne.n	8003fca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb0:	4a17      	ldr	r2, [pc, #92]	; (8004010 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fba:	68d2      	ldr	r2, [r2, #12]
 8003fbc:	0a12      	lsrs	r2, r2, #8
 8003fbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	617b      	str	r3, [r7, #20]
    break;
 8003fc8:	e00c      	b.n	8003fe4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	4a0e      	ldr	r2, [pc, #56]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	0a12      	lsrs	r2, r2, #8
 8003fd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    break;
 8003fe2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0e5b      	lsrs	r3, r3, #25
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ffe:	687b      	ldr	r3, [r7, #4]
}
 8004000:	4618      	mov	r0, r3
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40021000 	.word	0x40021000
 8004010:	02dc6c00 	.word	0x02dc6c00
 8004014:	00f42400 	.word	0x00f42400

08004018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004020:	2300      	movs	r3, #0
 8004022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004024:	2300      	movs	r3, #0
 8004026:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8098 	beq.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b40      	ldr	r3, [pc, #256]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004050:	6593      	str	r3, [r2, #88]	; 0x58
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405e:	2301      	movs	r3, #1
 8004060:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004062:	4b3a      	ldr	r3, [pc, #232]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a39      	ldr	r2, [pc, #228]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800406e:	f7fc ffdd 	bl	800102c <HAL_GetTick>
 8004072:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004074:	e009      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fc ffd9 	bl	800102c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d902      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	74fb      	strb	r3, [r7, #19]
        break;
 8004088:	e005      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ef      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d159      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800409c:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01e      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d019      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040b8:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fc ff99 	bl	800102c <HAL_GetTick>
 80040fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fc:	e00b      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fe:	f7fc ff95 	bl	800102c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	f241 3288 	movw	r2, #5000	; 0x1388
 800410c:	4293      	cmp	r3, r2
 800410e:	d902      	bls.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	74fb      	strb	r3, [r7, #19]
            break;
 8004114:	e006      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ec      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004140:	e008      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	74bb      	strb	r3, [r7, #18]
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004148:	40021000 	.word	0x40021000
 800414c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004154:	7c7b      	ldrb	r3, [r7, #17]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4ba7      	ldr	r3, [pc, #668]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	4aa6      	ldr	r2, [pc, #664]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004172:	4ba1      	ldr	r3, [pc, #644]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f023 0203 	bic.w	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	499d      	ldr	r1, [pc, #628]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004194:	4b98      	ldr	r3, [pc, #608]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 020c 	bic.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4995      	ldr	r1, [pc, #596]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b6:	4b90      	ldr	r3, [pc, #576]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	498c      	ldr	r1, [pc, #560]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041d8:	4b87      	ldr	r3, [pc, #540]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4984      	ldr	r1, [pc, #528]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041fa:	4b7f      	ldr	r3, [pc, #508]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	497b      	ldr	r1, [pc, #492]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800421c:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4973      	ldr	r1, [pc, #460]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423e:	4b6e      	ldr	r3, [pc, #440]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	496a      	ldr	r1, [pc, #424]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004260:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4962      	ldr	r1, [pc, #392]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004282:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	4959      	ldr	r1, [pc, #356]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042a4:	4b54      	ldr	r3, [pc, #336]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042aa:	f023 0203 	bic.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	4951      	ldr	r1, [pc, #324]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c6:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4948      	ldr	r1, [pc, #288]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	4940      	ldr	r1, [pc, #256]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004320:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	4932      	ldr	r1, [pc, #200]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433e:	d105      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004340:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800434a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	4924      	ldr	r1, [pc, #144]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004382:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d015      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004390:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	4916      	ldr	r1, [pc, #88]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ae:	d105      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d019      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4908      	ldr	r1, [pc, #32]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e6:	d109      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a02      	ldr	r2, [pc, #8]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f2:	60d3      	str	r3, [r2, #12]
 80043f4:	e002      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d015      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	4926      	ldr	r1, [pc, #152]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004426:	d105      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800442e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004432:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800444e:	4918      	ldr	r1, [pc, #96]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d105      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800447e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004486:	490a      	ldr	r1, [pc, #40]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e09d      	b.n	8004602 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d6:	d009      	beq.n	80044ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	61da      	str	r2, [r3, #28]
 80044de:	e005      	b.n	80044ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fb9e 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004522:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800452c:	d902      	bls.n	8004534 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e002      	b.n	800453a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004538:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004542:	d007      	beq.n	8004554 <HAL_SPI_Init+0xa0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	ea42 0103 	orr.w	r1, r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	f003 0204 	and.w	r2, r3, #4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045d0:	ea42 0103 	orr.w	r1, r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800460c:	b480      	push	{r7}
 800460e:	b09d      	sub	sp, #116	; 0x74
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	78db      	ldrb	r3, [r3, #3]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d81f      	bhi.n	800467e <USB_ActivateEndpoint+0x72>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <USB_ActivateEndpoint+0x38>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004655 	.word	0x08004655
 8004648:	08004671 	.word	0x08004671
 800464c:	08004687 	.word	0x08004687
 8004650:	08004663 	.word	0x08004663
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004654:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004660:	e012      	b.n	8004688 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004662:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004666:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800466a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800466e:	e00b      	b.n	8004688 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004670:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004678:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800467c:	e004      	b.n	8004688 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004684:	e000      	b.n	8004688 <USB_ActivateEndpoint+0x7c>
      break;
 8004686:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	b21a      	sxth	r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	4313      	orrs	r3, r2
 80046cc:	b21b      	sxth	r3, r3
 80046ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	7b1b      	ldrb	r3, [r3, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 8178 	bne.w	80049ee <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	785b      	ldrb	r3, [r3, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8084 	beq.w	8004810 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004712:	b29b      	uxth	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	4413      	add	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	00da      	lsls	r2, r3, #3
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	88db      	ldrh	r3, [r3, #6]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	b29b      	uxth	r3, r3
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	827b      	strh	r3, [r7, #18]
 800474a:	8a7b      	ldrh	r3, [r7, #18]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01b      	beq.n	800478c <USB_ActivateEndpoint+0x180>
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	823b      	strh	r3, [r7, #16]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	8a3b      	ldrh	r3, [r7, #16]
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	78db      	ldrb	r3, [r3, #3]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d020      	beq.n	80047d6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047aa:	81bb      	strh	r3, [r7, #12]
 80047ac:	89bb      	ldrh	r3, [r7, #12]
 80047ae:	f083 0320 	eor.w	r3, r3, #32
 80047b2:	81bb      	strh	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	89bb      	ldrh	r3, [r7, #12]
 80047c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	8013      	strh	r3, [r2, #0]
 80047d4:	e2d5      	b.n	8004d82 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ec:	81fb      	strh	r3, [r7, #14]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	89fb      	ldrh	r3, [r7, #14]
 80047fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480a:	b29b      	uxth	r3, r3
 800480c:	8013      	strh	r3, [r2, #0]
 800480e:	e2b8      	b.n	8004d82 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	4413      	add	r3, r2
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	00da      	lsls	r2, r3, #3
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	4413      	add	r3, r2
 800482e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	88db      	ldrh	r3, [r3, #6]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	4413      	add	r3, r2
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	00da      	lsls	r2, r3, #3
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	4413      	add	r3, r2
 8004862:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	b29b      	uxth	r3, r3
 800486e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004872:	b29a      	uxth	r2, r3
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b3e      	cmp	r3, #62	; 0x3e
 800487e:	d91d      	bls.n	80048bc <USB_ActivateEndpoint+0x2b0>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	66bb      	str	r3, [r7, #104]	; 0x68
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <USB_ActivateEndpoint+0x28e>
 8004894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004896:	3b01      	subs	r3, #1
 8004898:	66bb      	str	r3, [r7, #104]	; 0x68
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e026      	b.n	800490a <USB_ActivateEndpoint+0x2fe>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <USB_ActivateEndpoint+0x2ce>
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	e017      	b.n	800490a <USB_ActivateEndpoint+0x2fe>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <USB_ActivateEndpoint+0x2e8>
 80048ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f0:	3301      	adds	r3, #1
 80048f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	b29b      	uxth	r3, r3
 8004902:	4313      	orrs	r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	847b      	strh	r3, [r7, #34]	; 0x22
 8004918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800491a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01b      	beq.n	800495a <USB_ActivateEndpoint+0x34e>
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	843b      	strh	r3, [r7, #32]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	441a      	add	r2, r3
 8004944:	8c3b      	ldrh	r3, [r7, #32]
 8004946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800494a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004956:	b29b      	uxth	r3, r3
 8004958:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d124      	bne.n	80049ac <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	83bb      	strh	r3, [r7, #28]
 800497a:	8bbb      	ldrh	r3, [r7, #28]
 800497c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004980:	83bb      	strh	r3, [r7, #28]
 8004982:	8bbb      	ldrh	r3, [r7, #28]
 8004984:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004988:	83bb      	strh	r3, [r7, #28]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	441a      	add	r2, r3
 8004994:	8bbb      	ldrh	r3, [r7, #28]
 8004996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]
 80049aa:	e1ea      	b.n	8004d82 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c2:	83fb      	strh	r3, [r7, #30]
 80049c4:	8bfb      	ldrh	r3, [r7, #30]
 80049c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049ca:	83fb      	strh	r3, [r7, #30]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	8bfb      	ldrh	r3, [r7, #30]
 80049d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	8013      	strh	r3, [r2, #0]
 80049ec:	e1c9      	b.n	8004d82 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	78db      	ldrb	r3, [r3, #3]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d11e      	bne.n	8004a34 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]
 8004a32:	e01d      	b.n	8004a70 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	4413      	add	r3, r2
 8004a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	00da      	lsls	r2, r3, #3
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	891b      	ldrh	r3, [r3, #8]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab4:	4413      	add	r3, r2
 8004ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	00da      	lsls	r2, r3, #3
 8004abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	895b      	ldrh	r3, [r3, #10]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 8093 	bne.w	8004c08 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004af2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <USB_ActivateEndpoint+0x52a>
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01b      	beq.n	8004b86 <USB_ActivateEndpoint+0x57a>
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ba0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ba4:	873b      	strh	r3, [r7, #56]	; 0x38
 8004ba6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ba8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bac:	873b      	strh	r3, [r7, #56]	; 0x38
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
 8004c06:	e0bc      	b.n	8004d82 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01d      	beq.n	8004c60 <USB_ActivateEndpoint+0x654>
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01d      	beq.n	8004cb8 <USB_ActivateEndpoint+0x6ac>
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	78db      	ldrb	r3, [r3, #3]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d024      	beq.n	8004d0a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cde:	f083 0320 	eor.w	r3, r3, #32
 8004ce2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	441a      	add	r2, r3
 8004cf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]
 8004d08:	e01d      	b.n	8004d46 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	441a      	add	r2, r3
 8004d6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3774      	adds	r7, #116	; 0x74
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop

08004d94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b0c2      	sub	sp, #264	; 0x108
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004da2:	6018      	str	r0, [r3, #0]
 8004da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	785b      	ldrb	r3, [r3, #1]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	f040 86b7 	bne.w	8005b2e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d908      	bls.n	8004dee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dec:	e007      	b.n	8004dfe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	7b1b      	ldrb	r3, [r3, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13a      	bne.n	8004e84 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6959      	ldr	r1, [r3, #20]
 8004e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	88da      	ldrh	r2, [r3, #6]
 8004e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e34:	6800      	ldr	r0, [r0, #0]
 8004e36:	f001 fc81 	bl	800673c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	00da      	lsls	r2, r3, #3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	f000 be1f 	b.w	8005ac2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	78db      	ldrb	r3, [r3, #3]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	f040 8462 	bne.w	800575a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	f240 83df 	bls.w	8005672 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f20:	1ad2      	subs	r2, r2, r3
 8004f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 81c7 	beq.w	80052e4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30
 8004f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d177      	bne.n	8005062 <USB_EPStartXfer+0x2ce>
 8004f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	4413      	add	r3, r2
 8004f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	00da      	lsls	r2, r3, #3
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc4:	d921      	bls.n	800500a <USB_EPStartXfer+0x276>
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <USB_EPStartXfer+0x252>
 8004fdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005002:	b29a      	uxth	r2, r3
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	801a      	strh	r2, [r3, #0]
 8005008:	e050      	b.n	80050ac <USB_EPStartXfer+0x318>
 800500a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <USB_EPStartXfer+0x294>
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005020:	b29a      	uxth	r2, r3
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	e041      	b.n	80050ac <USB_EPStartXfer+0x318>
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <USB_EPStartXfer+0x2b4>
 800503e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005042:	3301      	adds	r3, #1
 8005044:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29a      	uxth	r2, r3
 800504e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005052:	b29b      	uxth	r3, r3
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	b29b      	uxth	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b29a      	uxth	r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e024      	b.n	80050ac <USB_EPStartXfer+0x318>
 8005062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	785b      	ldrb	r3, [r3, #1]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d11c      	bne.n	80050ac <USB_EPStartXfer+0x318>
 8005072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005080:	b29b      	uxth	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	4413      	add	r3, r2
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
 800508a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	00da      	lsls	r2, r3, #3
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	4413      	add	r3, r2
 800509c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	895b      	ldrh	r3, [r3, #10]
 80050b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6959      	ldr	r1, [r3, #20]
 80050c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050da:	6800      	ldr	r0, [r0, #0]
 80050dc:	f001 fb2e 	bl	800673c <USB_WritePMA>
            ep->xfer_buff += len;
 80050e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f0:	441a      	add	r2, r3
 80050f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6a1a      	ldr	r2, [r3, #32]
 800510a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d90f      	bls.n	800513a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a1a      	ldr	r2, [r3, #32]
 8005126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005130:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	621a      	str	r2, [r3, #32]
 8005138:	e00e      	b.n	8005158 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800514a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d177      	bne.n	8005258 <USB_EPStartXfer+0x4c4>
 8005168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	00da      	lsls	r2, r3, #3
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	4413      	add	r3, r2
 800519e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ba:	d921      	bls.n	8005200 <USB_EPStartXfer+0x46c>
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d104      	bne.n	80051dc <USB_EPStartXfer+0x448>
 80051d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051d6:	3b01      	subs	r3, #1
 80051d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	029b      	lsls	r3, r3, #10
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	e056      	b.n	80052ae <USB_EPStartXfer+0x51a>
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <USB_EPStartXfer+0x48a>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005216:	b29a      	uxth	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	e047      	b.n	80052ae <USB_EPStartXfer+0x51a>
 800521e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <USB_EPStartXfer+0x4aa>
 8005234:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005238:	3301      	adds	r3, #1
 800523a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29a      	uxth	r2, r3
 8005244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005248:	b29b      	uxth	r3, r3
 800524a:	029b      	lsls	r3, r3, #10
 800524c:	b29b      	uxth	r3, r3
 800524e:	4313      	orrs	r3, r2
 8005250:	b29a      	uxth	r2, r3
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e02a      	b.n	80052ae <USB_EPStartXfer+0x51a>
 8005258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d122      	bne.n	80052ae <USB_EPStartXfer+0x51a>
 8005268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	4413      	add	r3, r2
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	4413      	add	r3, r2
 800529e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	891b      	ldrh	r3, [r3, #8]
 80052ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6959      	ldr	r1, [r3, #20]
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f001 fa2d 	bl	800673c <USB_WritePMA>
 80052e2:	e3ee      	b.n	8005ac2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d177      	bne.n	80053e4 <USB_EPStartXfer+0x650>
 80052f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	4413      	add	r3, r2
 8005316:	64bb      	str	r3, [r7, #72]	; 0x48
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	00da      	lsls	r2, r3, #3
 8005326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005328:	4413      	add	r3, r2
 800532a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
 8005330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533a:	b29a      	uxth	r2, r3
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005344:	2b3e      	cmp	r3, #62	; 0x3e
 8005346:	d921      	bls.n	800538c <USB_EPStartXfer+0x5f8>
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <USB_EPStartXfer+0x5d4>
 800535e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005362:	3b01      	subs	r3, #1
 8005364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29a      	uxth	r2, r3
 800536e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005372:	b29b      	uxth	r3, r3
 8005374:	029b      	lsls	r3, r3, #10
 8005376:	b29b      	uxth	r3, r3
 8005378:	4313      	orrs	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005384:	b29a      	uxth	r2, r3
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e056      	b.n	800543a <USB_EPStartXfer+0x6a6>
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <USB_EPStartXfer+0x616>
 8005394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e047      	b.n	800543a <USB_EPStartXfer+0x6a6>
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <USB_EPStartXfer+0x636>
 80053c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	029b      	lsls	r3, r3, #10
 80053d8:	b29b      	uxth	r3, r3
 80053da:	4313      	orrs	r3, r2
 80053dc:	b29a      	uxth	r2, r3
 80053de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	e02a      	b.n	800543a <USB_EPStartXfer+0x6a6>
 80053e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	785b      	ldrb	r3, [r3, #1]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d122      	bne.n	800543a <USB_EPStartXfer+0x6a6>
 80053f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	653b      	str	r3, [r7, #80]	; 0x50
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005414:	4413      	add	r3, r2
 8005416:	653b      	str	r3, [r7, #80]	; 0x50
 8005418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	00da      	lsls	r2, r3, #3
 8005426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005428:	4413      	add	r3, r2
 800542a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	b29a      	uxth	r2, r3
 8005436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800543a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800543e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	891b      	ldrh	r3, [r3, #8]
 8005446:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800544a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6959      	ldr	r1, [r3, #20]
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	b29b      	uxth	r3, r3
 800545c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005460:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005464:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005468:	6800      	ldr	r0, [r0, #0]
 800546a:	f001 f967 	bl	800673c <USB_WritePMA>
            ep->xfer_buff += len;
 800546e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547e:	441a      	add	r2, r3
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800548c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d90f      	bls.n	80054c8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80054a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a1a      	ldr	r2, [r3, #32]
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b8:	1ad2      	subs	r2, r2, r3
 80054ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	621a      	str	r2, [r3, #32]
 80054c6:	e00e      	b.n	80054e6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80054c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2200      	movs	r2, #0
 80054e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	643b      	str	r3, [r7, #64]	; 0x40
 80054f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d177      	bne.n	80055f2 <USB_EPStartXfer+0x85e>
 8005502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	63bb      	str	r3, [r7, #56]	; 0x38
 800550e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551c:	b29b      	uxth	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	4413      	add	r3, r2
 8005524:	63bb      	str	r3, [r7, #56]	; 0x38
 8005526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00da      	lsls	r2, r3, #3
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	4413      	add	r3, r2
 8005538:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
 800553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005548:	b29a      	uxth	r2, r3
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	2b3e      	cmp	r3, #62	; 0x3e
 8005554:	d921      	bls.n	800559a <USB_EPStartXfer+0x806>
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <USB_EPStartXfer+0x7e2>
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	3b01      	subs	r3, #1
 8005572:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29a      	uxth	r2, r3
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	b29b      	uxth	r3, r3
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	b29b      	uxth	r3, r3
 8005586:	4313      	orrs	r3, r2
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005592:	b29a      	uxth	r2, r3
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e050      	b.n	800563c <USB_EPStartXfer+0x8a8>
 800559a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <USB_EPStartXfer+0x824>
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	e041      	b.n	800563c <USB_EPStartXfer+0x8a8>
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <USB_EPStartXfer+0x844>
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	3301      	adds	r3, #1
 80055d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	029b      	lsls	r3, r3, #10
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4313      	orrs	r3, r2
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	e024      	b.n	800563c <USB_EPStartXfer+0x8a8>
 80055f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d11c      	bne.n	800563c <USB_EPStartXfer+0x8a8>
 8005602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005610:	b29b      	uxth	r3, r3
 8005612:	461a      	mov	r2, r3
 8005614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005616:	4413      	add	r3, r2
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
 800561a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	00da      	lsls	r2, r3, #3
 8005628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562a:	4413      	add	r3, r2
 800562c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005636:	b29a      	uxth	r2, r3
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800563c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	895b      	ldrh	r3, [r3, #10]
 8005648:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6959      	ldr	r1, [r3, #20]
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565c:	b29b      	uxth	r3, r3
 800565e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005662:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005666:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	f001 f866 	bl	800673c <USB_WritePMA>
 8005670:	e227      	b.n	8005ac2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fe:	4413      	add	r3, r2
 8005700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	00da      	lsls	r2, r3, #3
 8005710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005712:	4413      	add	r3, r2
 8005714:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005718:	65bb      	str	r3, [r7, #88]	; 0x58
 800571a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571e:	b29a      	uxth	r2, r3
 8005720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005722:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	891b      	ldrh	r3, [r3, #8]
 8005730:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6959      	ldr	r1, [r3, #20]
 8005740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005744:	b29b      	uxth	r3, r3
 8005746:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800574a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800574e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	f000 fff2 	bl	800673c <USB_WritePMA>
 8005758:	e1b3      	b.n	8005ac2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800575a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1a      	ldr	r2, [r3, #32]
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576a:	1ad2      	subs	r2, r2, r3
 800576c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 80c6 	beq.w	800592c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	673b      	str	r3, [r7, #112]	; 0x70
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d177      	bne.n	80058ac <USB_EPStartXfer+0xb18>
 80057bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057dc:	4413      	add	r3, r2
 80057de:	66bb      	str	r3, [r7, #104]	; 0x68
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	00da      	lsls	r2, r3, #3
 80057ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057f0:	4413      	add	r3, r2
 80057f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057f6:	667b      	str	r3, [r7, #100]	; 0x64
 80057f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005802:	b29a      	uxth	r2, r3
 8005804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580c:	2b3e      	cmp	r3, #62	; 0x3e
 800580e:	d921      	bls.n	8005854 <USB_EPStartXfer+0xac0>
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <USB_EPStartXfer+0xa9c>
 8005826:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800582a:	3b01      	subs	r3, #1
 800582c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29a      	uxth	r2, r3
 8005836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800583a:	b29b      	uxth	r3, r3
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	b29b      	uxth	r3, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	b29b      	uxth	r3, r3
 8005844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584c:	b29a      	uxth	r2, r3
 800584e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e050      	b.n	80058f6 <USB_EPStartXfer+0xb62>
 8005854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <USB_EPStartXfer+0xade>
 800585c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586a:	b29a      	uxth	r2, r3
 800586c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	e041      	b.n	80058f6 <USB_EPStartXfer+0xb62>
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d004      	beq.n	8005892 <USB_EPStartXfer+0xafe>
 8005888:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800588c:	3301      	adds	r3, #1
 800588e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	b29a      	uxth	r2, r3
 8005898:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800589c:	b29b      	uxth	r3, r3
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e024      	b.n	80058f6 <USB_EPStartXfer+0xb62>
 80058ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d11c      	bne.n	80058f6 <USB_EPStartXfer+0xb62>
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058d0:	4413      	add	r3, r2
 80058d2:	673b      	str	r3, [r7, #112]	; 0x70
 80058d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00da      	lsls	r2, r3, #3
 80058e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	895b      	ldrh	r3, [r3, #10]
 8005902:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6959      	ldr	r1, [r3, #20]
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005916:	b29b      	uxth	r3, r3
 8005918:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800591c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005920:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005924:	6800      	ldr	r0, [r0, #0]
 8005926:	f000 ff09 	bl	800673c <USB_WritePMA>
 800592a:	e0ca      	b.n	8005ac2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800592c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d177      	bne.n	8005a2c <USB_EPStartXfer+0xc98>
 800593c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005956:	b29b      	uxth	r3, r3
 8005958:	461a      	mov	r2, r3
 800595a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800595c:	4413      	add	r3, r2
 800595e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	00da      	lsls	r2, r3, #3
 800596e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005970:	4413      	add	r3, r2
 8005972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005976:	67bb      	str	r3, [r7, #120]	; 0x78
 8005978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005982:	b29a      	uxth	r2, r3
 8005984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005986:	801a      	strh	r2, [r3, #0]
 8005988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598c:	2b3e      	cmp	r3, #62	; 0x3e
 800598e:	d921      	bls.n	80059d4 <USB_EPStartXfer+0xc40>
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <USB_EPStartXfer+0xc1c>
 80059a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29b      	uxth	r3, r3
 80059c0:	4313      	orrs	r3, r2
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e05c      	b.n	8005a8e <USB_EPStartXfer+0xcfa>
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <USB_EPStartXfer+0xc5e>
 80059dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e04d      	b.n	8005a8e <USB_EPStartXfer+0xcfa>
 80059f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <USB_EPStartXfer+0xc7e>
 8005a08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4313      	orrs	r3, r2
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e030      	b.n	8005a8e <USB_EPStartXfer+0xcfa>
 8005a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d128      	bne.n	8005a8e <USB_EPStartXfer+0xcfa>
 8005a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a60:	4413      	add	r3, r2
 8005a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00da      	lsls	r2, r3, #3
 8005a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a78:	4413      	add	r3, r2
 8005a7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	891b      	ldrh	r3, [r3, #8]
 8005a9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6959      	ldr	r1, [r3, #20]
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ab4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ab8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f000 fe3d 	bl	800673c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	817b      	strh	r3, [r7, #10]
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	f083 0310 	eor.w	r3, r3, #16
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	897b      	ldrh	r3, [r7, #10]
 8005af4:	f083 0320 	eor.w	r3, r3, #32
 8005af8:	817b      	strh	r3, [r7, #10]
 8005afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
 8005b2a:	f000 bcde 	b.w	80064ea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	7b1b      	ldrb	r3, [r3, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 80bb 	bne.w	8005cb6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d917      	bls.n	8005b8c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699a      	ldr	r2, [r3, #24]
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7c:	1ad2      	subs	r2, r2, r3
 8005b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	619a      	str	r2, [r3, #24]
 8005b8a:	e00e      	b.n	8005baa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bce:	4413      	add	r3, r2
 8005bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	00da      	lsls	r2, r3, #3
 8005be2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005be6:	4413      	add	r3, r2
 8005be8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c08:	2b3e      	cmp	r3, #62	; 0x3e
 8005c0a:	d924      	bls.n	8005c56 <USB_EPStartXfer+0xec2>
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <USB_EPStartXfer+0xe98>
 8005c22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c26:	3b01      	subs	r3, #1
 8005c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	029b      	lsls	r3, r3, #10
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	f000 bc10 	b.w	8006476 <USB_EPStartXfer+0x16e2>
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10c      	bne.n	8005c78 <USB_EPStartXfer+0xee4>
 8005c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	e3fe      	b.n	8006476 <USB_EPStartXfer+0x16e2>
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7c:	085b      	lsrs	r3, r3, #1
 8005c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <USB_EPStartXfer+0xf04>
 8005c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	029b      	lsls	r3, r3, #10
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	4313      	orrs	r3, r2
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e3df      	b.n	8006476 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	78db      	ldrb	r3, [r3, #3]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	f040 8218 	bne.w	80060f8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 809d 	bne.w	8005e14 <USB_EPStartXfer+0x1080>
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	00da      	lsls	r2, r3, #3
 8005d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b3e      	cmp	r3, #62	; 0x3e
 8005d42:	d92b      	bls.n	8005d9c <USB_EPStartXfer+0x1008>
 8005d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <USB_EPStartXfer+0xfe0>
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e070      	b.n	8005e7e <USB_EPStartXfer+0x10ea>
 8005d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <USB_EPStartXfer+0x1032>
 8005dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e05b      	b.n	8005e7e <USB_EPStartXfer+0x10ea>
 8005dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <USB_EPStartXfer+0x1062>
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e034      	b.n	8005e7e <USB_EPStartXfer+0x10ea>
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d12c      	bne.n	8005e7e <USB_EPStartXfer+0x10ea>
 8005e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e48:	4413      	add	r3, r2
 8005e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	00da      	lsls	r2, r3, #3
 8005e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e60:	4413      	add	r3, r2
 8005e62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 809d 	bne.w	8005fd8 <USB_EPStartXfer+0x1244>
 8005e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	00da      	lsls	r2, r3, #3
 8005ed6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b3e      	cmp	r3, #62	; 0x3e
 8005f06:	d92b      	bls.n	8005f60 <USB_EPStartXfer+0x11cc>
 8005f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <USB_EPStartXfer+0x11a4>
 8005f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f32:	3b01      	subs	r3, #1
 8005f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	e069      	b.n	8006034 <USB_EPStartXfer+0x12a0>
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10c      	bne.n	8005f8a <USB_EPStartXfer+0x11f6>
 8005f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e054      	b.n	8006034 <USB_EPStartXfer+0x12a0>
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <USB_EPStartXfer+0x1226>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	e02d      	b.n	8006034 <USB_EPStartXfer+0x12a0>
 8005fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d125      	bne.n	8006034 <USB_EPStartXfer+0x12a0>
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005ffe:	4413      	add	r3, r2
 8006000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	00da      	lsls	r2, r3, #3
 8006012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006016:	4413      	add	r3, r2
 8006018:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800601c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006032:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8218 	beq.w	8006476 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006066:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800606a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <USB_EPStartXfer+0x12ea>
 8006072:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10d      	bne.n	800609a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800607e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006086:	2b00      	cmp	r3, #0
 8006088:	f040 81f5 	bne.w	8006476 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800608c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	f040 81ee 	bne.w	8006476 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800609a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	441a      	add	r2, r3
 80060de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]
 80060f6:	e1be      	b.n	8006476 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	78db      	ldrb	r3, [r3, #3]
 8006104:	2b01      	cmp	r3, #1
 8006106:	f040 81b4 	bne.w	8006472 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800610a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	d917      	bls.n	8006156 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	619a      	str	r2, [r3, #24]
 8006154:	e00e      	b.n	8006174 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2200      	movs	r2, #0
 8006172:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 8085 	bne.w	8006290 <USB_EPStartXfer+0x14fc>
 8006186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061aa:	4413      	add	r3, r2
 80061ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	00da      	lsls	r2, r3, #3
 80061be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061c2:	4413      	add	r3, r2
 80061c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	2b3e      	cmp	r3, #62	; 0x3e
 80061e6:	d923      	bls.n	8006230 <USB_EPStartXfer+0x149c>
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <USB_EPStartXfer+0x1474>
 80061fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006202:	3b01      	subs	r3, #1
 8006204:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006208:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006214:	b29b      	uxth	r3, r3
 8006216:	029b      	lsls	r3, r3, #10
 8006218:	b29b      	uxth	r3, r3
 800621a:	4313      	orrs	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	e060      	b.n	80062f2 <USB_EPStartXfer+0x155e>
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <USB_EPStartXfer+0x14be>
 8006238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006248:	b29a      	uxth	r2, r3
 800624a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e04f      	b.n	80062f2 <USB_EPStartXfer+0x155e>
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <USB_EPStartXfer+0x14de>
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626c:	3301      	adds	r3, #1
 800626e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800627e:	b29b      	uxth	r3, r3
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	b29b      	uxth	r3, r3
 8006284:	4313      	orrs	r3, r2
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e030      	b.n	80062f2 <USB_EPStartXfer+0x155e>
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d128      	bne.n	80062f2 <USB_EPStartXfer+0x155e>
 80062a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062bc:	b29b      	uxth	r3, r3
 80062be:	461a      	mov	r2, r3
 80062c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c4:	4413      	add	r3, r2
 80062c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	00da      	lsls	r2, r3, #3
 80062d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062dc:	4413      	add	r3, r2
 80062de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 8085 	bne.w	800641c <USB_EPStartXfer+0x1688>
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006336:	4413      	add	r3, r2
 8006338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	00da      	lsls	r2, r3, #3
 800634a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800634e:	4413      	add	r3, r2
 8006350:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006370:	2b3e      	cmp	r3, #62	; 0x3e
 8006372:	d923      	bls.n	80063bc <USB_EPStartXfer+0x1628>
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <USB_EPStartXfer+0x1600>
 800638a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800638e:	3b01      	subs	r3, #1
 8006390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	029b      	lsls	r3, r3, #10
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	4313      	orrs	r3, r2
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e05c      	b.n	8006476 <USB_EPStartXfer+0x16e2>
 80063bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10c      	bne.n	80063de <USB_EPStartXfer+0x164a>
 80063c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e04b      	b.n	8006476 <USB_EPStartXfer+0x16e2>
 80063de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e2:	085b      	lsrs	r3, r3, #1
 80063e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <USB_EPStartXfer+0x166a>
 80063f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063f8:	3301      	adds	r3, #1
 80063fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800640a:	b29b      	uxth	r3, r3
 800640c:	029b      	lsls	r3, r3, #10
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e02c      	b.n	8006476 <USB_EPStartXfer+0x16e2>
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d124      	bne.n	8006476 <USB_EPStartXfer+0x16e2>
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643a:	b29b      	uxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006442:	4413      	add	r3, r2
 8006444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	00da      	lsls	r2, r3, #3
 8006456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800645a:	4413      	add	r3, r2
 800645c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e001      	b.n	8006476 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e03a      	b.n	80064ec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651e:	81bb      	strh	r3, [r7, #12]
 8006520:	89bb      	ldrh	r3, [r7, #12]
 8006522:	f083 0310 	eor.w	r3, r3, #16
 8006526:	81bb      	strh	r3, [r7, #12]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	441a      	add	r2, r3
 8006532:	89bb      	ldrh	r3, [r7, #12]
 8006534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]
 8006548:	e01f      	b.n	800658a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006560:	81fb      	strh	r3, [r7, #14]
 8006562:	89fb      	ldrh	r3, [r7, #14]
 8006564:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006568:	81fb      	strh	r3, [r7, #14]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	441a      	add	r2, r3
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800657a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006586:	b29b      	uxth	r3, r3
 8006588:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	7b1b      	ldrb	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f040 809d 	bne.w	80066e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d04c      	beq.n	800664e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	823b      	strh	r3, [r7, #16]
 80065c2:	8a3b      	ldrh	r3, [r7, #16]
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <USB_EPClearStall+0x6c>
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	81fb      	strh	r3, [r7, #14]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	89fb      	ldrh	r3, [r7, #14]
 80065f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006600:	b29b      	uxth	r3, r3
 8006602:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	78db      	ldrb	r3, [r3, #3]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d06c      	beq.n	80066e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	881b      	ldrh	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006622:	81bb      	strh	r3, [r7, #12]
 8006624:	89bb      	ldrh	r3, [r7, #12]
 8006626:	f083 0320 	eor.w	r3, r3, #32
 800662a:	81bb      	strh	r3, [r7, #12]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	441a      	add	r2, r3
 8006636:	89bb      	ldrh	r3, [r7, #12]
 8006638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800663c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006648:	b29b      	uxth	r3, r3
 800664a:	8013      	strh	r3, [r2, #0]
 800664c:	e04b      	b.n	80066e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	82fb      	strh	r3, [r7, #22]
 800665c:	8afb      	ldrh	r3, [r7, #22]
 800665e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d01b      	beq.n	800669e <USB_EPClearStall+0x106>
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	82bb      	strh	r3, [r7, #20]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	8abb      	ldrh	r3, [r7, #20]
 800668a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006692:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	827b      	strh	r3, [r7, #18]
 80066b6:	8a7b      	ldrh	r3, [r7, #18]
 80066b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066bc:	827b      	strh	r3, [r7, #18]
 80066be:	8a7b      	ldrh	r3, [r7, #18]
 80066c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066c4:	827b      	strh	r3, [r7, #18]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	8a7b      	ldrh	r3, [r7, #18]
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	371c      	adds	r7, #28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2280      	movs	r2, #128	; 0x80
 800670a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800672a:	b29b      	uxth	r3, r3
 800672c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800672e:	68fb      	ldr	r3, [r7, #12]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800673c:	b480      	push	{r7}
 800673e:	b08b      	sub	sp, #44	; 0x2c
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	460b      	mov	r3, r1
 800674c:	80fb      	strh	r3, [r7, #6]
 800674e:	4613      	mov	r3, r2
 8006750:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006752:	88bb      	ldrh	r3, [r7, #4]
 8006754:	3301      	adds	r3, #1
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	e01b      	b.n	80067ac <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	3301      	adds	r3, #1
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	b21a      	sxth	r2, r3
 8006784:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006788:	4313      	orrs	r3, r2
 800678a:	b21b      	sxth	r3, r3
 800678c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	8a7a      	ldrh	r2, [r7, #18]
 8006792:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	3302      	adds	r3, #2
 8006798:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	3301      	adds	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	3301      	adds	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	3b01      	subs	r3, #1
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e0      	bne.n	8006774 <USB_WritePMA+0x38>
  }
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	372c      	adds	r7, #44	; 0x2c
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b08b      	sub	sp, #44	; 0x2c
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	460b      	mov	r3, r1
 80067d0:	80fb      	strh	r3, [r7, #6]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067d6:	88bb      	ldrh	r3, [r7, #4]
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	b29b      	uxth	r3, r3
 80067dc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
 80067f6:	e018      	b.n	800682a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	3302      	adds	r3, #2
 8006804:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3301      	adds	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	b2da      	uxtb	r2, r3
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3301      	adds	r3, #1
 8006822:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	3b01      	subs	r3, #1
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e3      	bne.n	80067f8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006830:	88bb      	ldrh	r3, [r7, #4]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	701a      	strb	r2, [r3, #0]
  }
}
 800684c:	bf00      	nop
 800684e:	372c      	adds	r7, #44	; 0x2c
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800687a:	2303      	movs	r3, #3
 800687c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	78fa      	ldrb	r2, [r7, #3]
 8006892:	4611      	mov	r1, r2
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
 8006898:	4603      	mov	r3, r0
 800689a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	4611      	mov	r1, r2
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	4798      	blx	r3
  }

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 ff47 	bl	800777c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068fc:	461a      	mov	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	2b02      	cmp	r3, #2
 8006910:	d01a      	beq.n	8006948 <USBD_LL_SetupStage+0x72>
 8006912:	2b02      	cmp	r3, #2
 8006914:	d822      	bhi.n	800695c <USBD_LL_SetupStage+0x86>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <USBD_LL_SetupStage+0x4a>
 800691a:	2b01      	cmp	r3, #1
 800691c:	d00a      	beq.n	8006934 <USBD_LL_SetupStage+0x5e>
 800691e:	e01d      	b.n	800695c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f9ef 	bl	8006d0c <USBD_StdDevReq>
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
      break;
 8006932:	e020      	b.n	8006976 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fa53 	bl	8006de8 <USBD_StdItfReq>
 8006942:	4603      	mov	r3, r0
 8006944:	73fb      	strb	r3, [r7, #15]
      break;
 8006946:	e016      	b.n	8006976 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fa92 	bl	8006e7a <USBD_StdEPReq>
 8006956:	4603      	mov	r3, r0
 8006958:	73fb      	strb	r3, [r7, #15]
      break;
 800695a:	e00c      	b.n	8006976 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006966:	b2db      	uxtb	r3, r3
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f003 fc04 	bl	800a178 <USBD_LL_StallEP>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	bf00      	nop
  }

  return ret;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	460b      	mov	r3, r1
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d138      	bne.n	8006a06 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800699a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d14a      	bne.n	8006a3c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d913      	bls.n	80069da <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	1ad2      	subs	r2, r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	bf28      	it	cs
 80069cc:	4613      	movcs	r3, r2
 80069ce:	461a      	mov	r2, r3
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 ff49 	bl	800786a <USBD_CtlContinueRx>
 80069d8:	e030      	b.n	8006a3c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d10b      	bne.n	80069fe <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 ff44 	bl	800788c <USBD_CtlSendStatus>
 8006a04:	e01a      	b.n	8006a3c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d114      	bne.n	8006a3c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	7afa      	ldrb	r2, [r7, #11]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	e000      	b.n	8006a3e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d16b      	bne.n	8006b32 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d156      	bne.n	8006b18 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d914      	bls.n	8006aa0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fedb 	bl	8007848 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a92:	2300      	movs	r3, #0
 8006a94:	2200      	movs	r2, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f003 fc17 	bl	800a2cc <USBD_LL_PrepareReceive>
 8006a9e:	e03b      	b.n	8006b18 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d11c      	bne.n	8006ae6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d316      	bcc.n	8006ae6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d20f      	bcs.n	8006ae6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 febc 	bl	8007848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f003 fbf4 	bl	800a2cc <USBD_LL_PrepareReceive>
 8006ae4:	e018      	b.n	8006b18 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d10b      	bne.n	8006b0a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f003 fb33 	bl	800a178 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fecd 	bl	80078b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d122      	bne.n	8006b68 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff fe98 	bl	8006858 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b30:	e01a      	b.n	8006b68 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d114      	bne.n	8006b68 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	7afa      	ldrb	r2, [r7, #11]
 8006b54:	4611      	mov	r1, r2
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	4798      	blx	r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	e000      	b.n	8006b6a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e02f      	b.n	8006c06 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6852      	ldr	r2, [r2, #4]
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	4611      	mov	r1, r2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f003 faa8 	bl	800a12c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2240      	movs	r2, #64	; 0x40
 8006be8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f003 fa9a 	bl	800a12c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2240      	movs	r2, #64	; 0x40
 8006c02:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d106      	bne.n	8006c7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e012      	b.n	8006cc6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d10b      	bne.n	8006cc4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b087      	sub	sp, #28
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006cec:	8a3b      	ldrh	r3, [r7, #16]
 8006cee:	021b      	lsls	r3, r3, #8
 8006cf0:	b21a      	sxth	r2, r3
 8006cf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006cfc:	89fb      	ldrh	r3, [r7, #14]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d22:	2b40      	cmp	r3, #64	; 0x40
 8006d24:	d005      	beq.n	8006d32 <USBD_StdDevReq+0x26>
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d853      	bhi.n	8006dd2 <USBD_StdDevReq+0xc6>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <USBD_StdDevReq+0x3a>
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	d14f      	bne.n	8006dd2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
      break;
 8006d44:	e04a      	b.n	8006ddc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b09      	cmp	r3, #9
 8006d4c:	d83b      	bhi.n	8006dc6 <USBD_StdDevReq+0xba>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <USBD_StdDevReq+0x48>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006da9 	.word	0x08006da9
 8006d58:	08006dbd 	.word	0x08006dbd
 8006d5c:	08006dc7 	.word	0x08006dc7
 8006d60:	08006db3 	.word	0x08006db3
 8006d64:	08006dc7 	.word	0x08006dc7
 8006d68:	08006d87 	.word	0x08006d87
 8006d6c:	08006d7d 	.word	0x08006d7d
 8006d70:	08006dc7 	.word	0x08006dc7
 8006d74:	08006d9f 	.word	0x08006d9f
 8006d78:	08006d91 	.word	0x08006d91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f9de 	bl	8007140 <USBD_GetDescriptor>
          break;
 8006d84:	e024      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb6d 	bl	8007468 <USBD_SetAddress>
          break;
 8006d8e:	e01f      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fbac 	bl	80074f0 <USBD_SetConfig>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006d9c:	e018      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fc4b 	bl	800763c <USBD_GetConfig>
          break;
 8006da6:	e013      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc7c 	bl	80076a8 <USBD_GetStatus>
          break;
 8006db0:	e00e      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fcab 	bl	8007710 <USBD_SetFeature>
          break;
 8006dba:	e009      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fcba 	bl	8007738 <USBD_ClrFeature>
          break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fd11 	bl	80077f0 <USBD_CtlError>
          break;
 8006dce:	bf00      	nop
      }
      break;
 8006dd0:	e004      	b.n	8006ddc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fd0b 	bl	80077f0 <USBD_CtlError>
      break;
 8006dda:	bf00      	nop
  }

  return ret;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop

08006de8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d005      	beq.n	8006e0e <USBD_StdItfReq+0x26>
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d82f      	bhi.n	8006e66 <USBD_StdItfReq+0x7e>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <USBD_StdItfReq+0x26>
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d12b      	bne.n	8006e66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d81d      	bhi.n	8006e58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	889b      	ldrh	r3, [r3, #4]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d813      	bhi.n	8006e4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	88db      	ldrh	r3, [r3, #6]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d110      	bne.n	8006e62 <USBD_StdItfReq+0x7a>
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10d      	bne.n	8006e62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fd20 	bl	800788c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e4c:	e009      	b.n	8006e62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fccd 	bl	80077f0 <USBD_CtlError>
          break;
 8006e56:	e004      	b.n	8006e62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fcc8 	bl	80077f0 <USBD_CtlError>
          break;
 8006e60:	e000      	b.n	8006e64 <USBD_StdItfReq+0x7c>
          break;
 8006e62:	bf00      	nop
      }
      break;
 8006e64:	e004      	b.n	8006e70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fcc1 	bl	80077f0 <USBD_CtlError>
      break;
 8006e6e:	bf00      	nop
  }

  return ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	889b      	ldrh	r3, [r3, #4]
 8006e8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d007      	beq.n	8006eaa <USBD_StdEPReq+0x30>
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	f200 8145 	bhi.w	800712a <USBD_StdEPReq+0x2b0>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00c      	beq.n	8006ebe <USBD_StdEPReq+0x44>
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	f040 8140 	bne.w	800712a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
      break;
 8006ebc:	e13a      	b.n	8007134 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d007      	beq.n	8006ed6 <USBD_StdEPReq+0x5c>
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	f300 8129 	bgt.w	800711e <USBD_StdEPReq+0x2a4>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d07f      	beq.n	8006fd0 <USBD_StdEPReq+0x156>
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d03c      	beq.n	8006f4e <USBD_StdEPReq+0xd4>
 8006ed4:	e123      	b.n	800711e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d002      	beq.n	8006ee8 <USBD_StdEPReq+0x6e>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d016      	beq.n	8006f14 <USBD_StdEPReq+0x9a>
 8006ee6:	e02c      	b.n	8006f42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <USBD_StdEPReq+0x90>
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d00a      	beq.n	8006f0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f003 f93d 	bl	800a178 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f003 f939 	bl	800a178 <USBD_LL_StallEP>
 8006f06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f08:	e020      	b.n	8006f4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fc6f 	bl	80077f0 <USBD_CtlError>
              break;
 8006f12:	e01b      	b.n	8006f4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10e      	bne.n	8006f3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <USBD_StdEPReq+0xc0>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d008      	beq.n	8006f3a <USBD_StdEPReq+0xc0>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	88db      	ldrh	r3, [r3, #6]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f003 f91f 	bl	800a178 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fca6 	bl	800788c <USBD_CtlSendStatus>

              break;
 8006f40:	e004      	b.n	8006f4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fc53 	bl	80077f0 <USBD_CtlError>
              break;
 8006f4a:	bf00      	nop
          }
          break;
 8006f4c:	e0ec      	b.n	8007128 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d002      	beq.n	8006f60 <USBD_StdEPReq+0xe6>
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d016      	beq.n	8006f8c <USBD_StdEPReq+0x112>
 8006f5e:	e030      	b.n	8006fc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00d      	beq.n	8006f82 <USBD_StdEPReq+0x108>
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	2b80      	cmp	r3, #128	; 0x80
 8006f6a:	d00a      	beq.n	8006f82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f003 f901 	bl	800a178 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f003 f8fd 	bl	800a178 <USBD_LL_StallEP>
 8006f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f80:	e025      	b.n	8006fce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fc33 	bl	80077f0 <USBD_CtlError>
              break;
 8006f8a:	e020      	b.n	8006fce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	885b      	ldrh	r3, [r3, #2]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11b      	bne.n	8006fcc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f003 f907 	bl	800a1b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc6f 	bl	800788c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006fc0:	e004      	b.n	8006fcc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fc13 	bl	80077f0 <USBD_CtlError>
              break;
 8006fca:	e000      	b.n	8006fce <USBD_StdEPReq+0x154>
              break;
 8006fcc:	bf00      	nop
          }
          break;
 8006fce:	e0ab      	b.n	8007128 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d002      	beq.n	8006fe2 <USBD_StdEPReq+0x168>
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d032      	beq.n	8007046 <USBD_StdEPReq+0x1cc>
 8006fe0:	e097      	b.n	8007112 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <USBD_StdEPReq+0x17e>
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b80      	cmp	r3, #128	; 0x80
 8006fec:	d004      	beq.n	8006ff8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fbfd 	bl	80077f0 <USBD_CtlError>
                break;
 8006ff6:	e091      	b.n	800711c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da0b      	bge.n	8007018 <USBD_StdEPReq+0x19e>
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	3310      	adds	r3, #16
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4413      	add	r3, r2
 8007014:	3304      	adds	r3, #4
 8007016:	e00b      	b.n	8007030 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	3304      	adds	r3, #4
 8007030:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2202      	movs	r2, #2
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fbe7 	bl	8007812 <USBD_CtlSendData>
              break;
 8007044:	e06a      	b.n	800711c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	da11      	bge.n	8007072 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d117      	bne.n	8007098 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fbc0 	bl	80077f0 <USBD_CtlError>
                  break;
 8007070:	e054      	b.n	800711c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fbad 	bl	80077f0 <USBD_CtlError>
                  break;
 8007096:	e041      	b.n	800711c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800709c:	2b00      	cmp	r3, #0
 800709e:	da0b      	bge.n	80070b8 <USBD_StdEPReq+0x23e>
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	3310      	adds	r3, #16
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	4413      	add	r3, r2
 80070b4:	3304      	adds	r3, #4
 80070b6:	e00b      	b.n	80070d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070be:	4613      	mov	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	3304      	adds	r3, #4
 80070d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <USBD_StdEPReq+0x264>
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2b80      	cmp	r3, #128	; 0x80
 80070dc:	d103      	bne.n	80070e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e00e      	b.n	8007104 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f003 f882 	bl	800a1f4 <USBD_LL_IsStallEP>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e002      	b.n	8007104 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2202      	movs	r2, #2
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fb81 	bl	8007812 <USBD_CtlSendData>
              break;
 8007110:	e004      	b.n	800711c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fb6b 	bl	80077f0 <USBD_CtlError>
              break;
 800711a:	bf00      	nop
          }
          break;
 800711c:	e004      	b.n	8007128 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb65 	bl	80077f0 <USBD_CtlError>
          break;
 8007126:	bf00      	nop
      }
      break;
 8007128:	e004      	b.n	8007134 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fb5f 	bl	80077f0 <USBD_CtlError>
      break;
 8007132:	bf00      	nop
  }

  return ret;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	0a1b      	lsrs	r3, r3, #8
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	2b0e      	cmp	r3, #14
 8007162:	f200 8152 	bhi.w	800740a <USBD_GetDescriptor+0x2ca>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <USBD_GetDescriptor+0x2c>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	080071dd 	.word	0x080071dd
 8007170:	080071f5 	.word	0x080071f5
 8007174:	08007235 	.word	0x08007235
 8007178:	0800740b 	.word	0x0800740b
 800717c:	0800740b 	.word	0x0800740b
 8007180:	080073ab 	.word	0x080073ab
 8007184:	080073d7 	.word	0x080073d7
 8007188:	0800740b 	.word	0x0800740b
 800718c:	0800740b 	.word	0x0800740b
 8007190:	0800740b 	.word	0x0800740b
 8007194:	0800740b 	.word	0x0800740b
 8007198:	0800740b 	.word	0x0800740b
 800719c:	0800740b 	.word	0x0800740b
 80071a0:	0800740b 	.word	0x0800740b
 80071a4:	080071a9 	.word	0x080071a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ca:	e126      	b.n	800741a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb0e 	bl	80077f0 <USBD_CtlError>
        err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
      break;
 80071da:	e11e      	b.n	800741a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7c12      	ldrb	r2, [r2, #16]
 80071e8:	f107 0108 	add.w	r1, r7, #8
 80071ec:	4610      	mov	r0, r2
 80071ee:	4798      	blx	r3
 80071f0:	60f8      	str	r0, [r7, #12]
      break;
 80071f2:	e112      	b.n	800741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	7c1b      	ldrb	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10d      	bne.n	8007218 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	f107 0208 	add.w	r2, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3301      	adds	r3, #1
 8007212:	2202      	movs	r2, #2
 8007214:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007216:	e100      	b.n	800741a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	f107 0208 	add.w	r2, r7, #8
 8007224:	4610      	mov	r0, r2
 8007226:	4798      	blx	r3
 8007228:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	2202      	movs	r2, #2
 8007230:	701a      	strb	r2, [r3, #0]
      break;
 8007232:	e0f2      	b.n	800741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	885b      	ldrh	r3, [r3, #2]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b05      	cmp	r3, #5
 800723c:	f200 80ac 	bhi.w	8007398 <USBD_GetDescriptor+0x258>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <USBD_GetDescriptor+0x108>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	08007261 	.word	0x08007261
 800724c:	08007295 	.word	0x08007295
 8007250:	080072c9 	.word	0x080072c9
 8007254:	080072fd 	.word	0x080072fd
 8007258:	08007331 	.word	0x08007331
 800725c:	08007365 	.word	0x08007365
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	7c12      	ldrb	r2, [r2, #16]
 8007278:	f107 0108 	add.w	r1, r7, #8
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
 8007280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007282:	e091      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fab2 	bl	80077f0 <USBD_CtlError>
            err++;
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	3301      	adds	r3, #1
 8007290:	72fb      	strb	r3, [r7, #11]
          break;
 8007292:	e089      	b.n	80073a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7c12      	ldrb	r2, [r2, #16]
 80072ac:	f107 0108 	add.w	r1, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b6:	e077      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa98 	bl	80077f0 <USBD_CtlError>
            err++;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	3301      	adds	r3, #1
 80072c4:	72fb      	strb	r3, [r7, #11]
          break;
 80072c6:	e06f      	b.n	80073a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ea:	e05d      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa7e 	bl	80077f0 <USBD_CtlError>
            err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
          break;
 80072fa:	e055      	b.n	80073a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 0108 	add.w	r1, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800731e:	e043      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa64 	bl	80077f0 <USBD_CtlError>
            err++;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	3301      	adds	r3, #1
 800732c:	72fb      	strb	r3, [r7, #11]
          break;
 800732e:	e03b      	b.n	80073a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	7c12      	ldrb	r2, [r2, #16]
 8007348:	f107 0108 	add.w	r1, r7, #8
 800734c:	4610      	mov	r0, r2
 800734e:	4798      	blx	r3
 8007350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007352:	e029      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa4a 	bl	80077f0 <USBD_CtlError>
            err++;
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	3301      	adds	r3, #1
 8007360:	72fb      	strb	r3, [r7, #11]
          break;
 8007362:	e021      	b.n	80073a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7c12      	ldrb	r2, [r2, #16]
 800737c:	f107 0108 	add.w	r1, r7, #8
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
 8007384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007386:	e00f      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa30 	bl	80077f0 <USBD_CtlError>
            err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
          break;
 8007396:	e007      	b.n	80073a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa28 	bl	80077f0 <USBD_CtlError>
          err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80073a6:	bf00      	nop
      }
      break;
 80073a8:	e037      	b.n	800741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7c1b      	ldrb	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d109      	bne.n	80073c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ba:	f107 0208 	add.w	r2, r7, #8
 80073be:	4610      	mov	r0, r2
 80073c0:	4798      	blx	r3
 80073c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073c4:	e029      	b.n	800741a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa11 	bl	80077f0 <USBD_CtlError>
        err++;
 80073ce:	7afb      	ldrb	r3, [r7, #11]
 80073d0:	3301      	adds	r3, #1
 80073d2:	72fb      	strb	r3, [r7, #11]
      break;
 80073d4:	e021      	b.n	800741a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7c1b      	ldrb	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10d      	bne.n	80073fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	f107 0208 	add.w	r2, r7, #8
 80073ea:	4610      	mov	r0, r2
 80073ec:	4798      	blx	r3
 80073ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	2207      	movs	r2, #7
 80073f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073f8:	e00f      	b.n	800741a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9f7 	bl	80077f0 <USBD_CtlError>
        err++;
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	3301      	adds	r3, #1
 8007406:	72fb      	strb	r3, [r7, #11]
      break;
 8007408:	e007      	b.n	800741a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f9ef 	bl	80077f0 <USBD_CtlError>
      err++;
 8007412:	7afb      	ldrb	r3, [r7, #11]
 8007414:	3301      	adds	r3, #1
 8007416:	72fb      	strb	r3, [r7, #11]
      break;
 8007418:	bf00      	nop
  }

  if (err != 0U)
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d11e      	bne.n	800745e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	88db      	ldrh	r3, [r3, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d016      	beq.n	8007456 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007428:	893b      	ldrh	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00e      	beq.n	800744c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	88da      	ldrh	r2, [r3, #6]
 8007432:	893b      	ldrh	r3, [r7, #8]
 8007434:	4293      	cmp	r3, r2
 8007436:	bf28      	it	cs
 8007438:	4613      	movcs	r3, r2
 800743a:	b29b      	uxth	r3, r3
 800743c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800743e:	893b      	ldrh	r3, [r7, #8]
 8007440:	461a      	mov	r2, r3
 8007442:	68f9      	ldr	r1, [r7, #12]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f9e4 	bl	8007812 <USBD_CtlSendData>
 800744a:	e009      	b.n	8007460 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9ce 	bl	80077f0 <USBD_CtlError>
 8007454:	e004      	b.n	8007460 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa18 	bl	800788c <USBD_CtlSendStatus>
 800745c:	e000      	b.n	8007460 <USBD_GetDescriptor+0x320>
    return;
 800745e:	bf00      	nop
  }
}
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop

08007468 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	889b      	ldrh	r3, [r3, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d131      	bne.n	80074de <USBD_SetAddress+0x76>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	88db      	ldrh	r3, [r3, #6]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d12d      	bne.n	80074de <USBD_SetAddress+0x76>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	885b      	ldrh	r3, [r3, #2]
 8007486:	2b7f      	cmp	r3, #127	; 0x7f
 8007488:	d829      	bhi.n	80074de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	885b      	ldrh	r3, [r3, #2]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007494:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d104      	bne.n	80074ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9a3 	bl	80077f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074aa:	e01d      	b.n	80074e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f002 fec7 	bl	800a24c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f9e4 	bl	800788c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d2:	e009      	b.n	80074e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074dc:	e004      	b.n	80074e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f985 	bl	80077f0 <USBD_CtlError>
  }
}
 80074e6:	bf00      	nop
 80074e8:	bf00      	nop
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	885b      	ldrh	r3, [r3, #2]
 8007502:	b2da      	uxtb	r2, r3
 8007504:	4b4c      	ldr	r3, [pc, #304]	; (8007638 <USBD_SetConfig+0x148>)
 8007506:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007508:	4b4b      	ldr	r3, [pc, #300]	; (8007638 <USBD_SetConfig+0x148>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d905      	bls.n	800751c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f96c 	bl	80077f0 <USBD_CtlError>
    return USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	e088      	b.n	800762e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d002      	beq.n	800752e <USBD_SetConfig+0x3e>
 8007528:	2b03      	cmp	r3, #3
 800752a:	d025      	beq.n	8007578 <USBD_SetConfig+0x88>
 800752c:	e071      	b.n	8007612 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800752e:	4b42      	ldr	r3, [pc, #264]	; (8007638 <USBD_SetConfig+0x148>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01c      	beq.n	8007570 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007536:	4b40      	ldr	r3, [pc, #256]	; (8007638 <USBD_SetConfig+0x148>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007540:	4b3d      	ldr	r3, [pc, #244]	; (8007638 <USBD_SetConfig+0x148>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff f991 	bl	800686e <USBD_SetClassConfig>
 800754c:	4603      	mov	r3, r0
 800754e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007550:	7bfb      	ldrb	r3, [r7, #15]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d004      	beq.n	8007560 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f949 	bl	80077f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800755e:	e065      	b.n	800762c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f993 	bl	800788c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2203      	movs	r2, #3
 800756a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800756e:	e05d      	b.n	800762c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f98b 	bl	800788c <USBD_CtlSendStatus>
      break;
 8007576:	e059      	b.n	800762c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007578:	4b2f      	ldr	r3, [pc, #188]	; (8007638 <USBD_SetConfig+0x148>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d112      	bne.n	80075a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007588:	4b2b      	ldr	r3, [pc, #172]	; (8007638 <USBD_SetConfig+0x148>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007592:	4b29      	ldr	r3, [pc, #164]	; (8007638 <USBD_SetConfig+0x148>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff f984 	bl	80068a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f974 	bl	800788c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075a4:	e042      	b.n	800762c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80075a6:	4b24      	ldr	r3, [pc, #144]	; (8007638 <USBD_SetConfig+0x148>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d02a      	beq.n	800760a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f972 	bl	80068a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075c2:	4b1d      	ldr	r3, [pc, #116]	; (8007638 <USBD_SetConfig+0x148>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075cc:	4b1a      	ldr	r3, [pc, #104]	; (8007638 <USBD_SetConfig+0x148>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff f94b 	bl	800686e <USBD_SetClassConfig>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00f      	beq.n	8007602 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f903 	bl	80077f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff f957 	bl	80068a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007600:	e014      	b.n	800762c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f942 	bl	800788c <USBD_CtlSendStatus>
      break;
 8007608:	e010      	b.n	800762c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f93e 	bl	800788c <USBD_CtlSendStatus>
      break;
 8007610:	e00c      	b.n	800762c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f8eb 	bl	80077f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <USBD_SetConfig+0x148>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff f940 	bl	80068a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007626:	2303      	movs	r3, #3
 8007628:	73fb      	strb	r3, [r7, #15]
      break;
 800762a:	bf00      	nop
  }

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000358 	.word	0x20000358

0800763c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88db      	ldrh	r3, [r3, #6]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d004      	beq.n	8007658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f8cd 	bl	80077f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007656:	e023      	b.n	80076a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	dc02      	bgt.n	800766a <USBD_GetConfig+0x2e>
 8007664:	2b00      	cmp	r3, #0
 8007666:	dc03      	bgt.n	8007670 <USBD_GetConfig+0x34>
 8007668:	e015      	b.n	8007696 <USBD_GetConfig+0x5a>
 800766a:	2b03      	cmp	r3, #3
 800766c:	d00b      	beq.n	8007686 <USBD_GetConfig+0x4a>
 800766e:	e012      	b.n	8007696 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3308      	adds	r3, #8
 800767a:	2201      	movs	r2, #1
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f8c7 	bl	8007812 <USBD_CtlSendData>
        break;
 8007684:	e00c      	b.n	80076a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3304      	adds	r3, #4
 800768a:	2201      	movs	r2, #1
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f8bf 	bl	8007812 <USBD_CtlSendData>
        break;
 8007694:	e004      	b.n	80076a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f8a9 	bl	80077f0 <USBD_CtlError>
        break;
 800769e:	bf00      	nop
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d81e      	bhi.n	80076fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	88db      	ldrh	r3, [r3, #6]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d004      	beq.n	80076d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f890 	bl	80077f0 <USBD_CtlError>
        break;
 80076d0:	e01a      	b.n	8007708 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f043 0202 	orr.w	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	330c      	adds	r3, #12
 80076f2:	2202      	movs	r2, #2
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f88b 	bl	8007812 <USBD_CtlSendData>
      break;
 80076fc:	e004      	b.n	8007708 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f875 	bl	80077f0 <USBD_CtlError>
      break;
 8007706:	bf00      	nop
  }
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	885b      	ldrh	r3, [r3, #2]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d106      	bne.n	8007730 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f8ae 	bl	800788c <USBD_CtlSendStatus>
  }
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007748:	b2db      	uxtb	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	2b02      	cmp	r3, #2
 800774e:	d80b      	bhi.n	8007768 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	885b      	ldrh	r3, [r3, #2]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d10c      	bne.n	8007772 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f893 	bl	800788c <USBD_CtlSendStatus>
      }
      break;
 8007766:	e004      	b.n	8007772 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f840 	bl	80077f0 <USBD_CtlError>
      break;
 8007770:	e000      	b.n	8007774 <USBD_ClrFeature+0x3c>
      break;
 8007772:	bf00      	nop
  }
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	781a      	ldrb	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	781a      	ldrb	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7ff fa91 	bl	8006cce <SWAPBYTE>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff fa84 	bl	8006cce <SWAPBYTE>
 80077c6:	4603      	mov	r3, r0
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff fa77 	bl	8006cce <SWAPBYTE>
 80077e0:	4603      	mov	r3, r0
 80077e2:	461a      	mov	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	80da      	strh	r2, [r3, #6]
}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077fa:	2180      	movs	r1, #128	; 0x80
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f002 fcbb 	bl	800a178 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007802:	2100      	movs	r1, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f002 fcb7 	bl	800a178 <USBD_LL_StallEP>
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f002 fd26 	bl	800a28a <USBD_LL_Transmit>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	2100      	movs	r1, #0
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f002 fd15 	bl	800a28a <USBD_LL_Transmit>

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	2100      	movs	r1, #0
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f002 fd25 	bl	800a2cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2204      	movs	r2, #4
 8007898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800789c:	2300      	movs	r3, #0
 800789e:	2200      	movs	r2, #0
 80078a0:	2100      	movs	r1, #0
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f002 fcf1 	bl	800a28a <USBD_LL_Transmit>

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2205      	movs	r2, #5
 80078be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c2:	2300      	movs	r3, #0
 80078c4:	2200      	movs	r2, #0
 80078c6:	2100      	movs	r1, #0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 fcff 	bl	800a2cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <__NVIC_SetPriority>:
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	db0a      	blt.n	8007902 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	490c      	ldr	r1, [pc, #48]	; (8007924 <__NVIC_SetPriority+0x4c>)
 80078f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f6:	0112      	lsls	r2, r2, #4
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	440b      	add	r3, r1
 80078fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007900:	e00a      	b.n	8007918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4908      	ldr	r1, [pc, #32]	; (8007928 <__NVIC_SetPriority+0x50>)
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	3b04      	subs	r3, #4
 8007910:	0112      	lsls	r2, r2, #4
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	440b      	add	r3, r1
 8007916:	761a      	strb	r2, [r3, #24]
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	e000e100 	.word	0xe000e100
 8007928:	e000ed00 	.word	0xe000ed00

0800792c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007930:	2100      	movs	r1, #0
 8007932:	f06f 0004 	mvn.w	r0, #4
 8007936:	f7ff ffcf 	bl	80078d8 <__NVIC_SetPriority>
#endif
}
 800793a:	bf00      	nop
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007946:	f3ef 8305 	mrs	r3, IPSR
 800794a:	603b      	str	r3, [r7, #0]
  return(result);
 800794c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007952:	f06f 0305 	mvn.w	r3, #5
 8007956:	607b      	str	r3, [r7, #4]
 8007958:	e00c      	b.n	8007974 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800795a:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <osKernelInitialize+0x44>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <osKernelInitialize+0x44>)
 8007964:	2201      	movs	r2, #1
 8007966:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007968:	2300      	movs	r3, #0
 800796a:	607b      	str	r3, [r7, #4]
 800796c:	e002      	b.n	8007974 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800796e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007972:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007974:	687b      	ldr	r3, [r7, #4]
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000035c 	.word	0x2000035c

08007988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800798e:	f3ef 8305 	mrs	r3, IPSR
 8007992:	603b      	str	r3, [r7, #0]
  return(result);
 8007994:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800799a:	f06f 0305 	mvn.w	r3, #5
 800799e:	607b      	str	r3, [r7, #4]
 80079a0:	e010      	b.n	80079c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80079a2:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <osKernelStart+0x48>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d109      	bne.n	80079be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80079aa:	f7ff ffbf 	bl	800792c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80079ae:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <osKernelStart+0x48>)
 80079b0:	2202      	movs	r2, #2
 80079b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80079b4:	f000 ff56 	bl	8008864 <vTaskStartScheduler>
      stat = osOK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	607b      	str	r3, [r7, #4]
 80079bc:	e002      	b.n	80079c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80079be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80079c4:	687b      	ldr	r3, [r7, #4]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	2000035c 	.word	0x2000035c

080079d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <vApplicationGetIdleTaskMemory+0x2c>)
 80079e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4a06      	ldr	r2, [pc, #24]	; (8007a04 <vApplicationGetIdleTaskMemory+0x30>)
 80079ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2280      	movs	r2, #128	; 0x80
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000360 	.word	0x20000360
 8007a04:	20000408 	.word	0x20000408

08007a08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <vApplicationGetTimerTaskMemory+0x2c>)
 8007a18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4a06      	ldr	r2, [pc, #24]	; (8007a38 <vApplicationGetTimerTaskMemory+0x30>)
 8007a1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a26:	601a      	str	r2, [r3, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	20000608 	.word	0x20000608
 8007a38:	200006b0 	.word	0x200006b0

08007a3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f103 0208 	add.w	r2, r3, #8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f103 0208 	add.w	r2, r3, #8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f103 0208 	add.w	r2, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af4:	d103      	bne.n	8007afe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	e00c      	b.n	8007b18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3308      	adds	r3, #8
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e002      	b.n	8007b0c <vListInsert+0x2e>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d2f6      	bcs.n	8007b06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
}
 8007b44:	bf00      	nop
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6892      	ldr	r2, [r2, #8]
 8007b66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6852      	ldr	r2, [r2, #4]
 8007b70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d103      	bne.n	8007b84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	1e5a      	subs	r2, r3, #1
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007bce:	f002 f801 	bl	8009bd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	441a      	add	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c04:	fb01 f303 	mul.w	r3, r1, r3
 8007c08:	441a      	add	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	22ff      	movs	r2, #255	; 0xff
 8007c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	22ff      	movs	r2, #255	; 0xff
 8007c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d114      	bne.n	8007c4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3310      	adds	r3, #16
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 f8b1 	bl	8008d98 <xTaskRemoveFromEventList>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d012      	beq.n	8007c62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <xQueueGenericReset+0xcc>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	e009      	b.n	8007c62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3310      	adds	r3, #16
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fef2 	bl	8007a3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3324      	adds	r3, #36	; 0x24
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff feed 	bl	8007a3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c62:	f001 ffe7 	bl	8009c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c66:	2301      	movs	r3, #1
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08e      	sub	sp, #56	; 0x38
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cb6:	bf00      	nop
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <xQueueGenericCreateStatic+0x52>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <xQueueGenericCreateStatic+0x56>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericCreateStatic+0x58>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	623b      	str	r3, [r7, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <xQueueGenericCreateStatic+0x7e>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <xQueueGenericCreateStatic+0x82>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e000      	b.n	8007cf8 <xQueueGenericCreateStatic+0x84>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	61fb      	str	r3, [r7, #28]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d12:	2350      	movs	r3, #80	; 0x50
 8007d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b50      	cmp	r3, #80	; 0x50
 8007d1a:	d00a      	beq.n	8007d32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	61bb      	str	r3, [r7, #24]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f805 	bl	8007d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3730      	adds	r7, #48	; 0x30
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e002      	b.n	8007d86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d92:	2101      	movs	r1, #1
 8007d94:	69b8      	ldr	r0, [r7, #24]
 8007d96:	f7ff ff05 	bl	8007ba4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08e      	sub	sp, #56	; 0x38
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <xQueueGenericSend+0x32>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <xQueueGenericSend+0x40>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <xQueueGenericSend+0x44>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <xQueueGenericSend+0x46>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <xQueueGenericSend+0x60>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d103      	bne.n	8007e1a <xQueueGenericSend+0x6e>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <xQueueGenericSend+0x72>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <xQueueGenericSend+0x74>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <xQueueGenericSend+0x8e>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	623b      	str	r3, [r7, #32]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e3a:	f001 f96f 	bl	800911c <xTaskGetSchedulerState>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <xQueueGenericSend+0x9e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <xQueueGenericSend+0xa2>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <xQueueGenericSend+0xa4>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	61fb      	str	r3, [r7, #28]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e6a:	f001 feb3 	bl	8009bd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d302      	bcc.n	8007e80 <xQueueGenericSend+0xd4>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d129      	bne.n	8007ed4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e86:	f000 fa0b 	bl	80082a0 <prvCopyDataToQueue>
 8007e8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d010      	beq.n	8007eb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	3324      	adds	r3, #36	; 0x24
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 ff7d 	bl	8008d98 <xTaskRemoveFromEventList>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d013      	beq.n	8007ecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ea4:	4b3f      	ldr	r3, [pc, #252]	; (8007fa4 <xQueueGenericSend+0x1f8>)
 8007ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	e00a      	b.n	8007ecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d007      	beq.n	8007ecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ebc:	4b39      	ldr	r3, [pc, #228]	; (8007fa4 <xQueueGenericSend+0x1f8>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ecc:	f001 feb2 	bl	8009c34 <vPortExitCritical>
				return pdPASS;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e063      	b.n	8007f9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eda:	f001 feab 	bl	8009c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e05c      	b.n	8007f9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d106      	bne.n	8007ef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 ffb7 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ef6:	f001 fe9d 	bl	8009c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007efa:	f000 fd23 	bl	8008944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007efe:	f001 fe69 	bl	8009bd4 <vPortEnterCritical>
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f08:	b25b      	sxtb	r3, r3
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f0e:	d103      	bne.n	8007f18 <xQueueGenericSend+0x16c>
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f1e:	b25b      	sxtb	r3, r3
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f24:	d103      	bne.n	8007f2e <xQueueGenericSend+0x182>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f2e:	f001 fe81 	bl	8009c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f32:	1d3a      	adds	r2, r7, #4
 8007f34:	f107 0314 	add.w	r3, r7, #20
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 ffa6 	bl	8008e8c <xTaskCheckForTimeOut>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d124      	bne.n	8007f90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f48:	f000 faa2 	bl	8008490 <prvIsQueueFull>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d018      	beq.n	8007f84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	3310      	adds	r3, #16
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fecc 	bl	8008cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f62:	f000 fa2d 	bl	80083c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f66:	f000 fcfb 	bl	8008960 <xTaskResumeAll>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f47f af7c 	bne.w	8007e6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <xQueueGenericSend+0x1f8>)
 8007f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	e772      	b.n	8007e6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f86:	f000 fa1b 	bl	80083c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f8a:	f000 fce9 	bl	8008960 <xTaskResumeAll>
 8007f8e:	e76c      	b.n	8007e6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f92:	f000 fa15 	bl	80083c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f96:	f000 fce3 	bl	8008960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3738      	adds	r7, #56	; 0x38
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b090      	sub	sp, #64	; 0x40
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <xQueueGenericSendFromISR+0x3c>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <xQueueGenericSendFromISR+0x40>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e000      	b.n	8007fea <xQueueGenericSendFromISR+0x42>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d103      	bne.n	8008012 <xQueueGenericSendFromISR+0x6a>
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <xQueueGenericSendFromISR+0x6e>
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <xQueueGenericSendFromISR+0x70>
 8008016:	2300      	movs	r3, #0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	623b      	str	r3, [r7, #32]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008032:	f001 feb1 	bl	8009d98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008036:	f3ef 8211 	mrs	r2, BASEPRI
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	61fa      	str	r2, [r7, #28]
 800804c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800804e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008050:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805a:	429a      	cmp	r2, r3
 800805c:	d302      	bcc.n	8008064 <xQueueGenericSendFromISR+0xbc>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d12f      	bne.n	80080c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800806a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800807a:	f000 f911 	bl	80082a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800807e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008086:	d112      	bne.n	80080ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d016      	beq.n	80080be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	3324      	adds	r3, #36	; 0x24
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fe7f 	bl	8008d98 <xTaskRemoveFromEventList>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	e007      	b.n	80080be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080b2:	3301      	adds	r3, #1
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	b25a      	sxtb	r2, r3
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080be:	2301      	movs	r3, #1
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080c2:	e001      	b.n	80080c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3740      	adds	r7, #64	; 0x40
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	; 0x30
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10a      	bne.n	8008110 <xQueueReceive+0x30>
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	623b      	str	r3, [r7, #32]
}
 800810c:	bf00      	nop
 800810e:	e7fe      	b.n	800810e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <xQueueReceive+0x3e>
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <xQueueReceive+0x42>
 800811e:	2301      	movs	r3, #1
 8008120:	e000      	b.n	8008124 <xQueueReceive+0x44>
 8008122:	2300      	movs	r3, #0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <xQueueReceive+0x5e>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	61fb      	str	r3, [r7, #28]
}
 800813a:	bf00      	nop
 800813c:	e7fe      	b.n	800813c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800813e:	f000 ffed 	bl	800911c <xTaskGetSchedulerState>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <xQueueReceive+0x6e>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <xQueueReceive+0x72>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <xQueueReceive+0x74>
 8008152:	2300      	movs	r3, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <xQueueReceive+0x8e>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	61bb      	str	r3, [r7, #24]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800816e:	f001 fd31 	bl	8009bd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01f      	beq.n	80081be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008182:	f000 f8f7 	bl	8008374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	1e5a      	subs	r2, r3, #1
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00f      	beq.n	80081b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	3310      	adds	r3, #16
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fdfc 	bl	8008d98 <xTaskRemoveFromEventList>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081a6:	4b3d      	ldr	r3, [pc, #244]	; (800829c <xQueueReceive+0x1bc>)
 80081a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081b6:	f001 fd3d 	bl	8009c34 <vPortExitCritical>
				return pdPASS;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e069      	b.n	8008292 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081c4:	f001 fd36 	bl	8009c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e062      	b.n	8008292 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081d2:	f107 0310 	add.w	r3, r7, #16
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fe42 	bl	8008e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081e0:	f001 fd28 	bl	8009c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081e4:	f000 fbae 	bl	8008944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081e8:	f001 fcf4 	bl	8009bd4 <vPortEnterCritical>
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f2:	b25b      	sxtb	r3, r3
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081f8:	d103      	bne.n	8008202 <xQueueReceive+0x122>
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008208:	b25b      	sxtb	r3, r3
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820e:	d103      	bne.n	8008218 <xQueueReceive+0x138>
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008218:	f001 fd0c 	bl	8009c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800821c:	1d3a      	adds	r2, r7, #4
 800821e:	f107 0310 	add.w	r3, r7, #16
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fe31 	bl	8008e8c <xTaskCheckForTimeOut>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d123      	bne.n	8008278 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008232:	f000 f917 	bl	8008464 <prvIsQueueEmpty>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d017      	beq.n	800826c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	3324      	adds	r3, #36	; 0x24
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fd57 	bl	8008cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800824a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800824c:	f000 f8b8 	bl	80083c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008250:	f000 fb86 	bl	8008960 <xTaskResumeAll>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d189      	bne.n	800816e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800825a:	4b10      	ldr	r3, [pc, #64]	; (800829c <xQueueReceive+0x1bc>)
 800825c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	e780      	b.n	800816e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800826c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826e:	f000 f8a7 	bl	80083c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008272:	f000 fb75 	bl	8008960 <xTaskResumeAll>
 8008276:	e77a      	b.n	800816e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827a:	f000 f8a1 	bl	80083c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800827e:	f000 fb6f 	bl	8008960 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008284:	f000 f8ee 	bl	8008464 <prvIsQueueEmpty>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f43f af6f 	beq.w	800816e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008292:	4618      	mov	r0, r3
 8008294:	3730      	adds	r7, #48	; 0x30
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10d      	bne.n	80082da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d14d      	bne.n	8008362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 ff44 	bl	8009158 <xTaskPriorityDisinherit>
 80082d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	e043      	b.n	8008362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d119      	bne.n	8008314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6858      	ldr	r0, [r3, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e8:	461a      	mov	r2, r3
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	f002 f936 	bl	800a55c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	441a      	add	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	429a      	cmp	r2, r3
 8008308:	d32b      	bcc.n	8008362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	605a      	str	r2, [r3, #4]
 8008312:	e026      	b.n	8008362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68d8      	ldr	r0, [r3, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831c:	461a      	mov	r2, r3
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	f002 f91c 	bl	800a55c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	425b      	negs	r3, r3
 800832e:	441a      	add	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d207      	bcs.n	8008350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	425b      	negs	r3, r3
 800834a:	441a      	add	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d105      	bne.n	8008362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	3b01      	subs	r3, #1
 8008360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800836a:	697b      	ldr	r3, [r7, #20]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	2b00      	cmp	r3, #0
 8008384:	d018      	beq.n	80083b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	441a      	add	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	429a      	cmp	r2, r3
 800839e:	d303      	bcc.n	80083a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68d9      	ldr	r1, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	461a      	mov	r2, r3
 80083b2:	6838      	ldr	r0, [r7, #0]
 80083b4:	f002 f8d2 	bl	800a55c <memcpy>
	}
}
 80083b8:	bf00      	nop
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083c8:	f001 fc04 	bl	8009bd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083d4:	e011      	b.n	80083fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d012      	beq.n	8008404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3324      	adds	r3, #36	; 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fcd8 	bl	8008d98 <xTaskRemoveFromEventList>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083ee:	f000 fdaf 	bl	8008f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dce9      	bgt.n	80083d6 <prvUnlockQueue+0x16>
 8008402:	e000      	b.n	8008406 <prvUnlockQueue+0x46>
					break;
 8008404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	22ff      	movs	r2, #255	; 0xff
 800840a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800840e:	f001 fc11 	bl	8009c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008412:	f001 fbdf 	bl	8009bd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800841c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800841e:	e011      	b.n	8008444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d012      	beq.n	800844e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3310      	adds	r3, #16
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fcb3 	bl	8008d98 <xTaskRemoveFromEventList>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008438:	f000 fd8a 	bl	8008f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	3b01      	subs	r3, #1
 8008440:	b2db      	uxtb	r3, r3
 8008442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008448:	2b00      	cmp	r3, #0
 800844a:	dce9      	bgt.n	8008420 <prvUnlockQueue+0x60>
 800844c:	e000      	b.n	8008450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800844e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	22ff      	movs	r2, #255	; 0xff
 8008454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008458:	f001 fbec 	bl	8009c34 <vPortExitCritical>
}
 800845c:	bf00      	nop
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800846c:	f001 fbb2 	bl	8009bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d102      	bne.n	800847e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e001      	b.n	8008482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008482:	f001 fbd7 	bl	8009c34 <vPortExitCritical>

	return xReturn;
 8008486:	68fb      	ldr	r3, [r7, #12]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008498:	f001 fb9c 	bl	8009bd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d102      	bne.n	80084ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e001      	b.n	80084b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084b2:	f001 fbbf 	bl	8009c34 <vPortExitCritical>

	return xReturn;
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e014      	b.n	80084fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084d0:	4a0f      	ldr	r2, [pc, #60]	; (8008510 <vQueueAddToRegistry+0x50>)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80084dc:	490c      	ldr	r1, [pc, #48]	; (8008510 <vQueueAddToRegistry+0x50>)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084e6:	4a0a      	ldr	r2, [pc, #40]	; (8008510 <vQueueAddToRegistry+0x50>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084f2:	e006      	b.n	8008502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b07      	cmp	r3, #7
 80084fe:	d9e7      	bls.n	80084d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008500:	bf00      	nop
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20000ab0 	.word	0x20000ab0

08008514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008524:	f001 fb56 	bl	8009bd4 <vPortEnterCritical>
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800852e:	b25b      	sxtb	r3, r3
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008534:	d103      	bne.n	800853e <vQueueWaitForMessageRestricted+0x2a>
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008544:	b25b      	sxtb	r3, r3
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800854a:	d103      	bne.n	8008554 <vQueueWaitForMessageRestricted+0x40>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008554:	f001 fb6e 	bl	8009c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	d106      	bne.n	800856e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	3324      	adds	r3, #36	; 0x24
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fbe9 	bl	8008d40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800856e:	6978      	ldr	r0, [r7, #20]
 8008570:	f7ff ff26 	bl	80083c0 <prvUnlockQueue>
	}
 8008574:	bf00      	nop
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	; 0x38
 8008580:	af04      	add	r7, sp, #16
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10a      	bne.n	80085a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	623b      	str	r3, [r7, #32]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	61fb      	str	r3, [r7, #28]
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085c2:	23a8      	movs	r3, #168	; 0xa8
 80085c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2ba8      	cmp	r3, #168	; 0xa8
 80085ca:	d00a      	beq.n	80085e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	61bb      	str	r3, [r7, #24]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d01e      	beq.n	8008628 <xTaskCreateStatic+0xac>
 80085ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01b      	beq.n	8008628 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	2202      	movs	r2, #2
 80085fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008602:	2300      	movs	r3, #0
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	f107 0314 	add.w	r3, r7, #20
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f80c 	bl	8008638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008622:	f000 f8af 	bl	8008784 <prvAddNewTaskToReadyList>
 8008626:	e001      	b.n	800862c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800862c:	697b      	ldr	r3, [r7, #20]
	}
 800862e:	4618      	mov	r0, r3
 8008630:	3728      	adds	r7, #40	; 0x28
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	461a      	mov	r2, r3
 8008650:	21a5      	movs	r1, #165	; 0xa5
 8008652:	f001 fef9 	bl	800a448 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008660:	3b01      	subs	r3, #1
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	617b      	str	r3, [r7, #20]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d01f      	beq.n	80086d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	e012      	b.n	80086c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	4413      	add	r3, r2
 80086a2:	7819      	ldrb	r1, [r3, #0]
 80086a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	3334      	adds	r3, #52	; 0x34
 80086ac:	460a      	mov	r2, r1
 80086ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d006      	beq.n	80086ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	3301      	adds	r3, #1
 80086c0:	61fb      	str	r3, [r7, #28]
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	2b0f      	cmp	r3, #15
 80086c6:	d9e9      	bls.n	800869c <prvInitialiseNewTask+0x64>
 80086c8:	e000      	b.n	80086cc <prvInitialiseNewTask+0x94>
			{
				break;
 80086ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086d4:	e003      	b.n	80086de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	2b37      	cmp	r3, #55	; 0x37
 80086e2:	d901      	bls.n	80086e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086e4:	2337      	movs	r3, #55	; 0x37
 80086e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	2200      	movs	r2, #0
 80086f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	3304      	adds	r3, #4
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff f9bc 	bl	8007a7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	3318      	adds	r3, #24
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff f9b7 	bl	8007a7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2200      	movs	r2, #0
 8008730:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	3354      	adds	r3, #84	; 0x54
 8008738:	224c      	movs	r2, #76	; 0x4c
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f001 fe83 	bl	800a448 <memset>
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	4a0c      	ldr	r2, [pc, #48]	; (8008778 <prvInitialiseNewTask+0x140>)
 8008746:	659a      	str	r2, [r3, #88]	; 0x58
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	4a0c      	ldr	r2, [pc, #48]	; (800877c <prvInitialiseNewTask+0x144>)
 800874c:	65da      	str	r2, [r3, #92]	; 0x5c
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	4a0b      	ldr	r2, [pc, #44]	; (8008780 <prvInitialiseNewTask+0x148>)
 8008752:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	69b8      	ldr	r0, [r7, #24]
 800875a:	f001 f90d 	bl	8009978 <pxPortInitialiseStack>
 800875e:	4602      	mov	r2, r0
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008770:	bf00      	nop
 8008772:	3720      	adds	r7, #32
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20001418 	.word	0x20001418
 800877c:	20001480 	.word	0x20001480
 8008780:	200014e8 	.word	0x200014e8

08008784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800878c:	f001 fa22 	bl	8009bd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008790:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <prvAddNewTaskToReadyList+0xc4>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3301      	adds	r3, #1
 8008796:	4a2c      	ldr	r2, [pc, #176]	; (8008848 <prvAddNewTaskToReadyList+0xc4>)
 8008798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800879a:	4b2c      	ldr	r3, [pc, #176]	; (800884c <prvAddNewTaskToReadyList+0xc8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087a2:	4a2a      	ldr	r2, [pc, #168]	; (800884c <prvAddNewTaskToReadyList+0xc8>)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087a8:	4b27      	ldr	r3, [pc, #156]	; (8008848 <prvAddNewTaskToReadyList+0xc4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d110      	bne.n	80087d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087b0:	f000 fbf2 	bl	8008f98 <prvInitialiseTaskLists>
 80087b4:	e00d      	b.n	80087d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087b6:	4b26      	ldr	r3, [pc, #152]	; (8008850 <prvAddNewTaskToReadyList+0xcc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087be:	4b23      	ldr	r3, [pc, #140]	; (800884c <prvAddNewTaskToReadyList+0xc8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d802      	bhi.n	80087d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087cc:	4a1f      	ldr	r2, [pc, #124]	; (800884c <prvAddNewTaskToReadyList+0xc8>)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087d2:	4b20      	ldr	r3, [pc, #128]	; (8008854 <prvAddNewTaskToReadyList+0xd0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	4a1e      	ldr	r2, [pc, #120]	; (8008854 <prvAddNewTaskToReadyList+0xd0>)
 80087da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <prvAddNewTaskToReadyList+0xd0>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e8:	4b1b      	ldr	r3, [pc, #108]	; (8008858 <prvAddNewTaskToReadyList+0xd4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d903      	bls.n	80087f8 <prvAddNewTaskToReadyList+0x74>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	4a18      	ldr	r2, [pc, #96]	; (8008858 <prvAddNewTaskToReadyList+0xd4>)
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <prvAddNewTaskToReadyList+0xd8>)
 8008806:	441a      	add	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f7ff f941 	bl	8007a96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008814:	f001 fa0e 	bl	8009c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <prvAddNewTaskToReadyList+0xcc>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00e      	beq.n	800883e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <prvAddNewTaskToReadyList+0xc8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	429a      	cmp	r2, r3
 800882c:	d207      	bcs.n	800883e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800882e:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <prvAddNewTaskToReadyList+0xdc>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000fc4 	.word	0x20000fc4
 800884c:	20000af0 	.word	0x20000af0
 8008850:	20000fd0 	.word	0x20000fd0
 8008854:	20000fe0 	.word	0x20000fe0
 8008858:	20000fcc 	.word	0x20000fcc
 800885c:	20000af4 	.word	0x20000af4
 8008860:	e000ed04 	.word	0xe000ed04

08008864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08a      	sub	sp, #40	; 0x28
 8008868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008872:	463a      	mov	r2, r7
 8008874:	1d39      	adds	r1, r7, #4
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff f8aa 	bl	80079d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	9202      	str	r2, [sp, #8]
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	2300      	movs	r3, #0
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	2300      	movs	r3, #0
 8008890:	460a      	mov	r2, r1
 8008892:	4924      	ldr	r1, [pc, #144]	; (8008924 <vTaskStartScheduler+0xc0>)
 8008894:	4824      	ldr	r0, [pc, #144]	; (8008928 <vTaskStartScheduler+0xc4>)
 8008896:	f7ff fe71 	bl	800857c <xTaskCreateStatic>
 800889a:	4603      	mov	r3, r0
 800889c:	4a23      	ldr	r2, [pc, #140]	; (800892c <vTaskStartScheduler+0xc8>)
 800889e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088a0:	4b22      	ldr	r3, [pc, #136]	; (800892c <vTaskStartScheduler+0xc8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088a8:	2301      	movs	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	e001      	b.n	80088b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d102      	bne.n	80088be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088b8:	f000 fd10 	bl	80092dc <xTimerCreateTimerTask>
 80088bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d11b      	bne.n	80088fc <vTaskStartScheduler+0x98>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	613b      	str	r3, [r7, #16]
}
 80088d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088d8:	4b15      	ldr	r3, [pc, #84]	; (8008930 <vTaskStartScheduler+0xcc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3354      	adds	r3, #84	; 0x54
 80088de:	4a15      	ldr	r2, [pc, #84]	; (8008934 <vTaskStartScheduler+0xd0>)
 80088e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <vTaskStartScheduler+0xd4>)
 80088e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ea:	4b14      	ldr	r3, [pc, #80]	; (800893c <vTaskStartScheduler+0xd8>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088f0:	4b13      	ldr	r3, [pc, #76]	; (8008940 <vTaskStartScheduler+0xdc>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088f6:	f001 f8cb 	bl	8009a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088fa:	e00e      	b.n	800891a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008902:	d10a      	bne.n	800891a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60fb      	str	r3, [r7, #12]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <vTaskStartScheduler+0xb4>
}
 800891a:	bf00      	nop
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	0800ae14 	.word	0x0800ae14
 8008928:	08008f69 	.word	0x08008f69
 800892c:	20000fe8 	.word	0x20000fe8
 8008930:	20000af0 	.word	0x20000af0
 8008934:	2000005c 	.word	0x2000005c
 8008938:	20000fe4 	.word	0x20000fe4
 800893c:	20000fd0 	.word	0x20000fd0
 8008940:	20000fc8 	.word	0x20000fc8

08008944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008948:	4b04      	ldr	r3, [pc, #16]	; (800895c <vTaskSuspendAll+0x18>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	4a03      	ldr	r2, [pc, #12]	; (800895c <vTaskSuspendAll+0x18>)
 8008950:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008952:	bf00      	nop
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	20000fec 	.word	0x20000fec

08008960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800896a:	2300      	movs	r3, #0
 800896c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800896e:	4b42      	ldr	r3, [pc, #264]	; (8008a78 <xTaskResumeAll+0x118>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <xTaskResumeAll+0x2c>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	603b      	str	r3, [r7, #0]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800898c:	f001 f922 	bl	8009bd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008990:	4b39      	ldr	r3, [pc, #228]	; (8008a78 <xTaskResumeAll+0x118>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3b01      	subs	r3, #1
 8008996:	4a38      	ldr	r2, [pc, #224]	; (8008a78 <xTaskResumeAll+0x118>)
 8008998:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800899a:	4b37      	ldr	r3, [pc, #220]	; (8008a78 <xTaskResumeAll+0x118>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d162      	bne.n	8008a68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089a2:	4b36      	ldr	r3, [pc, #216]	; (8008a7c <xTaskResumeAll+0x11c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d05e      	beq.n	8008a68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089aa:	e02f      	b.n	8008a0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ac:	4b34      	ldr	r3, [pc, #208]	; (8008a80 <xTaskResumeAll+0x120>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3318      	adds	r3, #24
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7ff f8c9 	bl	8007b50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3304      	adds	r3, #4
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff f8c4 	bl	8007b50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4b2d      	ldr	r3, [pc, #180]	; (8008a84 <xTaskResumeAll+0x124>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <xTaskResumeAll+0x7c>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a2a      	ldr	r2, [pc, #168]	; (8008a84 <xTaskResumeAll+0x124>)
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4a27      	ldr	r2, [pc, #156]	; (8008a88 <xTaskResumeAll+0x128>)
 80089ea:	441a      	add	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3304      	adds	r3, #4
 80089f0:	4619      	mov	r1, r3
 80089f2:	4610      	mov	r0, r2
 80089f4:	f7ff f84f 	bl	8007a96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	4b23      	ldr	r3, [pc, #140]	; (8008a8c <xTaskResumeAll+0x12c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d302      	bcc.n	8008a0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a06:	4b22      	ldr	r3, [pc, #136]	; (8008a90 <xTaskResumeAll+0x130>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a0c:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <xTaskResumeAll+0x120>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1cb      	bne.n	80089ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a1a:	f000 fb5f 	bl	80090dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <xTaskResumeAll+0x134>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a2a:	f000 f847 	bl	8008abc <xTaskIncrementTick>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a34:	4b16      	ldr	r3, [pc, #88]	; (8008a90 <xTaskResumeAll+0x130>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f1      	bne.n	8008a2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a46:	4b13      	ldr	r3, [pc, #76]	; (8008a94 <xTaskResumeAll+0x134>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a4c:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <xTaskResumeAll+0x130>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a58:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <xTaskResumeAll+0x138>)
 8008a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5e:	601a      	str	r2, [r3, #0]
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a68:	f001 f8e4 	bl	8009c34 <vPortExitCritical>

	return xAlreadyYielded;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000fec 	.word	0x20000fec
 8008a7c:	20000fc4 	.word	0x20000fc4
 8008a80:	20000f84 	.word	0x20000f84
 8008a84:	20000fcc 	.word	0x20000fcc
 8008a88:	20000af4 	.word	0x20000af4
 8008a8c:	20000af0 	.word	0x20000af0
 8008a90:	20000fd8 	.word	0x20000fd8
 8008a94:	20000fd4 	.word	0x20000fd4
 8008a98:	e000ed04 	.word	0xe000ed04

08008a9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <xTaskGetTickCount+0x1c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008aa8:	687b      	ldr	r3, [r7, #4]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20000fc8 	.word	0x20000fc8

08008abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac6:	4b4f      	ldr	r3, [pc, #316]	; (8008c04 <xTaskIncrementTick+0x148>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f040 808f 	bne.w	8008bee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ad0:	4b4d      	ldr	r3, [pc, #308]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ad8:	4a4b      	ldr	r2, [pc, #300]	; (8008c08 <xTaskIncrementTick+0x14c>)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d120      	bne.n	8008b26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ae4:	4b49      	ldr	r3, [pc, #292]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00a      	beq.n	8008b04 <xTaskIncrementTick+0x48>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	603b      	str	r3, [r7, #0]
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <xTaskIncrementTick+0x46>
 8008b04:	4b41      	ldr	r3, [pc, #260]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	4b41      	ldr	r3, [pc, #260]	; (8008c10 <xTaskIncrementTick+0x154>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a3f      	ldr	r2, [pc, #252]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	4a3f      	ldr	r2, [pc, #252]	; (8008c10 <xTaskIncrementTick+0x154>)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	4b3e      	ldr	r3, [pc, #248]	; (8008c14 <xTaskIncrementTick+0x158>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	4a3d      	ldr	r2, [pc, #244]	; (8008c14 <xTaskIncrementTick+0x158>)
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	f000 fadb 	bl	80090dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b26:	4b3c      	ldr	r3, [pc, #240]	; (8008c18 <xTaskIncrementTick+0x15c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d349      	bcc.n	8008bc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b30:	4b36      	ldr	r3, [pc, #216]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3a:	4b37      	ldr	r3, [pc, #220]	; (8008c18 <xTaskIncrementTick+0x15c>)
 8008b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b40:	601a      	str	r2, [r3, #0]
					break;
 8008b42:	e03f      	b.n	8008bc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b44:	4b31      	ldr	r3, [pc, #196]	; (8008c0c <xTaskIncrementTick+0x150>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d203      	bcs.n	8008b64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b5c:	4a2e      	ldr	r2, [pc, #184]	; (8008c18 <xTaskIncrementTick+0x15c>)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b62:	e02f      	b.n	8008bc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe fff1 	bl	8007b50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d004      	beq.n	8008b80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	3318      	adds	r3, #24
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fe ffe8 	bl	8007b50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	4b25      	ldr	r3, [pc, #148]	; (8008c1c <xTaskIncrementTick+0x160>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d903      	bls.n	8008b94 <xTaskIncrementTick+0xd8>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	4a22      	ldr	r2, [pc, #136]	; (8008c1c <xTaskIncrementTick+0x160>)
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <xTaskIncrementTick+0x164>)
 8008ba2:	441a      	add	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fe ff73 	bl	8007a96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	; (8008c24 <xTaskIncrementTick+0x168>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d3b8      	bcc.n	8008b30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bc2:	e7b5      	b.n	8008b30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bc4:	4b17      	ldr	r3, [pc, #92]	; (8008c24 <xTaskIncrementTick+0x168>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	4915      	ldr	r1, [pc, #84]	; (8008c20 <xTaskIncrementTick+0x164>)
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d901      	bls.n	8008be0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008be0:	4b11      	ldr	r3, [pc, #68]	; (8008c28 <xTaskIncrementTick+0x16c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e004      	b.n	8008bf8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bee:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <xTaskIncrementTick+0x170>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	4a0d      	ldr	r2, [pc, #52]	; (8008c2c <xTaskIncrementTick+0x170>)
 8008bf6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bf8:	697b      	ldr	r3, [r7, #20]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000fec 	.word	0x20000fec
 8008c08:	20000fc8 	.word	0x20000fc8
 8008c0c:	20000f7c 	.word	0x20000f7c
 8008c10:	20000f80 	.word	0x20000f80
 8008c14:	20000fdc 	.word	0x20000fdc
 8008c18:	20000fe4 	.word	0x20000fe4
 8008c1c:	20000fcc 	.word	0x20000fcc
 8008c20:	20000af4 	.word	0x20000af4
 8008c24:	20000af0 	.word	0x20000af0
 8008c28:	20000fd8 	.word	0x20000fd8
 8008c2c:	20000fd4 	.word	0x20000fd4

08008c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c36:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <vTaskSwitchContext+0xb0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c3e:	4b29      	ldr	r3, [pc, #164]	; (8008ce4 <vTaskSwitchContext+0xb4>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c44:	e046      	b.n	8008cd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <vTaskSwitchContext+0xb4>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c4c:	4b26      	ldr	r3, [pc, #152]	; (8008ce8 <vTaskSwitchContext+0xb8>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e010      	b.n	8008c76 <vTaskSwitchContext+0x46>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	607b      	str	r3, [r7, #4]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <vTaskSwitchContext+0x3e>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	491d      	ldr	r1, [pc, #116]	; (8008cec <vTaskSwitchContext+0xbc>)
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0e4      	beq.n	8008c54 <vTaskSwitchContext+0x24>
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4a15      	ldr	r2, [pc, #84]	; (8008cec <vTaskSwitchContext+0xbc>)
 8008c96:	4413      	add	r3, r2
 8008c98:	60bb      	str	r3, [r7, #8]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	605a      	str	r2, [r3, #4]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	3308      	adds	r3, #8
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d104      	bne.n	8008cba <vTaskSwitchContext+0x8a>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	605a      	str	r2, [r3, #4]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <vTaskSwitchContext+0xc0>)
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	4a08      	ldr	r2, [pc, #32]	; (8008ce8 <vTaskSwitchContext+0xb8>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <vTaskSwitchContext+0xc0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3354      	adds	r3, #84	; 0x54
 8008cd0:	4a08      	ldr	r2, [pc, #32]	; (8008cf4 <vTaskSwitchContext+0xc4>)
 8008cd2:	6013      	str	r3, [r2, #0]
}
 8008cd4:	bf00      	nop
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	20000fec 	.word	0x20000fec
 8008ce4:	20000fd8 	.word	0x20000fd8
 8008ce8:	20000fcc 	.word	0x20000fcc
 8008cec:	20000af4 	.word	0x20000af4
 8008cf0:	20000af0 	.word	0x20000af0
 8008cf4:	2000005c 	.word	0x2000005c

08008cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10a      	bne.n	8008d1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	60fb      	str	r3, [r7, #12]
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d1e:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <vTaskPlaceOnEventList+0x44>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3318      	adds	r3, #24
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fe fed9 	bl	8007ade <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	6838      	ldr	r0, [r7, #0]
 8008d30:	f000 fa80 	bl	8009234 <prvAddCurrentTaskToDelayedList>
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000af0 	.word	0x20000af0

08008d40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d10a      	bne.n	8008d68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	617b      	str	r3, [r7, #20]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3318      	adds	r3, #24
 8008d6e:	4619      	mov	r1, r3
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f7fe fe90 	bl	8007a96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	68b8      	ldr	r0, [r7, #8]
 8008d86:	f000 fa55 	bl	8009234 <prvAddCurrentTaskToDelayedList>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20000af0 	.word	0x20000af0

08008d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	3318      	adds	r3, #24
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fec1 	bl	8007b50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dce:	4b1e      	ldr	r3, [pc, #120]	; (8008e48 <xTaskRemoveFromEventList+0xb0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d11d      	bne.n	8008e12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe feb8 	bl	8007b50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	4b19      	ldr	r3, [pc, #100]	; (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d903      	bls.n	8008df4 <xTaskRemoveFromEventList+0x5c>
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df0:	4a16      	ldr	r2, [pc, #88]	; (8008e4c <xTaskRemoveFromEventList+0xb4>)
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df8:	4613      	mov	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4a13      	ldr	r2, [pc, #76]	; (8008e50 <xTaskRemoveFromEventList+0xb8>)
 8008e02:	441a      	add	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	3304      	adds	r3, #4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f7fe fe43 	bl	8007a96 <vListInsertEnd>
 8008e10:	e005      	b.n	8008e1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3318      	adds	r3, #24
 8008e16:	4619      	mov	r1, r3
 8008e18:	480e      	ldr	r0, [pc, #56]	; (8008e54 <xTaskRemoveFromEventList+0xbc>)
 8008e1a:	f7fe fe3c 	bl	8007a96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	4b0d      	ldr	r3, [pc, #52]	; (8008e58 <xTaskRemoveFromEventList+0xc0>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d905      	bls.n	8008e38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <xTaskRemoveFromEventList+0xc4>)
 8008e32:	2201      	movs	r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	e001      	b.n	8008e3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e3c:	697b      	ldr	r3, [r7, #20]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000fec 	.word	0x20000fec
 8008e4c:	20000fcc 	.word	0x20000fcc
 8008e50:	20000af4 	.word	0x20000af4
 8008e54:	20000f84 	.word	0x20000f84
 8008e58:	20000af0 	.word	0x20000af0
 8008e5c:	20000fd8 	.word	0x20000fd8

08008e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e68:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <vTaskInternalSetTimeOutState+0x24>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <vTaskInternalSetTimeOutState+0x28>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	20000fdc 	.word	0x20000fdc
 8008e88:	20000fc8 	.word	0x20000fc8

08008e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	613b      	str	r3, [r7, #16]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60fb      	str	r3, [r7, #12]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ece:	f000 fe81 	bl	8009bd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ed2:	4b1d      	ldr	r3, [pc, #116]	; (8008f48 <xTaskCheckForTimeOut+0xbc>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eea:	d102      	bne.n	8008ef2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	e023      	b.n	8008f3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <xTaskCheckForTimeOut+0xc0>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d007      	beq.n	8008f0e <xTaskCheckForTimeOut+0x82>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d302      	bcc.n	8008f0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	e015      	b.n	8008f3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d20b      	bcs.n	8008f30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	1ad2      	subs	r2, r2, r3
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ff9b 	bl	8008e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
 8008f2e:	e004      	b.n	8008f3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f36:	2301      	movs	r3, #1
 8008f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f3a:	f000 fe7b 	bl	8009c34 <vPortExitCritical>

	return xReturn;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3720      	adds	r7, #32
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000fc8 	.word	0x20000fc8
 8008f4c:	20000fdc 	.word	0x20000fdc

08008f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f54:	4b03      	ldr	r3, [pc, #12]	; (8008f64 <vTaskMissedYield+0x14>)
 8008f56:	2201      	movs	r2, #1
 8008f58:	601a      	str	r2, [r3, #0]
}
 8008f5a:	bf00      	nop
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20000fd8 	.word	0x20000fd8

08008f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f70:	f000 f852 	bl	8009018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <prvIdleTask+0x28>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d9f9      	bls.n	8008f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <prvIdleTask+0x2c>)
 8008f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f8c:	e7f0      	b.n	8008f70 <prvIdleTask+0x8>
 8008f8e:	bf00      	nop
 8008f90:	20000af4 	.word	0x20000af4
 8008f94:	e000ed04 	.word	0xe000ed04

08008f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	607b      	str	r3, [r7, #4]
 8008fa2:	e00c      	b.n	8008fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4a12      	ldr	r2, [pc, #72]	; (8008ff8 <prvInitialiseTaskLists+0x60>)
 8008fb0:	4413      	add	r3, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fd42 	bl	8007a3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	607b      	str	r3, [r7, #4]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b37      	cmp	r3, #55	; 0x37
 8008fc2:	d9ef      	bls.n	8008fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fc4:	480d      	ldr	r0, [pc, #52]	; (8008ffc <prvInitialiseTaskLists+0x64>)
 8008fc6:	f7fe fd39 	bl	8007a3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fca:	480d      	ldr	r0, [pc, #52]	; (8009000 <prvInitialiseTaskLists+0x68>)
 8008fcc:	f7fe fd36 	bl	8007a3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fd0:	480c      	ldr	r0, [pc, #48]	; (8009004 <prvInitialiseTaskLists+0x6c>)
 8008fd2:	f7fe fd33 	bl	8007a3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fd6:	480c      	ldr	r0, [pc, #48]	; (8009008 <prvInitialiseTaskLists+0x70>)
 8008fd8:	f7fe fd30 	bl	8007a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fdc:	480b      	ldr	r0, [pc, #44]	; (800900c <prvInitialiseTaskLists+0x74>)
 8008fde:	f7fe fd2d 	bl	8007a3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <prvInitialiseTaskLists+0x78>)
 8008fe4:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <prvInitialiseTaskLists+0x64>)
 8008fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <prvInitialiseTaskLists+0x7c>)
 8008fea:	4a05      	ldr	r2, [pc, #20]	; (8009000 <prvInitialiseTaskLists+0x68>)
 8008fec:	601a      	str	r2, [r3, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20000af4 	.word	0x20000af4
 8008ffc:	20000f54 	.word	0x20000f54
 8009000:	20000f68 	.word	0x20000f68
 8009004:	20000f84 	.word	0x20000f84
 8009008:	20000f98 	.word	0x20000f98
 800900c:	20000fb0 	.word	0x20000fb0
 8009010:	20000f7c 	.word	0x20000f7c
 8009014:	20000f80 	.word	0x20000f80

08009018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800901e:	e019      	b.n	8009054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009020:	f000 fdd8 	bl	8009bd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009024:	4b10      	ldr	r3, [pc, #64]	; (8009068 <prvCheckTasksWaitingTermination+0x50>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3304      	adds	r3, #4
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe fd8d 	bl	8007b50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009036:	4b0d      	ldr	r3, [pc, #52]	; (800906c <prvCheckTasksWaitingTermination+0x54>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3b01      	subs	r3, #1
 800903c:	4a0b      	ldr	r2, [pc, #44]	; (800906c <prvCheckTasksWaitingTermination+0x54>)
 800903e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009040:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <prvCheckTasksWaitingTermination+0x58>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3b01      	subs	r3, #1
 8009046:	4a0a      	ldr	r2, [pc, #40]	; (8009070 <prvCheckTasksWaitingTermination+0x58>)
 8009048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800904a:	f000 fdf3 	bl	8009c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f810 	bl	8009074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009054:	4b06      	ldr	r3, [pc, #24]	; (8009070 <prvCheckTasksWaitingTermination+0x58>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e1      	bne.n	8009020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800905c:	bf00      	nop
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000f98 	.word	0x20000f98
 800906c:	20000fc4 	.word	0x20000fc4
 8009070:	20000fac 	.word	0x20000fac

08009074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3354      	adds	r3, #84	; 0x54
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f9e9 	bl	800a458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800908c:	2b00      	cmp	r3, #0
 800908e:	d108      	bne.n	80090a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009094:	4618      	mov	r0, r3
 8009096:	f000 febf 	bl	8009e18 <vPortFree>
				vPortFree( pxTCB );
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 febc 	bl	8009e18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a0:	e018      	b.n	80090d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d103      	bne.n	80090b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 feb3 	bl	8009e18 <vPortFree>
	}
 80090b2:	e00f      	b.n	80090d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d00a      	beq.n	80090d4 <prvDeleteTCB+0x60>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	60fb      	str	r3, [r7, #12]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <prvDeleteTCB+0x5e>
	}
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e2:	4b0c      	ldr	r3, [pc, #48]	; (8009114 <prvResetNextTaskUnblockTime+0x38>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d104      	bne.n	80090f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090ec:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <prvResetNextTaskUnblockTime+0x3c>)
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090f4:	e008      	b.n	8009108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <prvResetNextTaskUnblockTime+0x38>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4a04      	ldr	r2, [pc, #16]	; (8009118 <prvResetNextTaskUnblockTime+0x3c>)
 8009106:	6013      	str	r3, [r2, #0]
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	20000f7c 	.word	0x20000f7c
 8009118:	20000fe4 	.word	0x20000fe4

0800911c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009122:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <xTaskGetSchedulerState+0x34>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800912a:	2301      	movs	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	e008      	b.n	8009142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009130:	4b08      	ldr	r3, [pc, #32]	; (8009154 <xTaskGetSchedulerState+0x38>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d102      	bne.n	800913e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009138:	2302      	movs	r3, #2
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e001      	b.n	8009142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009142:	687b      	ldr	r3, [r7, #4]
	}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20000fd0 	.word	0x20000fd0
 8009154:	20000fec 	.word	0x20000fec

08009158 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d056      	beq.n	800921c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800916e:	4b2e      	ldr	r3, [pc, #184]	; (8009228 <xTaskPriorityDisinherit+0xd0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	429a      	cmp	r2, r3
 8009176:	d00a      	beq.n	800918e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	60fb      	str	r3, [r7, #12]
}
 800918a:	bf00      	nop
 800918c:	e7fe      	b.n	800918c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10a      	bne.n	80091ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	60bb      	str	r3, [r7, #8]
}
 80091a8:	bf00      	nop
 80091aa:	e7fe      	b.n	80091aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b0:	1e5a      	subs	r2, r3, #1
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091be:	429a      	cmp	r2, r3
 80091c0:	d02c      	beq.n	800921c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d128      	bne.n	800921c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	3304      	adds	r3, #4
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fcbe 	bl	8007b50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ec:	4b0f      	ldr	r3, [pc, #60]	; (800922c <xTaskPriorityDisinherit+0xd4>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d903      	bls.n	80091fc <xTaskPriorityDisinherit+0xa4>
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	4a0c      	ldr	r2, [pc, #48]	; (800922c <xTaskPriorityDisinherit+0xd4>)
 80091fa:	6013      	str	r3, [r2, #0]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009200:	4613      	mov	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4a09      	ldr	r2, [pc, #36]	; (8009230 <xTaskPriorityDisinherit+0xd8>)
 800920a:	441a      	add	r2, r3
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	3304      	adds	r3, #4
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	f7fe fc3f 	bl	8007a96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800921c:	697b      	ldr	r3, [r7, #20]
	}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000af0 	.word	0x20000af0
 800922c:	20000fcc 	.word	0x20000fcc
 8009230:	20000af4 	.word	0x20000af4

08009234 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800923e:	4b21      	ldr	r3, [pc, #132]	; (80092c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009244:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3304      	adds	r3, #4
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fc80 	bl	8007b50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009256:	d10a      	bne.n	800926e <prvAddCurrentTaskToDelayedList+0x3a>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800925e:	4b1a      	ldr	r3, [pc, #104]	; (80092c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4819      	ldr	r0, [pc, #100]	; (80092cc <prvAddCurrentTaskToDelayedList+0x98>)
 8009268:	f7fe fc15 	bl	8007a96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800926c:	e026      	b.n	80092bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4413      	add	r3, r2
 8009274:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009276:	4b14      	ldr	r3, [pc, #80]	; (80092c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	429a      	cmp	r2, r3
 8009284:	d209      	bcs.n	800929a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009286:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3304      	adds	r3, #4
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f7fe fc23 	bl	8007ade <vListInsert>
}
 8009298:	e010      	b.n	80092bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800929a:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7fe fc19 	bl	8007ade <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68ba      	ldr	r2, [r7, #8]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d202      	bcs.n	80092bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092b6:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	6013      	str	r3, [r2, #0]
}
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000fc8 	.word	0x20000fc8
 80092c8:	20000af0 	.word	0x20000af0
 80092cc:	20000fb0 	.word	0x20000fb0
 80092d0:	20000f80 	.word	0x20000f80
 80092d4:	20000f7c 	.word	0x20000f7c
 80092d8:	20000fe4 	.word	0x20000fe4

080092dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092e6:	f000 fb07 	bl	80098f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092ea:	4b1c      	ldr	r3, [pc, #112]	; (800935c <xTimerCreateTimerTask+0x80>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d021      	beq.n	8009336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092fa:	1d3a      	adds	r2, r7, #4
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	f107 030c 	add.w	r3, r7, #12
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fb7f 	bl	8007a08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	9202      	str	r2, [sp, #8]
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	2302      	movs	r3, #2
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	460a      	mov	r2, r1
 800931c:	4910      	ldr	r1, [pc, #64]	; (8009360 <xTimerCreateTimerTask+0x84>)
 800931e:	4811      	ldr	r0, [pc, #68]	; (8009364 <xTimerCreateTimerTask+0x88>)
 8009320:	f7ff f92c 	bl	800857c <xTaskCreateStatic>
 8009324:	4603      	mov	r3, r0
 8009326:	4a10      	ldr	r2, [pc, #64]	; (8009368 <xTimerCreateTimerTask+0x8c>)
 8009328:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800932a:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <xTimerCreateTimerTask+0x8c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009332:	2301      	movs	r3, #1
 8009334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	613b      	str	r3, [r7, #16]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009352:	697b      	ldr	r3, [r7, #20]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20001020 	.word	0x20001020
 8009360:	0800ae1c 	.word	0x0800ae1c
 8009364:	080094a1 	.word	0x080094a1
 8009368:	20001024 	.word	0x20001024

0800936c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08a      	sub	sp, #40	; 0x28
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800937a:	2300      	movs	r3, #0
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	623b      	str	r3, [r7, #32]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800939a:	4b1a      	ldr	r3, [pc, #104]	; (8009404 <xTimerGenericCommand+0x98>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d02a      	beq.n	80093f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	dc18      	bgt.n	80093e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093b4:	f7ff feb2 	bl	800911c <xTaskGetSchedulerState>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d109      	bne.n	80093d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093be:	4b11      	ldr	r3, [pc, #68]	; (8009404 <xTimerGenericCommand+0x98>)
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f107 0110 	add.w	r1, r7, #16
 80093c6:	2300      	movs	r3, #0
 80093c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ca:	f7fe fcef 	bl	8007dac <xQueueGenericSend>
 80093ce:	6278      	str	r0, [r7, #36]	; 0x24
 80093d0:	e012      	b.n	80093f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <xTimerGenericCommand+0x98>)
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	f107 0110 	add.w	r1, r7, #16
 80093da:	2300      	movs	r3, #0
 80093dc:	2200      	movs	r2, #0
 80093de:	f7fe fce5 	bl	8007dac <xQueueGenericSend>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24
 80093e4:	e008      	b.n	80093f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093e6:	4b07      	ldr	r3, [pc, #28]	; (8009404 <xTimerGenericCommand+0x98>)
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f107 0110 	add.w	r1, r7, #16
 80093ee:	2300      	movs	r3, #0
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	f7fe fdd9 	bl	8007fa8 <xQueueGenericSendFromISR>
 80093f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3728      	adds	r7, #40	; 0x28
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20001020 	.word	0x20001020

08009408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af02      	add	r7, sp, #8
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009412:	4b22      	ldr	r3, [pc, #136]	; (800949c <prvProcessExpiredTimer+0x94>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	3304      	adds	r3, #4
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe fb95 	bl	8007b50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d022      	beq.n	800947a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	18d1      	adds	r1, r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	6978      	ldr	r0, [r7, #20]
 8009442:	f000 f8d1 	bl	80095e8 <prvInsertTimerInActiveList>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01f      	beq.n	800948c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800944c:	2300      	movs	r3, #0
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	2300      	movs	r3, #0
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	2100      	movs	r1, #0
 8009456:	6978      	ldr	r0, [r7, #20]
 8009458:	f7ff ff88 	bl	800936c <xTimerGenericCommand>
 800945c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d113      	bne.n	800948c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	60fb      	str	r3, [r7, #12]
}
 8009476:	bf00      	nop
 8009478:	e7fe      	b.n	8009478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009480:	f023 0301 	bic.w	r3, r3, #1
 8009484:	b2da      	uxtb	r2, r3
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	6978      	ldr	r0, [r7, #20]
 8009492:	4798      	blx	r3
}
 8009494:	bf00      	nop
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20001018 	.word	0x20001018

080094a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094a8:	f107 0308 	add.w	r3, r7, #8
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 f857 	bl	8009560 <prvGetNextExpireTime>
 80094b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4619      	mov	r1, r3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f803 	bl	80094c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094be:	f000 f8d5 	bl	800966c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094c2:	e7f1      	b.n	80094a8 <prvTimerTask+0x8>

080094c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094ce:	f7ff fa39 	bl	8008944 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094d2:	f107 0308 	add.w	r3, r7, #8
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f866 	bl	80095a8 <prvSampleTimeNow>
 80094dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d130      	bne.n	8009546 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <prvProcessTimerOrBlockTask+0x3c>
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d806      	bhi.n	8009500 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094f2:	f7ff fa35 	bl	8008960 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff ff85 	bl	8009408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094fe:	e024      	b.n	800954a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d008      	beq.n	8009518 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009506:	4b13      	ldr	r3, [pc, #76]	; (8009554 <prvProcessTimerOrBlockTask+0x90>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <prvProcessTimerOrBlockTask+0x50>
 8009510:	2301      	movs	r3, #1
 8009512:	e000      	b.n	8009516 <prvProcessTimerOrBlockTask+0x52>
 8009514:	2300      	movs	r3, #0
 8009516:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009518:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <prvProcessTimerOrBlockTask+0x94>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4619      	mov	r1, r3
 8009526:	f7fe fff5 	bl	8008514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800952a:	f7ff fa19 	bl	8008960 <xTaskResumeAll>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009534:	4b09      	ldr	r3, [pc, #36]	; (800955c <prvProcessTimerOrBlockTask+0x98>)
 8009536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	f3bf 8f6f 	isb	sy
}
 8009544:	e001      	b.n	800954a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009546:	f7ff fa0b 	bl	8008960 <xTaskResumeAll>
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	2000101c 	.word	0x2000101c
 8009558:	20001020 	.word	0x20001020
 800955c:	e000ed04 	.word	0xe000ed04

08009560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <prvGetNextExpireTime+0x44>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <prvGetNextExpireTime+0x16>
 8009572:	2201      	movs	r2, #1
 8009574:	e000      	b.n	8009578 <prvGetNextExpireTime+0x18>
 8009576:	2200      	movs	r2, #0
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d105      	bne.n	8009590 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <prvGetNextExpireTime+0x44>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e001      	b.n	8009594 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20001018 	.word	0x20001018

080095a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095b0:	f7ff fa74 	bl	8008a9c <xTaskGetTickCount>
 80095b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095b6:	4b0b      	ldr	r3, [pc, #44]	; (80095e4 <prvSampleTimeNow+0x3c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d205      	bcs.n	80095cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095c0:	f000 f936 	bl	8009830 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e002      	b.n	80095d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095d2:	4a04      	ldr	r2, [pc, #16]	; (80095e4 <prvSampleTimeNow+0x3c>)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095d8:	68fb      	ldr	r3, [r7, #12]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20001028 	.word	0x20001028

080095e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	429a      	cmp	r2, r3
 800960c:	d812      	bhi.n	8009634 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	1ad2      	subs	r2, r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	429a      	cmp	r2, r3
 800961a:	d302      	bcc.n	8009622 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e01b      	b.n	800965a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <prvInsertTimerInActiveList+0x7c>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f7fe fa56 	bl	8007ade <vListInsert>
 8009632:	e012      	b.n	800965a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d206      	bcs.n	800964a <prvInsertTimerInActiveList+0x62>
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	429a      	cmp	r2, r3
 8009642:	d302      	bcc.n	800964a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009644:	2301      	movs	r3, #1
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e007      	b.n	800965a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <prvInsertTimerInActiveList+0x80>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7fe fa42 	bl	8007ade <vListInsert>
		}
	}

	return xProcessTimerNow;
 800965a:	697b      	ldr	r3, [r7, #20]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	2000101c 	.word	0x2000101c
 8009668:	20001018 	.word	0x20001018

0800966c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08e      	sub	sp, #56	; 0x38
 8009670:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009672:	e0ca      	b.n	800980a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	da18      	bge.n	80096ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800967a:	1d3b      	adds	r3, r7, #4
 800967c:	3304      	adds	r3, #4
 800967e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	61fb      	str	r3, [r7, #28]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a2:	6850      	ldr	r0, [r2, #4]
 80096a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096a6:	6892      	ldr	r2, [r2, #8]
 80096a8:	4611      	mov	r1, r2
 80096aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f2c0 80ab 	blt.w	800980a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	3304      	adds	r3, #4
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fe fa43 	bl	8007b50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096ca:	463b      	mov	r3, r7
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff ff6b 	bl	80095a8 <prvSampleTimeNow>
 80096d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b09      	cmp	r3, #9
 80096d8:	f200 8096 	bhi.w	8009808 <prvProcessReceivedCommands+0x19c>
 80096dc:	a201      	add	r2, pc, #4	; (adr r2, 80096e4 <prvProcessReceivedCommands+0x78>)
 80096de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e2:	bf00      	nop
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	0800970d 	.word	0x0800970d
 80096f0:	08009781 	.word	0x08009781
 80096f4:	08009795 	.word	0x08009795
 80096f8:	080097df 	.word	0x080097df
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	0800970d 	.word	0x0800970d
 8009704:	08009781 	.word	0x08009781
 8009708:	08009795 	.word	0x08009795
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009712:	f043 0301 	orr.w	r3, r3, #1
 8009716:	b2da      	uxtb	r2, r3
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	18d1      	adds	r1, r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972c:	f7ff ff5c 	bl	80095e8 <prvInsertTimerInActiveList>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d069      	beq.n	800980a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d05e      	beq.n	800980a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	441a      	add	r2, r3
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	2100      	movs	r1, #0
 800975c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975e:	f7ff fe05 	bl	800936c <xTimerGenericCommand>
 8009762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d14f      	bne.n	800980a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	61bb      	str	r3, [r7, #24]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009786:	f023 0301 	bic.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009792:	e03a      	b.n	800980a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	617b      	str	r3, [r7, #20]
}
 80097c6:	bf00      	nop
 80097c8:	e7fe      	b.n	80097c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	18d1      	adds	r1, r2, r3
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d8:	f7ff ff06 	bl	80095e8 <prvInsertTimerInActiveList>
					break;
 80097dc:	e015      	b.n	800980a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80097ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ee:	f000 fb13 	bl	8009e18 <vPortFree>
 80097f2:	e00a      	b.n	800980a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009806:	e000      	b.n	800980a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009808:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800980a:	4b08      	ldr	r3, [pc, #32]	; (800982c <prvProcessReceivedCommands+0x1c0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	1d39      	adds	r1, r7, #4
 8009810:	2200      	movs	r2, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fc64 	bl	80080e0 <xQueueReceive>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	f47f af2a 	bne.w	8009674 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	3730      	adds	r7, #48	; 0x30
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20001020 	.word	0x20001020

08009830 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009836:	e048      	b.n	80098ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009838:	4b2d      	ldr	r3, [pc, #180]	; (80098f0 <prvSwitchTimerLists+0xc0>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009842:	4b2b      	ldr	r3, [pc, #172]	; (80098f0 <prvSwitchTimerLists+0xc0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3304      	adds	r3, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe f97d 	bl	8007b50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	d02e      	beq.n	80098ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4413      	add	r3, r2
 8009874:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	429a      	cmp	r2, r3
 800987c:	d90e      	bls.n	800989c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800988a:	4b19      	ldr	r3, [pc, #100]	; (80098f0 <prvSwitchTimerLists+0xc0>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fe f922 	bl	8007ade <vListInsert>
 800989a:	e016      	b.n	80098ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800989c:	2300      	movs	r3, #0
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2300      	movs	r3, #0
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	2100      	movs	r1, #0
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fd60 	bl	800936c <xTimerGenericCommand>
 80098ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	603b      	str	r3, [r7, #0]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098ca:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <prvSwitchTimerLists+0xc0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1b1      	bne.n	8009838 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <prvSwitchTimerLists+0xc0>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <prvSwitchTimerLists+0xc4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a04      	ldr	r2, [pc, #16]	; (80098f0 <prvSwitchTimerLists+0xc0>)
 80098e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098e2:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <prvSwitchTimerLists+0xc4>)
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	6013      	str	r3, [r2, #0]
}
 80098e8:	bf00      	nop
 80098ea:	3718      	adds	r7, #24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20001018 	.word	0x20001018
 80098f4:	2000101c 	.word	0x2000101c

080098f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098fe:	f000 f969 	bl	8009bd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <prvCheckForValidListAndQueue+0x60>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d120      	bne.n	800994c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800990a:	4814      	ldr	r0, [pc, #80]	; (800995c <prvCheckForValidListAndQueue+0x64>)
 800990c:	f7fe f896 	bl	8007a3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009910:	4813      	ldr	r0, [pc, #76]	; (8009960 <prvCheckForValidListAndQueue+0x68>)
 8009912:	f7fe f893 	bl	8007a3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009916:	4b13      	ldr	r3, [pc, #76]	; (8009964 <prvCheckForValidListAndQueue+0x6c>)
 8009918:	4a10      	ldr	r2, [pc, #64]	; (800995c <prvCheckForValidListAndQueue+0x64>)
 800991a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800991c:	4b12      	ldr	r3, [pc, #72]	; (8009968 <prvCheckForValidListAndQueue+0x70>)
 800991e:	4a10      	ldr	r2, [pc, #64]	; (8009960 <prvCheckForValidListAndQueue+0x68>)
 8009920:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009922:	2300      	movs	r3, #0
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	4b11      	ldr	r3, [pc, #68]	; (800996c <prvCheckForValidListAndQueue+0x74>)
 8009928:	4a11      	ldr	r2, [pc, #68]	; (8009970 <prvCheckForValidListAndQueue+0x78>)
 800992a:	2110      	movs	r1, #16
 800992c:	200a      	movs	r0, #10
 800992e:	f7fe f9a1 	bl	8007c74 <xQueueGenericCreateStatic>
 8009932:	4603      	mov	r3, r0
 8009934:	4a08      	ldr	r2, [pc, #32]	; (8009958 <prvCheckForValidListAndQueue+0x60>)
 8009936:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009938:	4b07      	ldr	r3, [pc, #28]	; (8009958 <prvCheckForValidListAndQueue+0x60>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d005      	beq.n	800994c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <prvCheckForValidListAndQueue+0x60>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	490b      	ldr	r1, [pc, #44]	; (8009974 <prvCheckForValidListAndQueue+0x7c>)
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fdba 	bl	80084c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800994c:	f000 f972 	bl	8009c34 <vPortExitCritical>
}
 8009950:	bf00      	nop
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20001020 	.word	0x20001020
 800995c:	20000ff0 	.word	0x20000ff0
 8009960:	20001004 	.word	0x20001004
 8009964:	20001018 	.word	0x20001018
 8009968:	2000101c 	.word	0x2000101c
 800996c:	200010cc 	.word	0x200010cc
 8009970:	2000102c 	.word	0x2000102c
 8009974:	0800ae24 	.word	0x0800ae24

08009978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3b04      	subs	r3, #4
 8009988:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3b04      	subs	r3, #4
 8009996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3b04      	subs	r3, #4
 80099a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099a8:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <pxPortInitialiseStack+0x64>)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3b14      	subs	r3, #20
 80099b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3b04      	subs	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f06f 0202 	mvn.w	r2, #2
 80099c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3b20      	subs	r3, #32
 80099cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099ce:	68fb      	ldr	r3, [r7, #12]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	080099e1 	.word	0x080099e1

080099e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099ea:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <prvTaskExitError+0x54>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099f2:	d00a      	beq.n	8009a0a <prvTaskExitError+0x2a>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	60fb      	str	r3, [r7, #12]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <prvTaskExitError+0x28>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60bb      	str	r3, [r7, #8]
}
 8009a1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a1e:	bf00      	nop
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0fc      	beq.n	8009a20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	2000000c 	.word	0x2000000c
	...

08009a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a40:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <pxCurrentTCBConst2>)
 8009a42:	6819      	ldr	r1, [r3, #0]
 8009a44:	6808      	ldr	r0, [r1, #0]
 8009a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4a:	f380 8809 	msr	PSP, r0
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8811 	msr	BASEPRI, r0
 8009a5a:	4770      	bx	lr
 8009a5c:	f3af 8000 	nop.w

08009a60 <pxCurrentTCBConst2>:
 8009a60:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop

08009a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a68:	4808      	ldr	r0, [pc, #32]	; (8009a8c <prvPortStartFirstTask+0x24>)
 8009a6a:	6800      	ldr	r0, [r0, #0]
 8009a6c:	6800      	ldr	r0, [r0, #0]
 8009a6e:	f380 8808 	msr	MSP, r0
 8009a72:	f04f 0000 	mov.w	r0, #0
 8009a76:	f380 8814 	msr	CONTROL, r0
 8009a7a:	b662      	cpsie	i
 8009a7c:	b661      	cpsie	f
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	df00      	svc	0
 8009a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a8a:	bf00      	nop
 8009a8c:	e000ed08 	.word	0xe000ed08

08009a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a96:	4b46      	ldr	r3, [pc, #280]	; (8009bb0 <xPortStartScheduler+0x120>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a46      	ldr	r2, [pc, #280]	; (8009bb4 <xPortStartScheduler+0x124>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10a      	bne.n	8009ab6 <xPortStartScheduler+0x26>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	613b      	str	r3, [r7, #16]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ab6:	4b3e      	ldr	r3, [pc, #248]	; (8009bb0 <xPortStartScheduler+0x120>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a3f      	ldr	r2, [pc, #252]	; (8009bb8 <xPortStartScheduler+0x128>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d10a      	bne.n	8009ad6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60fb      	str	r3, [r7, #12]
}
 8009ad2:	bf00      	nop
 8009ad4:	e7fe      	b.n	8009ad4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ad6:	4b39      	ldr	r3, [pc, #228]	; (8009bbc <xPortStartScheduler+0x12c>)
 8009ad8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	22ff      	movs	r2, #255	; 0xff
 8009ae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	4b31      	ldr	r3, [pc, #196]	; (8009bc0 <xPortStartScheduler+0x130>)
 8009afc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009afe:	4b31      	ldr	r3, [pc, #196]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b00:	2207      	movs	r2, #7
 8009b02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b04:	e009      	b.n	8009b1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b06:	4b2f      	ldr	r3, [pc, #188]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	4a2d      	ldr	r2, [pc, #180]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b1a:	78fb      	ldrb	r3, [r7, #3]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b22:	2b80      	cmp	r3, #128	; 0x80
 8009b24:	d0ef      	beq.n	8009b06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f1c3 0307 	rsb	r3, r3, #7
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d00a      	beq.n	8009b48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	60bb      	str	r3, [r7, #8]
}
 8009b44:	bf00      	nop
 8009b46:	e7fe      	b.n	8009b46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b48:	4b1e      	ldr	r3, [pc, #120]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	4a1d      	ldr	r2, [pc, #116]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b52:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b5a:	4a1a      	ldr	r2, [pc, #104]	; (8009bc4 <xPortStartScheduler+0x134>)
 8009b5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b66:	4b18      	ldr	r3, [pc, #96]	; (8009bc8 <xPortStartScheduler+0x138>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a17      	ldr	r2, [pc, #92]	; (8009bc8 <xPortStartScheduler+0x138>)
 8009b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <xPortStartScheduler+0x138>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a14      	ldr	r2, [pc, #80]	; (8009bc8 <xPortStartScheduler+0x138>)
 8009b78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b7e:	f000 f8dd 	bl	8009d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b82:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <xPortStartScheduler+0x13c>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b88:	f000 f8fc 	bl	8009d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b8c:	4b10      	ldr	r3, [pc, #64]	; (8009bd0 <xPortStartScheduler+0x140>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a0f      	ldr	r2, [pc, #60]	; (8009bd0 <xPortStartScheduler+0x140>)
 8009b92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b98:	f7ff ff66 	bl	8009a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b9c:	f7ff f848 	bl	8008c30 <vTaskSwitchContext>
	prvTaskExitError();
 8009ba0:	f7ff ff1e 	bl	80099e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	e000ed00 	.word	0xe000ed00
 8009bb4:	410fc271 	.word	0x410fc271
 8009bb8:	410fc270 	.word	0x410fc270
 8009bbc:	e000e400 	.word	0xe000e400
 8009bc0:	2000111c 	.word	0x2000111c
 8009bc4:	20001120 	.word	0x20001120
 8009bc8:	e000ed20 	.word	0xe000ed20
 8009bcc:	2000000c 	.word	0x2000000c
 8009bd0:	e000ef34 	.word	0xe000ef34

08009bd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	607b      	str	r3, [r7, #4]
}
 8009bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bee:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <vPortEnterCritical+0x58>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4a0d      	ldr	r2, [pc, #52]	; (8009c2c <vPortEnterCritical+0x58>)
 8009bf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bf8:	4b0c      	ldr	r3, [pc, #48]	; (8009c2c <vPortEnterCritical+0x58>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d10f      	bne.n	8009c20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c00:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <vPortEnterCritical+0x5c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	603b      	str	r3, [r7, #0]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <vPortEnterCritical+0x4a>
	}
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	2000000c 	.word	0x2000000c
 8009c30:	e000ed04 	.word	0xe000ed04

08009c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c3a:	4b12      	ldr	r3, [pc, #72]	; (8009c84 <vPortExitCritical+0x50>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10a      	bne.n	8009c58 <vPortExitCritical+0x24>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	607b      	str	r3, [r7, #4]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c58:	4b0a      	ldr	r3, [pc, #40]	; (8009c84 <vPortExitCritical+0x50>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	4a09      	ldr	r2, [pc, #36]	; (8009c84 <vPortExitCritical+0x50>)
 8009c60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <vPortExitCritical+0x50>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <vPortExitCritical+0x42>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	f383 8811 	msr	BASEPRI, r3
}
 8009c74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	2000000c 	.word	0x2000000c
	...

08009c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c90:	f3ef 8009 	mrs	r0, PSP
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <pxCurrentTCBConst>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	f01e 0f10 	tst.w	lr, #16
 8009ca0:	bf08      	it	eq
 8009ca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009caa:	6010      	str	r0, [r2, #0]
 8009cac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cb4:	f380 8811 	msr	BASEPRI, r0
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f7fe ffb6 	bl	8008c30 <vTaskSwitchContext>
 8009cc4:	f04f 0000 	mov.w	r0, #0
 8009cc8:	f380 8811 	msr	BASEPRI, r0
 8009ccc:	bc09      	pop	{r0, r3}
 8009cce:	6819      	ldr	r1, [r3, #0]
 8009cd0:	6808      	ldr	r0, [r1, #0]
 8009cd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd6:	f01e 0f10 	tst.w	lr, #16
 8009cda:	bf08      	it	eq
 8009cdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ce0:	f380 8809 	msr	PSP, r0
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	f3af 8000 	nop.w

08009cf0 <pxCurrentTCBConst>:
 8009cf0:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop

08009cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	607b      	str	r3, [r7, #4]
}
 8009d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d12:	f7fe fed3 	bl	8008abc <xTaskIncrementTick>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d1c:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <xPortSysTickHandler+0x40>)
 8009d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	2300      	movs	r3, #0
 8009d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	f383 8811 	msr	BASEPRI, r3
}
 8009d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <vPortSetupTimerInterrupt+0x34>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d46:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <vPortSetupTimerInterrupt+0x38>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <vPortSetupTimerInterrupt+0x3c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a0a      	ldr	r2, [pc, #40]	; (8009d7c <vPortSetupTimerInterrupt+0x40>)
 8009d52:	fba2 2303 	umull	r2, r3, r2, r3
 8009d56:	099b      	lsrs	r3, r3, #6
 8009d58:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <vPortSetupTimerInterrupt+0x44>)
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d5e:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <vPortSetupTimerInterrupt+0x34>)
 8009d60:	2207      	movs	r2, #7
 8009d62:	601a      	str	r2, [r3, #0]
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	e000e010 	.word	0xe000e010
 8009d74:	e000e018 	.word	0xe000e018
 8009d78:	20000000 	.word	0x20000000
 8009d7c:	10624dd3 	.word	0x10624dd3
 8009d80:	e000e014 	.word	0xe000e014

08009d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d94 <vPortEnableVFP+0x10>
 8009d88:	6801      	ldr	r1, [r0, #0]
 8009d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d8e:	6001      	str	r1, [r0, #0]
 8009d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d92:	bf00      	nop
 8009d94:	e000ed88 	.word	0xe000ed88

08009d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d9e:	f3ef 8305 	mrs	r3, IPSR
 8009da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b0f      	cmp	r3, #15
 8009da8:	d914      	bls.n	8009dd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009daa:	4a17      	ldr	r2, [pc, #92]	; (8009e08 <vPortValidateInterruptPriority+0x70>)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009db4:	4b15      	ldr	r3, [pc, #84]	; (8009e0c <vPortValidateInterruptPriority+0x74>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	7afa      	ldrb	r2, [r7, #11]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d20a      	bcs.n	8009dd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	607b      	str	r3, [r7, #4]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dd4:	4b0e      	ldr	r3, [pc, #56]	; (8009e10 <vPortValidateInterruptPriority+0x78>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ddc:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <vPortValidateInterruptPriority+0x7c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d90a      	bls.n	8009dfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	603b      	str	r3, [r7, #0]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <vPortValidateInterruptPriority+0x60>
	}
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	e000e3f0 	.word	0xe000e3f0
 8009e0c:	2000111c 	.word	0x2000111c
 8009e10:	e000ed0c 	.word	0xe000ed0c
 8009e14:	20001120 	.word	0x20001120

08009e18 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d04d      	beq.n	8009ec6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e2a:	2308      	movs	r3, #8
 8009e2c:	425b      	negs	r3, r3
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4413      	add	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	4b24      	ldr	r3, [pc, #144]	; (8009ed0 <vPortFree+0xb8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4013      	ands	r3, r2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <vPortFree+0x44>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60fb      	str	r3, [r7, #12]
}
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00a      	beq.n	8009e7a <vPortFree+0x62>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60bb      	str	r3, [r7, #8]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <vPortFree+0xb8>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4013      	ands	r3, r2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01e      	beq.n	8009ec6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d11a      	bne.n	8009ec6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	4b0e      	ldr	r3, [pc, #56]	; (8009ed0 <vPortFree+0xb8>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	43db      	mvns	r3, r3
 8009e9a:	401a      	ands	r2, r3
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ea0:	f7fe fd50 	bl	8008944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	4b0a      	ldr	r3, [pc, #40]	; (8009ed4 <vPortFree+0xbc>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4413      	add	r3, r2
 8009eae:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <vPortFree+0xbc>)
 8009eb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eb2:	6938      	ldr	r0, [r7, #16]
 8009eb4:	f000 f812 	bl	8009edc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009eb8:	4b07      	ldr	r3, [pc, #28]	; (8009ed8 <vPortFree+0xc0>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	4a06      	ldr	r2, [pc, #24]	; (8009ed8 <vPortFree+0xc0>)
 8009ec0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ec2:	f7fe fd4d 	bl	8008960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20001138 	.word	0x20001138
 8009ed4:	20001130 	.word	0x20001130
 8009ed8:	20001134 	.word	0x20001134

08009edc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ee4:	4b28      	ldr	r3, [pc, #160]	; (8009f88 <prvInsertBlockIntoFreeList+0xac>)
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e002      	b.n	8009ef0 <prvInsertBlockIntoFreeList+0x14>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d8f7      	bhi.n	8009eea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	4413      	add	r3, r2
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d108      	bne.n	8009f1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	441a      	add	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d118      	bne.n	8009f64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <prvInsertBlockIntoFreeList+0xb0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d00d      	beq.n	8009f5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	441a      	add	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]
 8009f58:	e008      	b.n	8009f6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <prvInsertBlockIntoFreeList+0xb0>)
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e003      	b.n	8009f6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d002      	beq.n	8009f7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f7a:	bf00      	nop
 8009f7c:	3714      	adds	r7, #20
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	20001124 	.word	0x20001124
 8009f8c:	2000112c 	.word	0x2000112c

08009f90 <_ZN6System4initEv>:
#include <cstdio>
#include "cmsis_os2.h"
#include "stm32g4xx_hal.h"


void System::init(void) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b0a2      	sub	sp, #136	; 0x88
 8009f94:	af00      	add	r7, sp, #0
	const uint8_t TEST_BUF_SIZE = 64;
 8009f96:	2340      	movs	r3, #64	; 0x40
 8009f98:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	char test_buf_init[TEST_BUF_SIZE];
	char test_buf_loop[TEST_BUF_SIZE];

    snprintf(test_buf_init, sizeof(test_buf_init), "SYS INIT\n");
 8009f9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009fa0:	4a0b      	ldr	r2, [pc, #44]	; (8009fd0 <_ZN6System4initEv+0x40>)
 8009fa2:	2140      	movs	r1, #64	; 0x40
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fa1b 	bl	800a3e0 <sniprintf>
    uint8_t counter = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    while (true) {
    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
 8009fb0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8009fba:	1d38      	adds	r0, r7, #4
 8009fbc:	4a05      	ldr	r2, [pc, #20]	; (8009fd4 <_ZN6System4initEv+0x44>)
 8009fbe:	2140      	movs	r1, #64	; 0x40
 8009fc0:	f000 fa0e 	bl	800a3e0 <sniprintf>
    	HAL_Delay(1000);
 8009fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fc8:	f7f7 f83c 	bl	8001044 <HAL_Delay>
    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
 8009fcc:	e7f0      	b.n	8009fb0 <_ZN6System4initEv+0x20>
 8009fce:	bf00      	nop
 8009fd0:	0800ae2c 	.word	0x0800ae2c
 8009fd4:	0800ae38 	.word	0x0800ae38

08009fd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009fec:	4619      	mov	r1, r3
 8009fee:	4610      	mov	r0, r2
 8009ff0:	f7fc fc71 	bl	80068d6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	440b      	add	r3, r1
 800a01c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	78fb      	ldrb	r3, [r7, #3]
 800a024:	4619      	mov	r1, r3
 800a026:	f7fc fcab 	bl	8006980 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	00db      	lsls	r3, r3, #3
 800a050:	440b      	add	r3, r1
 800a052:	3324      	adds	r3, #36	; 0x24
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	78fb      	ldrb	r3, [r7, #3]
 800a058:	4619      	mov	r1, r3
 800a05a:	f7fc fcf4 	bl	8006a46 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a074:	4618      	mov	r0, r3
 800a076:	f7fc fe08 	bl	8006c8a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a08a:	2301      	movs	r3, #1
 800a08c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	795b      	ldrb	r3, [r3, #5]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d001      	beq.n	800a09a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a096:	f7f6 fd18 	bl	8000aca <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0a0:	7bfa      	ldrb	r2, [r7, #15]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fc fdb2 	bl	8006c0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fc fd5e 	bl	8006b72 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fc fdad 	bl	8006c2e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7a5b      	ldrb	r3, [r3, #9]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d005      	beq.n	800a0e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <HAL_PCD_SuspendCallback+0x30>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	4a03      	ldr	r2, [pc, #12]	; (800a0f0 <HAL_PCD_SuspendCallback+0x30>)
 800a0e2:	f043 0306 	orr.w	r3, r3, #6
 800a0e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	e000ed00 	.word	0xe000ed00

0800a0f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7a5b      	ldrb	r3, [r3, #9]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a104:	4b08      	ldr	r3, [pc, #32]	; (800a128 <HAL_PCD_ResumeCallback+0x34>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	4a07      	ldr	r2, [pc, #28]	; (800a128 <HAL_PCD_ResumeCallback+0x34>)
 800a10a:	f023 0306 	bic.w	r3, r3, #6
 800a10e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a110:	f000 f934 	bl	800a37c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fc fd9d 	bl	8006c5a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	e000ed00 	.word	0xe000ed00

0800a12c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	4608      	mov	r0, r1
 800a136:	4611      	mov	r1, r2
 800a138:	461a      	mov	r2, r3
 800a13a:	4603      	mov	r3, r0
 800a13c:	70fb      	strb	r3, [r7, #3]
 800a13e:	460b      	mov	r3, r1
 800a140:	70bb      	strb	r3, [r7, #2]
 800a142:	4613      	mov	r3, r2
 800a144:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a154:	78bb      	ldrb	r3, [r7, #2]
 800a156:	883a      	ldrh	r2, [r7, #0]
 800a158:	78f9      	ldrb	r1, [r7, #3]
 800a15a:	f7f7 ff97 	bl	800208c <HAL_PCD_EP_Open>
 800a15e:	4603      	mov	r3, r0
 800a160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	4618      	mov	r0, r3
 800a166:	f000 f90f 	bl	800a388 <USBD_Get_USB_Status>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a192:	78fa      	ldrb	r2, [r7, #3]
 800a194:	4611      	mov	r1, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f7f8 f83d 	bl	8002216 <HAL_PCD_EP_SetStall>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f8f0 	bl	800a388 <USBD_Get_USB_Status>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1d0:	78fa      	ldrb	r2, [r7, #3]
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7f8 f870 	bl	80022ba <HAL_PCD_EP_ClrStall>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 f8d1 	bl	800a388 <USBD_Get_USB_Status>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a206:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	da0b      	bge.n	800a228 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	4613      	mov	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	440b      	add	r3, r1
 800a222:	3312      	adds	r3, #18
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	e00b      	b.n	800a240 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	440b      	add	r3, r1
 800a23a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800a23e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7f7 feea 	bl	8002044 <HAL_PCD_SetAddress>
 800a270:	4603      	mov	r3, r0
 800a272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	4618      	mov	r0, r3
 800a278:	f000 f886 	bl	800a388 <USBD_Get_USB_Status>
 800a27c:	4603      	mov	r3, r0
 800a27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a280:	7bbb      	ldrb	r3, [r7, #14]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
 800a296:	460b      	mov	r3, r1
 800a298:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2a8:	7af9      	ldrb	r1, [r7, #11]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	f7f7 ff7b 	bl	80021a8 <HAL_PCD_EP_Transmit>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 f865 	bl	800a388 <USBD_Get_USB_Status>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2ea:	7af9      	ldrb	r1, [r7, #11]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	f7f7 ff29 	bl	8002146 <HAL_PCD_EP_Receive>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f8:	7dfb      	ldrb	r3, [r7, #23]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f844 	bl	800a388 <USBD_Get_USB_Status>
 800a300:	4603      	mov	r3, r0
 800a302:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a304:	7dbb      	ldrb	r3, [r7, #22]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d002      	beq.n	800a328 <HAL_PCDEx_LPM_Callback+0x18>
 800a322:	2b01      	cmp	r3, #1
 800a324:	d013      	beq.n	800a34e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a326:	e023      	b.n	800a370 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7a5b      	ldrb	r3, [r3, #9]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d007      	beq.n	800a340 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a330:	f000 f824 	bl	800a37c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a334:	4b10      	ldr	r3, [pc, #64]	; (800a378 <HAL_PCDEx_LPM_Callback+0x68>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	4a0f      	ldr	r2, [pc, #60]	; (800a378 <HAL_PCDEx_LPM_Callback+0x68>)
 800a33a:	f023 0306 	bic.w	r3, r3, #6
 800a33e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a346:	4618      	mov	r0, r3
 800a348:	f7fc fc87 	bl	8006c5a <USBD_LL_Resume>
    break;
 800a34c:	e010      	b.n	800a370 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a354:	4618      	mov	r0, r3
 800a356:	f7fc fc6a 	bl	8006c2e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	7a5b      	ldrb	r3, [r3, #9]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a362:	4b05      	ldr	r3, [pc, #20]	; (800a378 <HAL_PCDEx_LPM_Callback+0x68>)
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	4a04      	ldr	r2, [pc, #16]	; (800a378 <HAL_PCDEx_LPM_Callback+0x68>)
 800a368:	f043 0306 	orr.w	r3, r3, #6
 800a36c:	6113      	str	r3, [r2, #16]
    break;
 800a36e:	bf00      	nop
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	e000ed00 	.word	0xe000ed00

0800a37c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a380:	f7f6 fb57 	bl	8000a32 <SystemClock_Config>
}
 800a384:	bf00      	nop
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d817      	bhi.n	800a3cc <USBD_Get_USB_Status+0x44>
 800a39c:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <USBD_Get_USB_Status+0x1c>)
 800a39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a2:	bf00      	nop
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3bb 	.word	0x0800a3bb
 800a3ac:	0800a3c1 	.word	0x0800a3c1
 800a3b0:	0800a3c7 	.word	0x0800a3c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e00b      	b.n	800a3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e008      	b.n	800a3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	e005      	b.n	800a3d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ca:	e002      	b.n	800a3d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	bf00      	nop
  }
  return usb_status;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <sniprintf>:
 800a3e0:	b40c      	push	{r2, r3}
 800a3e2:	b530      	push	{r4, r5, lr}
 800a3e4:	4b17      	ldr	r3, [pc, #92]	; (800a444 <sniprintf+0x64>)
 800a3e6:	1e0c      	subs	r4, r1, #0
 800a3e8:	681d      	ldr	r5, [r3, #0]
 800a3ea:	b09d      	sub	sp, #116	; 0x74
 800a3ec:	da08      	bge.n	800a400 <sniprintf+0x20>
 800a3ee:	238b      	movs	r3, #139	; 0x8b
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3f6:	b01d      	add	sp, #116	; 0x74
 800a3f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3fc:	b002      	add	sp, #8
 800a3fe:	4770      	bx	lr
 800a400:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a404:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a408:	bf14      	ite	ne
 800a40a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a40e:	4623      	moveq	r3, r4
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	9307      	str	r3, [sp, #28]
 800a414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a418:	9002      	str	r0, [sp, #8]
 800a41a:	9006      	str	r0, [sp, #24]
 800a41c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a420:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a422:	ab21      	add	r3, sp, #132	; 0x84
 800a424:	a902      	add	r1, sp, #8
 800a426:	4628      	mov	r0, r5
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	f000 f94b 	bl	800a6c4 <_svfiprintf_r>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	bfbc      	itt	lt
 800a432:	238b      	movlt	r3, #139	; 0x8b
 800a434:	602b      	strlt	r3, [r5, #0]
 800a436:	2c00      	cmp	r4, #0
 800a438:	d0dd      	beq.n	800a3f6 <sniprintf+0x16>
 800a43a:	9b02      	ldr	r3, [sp, #8]
 800a43c:	2200      	movs	r2, #0
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	e7d9      	b.n	800a3f6 <sniprintf+0x16>
 800a442:	bf00      	nop
 800a444:	2000005c 	.word	0x2000005c

0800a448 <memset>:
 800a448:	4402      	add	r2, r0
 800a44a:	4603      	mov	r3, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <_reclaim_reent>:
 800a458:	4b29      	ldr	r3, [pc, #164]	; (800a500 <_reclaim_reent+0xa8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4283      	cmp	r3, r0
 800a45e:	b570      	push	{r4, r5, r6, lr}
 800a460:	4604      	mov	r4, r0
 800a462:	d04b      	beq.n	800a4fc <_reclaim_reent+0xa4>
 800a464:	69c3      	ldr	r3, [r0, #28]
 800a466:	b143      	cbz	r3, 800a47a <_reclaim_reent+0x22>
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d144      	bne.n	800a4f8 <_reclaim_reent+0xa0>
 800a46e:	69e3      	ldr	r3, [r4, #28]
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	b111      	cbz	r1, 800a47a <_reclaim_reent+0x22>
 800a474:	4620      	mov	r0, r4
 800a476:	f000 f87f 	bl	800a578 <_free_r>
 800a47a:	6961      	ldr	r1, [r4, #20]
 800a47c:	b111      	cbz	r1, 800a484 <_reclaim_reent+0x2c>
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f87a 	bl	800a578 <_free_r>
 800a484:	69e1      	ldr	r1, [r4, #28]
 800a486:	b111      	cbz	r1, 800a48e <_reclaim_reent+0x36>
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 f875 	bl	800a578 <_free_r>
 800a48e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a490:	b111      	cbz	r1, 800a498 <_reclaim_reent+0x40>
 800a492:	4620      	mov	r0, r4
 800a494:	f000 f870 	bl	800a578 <_free_r>
 800a498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a49a:	b111      	cbz	r1, 800a4a2 <_reclaim_reent+0x4a>
 800a49c:	4620      	mov	r0, r4
 800a49e:	f000 f86b 	bl	800a578 <_free_r>
 800a4a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4a4:	b111      	cbz	r1, 800a4ac <_reclaim_reent+0x54>
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 f866 	bl	800a578 <_free_r>
 800a4ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a4ae:	b111      	cbz	r1, 800a4b6 <_reclaim_reent+0x5e>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f000 f861 	bl	800a578 <_free_r>
 800a4b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a4b8:	b111      	cbz	r1, 800a4c0 <_reclaim_reent+0x68>
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 f85c 	bl	800a578 <_free_r>
 800a4c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4c2:	b111      	cbz	r1, 800a4ca <_reclaim_reent+0x72>
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 f857 	bl	800a578 <_free_r>
 800a4ca:	6a23      	ldr	r3, [r4, #32]
 800a4cc:	b1b3      	cbz	r3, 800a4fc <_reclaim_reent+0xa4>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4d4:	4718      	bx	r3
 800a4d6:	5949      	ldr	r1, [r1, r5]
 800a4d8:	b941      	cbnz	r1, 800a4ec <_reclaim_reent+0x94>
 800a4da:	3504      	adds	r5, #4
 800a4dc:	69e3      	ldr	r3, [r4, #28]
 800a4de:	2d80      	cmp	r5, #128	; 0x80
 800a4e0:	68d9      	ldr	r1, [r3, #12]
 800a4e2:	d1f8      	bne.n	800a4d6 <_reclaim_reent+0x7e>
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 f847 	bl	800a578 <_free_r>
 800a4ea:	e7c0      	b.n	800a46e <_reclaim_reent+0x16>
 800a4ec:	680e      	ldr	r6, [r1, #0]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f842 	bl	800a578 <_free_r>
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	e7ef      	b.n	800a4d8 <_reclaim_reent+0x80>
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	e7ef      	b.n	800a4dc <_reclaim_reent+0x84>
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	bf00      	nop
 800a500:	2000005c 	.word	0x2000005c

0800a504 <__errno>:
 800a504:	4b01      	ldr	r3, [pc, #4]	; (800a50c <__errno+0x8>)
 800a506:	6818      	ldr	r0, [r3, #0]
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	2000005c 	.word	0x2000005c

0800a510 <__libc_init_array>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4d0d      	ldr	r5, [pc, #52]	; (800a548 <__libc_init_array+0x38>)
 800a514:	4c0d      	ldr	r4, [pc, #52]	; (800a54c <__libc_init_array+0x3c>)
 800a516:	1b64      	subs	r4, r4, r5
 800a518:	10a4      	asrs	r4, r4, #2
 800a51a:	2600      	movs	r6, #0
 800a51c:	42a6      	cmp	r6, r4
 800a51e:	d109      	bne.n	800a534 <__libc_init_array+0x24>
 800a520:	4d0b      	ldr	r5, [pc, #44]	; (800a550 <__libc_init_array+0x40>)
 800a522:	4c0c      	ldr	r4, [pc, #48]	; (800a554 <__libc_init_array+0x44>)
 800a524:	f000 fc6a 	bl	800adfc <_init>
 800a528:	1b64      	subs	r4, r4, r5
 800a52a:	10a4      	asrs	r4, r4, #2
 800a52c:	2600      	movs	r6, #0
 800a52e:	42a6      	cmp	r6, r4
 800a530:	d105      	bne.n	800a53e <__libc_init_array+0x2e>
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	f855 3b04 	ldr.w	r3, [r5], #4
 800a538:	4798      	blx	r3
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7ee      	b.n	800a51c <__libc_init_array+0xc>
 800a53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a542:	4798      	blx	r3
 800a544:	3601      	adds	r6, #1
 800a546:	e7f2      	b.n	800a52e <__libc_init_array+0x1e>
 800a548:	0800ae8c 	.word	0x0800ae8c
 800a54c:	0800ae8c 	.word	0x0800ae8c
 800a550:	0800ae8c 	.word	0x0800ae8c
 800a554:	0800ae90 	.word	0x0800ae90

0800a558 <__retarget_lock_acquire_recursive>:
 800a558:	4770      	bx	lr

0800a55a <__retarget_lock_release_recursive>:
 800a55a:	4770      	bx	lr

0800a55c <memcpy>:
 800a55c:	440a      	add	r2, r1
 800a55e:	4291      	cmp	r1, r2
 800a560:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a564:	d100      	bne.n	800a568 <memcpy+0xc>
 800a566:	4770      	bx	lr
 800a568:	b510      	push	{r4, lr}
 800a56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a56e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a572:	4291      	cmp	r1, r2
 800a574:	d1f9      	bne.n	800a56a <memcpy+0xe>
 800a576:	bd10      	pop	{r4, pc}

0800a578 <_free_r>:
 800a578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a57a:	2900      	cmp	r1, #0
 800a57c:	d044      	beq.n	800a608 <_free_r+0x90>
 800a57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a582:	9001      	str	r0, [sp, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f1a1 0404 	sub.w	r4, r1, #4
 800a58a:	bfb8      	it	lt
 800a58c:	18e4      	addlt	r4, r4, r3
 800a58e:	f000 fbc7 	bl	800ad20 <__malloc_lock>
 800a592:	4a1e      	ldr	r2, [pc, #120]	; (800a60c <_free_r+0x94>)
 800a594:	9801      	ldr	r0, [sp, #4]
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x30>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	b003      	add	sp, #12
 800a5a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a4:	f000 bbc2 	b.w	800ad2c <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x46>
 800a5ac:	6825      	ldr	r5, [r4, #0]
 800a5ae:	1961      	adds	r1, r4, r5
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1949      	addeq	r1, r1, r5
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x22>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x50>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x46>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1855      	adds	r5, r2, r1
 800a5cc:	42a5      	cmp	r5, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x70>
 800a5d0:	6824      	ldr	r4, [r4, #0]
 800a5d2:	4421      	add	r1, r4
 800a5d4:	1854      	adds	r4, r2, r1
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x26>
 800a5dc:	681c      	ldr	r4, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	6053      	str	r3, [r2, #4]
 800a5e2:	440c      	add	r4, r1
 800a5e4:	6014      	str	r4, [r2, #0]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x26>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x78>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x26>
 800a5f0:	6825      	ldr	r5, [r4, #0]
 800a5f2:	1961      	adds	r1, r4, r5
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf04      	itt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	bf04      	itt	eq
 800a600:	1949      	addeq	r1, r1, r5
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	6054      	str	r4, [r2, #4]
 800a606:	e7ca      	b.n	800a59e <_free_r+0x26>
 800a608:	b003      	add	sp, #12
 800a60a:	bd30      	pop	{r4, r5, pc}
 800a60c:	20001558 	.word	0x20001558

0800a610 <__ssputs_r>:
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	688e      	ldr	r6, [r1, #8]
 800a616:	461f      	mov	r7, r3
 800a618:	42be      	cmp	r6, r7
 800a61a:	680b      	ldr	r3, [r1, #0]
 800a61c:	4682      	mov	sl, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	4690      	mov	r8, r2
 800a622:	d82c      	bhi.n	800a67e <__ssputs_r+0x6e>
 800a624:	898a      	ldrh	r2, [r1, #12]
 800a626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a62a:	d026      	beq.n	800a67a <__ssputs_r+0x6a>
 800a62c:	6965      	ldr	r5, [r4, #20]
 800a62e:	6909      	ldr	r1, [r1, #16]
 800a630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a634:	eba3 0901 	sub.w	r9, r3, r1
 800a638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a63c:	1c7b      	adds	r3, r7, #1
 800a63e:	444b      	add	r3, r9
 800a640:	106d      	asrs	r5, r5, #1
 800a642:	429d      	cmp	r5, r3
 800a644:	bf38      	it	cc
 800a646:	461d      	movcc	r5, r3
 800a648:	0553      	lsls	r3, r2, #21
 800a64a:	d527      	bpl.n	800a69c <__ssputs_r+0x8c>
 800a64c:	4629      	mov	r1, r5
 800a64e:	f000 f957 	bl	800a900 <_malloc_r>
 800a652:	4606      	mov	r6, r0
 800a654:	b360      	cbz	r0, 800a6b0 <__ssputs_r+0xa0>
 800a656:	6921      	ldr	r1, [r4, #16]
 800a658:	464a      	mov	r2, r9
 800a65a:	f7ff ff7f 	bl	800a55c <memcpy>
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	6126      	str	r6, [r4, #16]
 800a66c:	6165      	str	r5, [r4, #20]
 800a66e:	444e      	add	r6, r9
 800a670:	eba5 0509 	sub.w	r5, r5, r9
 800a674:	6026      	str	r6, [r4, #0]
 800a676:	60a5      	str	r5, [r4, #8]
 800a678:	463e      	mov	r6, r7
 800a67a:	42be      	cmp	r6, r7
 800a67c:	d900      	bls.n	800a680 <__ssputs_r+0x70>
 800a67e:	463e      	mov	r6, r7
 800a680:	6820      	ldr	r0, [r4, #0]
 800a682:	4632      	mov	r2, r6
 800a684:	4641      	mov	r1, r8
 800a686:	f000 fb86 	bl	800ad96 <memmove>
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	1b9b      	subs	r3, r3, r6
 800a68e:	60a3      	str	r3, [r4, #8]
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	4433      	add	r3, r6
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	2000      	movs	r0, #0
 800a698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69c:	462a      	mov	r2, r5
 800a69e:	f000 fb4b 	bl	800ad38 <_realloc_r>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1e0      	bne.n	800a66a <__ssputs_r+0x5a>
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	f7ff ff64 	bl	800a578 <_free_r>
 800a6b0:	230c      	movs	r3, #12
 800a6b2:	f8ca 3000 	str.w	r3, [sl]
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6bc:	81a3      	strh	r3, [r4, #12]
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6c2:	e7e9      	b.n	800a698 <__ssputs_r+0x88>

0800a6c4 <_svfiprintf_r>:
 800a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	4698      	mov	r8, r3
 800a6ca:	898b      	ldrh	r3, [r1, #12]
 800a6cc:	061b      	lsls	r3, r3, #24
 800a6ce:	b09d      	sub	sp, #116	; 0x74
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	d50e      	bpl.n	800a6f6 <_svfiprintf_r+0x32>
 800a6d8:	690b      	ldr	r3, [r1, #16]
 800a6da:	b963      	cbnz	r3, 800a6f6 <_svfiprintf_r+0x32>
 800a6dc:	2140      	movs	r1, #64	; 0x40
 800a6de:	f000 f90f 	bl	800a900 <_malloc_r>
 800a6e2:	6028      	str	r0, [r5, #0]
 800a6e4:	6128      	str	r0, [r5, #16]
 800a6e6:	b920      	cbnz	r0, 800a6f2 <_svfiprintf_r+0x2e>
 800a6e8:	230c      	movs	r3, #12
 800a6ea:	603b      	str	r3, [r7, #0]
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6f0:	e0d0      	b.n	800a894 <_svfiprintf_r+0x1d0>
 800a6f2:	2340      	movs	r3, #64	; 0x40
 800a6f4:	616b      	str	r3, [r5, #20]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fa:	2320      	movs	r3, #32
 800a6fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a700:	f8cd 800c 	str.w	r8, [sp, #12]
 800a704:	2330      	movs	r3, #48	; 0x30
 800a706:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8ac <_svfiprintf_r+0x1e8>
 800a70a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a70e:	f04f 0901 	mov.w	r9, #1
 800a712:	4623      	mov	r3, r4
 800a714:	469a      	mov	sl, r3
 800a716:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a71a:	b10a      	cbz	r2, 800a720 <_svfiprintf_r+0x5c>
 800a71c:	2a25      	cmp	r2, #37	; 0x25
 800a71e:	d1f9      	bne.n	800a714 <_svfiprintf_r+0x50>
 800a720:	ebba 0b04 	subs.w	fp, sl, r4
 800a724:	d00b      	beq.n	800a73e <_svfiprintf_r+0x7a>
 800a726:	465b      	mov	r3, fp
 800a728:	4622      	mov	r2, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	4638      	mov	r0, r7
 800a72e:	f7ff ff6f 	bl	800a610 <__ssputs_r>
 800a732:	3001      	adds	r0, #1
 800a734:	f000 80a9 	beq.w	800a88a <_svfiprintf_r+0x1c6>
 800a738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a73a:	445a      	add	r2, fp
 800a73c:	9209      	str	r2, [sp, #36]	; 0x24
 800a73e:	f89a 3000 	ldrb.w	r3, [sl]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80a1 	beq.w	800a88a <_svfiprintf_r+0x1c6>
 800a748:	2300      	movs	r3, #0
 800a74a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a74e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a752:	f10a 0a01 	add.w	sl, sl, #1
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	9307      	str	r3, [sp, #28]
 800a75a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a75e:	931a      	str	r3, [sp, #104]	; 0x68
 800a760:	4654      	mov	r4, sl
 800a762:	2205      	movs	r2, #5
 800a764:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a768:	4850      	ldr	r0, [pc, #320]	; (800a8ac <_svfiprintf_r+0x1e8>)
 800a76a:	f7f5 fd59 	bl	8000220 <memchr>
 800a76e:	9a04      	ldr	r2, [sp, #16]
 800a770:	b9d8      	cbnz	r0, 800a7aa <_svfiprintf_r+0xe6>
 800a772:	06d0      	lsls	r0, r2, #27
 800a774:	bf44      	itt	mi
 800a776:	2320      	movmi	r3, #32
 800a778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a77c:	0711      	lsls	r1, r2, #28
 800a77e:	bf44      	itt	mi
 800a780:	232b      	movmi	r3, #43	; 0x2b
 800a782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a786:	f89a 3000 	ldrb.w	r3, [sl]
 800a78a:	2b2a      	cmp	r3, #42	; 0x2a
 800a78c:	d015      	beq.n	800a7ba <_svfiprintf_r+0xf6>
 800a78e:	9a07      	ldr	r2, [sp, #28]
 800a790:	4654      	mov	r4, sl
 800a792:	2000      	movs	r0, #0
 800a794:	f04f 0c0a 	mov.w	ip, #10
 800a798:	4621      	mov	r1, r4
 800a79a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a79e:	3b30      	subs	r3, #48	; 0x30
 800a7a0:	2b09      	cmp	r3, #9
 800a7a2:	d94d      	bls.n	800a840 <_svfiprintf_r+0x17c>
 800a7a4:	b1b0      	cbz	r0, 800a7d4 <_svfiprintf_r+0x110>
 800a7a6:	9207      	str	r2, [sp, #28]
 800a7a8:	e014      	b.n	800a7d4 <_svfiprintf_r+0x110>
 800a7aa:	eba0 0308 	sub.w	r3, r0, r8
 800a7ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	46a2      	mov	sl, r4
 800a7b8:	e7d2      	b.n	800a760 <_svfiprintf_r+0x9c>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	1d19      	adds	r1, r3, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	9103      	str	r1, [sp, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bfbb      	ittet	lt
 800a7c6:	425b      	neglt	r3, r3
 800a7c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a7cc:	9307      	strge	r3, [sp, #28]
 800a7ce:	9307      	strlt	r3, [sp, #28]
 800a7d0:	bfb8      	it	lt
 800a7d2:	9204      	strlt	r2, [sp, #16]
 800a7d4:	7823      	ldrb	r3, [r4, #0]
 800a7d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7d8:	d10c      	bne.n	800a7f4 <_svfiprintf_r+0x130>
 800a7da:	7863      	ldrb	r3, [r4, #1]
 800a7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7de:	d134      	bne.n	800a84a <_svfiprintf_r+0x186>
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	1d1a      	adds	r2, r3, #4
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	9203      	str	r2, [sp, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	bfb8      	it	lt
 800a7ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7f0:	3402      	adds	r4, #2
 800a7f2:	9305      	str	r3, [sp, #20]
 800a7f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a8bc <_svfiprintf_r+0x1f8>
 800a7f8:	7821      	ldrb	r1, [r4, #0]
 800a7fa:	2203      	movs	r2, #3
 800a7fc:	4650      	mov	r0, sl
 800a7fe:	f7f5 fd0f 	bl	8000220 <memchr>
 800a802:	b138      	cbz	r0, 800a814 <_svfiprintf_r+0x150>
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	eba0 000a 	sub.w	r0, r0, sl
 800a80a:	2240      	movs	r2, #64	; 0x40
 800a80c:	4082      	lsls	r2, r0
 800a80e:	4313      	orrs	r3, r2
 800a810:	3401      	adds	r4, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a818:	4825      	ldr	r0, [pc, #148]	; (800a8b0 <_svfiprintf_r+0x1ec>)
 800a81a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a81e:	2206      	movs	r2, #6
 800a820:	f7f5 fcfe 	bl	8000220 <memchr>
 800a824:	2800      	cmp	r0, #0
 800a826:	d038      	beq.n	800a89a <_svfiprintf_r+0x1d6>
 800a828:	4b22      	ldr	r3, [pc, #136]	; (800a8b4 <_svfiprintf_r+0x1f0>)
 800a82a:	bb1b      	cbnz	r3, 800a874 <_svfiprintf_r+0x1b0>
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	3307      	adds	r3, #7
 800a830:	f023 0307 	bic.w	r3, r3, #7
 800a834:	3308      	adds	r3, #8
 800a836:	9303      	str	r3, [sp, #12]
 800a838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83a:	4433      	add	r3, r6
 800a83c:	9309      	str	r3, [sp, #36]	; 0x24
 800a83e:	e768      	b.n	800a712 <_svfiprintf_r+0x4e>
 800a840:	fb0c 3202 	mla	r2, ip, r2, r3
 800a844:	460c      	mov	r4, r1
 800a846:	2001      	movs	r0, #1
 800a848:	e7a6      	b.n	800a798 <_svfiprintf_r+0xd4>
 800a84a:	2300      	movs	r3, #0
 800a84c:	3401      	adds	r4, #1
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	4619      	mov	r1, r3
 800a852:	f04f 0c0a 	mov.w	ip, #10
 800a856:	4620      	mov	r0, r4
 800a858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a85c:	3a30      	subs	r2, #48	; 0x30
 800a85e:	2a09      	cmp	r2, #9
 800a860:	d903      	bls.n	800a86a <_svfiprintf_r+0x1a6>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0c6      	beq.n	800a7f4 <_svfiprintf_r+0x130>
 800a866:	9105      	str	r1, [sp, #20]
 800a868:	e7c4      	b.n	800a7f4 <_svfiprintf_r+0x130>
 800a86a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a86e:	4604      	mov	r4, r0
 800a870:	2301      	movs	r3, #1
 800a872:	e7f0      	b.n	800a856 <_svfiprintf_r+0x192>
 800a874:	ab03      	add	r3, sp, #12
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	462a      	mov	r2, r5
 800a87a:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <_svfiprintf_r+0x1f4>)
 800a87c:	a904      	add	r1, sp, #16
 800a87e:	4638      	mov	r0, r7
 800a880:	f3af 8000 	nop.w
 800a884:	1c42      	adds	r2, r0, #1
 800a886:	4606      	mov	r6, r0
 800a888:	d1d6      	bne.n	800a838 <_svfiprintf_r+0x174>
 800a88a:	89ab      	ldrh	r3, [r5, #12]
 800a88c:	065b      	lsls	r3, r3, #25
 800a88e:	f53f af2d 	bmi.w	800a6ec <_svfiprintf_r+0x28>
 800a892:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a894:	b01d      	add	sp, #116	; 0x74
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	ab03      	add	r3, sp, #12
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	462a      	mov	r2, r5
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <_svfiprintf_r+0x1f4>)
 800a8a2:	a904      	add	r1, sp, #16
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f000 f919 	bl	800aadc <_printf_i>
 800a8aa:	e7eb      	b.n	800a884 <_svfiprintf_r+0x1c0>
 800a8ac:	0800ae58 	.word	0x0800ae58
 800a8b0:	0800ae62 	.word	0x0800ae62
 800a8b4:	00000000 	.word	0x00000000
 800a8b8:	0800a611 	.word	0x0800a611
 800a8bc:	0800ae5e 	.word	0x0800ae5e

0800a8c0 <sbrk_aligned>:
 800a8c0:	b570      	push	{r4, r5, r6, lr}
 800a8c2:	4e0e      	ldr	r6, [pc, #56]	; (800a8fc <sbrk_aligned+0x3c>)
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	6831      	ldr	r1, [r6, #0]
 800a8c8:	4605      	mov	r5, r0
 800a8ca:	b911      	cbnz	r1, 800a8d2 <sbrk_aligned+0x12>
 800a8cc:	f000 fa7e 	bl	800adcc <_sbrk_r>
 800a8d0:	6030      	str	r0, [r6, #0]
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f000 fa79 	bl	800adcc <_sbrk_r>
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	d00a      	beq.n	800a8f4 <sbrk_aligned+0x34>
 800a8de:	1cc4      	adds	r4, r0, #3
 800a8e0:	f024 0403 	bic.w	r4, r4, #3
 800a8e4:	42a0      	cmp	r0, r4
 800a8e6:	d007      	beq.n	800a8f8 <sbrk_aligned+0x38>
 800a8e8:	1a21      	subs	r1, r4, r0
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	f000 fa6e 	bl	800adcc <_sbrk_r>
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d101      	bne.n	800a8f8 <sbrk_aligned+0x38>
 800a8f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	2000155c 	.word	0x2000155c

0800a900 <_malloc_r>:
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a904:	1ccd      	adds	r5, r1, #3
 800a906:	f025 0503 	bic.w	r5, r5, #3
 800a90a:	3508      	adds	r5, #8
 800a90c:	2d0c      	cmp	r5, #12
 800a90e:	bf38      	it	cc
 800a910:	250c      	movcc	r5, #12
 800a912:	2d00      	cmp	r5, #0
 800a914:	4607      	mov	r7, r0
 800a916:	db01      	blt.n	800a91c <_malloc_r+0x1c>
 800a918:	42a9      	cmp	r1, r5
 800a91a:	d905      	bls.n	800a928 <_malloc_r+0x28>
 800a91c:	230c      	movs	r3, #12
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	2600      	movs	r6, #0
 800a922:	4630      	mov	r0, r6
 800a924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a928:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a9fc <_malloc_r+0xfc>
 800a92c:	f000 f9f8 	bl	800ad20 <__malloc_lock>
 800a930:	f8d8 3000 	ldr.w	r3, [r8]
 800a934:	461c      	mov	r4, r3
 800a936:	bb5c      	cbnz	r4, 800a990 <_malloc_r+0x90>
 800a938:	4629      	mov	r1, r5
 800a93a:	4638      	mov	r0, r7
 800a93c:	f7ff ffc0 	bl	800a8c0 <sbrk_aligned>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	4604      	mov	r4, r0
 800a944:	d155      	bne.n	800a9f2 <_malloc_r+0xf2>
 800a946:	f8d8 4000 	ldr.w	r4, [r8]
 800a94a:	4626      	mov	r6, r4
 800a94c:	2e00      	cmp	r6, #0
 800a94e:	d145      	bne.n	800a9dc <_malloc_r+0xdc>
 800a950:	2c00      	cmp	r4, #0
 800a952:	d048      	beq.n	800a9e6 <_malloc_r+0xe6>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	4631      	mov	r1, r6
 800a958:	4638      	mov	r0, r7
 800a95a:	eb04 0903 	add.w	r9, r4, r3
 800a95e:	f000 fa35 	bl	800adcc <_sbrk_r>
 800a962:	4581      	cmp	r9, r0
 800a964:	d13f      	bne.n	800a9e6 <_malloc_r+0xe6>
 800a966:	6821      	ldr	r1, [r4, #0]
 800a968:	1a6d      	subs	r5, r5, r1
 800a96a:	4629      	mov	r1, r5
 800a96c:	4638      	mov	r0, r7
 800a96e:	f7ff ffa7 	bl	800a8c0 <sbrk_aligned>
 800a972:	3001      	adds	r0, #1
 800a974:	d037      	beq.n	800a9e6 <_malloc_r+0xe6>
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	442b      	add	r3, r5
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	f8d8 3000 	ldr.w	r3, [r8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d038      	beq.n	800a9f6 <_malloc_r+0xf6>
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	42a2      	cmp	r2, r4
 800a988:	d12b      	bne.n	800a9e2 <_malloc_r+0xe2>
 800a98a:	2200      	movs	r2, #0
 800a98c:	605a      	str	r2, [r3, #4]
 800a98e:	e00f      	b.n	800a9b0 <_malloc_r+0xb0>
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	1b52      	subs	r2, r2, r5
 800a994:	d41f      	bmi.n	800a9d6 <_malloc_r+0xd6>
 800a996:	2a0b      	cmp	r2, #11
 800a998:	d917      	bls.n	800a9ca <_malloc_r+0xca>
 800a99a:	1961      	adds	r1, r4, r5
 800a99c:	42a3      	cmp	r3, r4
 800a99e:	6025      	str	r5, [r4, #0]
 800a9a0:	bf18      	it	ne
 800a9a2:	6059      	strne	r1, [r3, #4]
 800a9a4:	6863      	ldr	r3, [r4, #4]
 800a9a6:	bf08      	it	eq
 800a9a8:	f8c8 1000 	streq.w	r1, [r8]
 800a9ac:	5162      	str	r2, [r4, r5]
 800a9ae:	604b      	str	r3, [r1, #4]
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f104 060b 	add.w	r6, r4, #11
 800a9b6:	f000 f9b9 	bl	800ad2c <__malloc_unlock>
 800a9ba:	f026 0607 	bic.w	r6, r6, #7
 800a9be:	1d23      	adds	r3, r4, #4
 800a9c0:	1af2      	subs	r2, r6, r3
 800a9c2:	d0ae      	beq.n	800a922 <_malloc_r+0x22>
 800a9c4:	1b9b      	subs	r3, r3, r6
 800a9c6:	50a3      	str	r3, [r4, r2]
 800a9c8:	e7ab      	b.n	800a922 <_malloc_r+0x22>
 800a9ca:	42a3      	cmp	r3, r4
 800a9cc:	6862      	ldr	r2, [r4, #4]
 800a9ce:	d1dd      	bne.n	800a98c <_malloc_r+0x8c>
 800a9d0:	f8c8 2000 	str.w	r2, [r8]
 800a9d4:	e7ec      	b.n	800a9b0 <_malloc_r+0xb0>
 800a9d6:	4623      	mov	r3, r4
 800a9d8:	6864      	ldr	r4, [r4, #4]
 800a9da:	e7ac      	b.n	800a936 <_malloc_r+0x36>
 800a9dc:	4634      	mov	r4, r6
 800a9de:	6876      	ldr	r6, [r6, #4]
 800a9e0:	e7b4      	b.n	800a94c <_malloc_r+0x4c>
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	e7cc      	b.n	800a980 <_malloc_r+0x80>
 800a9e6:	230c      	movs	r3, #12
 800a9e8:	603b      	str	r3, [r7, #0]
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f000 f99e 	bl	800ad2c <__malloc_unlock>
 800a9f0:	e797      	b.n	800a922 <_malloc_r+0x22>
 800a9f2:	6025      	str	r5, [r4, #0]
 800a9f4:	e7dc      	b.n	800a9b0 <_malloc_r+0xb0>
 800a9f6:	605b      	str	r3, [r3, #4]
 800a9f8:	deff      	udf	#255	; 0xff
 800a9fa:	bf00      	nop
 800a9fc:	20001558 	.word	0x20001558

0800aa00 <_printf_common>:
 800aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa04:	4616      	mov	r6, r2
 800aa06:	4699      	mov	r9, r3
 800aa08:	688a      	ldr	r2, [r1, #8]
 800aa0a:	690b      	ldr	r3, [r1, #16]
 800aa0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa10:	4293      	cmp	r3, r2
 800aa12:	bfb8      	it	lt
 800aa14:	4613      	movlt	r3, r2
 800aa16:	6033      	str	r3, [r6, #0]
 800aa18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	b10a      	cbz	r2, 800aa26 <_printf_common+0x26>
 800aa22:	3301      	adds	r3, #1
 800aa24:	6033      	str	r3, [r6, #0]
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	0699      	lsls	r1, r3, #26
 800aa2a:	bf42      	ittt	mi
 800aa2c:	6833      	ldrmi	r3, [r6, #0]
 800aa2e:	3302      	addmi	r3, #2
 800aa30:	6033      	strmi	r3, [r6, #0]
 800aa32:	6825      	ldr	r5, [r4, #0]
 800aa34:	f015 0506 	ands.w	r5, r5, #6
 800aa38:	d106      	bne.n	800aa48 <_printf_common+0x48>
 800aa3a:	f104 0a19 	add.w	sl, r4, #25
 800aa3e:	68e3      	ldr	r3, [r4, #12]
 800aa40:	6832      	ldr	r2, [r6, #0]
 800aa42:	1a9b      	subs	r3, r3, r2
 800aa44:	42ab      	cmp	r3, r5
 800aa46:	dc26      	bgt.n	800aa96 <_printf_common+0x96>
 800aa48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa4c:	1e13      	subs	r3, r2, #0
 800aa4e:	6822      	ldr	r2, [r4, #0]
 800aa50:	bf18      	it	ne
 800aa52:	2301      	movne	r3, #1
 800aa54:	0692      	lsls	r2, r2, #26
 800aa56:	d42b      	bmi.n	800aab0 <_printf_common+0xb0>
 800aa58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	4638      	mov	r0, r7
 800aa60:	47c0      	blx	r8
 800aa62:	3001      	adds	r0, #1
 800aa64:	d01e      	beq.n	800aaa4 <_printf_common+0xa4>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	6922      	ldr	r2, [r4, #16]
 800aa6a:	f003 0306 	and.w	r3, r3, #6
 800aa6e:	2b04      	cmp	r3, #4
 800aa70:	bf02      	ittt	eq
 800aa72:	68e5      	ldreq	r5, [r4, #12]
 800aa74:	6833      	ldreq	r3, [r6, #0]
 800aa76:	1aed      	subeq	r5, r5, r3
 800aa78:	68a3      	ldr	r3, [r4, #8]
 800aa7a:	bf0c      	ite	eq
 800aa7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa80:	2500      	movne	r5, #0
 800aa82:	4293      	cmp	r3, r2
 800aa84:	bfc4      	itt	gt
 800aa86:	1a9b      	subgt	r3, r3, r2
 800aa88:	18ed      	addgt	r5, r5, r3
 800aa8a:	2600      	movs	r6, #0
 800aa8c:	341a      	adds	r4, #26
 800aa8e:	42b5      	cmp	r5, r6
 800aa90:	d11a      	bne.n	800aac8 <_printf_common+0xc8>
 800aa92:	2000      	movs	r0, #0
 800aa94:	e008      	b.n	800aaa8 <_printf_common+0xa8>
 800aa96:	2301      	movs	r3, #1
 800aa98:	4652      	mov	r2, sl
 800aa9a:	4649      	mov	r1, r9
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	47c0      	blx	r8
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d103      	bne.n	800aaac <_printf_common+0xac>
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaac:	3501      	adds	r5, #1
 800aaae:	e7c6      	b.n	800aa3e <_printf_common+0x3e>
 800aab0:	18e1      	adds	r1, r4, r3
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	2030      	movs	r0, #48	; 0x30
 800aab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaba:	4422      	add	r2, r4
 800aabc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aac4:	3302      	adds	r3, #2
 800aac6:	e7c7      	b.n	800aa58 <_printf_common+0x58>
 800aac8:	2301      	movs	r3, #1
 800aaca:	4622      	mov	r2, r4
 800aacc:	4649      	mov	r1, r9
 800aace:	4638      	mov	r0, r7
 800aad0:	47c0      	blx	r8
 800aad2:	3001      	adds	r0, #1
 800aad4:	d0e6      	beq.n	800aaa4 <_printf_common+0xa4>
 800aad6:	3601      	adds	r6, #1
 800aad8:	e7d9      	b.n	800aa8e <_printf_common+0x8e>
	...

0800aadc <_printf_i>:
 800aadc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae0:	7e0f      	ldrb	r7, [r1, #24]
 800aae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aae4:	2f78      	cmp	r7, #120	; 0x78
 800aae6:	4691      	mov	r9, r2
 800aae8:	4680      	mov	r8, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	469a      	mov	sl, r3
 800aaee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaf2:	d807      	bhi.n	800ab04 <_printf_i+0x28>
 800aaf4:	2f62      	cmp	r7, #98	; 0x62
 800aaf6:	d80a      	bhi.n	800ab0e <_printf_i+0x32>
 800aaf8:	2f00      	cmp	r7, #0
 800aafa:	f000 80d4 	beq.w	800aca6 <_printf_i+0x1ca>
 800aafe:	2f58      	cmp	r7, #88	; 0x58
 800ab00:	f000 80c0 	beq.w	800ac84 <_printf_i+0x1a8>
 800ab04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab0c:	e03a      	b.n	800ab84 <_printf_i+0xa8>
 800ab0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab12:	2b15      	cmp	r3, #21
 800ab14:	d8f6      	bhi.n	800ab04 <_printf_i+0x28>
 800ab16:	a101      	add	r1, pc, #4	; (adr r1, 800ab1c <_printf_i+0x40>)
 800ab18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab1c:	0800ab75 	.word	0x0800ab75
 800ab20:	0800ab89 	.word	0x0800ab89
 800ab24:	0800ab05 	.word	0x0800ab05
 800ab28:	0800ab05 	.word	0x0800ab05
 800ab2c:	0800ab05 	.word	0x0800ab05
 800ab30:	0800ab05 	.word	0x0800ab05
 800ab34:	0800ab89 	.word	0x0800ab89
 800ab38:	0800ab05 	.word	0x0800ab05
 800ab3c:	0800ab05 	.word	0x0800ab05
 800ab40:	0800ab05 	.word	0x0800ab05
 800ab44:	0800ab05 	.word	0x0800ab05
 800ab48:	0800ac8d 	.word	0x0800ac8d
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800ac47 	.word	0x0800ac47
 800ab54:	0800ab05 	.word	0x0800ab05
 800ab58:	0800ab05 	.word	0x0800ab05
 800ab5c:	0800acaf 	.word	0x0800acaf
 800ab60:	0800ab05 	.word	0x0800ab05
 800ab64:	0800abb5 	.word	0x0800abb5
 800ab68:	0800ab05 	.word	0x0800ab05
 800ab6c:	0800ab05 	.word	0x0800ab05
 800ab70:	0800ac4f 	.word	0x0800ac4f
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	1d1a      	adds	r2, r3, #4
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	602a      	str	r2, [r5, #0]
 800ab7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab84:	2301      	movs	r3, #1
 800ab86:	e09f      	b.n	800acc8 <_printf_i+0x1ec>
 800ab88:	6820      	ldr	r0, [r4, #0]
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	0607      	lsls	r7, r0, #24
 800ab8e:	f103 0104 	add.w	r1, r3, #4
 800ab92:	6029      	str	r1, [r5, #0]
 800ab94:	d501      	bpl.n	800ab9a <_printf_i+0xbe>
 800ab96:	681e      	ldr	r6, [r3, #0]
 800ab98:	e003      	b.n	800aba2 <_printf_i+0xc6>
 800ab9a:	0646      	lsls	r6, r0, #25
 800ab9c:	d5fb      	bpl.n	800ab96 <_printf_i+0xba>
 800ab9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aba2:	2e00      	cmp	r6, #0
 800aba4:	da03      	bge.n	800abae <_printf_i+0xd2>
 800aba6:	232d      	movs	r3, #45	; 0x2d
 800aba8:	4276      	negs	r6, r6
 800abaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abae:	485a      	ldr	r0, [pc, #360]	; (800ad18 <_printf_i+0x23c>)
 800abb0:	230a      	movs	r3, #10
 800abb2:	e012      	b.n	800abda <_printf_i+0xfe>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	6820      	ldr	r0, [r4, #0]
 800abb8:	1d19      	adds	r1, r3, #4
 800abba:	6029      	str	r1, [r5, #0]
 800abbc:	0605      	lsls	r5, r0, #24
 800abbe:	d501      	bpl.n	800abc4 <_printf_i+0xe8>
 800abc0:	681e      	ldr	r6, [r3, #0]
 800abc2:	e002      	b.n	800abca <_printf_i+0xee>
 800abc4:	0641      	lsls	r1, r0, #25
 800abc6:	d5fb      	bpl.n	800abc0 <_printf_i+0xe4>
 800abc8:	881e      	ldrh	r6, [r3, #0]
 800abca:	4853      	ldr	r0, [pc, #332]	; (800ad18 <_printf_i+0x23c>)
 800abcc:	2f6f      	cmp	r7, #111	; 0x6f
 800abce:	bf0c      	ite	eq
 800abd0:	2308      	moveq	r3, #8
 800abd2:	230a      	movne	r3, #10
 800abd4:	2100      	movs	r1, #0
 800abd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abda:	6865      	ldr	r5, [r4, #4]
 800abdc:	60a5      	str	r5, [r4, #8]
 800abde:	2d00      	cmp	r5, #0
 800abe0:	bfa2      	ittt	ge
 800abe2:	6821      	ldrge	r1, [r4, #0]
 800abe4:	f021 0104 	bicge.w	r1, r1, #4
 800abe8:	6021      	strge	r1, [r4, #0]
 800abea:	b90e      	cbnz	r6, 800abf0 <_printf_i+0x114>
 800abec:	2d00      	cmp	r5, #0
 800abee:	d04b      	beq.n	800ac88 <_printf_i+0x1ac>
 800abf0:	4615      	mov	r5, r2
 800abf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abf6:	fb03 6711 	mls	r7, r3, r1, r6
 800abfa:	5dc7      	ldrb	r7, [r0, r7]
 800abfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac00:	4637      	mov	r7, r6
 800ac02:	42bb      	cmp	r3, r7
 800ac04:	460e      	mov	r6, r1
 800ac06:	d9f4      	bls.n	800abf2 <_printf_i+0x116>
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d10b      	bne.n	800ac24 <_printf_i+0x148>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	07de      	lsls	r6, r3, #31
 800ac10:	d508      	bpl.n	800ac24 <_printf_i+0x148>
 800ac12:	6923      	ldr	r3, [r4, #16]
 800ac14:	6861      	ldr	r1, [r4, #4]
 800ac16:	4299      	cmp	r1, r3
 800ac18:	bfde      	ittt	le
 800ac1a:	2330      	movle	r3, #48	; 0x30
 800ac1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	6122      	str	r2, [r4, #16]
 800ac28:	f8cd a000 	str.w	sl, [sp]
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	aa03      	add	r2, sp, #12
 800ac30:	4621      	mov	r1, r4
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7ff fee4 	bl	800aa00 <_printf_common>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d14a      	bne.n	800acd2 <_printf_i+0x1f6>
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac40:	b004      	add	sp, #16
 800ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	f043 0320 	orr.w	r3, r3, #32
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	4833      	ldr	r0, [pc, #204]	; (800ad1c <_printf_i+0x240>)
 800ac50:	2778      	movs	r7, #120	; 0x78
 800ac52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	6829      	ldr	r1, [r5, #0]
 800ac5a:	061f      	lsls	r7, r3, #24
 800ac5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac60:	d402      	bmi.n	800ac68 <_printf_i+0x18c>
 800ac62:	065f      	lsls	r7, r3, #25
 800ac64:	bf48      	it	mi
 800ac66:	b2b6      	uxthmi	r6, r6
 800ac68:	07df      	lsls	r7, r3, #31
 800ac6a:	bf48      	it	mi
 800ac6c:	f043 0320 	orrmi.w	r3, r3, #32
 800ac70:	6029      	str	r1, [r5, #0]
 800ac72:	bf48      	it	mi
 800ac74:	6023      	strmi	r3, [r4, #0]
 800ac76:	b91e      	cbnz	r6, 800ac80 <_printf_i+0x1a4>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	f023 0320 	bic.w	r3, r3, #32
 800ac7e:	6023      	str	r3, [r4, #0]
 800ac80:	2310      	movs	r3, #16
 800ac82:	e7a7      	b.n	800abd4 <_printf_i+0xf8>
 800ac84:	4824      	ldr	r0, [pc, #144]	; (800ad18 <_printf_i+0x23c>)
 800ac86:	e7e4      	b.n	800ac52 <_printf_i+0x176>
 800ac88:	4615      	mov	r5, r2
 800ac8a:	e7bd      	b.n	800ac08 <_printf_i+0x12c>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	6826      	ldr	r6, [r4, #0]
 800ac90:	6961      	ldr	r1, [r4, #20]
 800ac92:	1d18      	adds	r0, r3, #4
 800ac94:	6028      	str	r0, [r5, #0]
 800ac96:	0635      	lsls	r5, r6, #24
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	d501      	bpl.n	800aca0 <_printf_i+0x1c4>
 800ac9c:	6019      	str	r1, [r3, #0]
 800ac9e:	e002      	b.n	800aca6 <_printf_i+0x1ca>
 800aca0:	0670      	lsls	r0, r6, #25
 800aca2:	d5fb      	bpl.n	800ac9c <_printf_i+0x1c0>
 800aca4:	8019      	strh	r1, [r3, #0]
 800aca6:	2300      	movs	r3, #0
 800aca8:	6123      	str	r3, [r4, #16]
 800acaa:	4615      	mov	r5, r2
 800acac:	e7bc      	b.n	800ac28 <_printf_i+0x14c>
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	1d1a      	adds	r2, r3, #4
 800acb2:	602a      	str	r2, [r5, #0]
 800acb4:	681d      	ldr	r5, [r3, #0]
 800acb6:	6862      	ldr	r2, [r4, #4]
 800acb8:	2100      	movs	r1, #0
 800acba:	4628      	mov	r0, r5
 800acbc:	f7f5 fab0 	bl	8000220 <memchr>
 800acc0:	b108      	cbz	r0, 800acc6 <_printf_i+0x1ea>
 800acc2:	1b40      	subs	r0, r0, r5
 800acc4:	6060      	str	r0, [r4, #4]
 800acc6:	6863      	ldr	r3, [r4, #4]
 800acc8:	6123      	str	r3, [r4, #16]
 800acca:	2300      	movs	r3, #0
 800accc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd0:	e7aa      	b.n	800ac28 <_printf_i+0x14c>
 800acd2:	6923      	ldr	r3, [r4, #16]
 800acd4:	462a      	mov	r2, r5
 800acd6:	4649      	mov	r1, r9
 800acd8:	4640      	mov	r0, r8
 800acda:	47d0      	blx	sl
 800acdc:	3001      	adds	r0, #1
 800acde:	d0ad      	beq.n	800ac3c <_printf_i+0x160>
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	079b      	lsls	r3, r3, #30
 800ace4:	d413      	bmi.n	800ad0e <_printf_i+0x232>
 800ace6:	68e0      	ldr	r0, [r4, #12]
 800ace8:	9b03      	ldr	r3, [sp, #12]
 800acea:	4298      	cmp	r0, r3
 800acec:	bfb8      	it	lt
 800acee:	4618      	movlt	r0, r3
 800acf0:	e7a6      	b.n	800ac40 <_printf_i+0x164>
 800acf2:	2301      	movs	r3, #1
 800acf4:	4632      	mov	r2, r6
 800acf6:	4649      	mov	r1, r9
 800acf8:	4640      	mov	r0, r8
 800acfa:	47d0      	blx	sl
 800acfc:	3001      	adds	r0, #1
 800acfe:	d09d      	beq.n	800ac3c <_printf_i+0x160>
 800ad00:	3501      	adds	r5, #1
 800ad02:	68e3      	ldr	r3, [r4, #12]
 800ad04:	9903      	ldr	r1, [sp, #12]
 800ad06:	1a5b      	subs	r3, r3, r1
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	dcf2      	bgt.n	800acf2 <_printf_i+0x216>
 800ad0c:	e7eb      	b.n	800ace6 <_printf_i+0x20a>
 800ad0e:	2500      	movs	r5, #0
 800ad10:	f104 0619 	add.w	r6, r4, #25
 800ad14:	e7f5      	b.n	800ad02 <_printf_i+0x226>
 800ad16:	bf00      	nop
 800ad18:	0800ae69 	.word	0x0800ae69
 800ad1c:	0800ae7a 	.word	0x0800ae7a

0800ad20 <__malloc_lock>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__malloc_lock+0x8>)
 800ad22:	f7ff bc19 	b.w	800a558 <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	20001554 	.word	0x20001554

0800ad2c <__malloc_unlock>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__malloc_unlock+0x8>)
 800ad2e:	f7ff bc14 	b.w	800a55a <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	20001554 	.word	0x20001554

0800ad38 <_realloc_r>:
 800ad38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3c:	4680      	mov	r8, r0
 800ad3e:	4614      	mov	r4, r2
 800ad40:	460e      	mov	r6, r1
 800ad42:	b921      	cbnz	r1, 800ad4e <_realloc_r+0x16>
 800ad44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad48:	4611      	mov	r1, r2
 800ad4a:	f7ff bdd9 	b.w	800a900 <_malloc_r>
 800ad4e:	b92a      	cbnz	r2, 800ad5c <_realloc_r+0x24>
 800ad50:	f7ff fc12 	bl	800a578 <_free_r>
 800ad54:	4625      	mov	r5, r4
 800ad56:	4628      	mov	r0, r5
 800ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad5c:	f000 f846 	bl	800adec <_malloc_usable_size_r>
 800ad60:	4284      	cmp	r4, r0
 800ad62:	4607      	mov	r7, r0
 800ad64:	d802      	bhi.n	800ad6c <_realloc_r+0x34>
 800ad66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad6a:	d812      	bhi.n	800ad92 <_realloc_r+0x5a>
 800ad6c:	4621      	mov	r1, r4
 800ad6e:	4640      	mov	r0, r8
 800ad70:	f7ff fdc6 	bl	800a900 <_malloc_r>
 800ad74:	4605      	mov	r5, r0
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d0ed      	beq.n	800ad56 <_realloc_r+0x1e>
 800ad7a:	42bc      	cmp	r4, r7
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	4631      	mov	r1, r6
 800ad80:	bf28      	it	cs
 800ad82:	463a      	movcs	r2, r7
 800ad84:	f7ff fbea 	bl	800a55c <memcpy>
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	f7ff fbf4 	bl	800a578 <_free_r>
 800ad90:	e7e1      	b.n	800ad56 <_realloc_r+0x1e>
 800ad92:	4635      	mov	r5, r6
 800ad94:	e7df      	b.n	800ad56 <_realloc_r+0x1e>

0800ad96 <memmove>:
 800ad96:	4288      	cmp	r0, r1
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	eb01 0402 	add.w	r4, r1, r2
 800ad9e:	d902      	bls.n	800ada6 <memmove+0x10>
 800ada0:	4284      	cmp	r4, r0
 800ada2:	4623      	mov	r3, r4
 800ada4:	d807      	bhi.n	800adb6 <memmove+0x20>
 800ada6:	1e43      	subs	r3, r0, #1
 800ada8:	42a1      	cmp	r1, r4
 800adaa:	d008      	beq.n	800adbe <memmove+0x28>
 800adac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adb4:	e7f8      	b.n	800ada8 <memmove+0x12>
 800adb6:	4402      	add	r2, r0
 800adb8:	4601      	mov	r1, r0
 800adba:	428a      	cmp	r2, r1
 800adbc:	d100      	bne.n	800adc0 <memmove+0x2a>
 800adbe:	bd10      	pop	{r4, pc}
 800adc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adc4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adc8:	e7f7      	b.n	800adba <memmove+0x24>
	...

0800adcc <_sbrk_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	; (800ade8 <_sbrk_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f6 f852 	bl	8000e80 <_sbrk>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_sbrk_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_sbrk_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20001550 	.word	0x20001550

0800adec <_malloc_usable_size_r>:
 800adec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf0:	1f18      	subs	r0, r3, #4
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bfbc      	itt	lt
 800adf6:	580b      	ldrlt	r3, [r1, r0]
 800adf8:	18c0      	addlt	r0, r0, r3
 800adfa:	4770      	bx	lr

0800adfc <_init>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	bf00      	nop
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr

0800ae08 <_fini>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	bf00      	nop
 800ae0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0e:	bc08      	pop	{r3}
 800ae10:	469e      	mov	lr, r3
 800ae12:	4770      	bx	lr
