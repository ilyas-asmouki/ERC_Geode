
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb44  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800bd24  0800bd24  0001bd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd8c  0800bd8c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd8c  0800bd8c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd8c  0800bd8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800bd94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010514  20000060  0800bdf4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010574  0800bdf4  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ec4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d1a  00000000  00000000  00043f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db0  00000000  00000000  00049cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001664  00000000  00000000  0004ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b27  00000000  00000000  0004d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a0a3  00000000  00000000  00065bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007e30  00000000  00000000  0006fc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  00077ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bd0c 	.word	0x0800bd0c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800bd0c 	.word	0x0800bd0c

08000220 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_CRC_Init+0x50>)
 8000226:	4a13      	ldr	r2, [pc, #76]	; (8000274 <MX_CRC_Init+0x54>)
 8000228:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_CRC_Init+0x50>)
 800022c:	2201      	movs	r2, #1
 800022e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_CRC_Init+0x50>)
 8000232:	2201      	movs	r2, #1
 8000234:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_CRC_Init+0x50>)
 8000238:	2207      	movs	r2, #7
 800023a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_CRC_Init+0x50>)
 800023e:	2208      	movs	r2, #8
 8000240:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000242:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <MX_CRC_Init+0x50>)
 8000244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000248:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_CRC_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <MX_CRC_Init+0x50>)
 8000252:	2200      	movs	r2, #0
 8000254:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_CRC_Init+0x50>)
 8000258:	2201      	movs	r2, #1
 800025a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_CRC_Init+0x50>)
 800025e:	f000 ffa7 	bl	80011b0 <HAL_CRC_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000268:	f000 fbdf 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000007c 	.word	0x2000007c
 8000274:	40023000 	.word	0x40023000

08000278 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <HAL_CRC_MspInit+0x38>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d10b      	bne.n	80002a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <HAL_CRC_MspInit+0x3c>)
 800028c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800028e:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <HAL_CRC_MspInit+0x3c>)
 8000290:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000294:	6493      	str	r3, [r2, #72]	; 0x48
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <HAL_CRC_MspInit+0x3c>)
 8000298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800029a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023000 	.word	0x40023000
 80002b4:	40021000 	.word	0x40021000

080002b8 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002be:	4a20      	ldr	r2, [pc, #128]	; (8000340 <MX_FDCAN1_Init+0x88>)
 80002c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002c8:	4b1c      	ldr	r3, [pc, #112]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002dc:	2200      	movs	r2, #0
 80002de:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002e8:	2210      	movs	r2, #16
 80002ea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002f4:	2202      	movs	r2, #2
 80002f6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_FDCAN1_Init+0x84>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000300:	2201      	movs	r2, #1
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000306:	2201      	movs	r2, #1
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_FDCAN1_Init+0x84>)
 800030c:	2201      	movs	r2, #1
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000312:	2201      	movs	r2, #1
 8000314:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000318:	2200      	movs	r2, #0
 800031a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <MX_FDCAN1_Init+0x84>)
 800031e:	2200      	movs	r2, #0
 8000320:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_FDCAN1_Init+0x84>)
 8000324:	2200      	movs	r2, #0
 8000326:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_FDCAN1_Init+0x84>)
 800032a:	f001 f833 	bl	8001394 <HAL_FDCAN_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000334:	f000 fb79 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	200000a0 	.word	0x200000a0
 8000340:	40006400 	.word	0x40006400

08000344 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800034a:	4a20      	ldr	r2, [pc, #128]	; (80003cc <MX_FDCAN2_Init+0x88>)
 800034c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000350:	2200      	movs	r2, #0
 8000352:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000354:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000360:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000362:	2200      	movs	r2, #0
 8000364:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000368:	2200      	movs	r2, #0
 800036a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800036e:	2200      	movs	r2, #0
 8000370:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000374:	2210      	movs	r2, #16
 8000376:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800037a:	2201      	movs	r2, #1
 800037c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000380:	2202      	movs	r2, #2
 8000382:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000386:	2202      	movs	r2, #2
 8000388:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800038c:	2201      	movs	r2, #1
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000392:	2201      	movs	r2, #1
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 8000398:	2201      	movs	r2, #1
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 800039e:	2201      	movs	r2, #1
 80003a0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	; (80003c8 <MX_FDCAN2_Init+0x84>)
 80003b6:	f000 ffed 	bl	8001394 <HAL_FDCAN_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80003c0:	f000 fb33 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000104 	.word	0x20000104
 80003cc:	40006800 	.word	0x40006800

080003d0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b0a0      	sub	sp, #128	; 0x80
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	2254      	movs	r2, #84	; 0x54
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f00b fb53 	bl	800ba9c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a48      	ldr	r2, [pc, #288]	; (800051c <HAL_FDCAN_MspInit+0x14c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d142      	bne.n	8000486 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000404:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	4618      	mov	r0, r3
 8000412:	f003 fdb1 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800041c:	f000 fb05 	bl	8000a2a <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000420:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	4a3e      	ldr	r2, [pc, #248]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 8000428:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800042a:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d10b      	bne.n	800044a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000436:	4a3b      	ldr	r2, [pc, #236]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043c:	6593      	str	r3, [r2, #88]	; 0x58
 800043e:	4b39      	ldr	r3, [pc, #228]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b36      	ldr	r3, [pc, #216]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a35      	ldr	r2, [pc, #212]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000450:	f043 0302 	orr.w	r3, r3, #2
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000456:	4b33      	ldr	r3, [pc, #204]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000462:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000466:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2300      	movs	r3, #0
 8000472:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000474:	2309      	movs	r3, #9
 8000476:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047c:	4619      	mov	r1, r3
 800047e:	482a      	ldr	r0, [pc, #168]	; (8000528 <HAL_FDCAN_MspInit+0x158>)
 8000480:	f001 f94e 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000484:	e045      	b.n	8000512 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a28      	ldr	r2, [pc, #160]	; (800052c <HAL_FDCAN_MspInit+0x15c>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d140      	bne.n	8000512 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000494:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800049a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049c:	f107 0318 	add.w	r3, r7, #24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f003 fd69 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 80004ac:	f000 fabd 	bl	8000a2a <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 80004b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <HAL_FDCAN_MspInit+0x150>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d10b      	bne.n	80004da <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004cc:	6593      	str	r3, [r2, #88]	; 0x58
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_FDCAN_MspInit+0x154>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80004f2:	2360      	movs	r3, #96	; 0x60
 80004f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	2300      	movs	r3, #0
 8000500:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000502:	2309      	movs	r3, #9
 8000504:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800050a:	4619      	mov	r1, r3
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <HAL_FDCAN_MspInit+0x158>)
 800050e:	f001 f907 	bl	8001720 <HAL_GPIO_Init>
}
 8000512:	bf00      	nop
 8000514:	3780      	adds	r7, #128	; 0x80
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40006400 	.word	0x40006400
 8000520:	20000168 	.word	0x20000168
 8000524:	40021000 	.word	0x40021000
 8000528:	48000400 	.word	0x48000400
 800052c:	40006800 	.word	0x40006800

08000530 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

extern void MX_FREERTOS_Init(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	System::init();
 8000534:	f00a fc9a 	bl	800ae6c <_ZN6System4initEv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b5f      	ldr	r3, [pc, #380]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a5e      	ldr	r2, [pc, #376]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b5c      	ldr	r3, [pc, #368]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b59      	ldr	r3, [pc, #356]	; (80006d0 <MX_GPIO_Init+0x194>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a58      	ldr	r2, [pc, #352]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b56      	ldr	r3, [pc, #344]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0320 	and.w	r3, r3, #32
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a52      	ldr	r2, [pc, #328]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b50      	ldr	r3, [pc, #320]	; (80006d0 <MX_GPIO_Init+0x194>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b4d      	ldr	r3, [pc, #308]	; (80006d0 <MX_GPIO_Init+0x194>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a4c      	ldr	r2, [pc, #304]	; (80006d0 <MX_GPIO_Init+0x194>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b4a      	ldr	r3, [pc, #296]	; (80006d0 <MX_GPIO_Init+0x194>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <MX_GPIO_Init+0x194>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <MX_GPIO_Init+0x194>)
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <MX_GPIO_Init+0x194>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 80005ca:	2200      	movs	r2, #0
 80005cc:	f246 0187 	movw	r1, #24711	; 0x6087
 80005d0:	4840      	ldr	r0, [pc, #256]	; (80006d4 <MX_GPIO_Init+0x198>)
 80005d2:	f001 fa27 	bl	8001a24 <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	210a      	movs	r1, #10
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f001 fa21 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2187      	movs	r1, #135	; 0x87
 80005e6:	483c      	ldr	r0, [pc, #240]	; (80006d8 <MX_GPIO_Init+0x19c>)
 80005e8:	f001 fa1c 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 80005ec:	f246 0387 	movw	r3, #24711	; 0x6087
 80005f0:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4833      	ldr	r0, [pc, #204]	; (80006d4 <MX_GPIO_Init+0x198>)
 8000606:	f001 f88b 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 800060a:	f248 0378 	movw	r3, #32888	; 0x8078
 800060e:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	482d      	ldr	r0, [pc, #180]	; (80006d4 <MX_GPIO_Init+0x198>)
 8000620:	f001 f87e 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 8000624:	f240 4305 	movw	r3, #1029	; 0x405
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f001 f870 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 8000640:	230a      	movs	r3, #10
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f001 f861 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 800065e:	2387      	movs	r3, #135	; 0x87
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <MX_GPIO_Init+0x19c>)
 8000676:	f001 f853 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 800067a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_GPIO_Init+0x19c>)
 8000690:	f001 f846 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8000694:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x19c>)
 80006aa:	f001 f839 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_GPIO_Init+0x1a0>)
 80006c2:	f001 f82d 	bl	8001720 <HAL_GPIO_Init>

}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000800 	.word	0x48000800
 80006d8:	48000400 	.word	0x48000400
 80006dc:	48000c00 	.word	0x48000c00

080006e0 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_I2C2_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_I2C2_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_I2C2_Init+0x74>)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <MX_I2C2_Init+0x7c>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_I2C2_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_I2C2_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_I2C2_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_I2C2_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C2_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C2_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <MX_I2C2_Init+0x74>)
 800071c:	f001 f99a 	bl	8001a54 <HAL_I2C_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000726:	f000 f980 	bl	8000a2a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_I2C2_Init+0x74>)
 800072e:	f001 fa2c 	bl	8001b8a <HAL_I2CEx_ConfigAnalogFilter>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 f977 	bl	8000a2a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_I2C2_Init+0x74>)
 8000740:	f001 fa6e 	bl	8001c20 <HAL_I2CEx_ConfigDigitalFilter>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f96e 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000016c 	.word	0x2000016c
 8000758:	40005800 	.word	0x40005800
 800075c:	00e057fd 	.word	0x00e057fd

08000760 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_I2C3_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_I2C3_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_I2C3_Init+0x74>)
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <MX_I2C3_Init+0x7c>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_I2C3_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_I2C3_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_I2C3_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_I2C3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <MX_I2C3_Init+0x74>)
 800079c:	f001 f95a 	bl	8001a54 <HAL_I2C_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007a6:	f000 f940 	bl	8000a2a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <MX_I2C3_Init+0x74>)
 80007ae:	f001 f9ec 	bl	8001b8a <HAL_I2CEx_ConfigAnalogFilter>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f937 	bl	8000a2a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_I2C3_Init+0x74>)
 80007c0:	f001 fa2e 	bl	8001c20 <HAL_I2CEx_ConfigDigitalFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f92e 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200001c0 	.word	0x200001c0
 80007d8:	40007800 	.word	0x40007800
 80007dc:	00e057fd 	.word	0x00e057fd

080007e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0a0      	sub	sp, #128	; 0x80
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0318 	add.w	r3, r7, #24
 80007fc:	2254      	movs	r2, #84	; 0x54
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f00b f94b 	bl	800ba9c <memset>
  if(i2cHandle->Instance==I2C2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a3e      	ldr	r2, [pc, #248]	; (8000904 <HAL_I2C_MspInit+0x124>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d138      	bne.n	8000882 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fbab 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000828:	f000 f8ff 	bl	8000a2a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b36      	ldr	r3, [pc, #216]	; (8000908 <HAL_I2C_MspInit+0x128>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	4a35      	ldr	r2, [pc, #212]	; (8000908 <HAL_I2C_MspInit+0x128>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000838:	4b33      	ldr	r3, [pc, #204]	; (8000908 <HAL_I2C_MspInit+0x128>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083c:	f003 0301 	and.w	r3, r3, #1
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000848:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084a:	2312      	movs	r3, #18
 800084c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000856:	2304      	movs	r3, #4
 8000858:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f000 ff5c 	bl	8001720 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <HAL_I2C_MspInit+0x128>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <HAL_I2C_MspInit+0x128>)
 800086e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <HAL_I2C_MspInit+0x128>)
 8000876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000880:	e03c      	b.n	80008fc <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a21      	ldr	r2, [pc, #132]	; (800090c <HAL_I2C_MspInit+0x12c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d137      	bne.n	80008fc <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800088c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000890:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000892:	2300      	movs	r3, #0
 8000894:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fb6c 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_I2C_MspInit+0xca>
      Error_Handler();
 80008a6:	f000 f8c0 	bl	8000a2a <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_I2C_MspInit+0x128>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <HAL_I2C_MspInit+0x128>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_I2C_MspInit+0x128>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c8:	2312      	movs	r3, #18
 80008ca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80008d4:	2308      	movs	r3, #8
 80008d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008dc:	4619      	mov	r1, r3
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <HAL_I2C_MspInit+0x130>)
 80008e0:	f000 ff1e 	bl	8001720 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_I2C_MspInit+0x128>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_I2C_MspInit+0x128>)
 80008ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_I2C_MspInit+0x128>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
}
 80008fc:	bf00      	nop
 80008fe:	3780      	adds	r7, #128	; 0x80
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40005800 	.word	0x40005800
 8000908:	40021000 	.word	0x40021000
 800090c:	40007800 	.word	0x40007800
 8000910:	48000800 	.word	0x48000800

08000914 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_IWDG_Init+0x34>)
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <MX_IWDG_Init+0x38>)
 800091c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_IWDG_Init+0x34>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_IWDG_Init+0x34>)
 8000926:	f640 72ff 	movw	r2, #4095	; 0xfff
 800092a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_IWDG_Init+0x34>)
 800092e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000932:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_IWDG_Init+0x34>)
 8000936:	f001 f9bf 	bl	8001cb8 <HAL_IWDG_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000940:	f000 f873 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000214 	.word	0x20000214
 800094c:	40003000 	.word	0x40003000

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 fad7 	bl	8000f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f81b 	bl	8000992 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f7ff fdee 	bl	800053c <MX_GPIO_Init>
  MX_CRC_Init();
 8000960:	f7ff fc5e 	bl	8000220 <MX_CRC_Init>
  MX_FDCAN1_Init();
 8000964:	f7ff fca8 	bl	80002b8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000968:	f7ff fcec 	bl	8000344 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 800096c:	f7ff feb8 	bl	80006e0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000970:	f7ff fef6 	bl	8000760 <MX_I2C3_Init>
  MX_IWDG_Init();
 8000974:	f7ff ffce 	bl	8000914 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000978:	f000 f85c 	bl	8000a34 <MX_SPI1_Init>
  MX_SPI2_Init();
 800097c:	f000 f898 	bl	8000ab0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000980:	f000 f8d4 	bl	8000b2c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000984:	f007 fc86 	bl	8008294 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000988:	f7ff fdd2 	bl	8000530 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800098c:	f007 fca6 	bl	80082dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0x40>

08000992 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b094      	sub	sp, #80	; 0x50
 8000996:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	2238      	movs	r2, #56	; 0x38
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00b f87b 	bl	800ba9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b8:	f002 fd44 	bl	8003444 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009bc:	2309      	movs	r3, #9
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ce:	2303      	movs	r3, #3
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 80009d2:	2310      	movs	r3, #16
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009d6:	2360      	movs	r3, #96	; 0x60
 80009d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80009de:	2306      	movs	r3, #6
 80009e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fdce 	bl	800358c <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009f6:	f000 f818 	bl	8000a2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	230f      	movs	r3, #15
 80009fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2104      	movs	r1, #4
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 f8cc 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a1e:	f000 f804 	bl	8000a2a <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	; 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <Error_Handler+0x8>

08000a34 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_SPI1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a94:	f003 fcbe 	bl	8004414 <HAL_SPI_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f7ff ffc4 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000224 	.word	0x20000224
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_SPI2_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000aca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ace:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ade:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ae2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_SPI2_Init+0x74>)
 8000b10:	f003 fc80 	bl	8004414 <HAL_SPI_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f7ff ff86 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000288 	.word	0x20000288
 8000b28:	40003800 	.word	0x40003800

08000b2c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_SPI3_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b4a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b5e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b62:	2208      	movs	r2, #8
 8000b64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_SPI3_Init+0x74>)
 8000b8c:	f003 fc42 	bl	8004414 <HAL_SPI_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f7ff ff48 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002ec 	.word	0x200002ec
 8000ba4:	40003c00 	.word	0x40003c00

08000ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a55      	ldr	r2, [pc, #340]	; (8000d1c <HAL_SPI_MspInit+0x174>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d129      	bne.n	8000c1e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bca:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	4a54      	ldr	r2, [pc, #336]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b4f      	ldr	r3, [pc, #316]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfa:	23f0      	movs	r3, #240	; 0xf0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f000 fd82 	bl	8001720 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c1c:	e07a      	b.n	8000d14 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a40      	ldr	r2, [pc, #256]	; (8000d24 <HAL_SPI_MspInit+0x17c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d129      	bne.n	8000c7c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c28:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2c:	4a3c      	ldr	r2, [pc, #240]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6593      	str	r3, [r2, #88]	; 0x58
 8000c34:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c44:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4c:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c58:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	482c      	ldr	r0, [pc, #176]	; (8000d28 <HAL_SPI_MspInit+0x180>)
 8000c76:	f000 fd53 	bl	8001720 <HAL_GPIO_Init>
}
 8000c7a:	e04b      	b.n	8000d14 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <HAL_SPI_MspInit+0x184>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d146      	bne.n	8000d14 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c90:	6593      	str	r3, [r2, #88]	; 0x58
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_SPI_MspInit+0x178>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f000 fd17 	bl	8001720 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000cf2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d04:	2306      	movs	r3, #6
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <HAL_SPI_MspInit+0x188>)
 8000d10:	f000 fd06 	bl	8001720 <HAL_GPIO_Init>
}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40013000 	.word	0x40013000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40003800 	.word	0x40003800
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	48000800 	.word	0x48000800

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6613      	str	r3, [r2, #96]	; 0x60
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	f06f 0001 	mvn.w	r0, #1
 8000d72:	f000 f9f6 	bl	8001162 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8fa 	bl	8000fac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000db8:	f008 fff2 	bl	8009da0 <xTaskGetSchedulerState>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d001      	beq.n	8000dc6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dc2:	f009 fdd9 	bl	800a978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <USB_LP_IRQHandler+0x10>)
 8000dd2:	f000 ffc0 	bl	8001d56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2001014c 	.word	0x2001014c

08000de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_kill>:

int _kill(int pid, int sig)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dfa:	f00a ff01 	bl	800bc00 <__errno>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2216      	movs	r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
  return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_exit>:

void _exit (int status)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ffe7 	bl	8000df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e22:	e7fe      	b.n	8000e22 <_exit+0x12>

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f00a fed4 	bl	800bc00 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000350 	.word	0x20000350
 8000e8c:	20010578 	.word	0x20010578

08000e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f00a fe93 	bl	800bc0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fd33 	bl	8000950 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   r0, =_estack
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ef8:	0800bd94 	.word	0x0800bd94
  ldr r2, =_sbss
 8000efc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f00:	20010574 	.word	0x20010574

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>

08000f06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f91b 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f16:	200f      	movs	r0, #15
 8000f18:	f000 f80e 	bl	8000f38 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	e001      	b.n	8000f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f28:	f7ff ff04 	bl	8000d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f44:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_InitTick+0x68>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d022      	beq.n	8000f92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_InitTick+0x68>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f918 	bl	8001196 <HAL_SYSTICK_Config>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10f      	bne.n	8000f8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d809      	bhi.n	8000f86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f72:	2200      	movs	r2, #0
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7a:	f000 f8f2 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_InitTick+0x70>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	e007      	b.n	8000f96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e004      	b.n	8000f96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	e001      	b.n	8000f96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_IncTick+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x1c>)
 8000fbc:	6013      	str	r3, [r2, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000354 	.word	0x20000354
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000354 	.word	0x20000354

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff47 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff5e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff90 	bl	80010a0 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5f 	bl	800104c <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffb2 	bl	8001108 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e054      	b.n	800126c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7f5b      	ldrb	r3, [r3, #29]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff f850 	bl	8000278 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a22      	ldr	r2, [pc, #136]	; (8001274 <HAL_CRC_Init+0xc4>)
 80011ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0218 	bic.w	r2, r2, #24
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	e00c      	b.n	800121a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6899      	ldr	r1, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	461a      	mov	r2, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f834 	bl	8001278 <HAL_CRCEx_Polynomial_Set>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e028      	b.n	800126c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	795b      	ldrb	r3, [r3, #5]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	e004      	b.n	8001238 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6912      	ldr	r2, [r2, #16]
 8001236:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	04c11db7 	.word	0x04c11db7

08001278 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001288:	231f      	movs	r3, #31
 800128a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
 800129a:	e063      	b.n	8001364 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800129c:	bf00      	nop
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	613a      	str	r2, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d009      	beq.n	80012bc <HAL_CRCEx_Polynomial_Set+0x44>
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b18      	cmp	r3, #24
 80012c0:	d846      	bhi.n	8001350 <HAL_CRCEx_Polynomial_Set+0xd8>
 80012c2:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	08001357 	.word	0x08001357
 80012cc:	08001351 	.word	0x08001351
 80012d0:	08001351 	.word	0x08001351
 80012d4:	08001351 	.word	0x08001351
 80012d8:	08001351 	.word	0x08001351
 80012dc:	08001351 	.word	0x08001351
 80012e0:	08001351 	.word	0x08001351
 80012e4:	08001351 	.word	0x08001351
 80012e8:	08001345 	.word	0x08001345
 80012ec:	08001351 	.word	0x08001351
 80012f0:	08001351 	.word	0x08001351
 80012f4:	08001351 	.word	0x08001351
 80012f8:	08001351 	.word	0x08001351
 80012fc:	08001351 	.word	0x08001351
 8001300:	08001351 	.word	0x08001351
 8001304:	08001351 	.word	0x08001351
 8001308:	08001339 	.word	0x08001339
 800130c:	08001351 	.word	0x08001351
 8001310:	08001351 	.word	0x08001351
 8001314:	08001351 	.word	0x08001351
 8001318:	08001351 	.word	0x08001351
 800131c:	08001351 	.word	0x08001351
 8001320:	08001351 	.word	0x08001351
 8001324:	08001351 	.word	0x08001351
 8001328:	0800132d 	.word	0x0800132d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b06      	cmp	r3, #6
 8001330:	d913      	bls.n	800135a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001336:	e010      	b.n	800135a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b07      	cmp	r3, #7
 800133c:	d90f      	bls.n	800135e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001342:	e00c      	b.n	800135e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d90b      	bls.n	8001362 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800134e:	e008      	b.n	8001362 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	75fb      	strb	r3, [r7, #23]
        break;
 8001354:	e006      	b.n	8001364 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001356:	bf00      	nop
 8001358:	e004      	b.n	8001364 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800135a:	bf00      	nop
 800135c:	e002      	b.n	8001364 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800135e:	bf00      	nop
 8001360:	e000      	b.n	8001364 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001362:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f023 0118 	bic.w	r1, r3, #24
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	430a      	orrs	r2, r1
 8001384:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e147      	b.n	8001636 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f808 	bl	80003d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0210 	bic.w	r2, r2, #16
 80013ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d0:	f7ff fdfe 	bl	8000fd0 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013d6:	e012      	b.n	80013fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d8:	f7ff fdfa 	bl	8000fd0 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b0a      	cmp	r3, #10
 80013e4:	d90b      	bls.n	80013fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e11b      	b.n	8001636 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b08      	cmp	r3, #8
 800140a:	d0e5      	beq.n	80013d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800141c:	f7ff fdd8 	bl	8000fd0 <HAL_GetTick>
 8001420:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001422:	e012      	b.n	800144a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001424:	f7ff fdd4 	bl	8000fd0 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d90b      	bls.n	800144a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f043 0201 	orr.w	r2, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0f5      	b.n	8001636 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0e5      	beq.n	8001424 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0202 	orr.w	r2, r2, #2
 8001466:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a74      	ldr	r2, [pc, #464]	; (8001640 <HAL_FDCAN_Init+0x2ac>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d103      	bne.n	800147a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001472:	4a74      	ldr	r2, [pc, #464]	; (8001644 <HAL_FDCAN_Init+0x2b0>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7c1b      	ldrb	r3, [r3, #16]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e007      	b.n	80014a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7c5b      	ldrb	r3, [r3, #17]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699a      	ldr	r2, [r3, #24]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ba:	619a      	str	r2, [r3, #24]
 80014bc:	e007      	b.n	80014ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7c9b      	ldrb	r3, [r3, #18]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014e4:	619a      	str	r2, [r3, #24]
 80014e6:	e007      	b.n	80014f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699a      	ldr	r2, [r3, #24]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800151c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0210 	bic.w	r2, r2, #16
 800152c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d108      	bne.n	8001548 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699a      	ldr	r2, [r3, #24]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0204 	orr.w	r2, r2, #4
 8001544:	619a      	str	r2, [r3, #24]
 8001546:	e02c      	b.n	80015a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d028      	beq.n	80015a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d01c      	beq.n	8001592 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001566:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0210 	orr.w	r2, r2, #16
 8001576:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d110      	bne.n	80015a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	e007      	b.n	80015a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0220 	orr.w	r2, r2, #32
 80015a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015d6:	d115      	bne.n	8001604 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	3b01      	subs	r3, #1
 80015e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	3b01      	subs	r3, #1
 80015ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80015f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	3b01      	subs	r3, #1
 80015fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001600:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001602:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f814 	bl	8001648 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40006400 	.word	0x40006400
 8001644:	40006500 	.word	0x40006500

08001648 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001652:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2f      	ldr	r2, [pc, #188]	; (8001718 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d103      	bne.n	8001666 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001664:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d103      	bne.n	8001678 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001676:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001686:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	041a      	lsls	r2, r3, #16
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016ac:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b4:	061a      	lsls	r2, r3, #24
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e005      	b.n	80016fa <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3304      	adds	r3, #4
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3f3      	bcc.n	80016ee <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	4000a400 	.word	0x4000a400
 8001718:	40006800 	.word	0x40006800
 800171c:	40006c00 	.word	0x40006c00

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800172e:	e15a      	b.n	80019e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 814c 	beq.w	80019e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0201 	and.w	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	6939      	ldr	r1, [r7, #16]
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0203 	and.w	r2, r3, #3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80a6 	beq.w	80019e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_GPIO_Init+0x2e4>)
 8001896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001898:	4a5a      	ldr	r2, [pc, #360]	; (8001a04 <HAL_GPIO_Init+0x2e4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6613      	str	r3, [r2, #96]	; 0x60
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_GPIO_Init+0x2e4>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ac:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018d6:	d01f      	beq.n	8001918 <HAL_GPIO_Init+0x1f8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d019      	beq.n	8001914 <HAL_GPIO_Init+0x1f4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d013      	beq.n	8001910 <HAL_GPIO_Init+0x1f0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a4a      	ldr	r2, [pc, #296]	; (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a49      	ldr	r2, [pc, #292]	; (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a48      	ldr	r2, [pc, #288]	; (8001a1c <HAL_GPIO_Init+0x2fc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_GPIO_Init+0x1e4>
 8001900:	2305      	movs	r3, #5
 8001902:	e00a      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001904:	2306      	movs	r3, #6
 8001906:	e008      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001908:	2304      	movs	r3, #4
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 800190c:	2303      	movs	r3, #3
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1fa>
 8001918:	2300      	movs	r3, #0
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192a:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_GPIO_Init+0x300>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800195c:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <HAL_GPIO_Init+0x300>)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001962:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x300>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001986:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <HAL_GPIO_Init+0x300>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_GPIO_Init+0x300>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_GPIO_Init+0x300>)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_GPIO_Init+0x300>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019da:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_GPIO_Init+0x300>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f47f ae9d 	bne.w	8001730 <HAL_GPIO_Init+0x10>
  }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000c00 	.word	0x48000c00
 8001a18:	48001000 	.word	0x48001000
 8001a1c:	48001400 	.word	0x48001400
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e08d      	b.n	8001b82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe feb0 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	; 0x24
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ab4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e006      	b.n	8001adc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ada:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d108      	bne.n	8001af6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	e007      	b.n	8001b06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d138      	bne.n	8001c12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e032      	b.n	8001c14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2224      	movs	r2, #36	; 0x24
 8001bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
  }
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d139      	bne.n	8001caa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e033      	b.n	8001cac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e041      	b.n	8001d4e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f245 5255 	movw	r2, #21845	; 0x5555
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6892      	ldr	r2, [r2, #8]
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001cf2:	f7ff f96d 	bl	8000fd0 <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cf8:	e00f      	b.n	8001d1a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001cfa:	f7ff f969 	bl	8000fd0 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b31      	cmp	r3, #49	; 0x31
 8001d06:	d908      	bls.n	8001d1a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e019      	b.n	8001d4e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e8      	bne.n	8001cfa <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d005      	beq.n	8001d42 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e004      	b.n	8001d4c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 f984 	bl	8007070 <USB_ReadInterrupts>
 8001d68:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 faa4 	bl	80022c2 <PCD_EP_ISR_Handler>

    return;
 8001d7a:	e110      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d013      	beq.n	8001dae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f009 fbde 	bl	800b560 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001da4:	2100      	movs	r1, #0
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8fc 	bl	8001fa4 <HAL_PCD_SetAddress>

    return;
 8001dac:	e0f7      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00c      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001dd0:	e0e5      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dee:	b292      	uxth	r2, r2
 8001df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001df4:	e0d3      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d034      	beq.n	8001e6a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0204 	bic.w	r2, r2, #4
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e42:	2100      	movs	r1, #0
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f009 fcd1 	bl	800b7ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f009 fbc0 	bl	800b5d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e68:	e099      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d027      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0208 	orr.w	r2, r2, #8
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9e:	b292      	uxth	r2, r2
 8001ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0204 	orr.w	r2, r2, #4
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f009 fb6d 	bl	800b59c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001ec2:	e06c      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d040      	beq.n	8001f50 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d12b      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0204 	orr.w	r2, r2, #4
 8001f02:	b292      	uxth	r2, r2
 8001f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f3e:	2101      	movs	r1, #1
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f009 fc53 	bl	800b7ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001f46:	e02a      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f009 fb27 	bl	800b59c <HAL_PCD_SuspendCallback>
    return;
 8001f4e:	e026      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00f      	beq.n	8001f7a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f6c:	b292      	uxth	r2, r2
 8001f6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f009 fae6 	bl	800b544 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f78:	e011      	b.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f9c:	bf00      	nop
  }
}
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_PCD_SetAddress+0x1a>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e012      	b.n	8001fe4 <HAL_PCD_SetAddress+0x40>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f005 f837 	bl	8007048 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	70fb      	strb	r3, [r7, #3]
 8001ffe:	460b      	mov	r3, r1
 8002000:	803b      	strh	r3, [r7, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800200a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800200e:	2b00      	cmp	r3, #0
 8002010:	da0e      	bge.n	8002030 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 0207 	and.w	r2, r3, #7
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	3310      	adds	r3, #16
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	705a      	strb	r2, [r3, #1]
 800202e:	e00e      	b.n	800204e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	f003 0207 	and.w	r2, r3, #7
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800205a:	883a      	ldrh	r2, [r7, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	78ba      	ldrb	r2, [r7, #2]
 8002064:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d102      	bne.n	8002072 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_PCD_EP_Open+0x94>
 800207c:	2302      	movs	r3, #2
 800207e:	e00e      	b.n	800209e <HAL_PCD_EP_Open+0xb2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 ff66 	bl	8004f60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800209c:	7afb      	ldrb	r3, [r7, #11]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	460b      	mov	r3, r1
 80020b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	f003 0207 	and.w	r2, r3, #7
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2200      	movs	r2, #0
 80020e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6979      	ldr	r1, [r7, #20]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 faf5 	bl	80056e8 <USB_EPStartXfer>

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	460b      	mov	r3, r1
 8002116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	3310      	adds	r3, #16
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2201      	movs	r2, #1
 8002152:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	b2da      	uxtb	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6979      	ldr	r1, [r7, #20]
 8002166:	4618      	mov	r0, r3
 8002168:	f003 fabe 	bl	80056e8 <USB_EPStartXfer>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	7912      	ldrb	r2, [r2, #4]
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e03e      	b.n	8002212 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da0e      	bge.n	80021ba <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 0207 	and.w	r2, r3, #7
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	3310      	adds	r3, #16
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	705a      	strb	r2, [r3, #1]
 80021b8:	e00c      	b.n	80021d4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_PCD_EP_SetStall+0x7e>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e00e      	b.n	8002212 <HAL_PCD_EP_SetStall+0x9c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fe21 	bl	8006e4a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	7912      	ldrb	r2, [r2, #4]
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e040      	b.n	80022ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da0e      	bge.n	800225e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	f003 0207 	and.w	r2, r3, #7
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	3310      	adds	r3, #16
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00e      	b.n	800227c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 0207 	and.w	r2, r3, #7
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_PCD_EP_ClrStall+0x82>
 8002298:	2302      	movs	r3, #2
 800229a:	e00e      	b.n	80022ba <HAL_PCD_EP_ClrStall+0xa0>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fe1e 	bl	8006eec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b096      	sub	sp, #88	; 0x58
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022ca:	e3ae      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80022e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 8170 	bne.w	80025d0 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d14d      	bne.n	8002398 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230c:	81fb      	strh	r3, [r7, #14]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	89fb      	ldrh	r3, [r7, #14]
 8002314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800231c:	b29b      	uxth	r3, r3
 800231e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3310      	adds	r3, #16
 8002324:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4413      	add	r3, r2
 8002340:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800234e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	441a      	add	r2, r3
 8002358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800235c:	2100      	movs	r1, #0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f009 f8d6 	bl	800b510 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7b1b      	ldrb	r3, [r3, #12]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 835d 	beq.w	8002a2a <PCD_EP_ISR_Handler+0x768>
 8002370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 8358 	bne.w	8002a2a <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7b1b      	ldrb	r3, [r3, #12]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002384:	b2da      	uxtb	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	b292      	uxth	r2, r2
 800238c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	731a      	strb	r2, [r3, #12]
 8002396:	e348      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d032      	beq.n	800241c <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80023e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f004 fe8f 	bl	8007114 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002402:	4013      	ands	r3, r2
 8002404:	823b      	strh	r3, [r7, #16]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	8a3a      	ldrh	r2, [r7, #16]
 800240c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002410:	b292      	uxth	r2, r2
 8002412:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f009 f84e 	bl	800b4b6 <HAL_PCD_SetupStageCallback>
 800241a:	e306      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800241c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002420:	2b00      	cmp	r3, #0
 8002422:	f280 8302 	bge.w	8002a2a <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29a      	uxth	r2, r3
 800242e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002432:	4013      	ands	r3, r2
 8002434:	83fb      	strh	r3, [r7, #30]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	8bfa      	ldrh	r2, [r7, #30]
 800243c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002440:	b292      	uxth	r2, r2
 8002442:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	4413      	add	r3, r2
 800245e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800246c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d019      	beq.n	80024a8 <PCD_EP_ISR_Handler+0x1e6>
 8002474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d015      	beq.n	80024a8 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002482:	6959      	ldr	r1, [r3, #20]
 8002484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002486:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800248a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800248c:	b29b      	uxth	r3, r3
 800248e:	f004 fe41 	bl	8007114 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	441a      	add	r2, r3
 800249c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800249e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024a0:	2100      	movs	r1, #0
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f009 f819 	bl	800b4da <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80024b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 82b5 	bne.w	8002a2a <PCD_EP_ISR_Handler+0x768>
 80024c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024cc:	f000 82ad 	beq.w	8002a2a <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	801a      	strh	r2, [r3, #0]
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b3e      	cmp	r3, #62	; 0x3e
 8002506:	d91d      	bls.n	8002544 <PCD_EP_ISR_Handler+0x282>
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <PCD_EP_ISR_Handler+0x260>
 800251c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251e:	3b01      	subs	r3, #1
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29a      	uxth	r2, r3
 8002528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800252a:	b29b      	uxth	r3, r3
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	b29b      	uxth	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b29b      	uxth	r3, r3
 8002534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253c:	b29a      	uxth	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	e026      	b.n	8002592 <PCD_EP_ISR_Handler+0x2d0>
 8002544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <PCD_EP_ISR_Handler+0x2a0>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255a:	b29a      	uxth	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	e017      	b.n	8002592 <PCD_EP_ISR_Handler+0x2d0>
 8002562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
 800256a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <PCD_EP_ISR_Handler+0x2ba>
 8002576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002578:	3301      	adds	r3, #1
 800257a:	647b      	str	r3, [r7, #68]	; 0x44
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29a      	uxth	r2, r3
 8002582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002584:	b29b      	uxth	r3, r3
 8002586:	029b      	lsls	r3, r3, #10
 8002588:	b29b      	uxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800259e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a2:	827b      	strh	r3, [r7, #18]
 80025a4:	8a7b      	ldrh	r3, [r7, #18]
 80025a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025aa:	827b      	strh	r3, [r7, #18]
 80025ac:	8a7b      	ldrh	r3, [r7, #18]
 80025ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025b2:	827b      	strh	r3, [r7, #18]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	8a7b      	ldrh	r3, [r7, #18]
 80025ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	8013      	strh	r3, [r2, #0]
 80025ce:	e22c      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025e4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f280 80f6 	bge.w	80027da <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002604:	4013      	ands	r3, r2
 8002606:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800261c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002620:	b292      	uxth	r2, r2
 8002622:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002624:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	7b1b      	ldrb	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d123      	bne.n	800268a <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4413      	add	r3, r2
 800265c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002666:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800266a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 808e 	beq.w	8002790 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267a:	6959      	ldr	r1, [r3, #20]
 800267c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800267e:	88da      	ldrh	r2, [r3, #6]
 8002680:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002684:	f004 fd46 	bl	8007114 <USB_ReadPMA>
 8002688:	e082      	b.n	8002790 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268c:	78db      	ldrb	r3, [r3, #3]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d10a      	bne.n	80026a8 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002692:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002696:	461a      	mov	r2, r3
 8002698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9d3 	bl	8002a46 <HAL_PCD_EP_DB_Receive>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80026a6:	e073      	b.n	8002790 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	441a      	add	r2, r3
 80026d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d022      	beq.n	800274c <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270e:	b29b      	uxth	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800272e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02c      	beq.n	8002790 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800273c:	6959      	ldr	r1, [r3, #20]
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	891a      	ldrh	r2, [r3, #8]
 8002742:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002746:	f004 fce5 	bl	8007114 <USB_ReadPMA>
 800274a:	e021      	b.n	8002790 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002770:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002774:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	6959      	ldr	r1, [r3, #20]
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	895a      	ldrh	r2, [r3, #10]
 8002788:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800278c:	f004 fcc2 	bl	8007114 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002798:	441a      	add	r2, r3
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027a6:	441a      	add	r2, r3
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <PCD_EP_ISR_Handler+0x4fe>
 80027b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d206      	bcs.n	80027ce <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f008 fe87 	bl	800b4da <HAL_PCD_DataOutStageCallback>
 80027cc:	e005      	b.n	80027da <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 ff87 	bl	80056e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8121 	beq.w	8002a2a <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80027e8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	3310      	adds	r3, #16
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	441a      	add	r2, r3
 8002828:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800282c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002834:	b29b      	uxth	r3, r3
 8002836:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283a:	78db      	ldrb	r3, [r3, #3]
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 80a2 	bne.w	8002986 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	7b1b      	ldrb	r3, [r3, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8093 	beq.w	8002978 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002852:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d046      	beq.n	80028ec <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800285e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d126      	bne.n	80028b4 <PCD_EP_ISR_Handler+0x5f2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	4413      	add	r3, r2
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	00da      	lsls	r2, r3, #3
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	4413      	add	r3, r2
 8002888:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002898:	b29a      	uxth	r2, r3
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	e061      	b.n	8002978 <PCD_EP_ISR_Handler+0x6b6>
 80028b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b6:	785b      	ldrb	r3, [r3, #1]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d15d      	bne.n	8002978 <PCD_EP_ISR_Handler+0x6b6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d0:	4413      	add	r3, r2
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	00da      	lsls	r2, r3, #3
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	4413      	add	r3, r2
 80028de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	2200      	movs	r2, #0
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	e045      	b.n	8002978 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d126      	bne.n	8002948 <PCD_EP_ISR_Handler+0x686>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002908:	b29b      	uxth	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800290e:	4413      	add	r3, r2
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
 8002912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	00da      	lsls	r2, r3, #3
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	4413      	add	r3, r2
 800291c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29b      	uxth	r3, r3
 8002928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292c:	b29a      	uxth	r2, r3
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002940:	b29a      	uxth	r2, r3
 8002942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e017      	b.n	8002978 <PCD_EP_ISR_Handler+0x6b6>
 8002948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d113      	bne.n	8002978 <PCD_EP_ISR_Handler+0x6b6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002958:	b29b      	uxth	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	4413      	add	r3, r2
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	00da      	lsls	r2, r3, #3
 8002968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296a:	4413      	add	r3, r2
 800296c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2200      	movs	r2, #0
 8002976:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f008 fdc6 	bl	800b510 <HAL_PCD_DataInStageCallback>
 8002984:	e051      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002986:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d144      	bne.n	8002a1c <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80029ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d907      	bls.n	80029d6 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	619a      	str	r2, [r3, #24]
 80029d4:	e002      	b.n	80029dc <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80029dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f008 fd90 	bl	800b510 <HAL_PCD_DataInStageCallback>
 80029f0:	e01b      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80029f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029fa:	441a      	add	r2, r3
 80029fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a08:	441a      	add	r2, r3
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fe67 	bl	80056e8 <USB_EPStartXfer>
 8002a1a:	e006      	b.n	8002a2a <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a20:	461a      	mov	r2, r3
 8002a22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f917 	bl	8002c58 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	b21b      	sxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f6ff ac48 	blt.w	80022cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3758      	adds	r7, #88	; 0x58
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b088      	sub	sp, #32
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	4613      	mov	r3, r2
 8002a52:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d07c      	beq.n	8002b58 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a82:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	8b7b      	ldrh	r3, [r7, #26]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d306      	bcc.n	8002a9c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	8b7b      	ldrh	r3, [r7, #26]
 8002a94:	1ad2      	subs	r2, r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	619a      	str	r2, [r3, #24]
 8002a9a:	e002      	b.n	8002aa2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d123      	bne.n	8002af2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac4:	833b      	strh	r3, [r7, #24]
 8002ac6:	8b3b      	ldrh	r3, [r7, #24]
 8002ac8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002acc:	833b      	strh	r3, [r7, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	441a      	add	r2, r3
 8002adc:	8b3b      	ldrh	r3, [r7, #24]
 8002ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01f      	beq.n	8002b3c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	82fb      	strh	r3, [r7, #22]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	8afb      	ldrh	r3, [r7, #22]
 8002b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b3c:	8b7b      	ldrh	r3, [r7, #26]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8085 	beq.w	8002c4e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	6959      	ldr	r1, [r3, #20]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	891a      	ldrh	r2, [r3, #8]
 8002b50:	8b7b      	ldrh	r3, [r7, #26]
 8002b52:	f004 fadf 	bl	8007114 <USB_ReadPMA>
 8002b56:	e07a      	b.n	8002c4e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	8b7b      	ldrh	r3, [r7, #26]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d306      	bcc.n	8002b96 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	8b7b      	ldrh	r3, [r7, #26]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	e002      	b.n	8002b9c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d123      	bne.n	8002bec <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	83fb      	strh	r3, [r7, #30]
 8002bc0:	8bfb      	ldrh	r3, [r7, #30]
 8002bc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bc6:	83fb      	strh	r3, [r7, #30]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	8bfb      	ldrh	r3, [r7, #30]
 8002bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11f      	bne.n	8002c36 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	83bb      	strh	r3, [r7, #28]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	441a      	add	r2, r3
 8002c20:	8bbb      	ldrh	r3, [r7, #28]
 8002c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	895a      	ldrh	r2, [r3, #10]
 8002c48:	8b7b      	ldrh	r3, [r7, #26]
 8002c4a:	f004 fa63 	bl	8007114 <USB_ReadPMA>
    }
  }

  return count;
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0a4      	sub	sp, #144	; 0x90
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 81db 	beq.w	8003028 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c96:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d907      	bls.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	619a      	str	r2, [r3, #24]
 8002cb4:	e002      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 80b9 	bne.w	8002e38 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d126      	bne.n	8002d1c <HAL_PCD_EP_DB_Transmit+0xc4>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	00da      	lsls	r2, r3, #3
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	4413      	add	r3, r2
 8002cf0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	e01a      	b.n	8002d52 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d116      	bne.n	8002d52 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	4413      	add	r3, r2
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	00da      	lsls	r2, r3, #3
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	4413      	add	r3, r2
 8002d46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	785b      	ldrb	r3, [r3, #1]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d126      	bne.n	8002dae <HAL_PCD_EP_DB_Transmit+0x156>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	00da      	lsls	r2, r3, #3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	e017      	b.n	8002dde <HAL_PCD_EP_DB_Transmit+0x186>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	785b      	ldrb	r3, [r3, #1]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d113      	bne.n	8002dde <HAL_PCD_EP_DB_Transmit+0x186>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	4413      	add	r3, r2
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	00da      	lsls	r2, r3, #3
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f008 fb93 	bl	800b510 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 82fa 	beq.w	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e10:	82fb      	strh	r3, [r7, #22]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8afb      	ldrh	r3, [r7, #22]
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
 8002e36:	e2d8      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d021      	beq.n	8002e86 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 82ac 	bne.w	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e9a:	441a      	add	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ea8:	441a      	add	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d30b      	bcc.n	8002ed2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	621a      	str	r2, [r3, #32]
 8002ed0:	e017      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002eda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002eea:	e00a      	b.n	8002f02 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d165      	bne.n	8002fd6 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1e:	4413      	add	r3, r2
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00da      	lsls	r2, r3, #3
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f46:	2b3e      	cmp	r3, #62	; 0x3e
 8002f48:	d91d      	bls.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f60:	3b01      	subs	r3, #1
 8002f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	029b      	lsls	r3, r3, #10
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	e044      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e035      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x366>
 8002fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fba:	3301      	adds	r3, #1
 8002fbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	029b      	lsls	r3, r3, #10
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	e01c      	b.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	785b      	ldrb	r3, [r3, #1]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d118      	bne.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff2:	4413      	add	r3, r2
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	00da      	lsls	r2, r3, #3
 8002ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffe:	4413      	add	r3, r2
 8003000:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
 8003006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800300a:	b29a      	uxth	r2, r3
 800300c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	6959      	ldr	r1, [r3, #20]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	891a      	ldrh	r2, [r3, #8]
 800301c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003020:	b29b      	uxth	r3, r3
 8003022:	f004 f835 	bl	8007090 <USB_WritePMA>
 8003026:	e1e0      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4413      	add	r3, r2
 8003042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003058:	429a      	cmp	r2, r3
 800305a:	d307      	bcc.n	800306c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	619a      	str	r2, [r3, #24]
 800306a:	e002      	b.n	8003072 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 80c0 	bne.w	80031fc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d126      	bne.n	80030d2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003098:	4413      	add	r3, r2
 800309a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	00da      	lsls	r2, r3, #3
 80030a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a4:	4413      	add	r3, r2
 80030a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ce:	801a      	strh	r2, [r3, #0]
 80030d0:	e01a      	b.n	8003108 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d116      	bne.n	8003108 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ee:	4413      	add	r3, r2
 80030f0:	667b      	str	r3, [r7, #100]	; 0x64
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	00da      	lsls	r2, r3, #3
 80030f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fa:	4413      	add	r3, r2
 80030fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003100:	663b      	str	r3, [r7, #96]	; 0x60
 8003102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	677b      	str	r3, [r7, #116]	; 0x74
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d12b      	bne.n	800316e <HAL_PCD_EP_DB_Transmit+0x516>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	4413      	add	r3, r2
 800312c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	00da      	lsls	r2, r3, #3
 8003134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003136:	4413      	add	r3, r2
 8003138:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800313c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314c:	b29a      	uxth	r2, r3
 800314e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003164:	b29a      	uxth	r2, r3
 8003166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800316a:	801a      	strh	r2, [r3, #0]
 800316c:	e017      	b.n	800319e <HAL_PCD_EP_DB_Transmit+0x546>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d113      	bne.n	800319e <HAL_PCD_EP_DB_Transmit+0x546>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003184:	4413      	add	r3, r2
 8003186:	677b      	str	r3, [r7, #116]	; 0x74
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	00da      	lsls	r2, r3, #3
 800318e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003190:	4413      	add	r3, r2
 8003192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003196:	673b      	str	r3, [r7, #112]	; 0x70
 8003198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800319a:	2200      	movs	r2, #0
 800319c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4619      	mov	r1, r3
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f008 f9b3 	bl	800b510 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 811a 	bne.w	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80031e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	8013      	strh	r3, [r2, #0]
 80031fa:	e0f6      	b.n	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d121      	bne.n	800324a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003220:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800323e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003246:	b29b      	uxth	r3, r3
 8003248:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003250:	2b01      	cmp	r3, #1
 8003252:	f040 80ca 	bne.w	80033ea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800325e:	441a      	add	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800326c:	441a      	add	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	429a      	cmp	r2, r3
 800327c:	d30b      	bcc.n	8003296 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	6a1a      	ldr	r2, [r3, #32]
 800328a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800328e:	1ad2      	subs	r2, r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	621a      	str	r2, [r3, #32]
 8003294:	e017      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800329e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032ae:	e00a      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	657b      	str	r3, [r7, #84]	; 0x54
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d165      	bne.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x748>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e8:	4413      	add	r3, r2
 80032ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	00da      	lsls	r2, r3, #3
 80032f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f4:	4413      	add	r3, r2
 80032f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80032fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003306:	b29a      	uxth	r2, r3
 8003308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800330a:	801a      	strh	r2, [r3, #0]
 800330c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003310:	2b3e      	cmp	r3, #62	; 0x3e
 8003312:	d91d      	bls.n	8003350 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	66bb      	str	r3, [r7, #104]	; 0x68
 800331c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800332a:	3b01      	subs	r3, #1
 800332c:	66bb      	str	r3, [r7, #104]	; 0x68
 800332e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29a      	uxth	r2, r3
 8003334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003336:	b29b      	uxth	r3, r3
 8003338:	029b      	lsls	r3, r3, #10
 800333a:	b29b      	uxth	r3, r3
 800333c:	4313      	orrs	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003348:	b29a      	uxth	r2, r3
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	e041      	b.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_PCD_EP_DB_Transmit+0x716>
 8003358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003366:	b29a      	uxth	r2, r3
 8003368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800336a:	801a      	strh	r2, [r3, #0]
 800336c:	e032      	b.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800336e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	66bb      	str	r3, [r7, #104]	; 0x68
 8003376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_PCD_EP_DB_Transmit+0x730>
 8003382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003384:	3301      	adds	r3, #1
 8003386:	66bb      	str	r3, [r7, #104]	; 0x68
 8003388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29a      	uxth	r2, r3
 800338e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003390:	b29b      	uxth	r3, r3
 8003392:	029b      	lsls	r3, r3, #10
 8003394:	b29b      	uxth	r3, r3
 8003396:	4313      	orrs	r3, r2
 8003398:	b29a      	uxth	r2, r3
 800339a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	e019      	b.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d115      	bne.n	80033d4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b6:	4413      	add	r3, r2
 80033b8:	657b      	str	r3, [r7, #84]	; 0x54
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	00da      	lsls	r2, r3, #3
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	4413      	add	r3, r2
 80033c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033c8:	653b      	str	r3, [r7, #80]	; 0x50
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	6959      	ldr	r1, [r3, #20]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	895a      	ldrh	r2, [r3, #10]
 80033e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f003 fe53 	bl	8007090 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003404:	82bb      	strh	r3, [r7, #20]
 8003406:	8abb      	ldrh	r3, [r7, #20]
 8003408:	f083 0310 	eor.w	r3, r3, #16
 800340c:	82bb      	strh	r3, [r7, #20]
 800340e:	8abb      	ldrh	r3, [r7, #20]
 8003410:	f083 0320 	eor.w	r3, r3, #32
 8003414:	82bb      	strh	r3, [r7, #20]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	441a      	add	r2, r3
 8003424:	8abb      	ldrh	r3, [r7, #20]
 8003426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003436:	b29b      	uxth	r3, r3
 8003438:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3790      	adds	r7, #144	; 0x90
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d141      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003452:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d131      	bne.n	80034c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003460:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003466:	4a46      	ldr	r2, [pc, #280]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003478:	4a41      	ldr	r2, [pc, #260]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003480:	4b40      	ldr	r3, [pc, #256]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2232      	movs	r2, #50	; 0x32
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	0c9b      	lsrs	r3, r3, #18
 8003492:	3301      	adds	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003496:	e002      	b.n	800349e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3b01      	subs	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800349e:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034aa:	d102      	bne.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f2      	bne.n	8003498 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034b2:	4b33      	ldr	r3, [pc, #204]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034be:	d158      	bne.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e057      	b.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034d4:	e04d      	b.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034dc:	d141      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034de:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ea:	d131      	bne.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f2:	4a23      	ldr	r2, [pc, #140]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800350a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2232      	movs	r2, #50	; 0x32
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	0c9b      	lsrs	r3, r3, #18
 800351e:	3301      	adds	r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003522:	e002      	b.n	800352a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003536:	d102      	bne.n	800353e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f2      	bne.n	8003524 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354a:	d112      	bne.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e011      	b.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003560:	e007      	b.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356a:	4a05      	ldr	r2, [pc, #20]	; (8003580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003570:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40007000 	.word	0x40007000
 8003584:	20000000 	.word	0x20000000
 8003588:	431bde83 	.word	0x431bde83

0800358c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e2fe      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035aa:	4b97      	ldr	r3, [pc, #604]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b4:	4b94      	ldr	r3, [pc, #592]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b0c      	cmp	r3, #12
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_OscConfig+0x3e>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b8d      	ldr	r3, [pc, #564]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e2d9      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b85      	ldr	r3, [pc, #532]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a84      	ldr	r2, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b7c      	ldr	r3, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a7b      	ldr	r2, [pc, #492]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b78      	ldr	r3, [pc, #480]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a77      	ldr	r2, [pc, #476]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a74      	ldr	r2, [pc, #464]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd fcc4 	bl	8000fd0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800364c:	f7fd fcc0 	bl	8000fd0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e29e      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b6a      	ldr	r3, [pc, #424]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fcb0 	bl	8000fd0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7fd fcac 	bl	8000fd0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e28a      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d075      	beq.n	800378e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036a2:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ac:	4b56      	ldr	r3, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b0c      	cmp	r3, #12
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x136>
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d002      	beq.n	80036c8 <HAL_RCC_OscConfig+0x13c>
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d11f      	bne.n	8003708 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c8:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_OscConfig+0x154>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e25d      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b49      	ldr	r3, [pc, #292]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	4946      	ldr	r1, [pc, #280]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f4:	4b45      	ldr	r3, [pc, #276]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fc1d 	bl	8000f38 <HAL_InitTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d043      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e249      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d023      	beq.n	8003758 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fd fc58 	bl	8000fd0 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7fd fc54 	bl	8000fd0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e232      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b31      	ldr	r3, [pc, #196]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	492d      	ldr	r1, [pc, #180]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
 8003756:	e01a      	b.n	800378e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003758:	4b2b      	ldr	r3, [pc, #172]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 800375e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd fc34 	bl	8000fd0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd fc30 	bl	8000fd0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e20e      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800377e:	4b22      	ldr	r3, [pc, #136]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1e0>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d041      	beq.n	800381e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d01c      	beq.n	80037dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fd fc0d 	bl	8000fd0 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fd fc09 	bl	8000fd0 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1e7      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCC_OscConfig+0x22e>
 80037da:	e020      	b.n	800381e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fbf0 	bl	8000fd0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037f2:	e00d      	b.n	8003810 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fd fbec 	bl	8000fd0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d906      	bls.n	8003810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1ca      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003810:	4b8c      	ldr	r3, [pc, #560]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ea      	bne.n	80037f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_OscConfig+0x2b4>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x2b6>
 8003840:	2300      	movs	r3, #0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	4a7e      	ldr	r2, [pc, #504]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6593      	str	r3, [r2, #88]	; 0x58
 8003852:	4b7c      	ldr	r3, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003862:	4b79      	ldr	r3, [pc, #484]	; (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800386e:	4b76      	ldr	r3, [pc, #472]	; (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a75      	ldr	r2, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fd fba9 	bl	8000fd0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fd fba5 	bl	8000fd0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e183      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003894:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <HAL_RCC_OscConfig+0x4bc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d108      	bne.n	80038ba <HAL_RCC_OscConfig+0x32e>
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a65      	ldr	r2, [pc, #404]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038b8:	e024      	b.n	8003904 <HAL_RCC_OscConfig+0x378>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d110      	bne.n	80038e4 <HAL_RCC_OscConfig+0x358>
 80038c2:	4b60      	ldr	r3, [pc, #384]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	4a5e      	ldr	r2, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038d2:	4b5c      	ldr	r3, [pc, #368]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e2:	e00f      	b.n	8003904 <HAL_RCC_OscConfig+0x378>
 80038e4:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f4:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fb60 	bl	8000fd0 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fd fb5c 	bl	8000fd0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e138      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392a:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ed      	beq.n	8003914 <HAL_RCC_OscConfig+0x388>
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fb49 	bl	8000fd0 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fd fb45 	bl	8000fd0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e121      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ed      	bne.n	8003942 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d03c      	beq.n	80039fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01c      	beq.n	80039c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 800398e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003992:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fd fb18 	bl	8000fd0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a4:	f7fd fb14 	bl	8000fd0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0f2      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039b6:	4b23      	ldr	r3, [pc, #140]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ef      	beq.n	80039a4 <HAL_RCC_OscConfig+0x418>
 80039c4:	e01b      	b.n	80039fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039c6:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039cc:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d6:	f7fd fafb 	bl	8000fd0 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039de:	f7fd faf7 	bl	8000fd0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0d5      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 80039f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ef      	bne.n	80039de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80c9 	beq.w	8003b9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	f000 8083 	beq.w	8003b1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d15e      	bne.n	8003adc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fd fad1 	bl	8000fd0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a30:	e00c      	b.n	8003a4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fd facd 	bl	8000fd0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d905      	bls.n	8003a4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0ab      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4c:	4b55      	ldr	r3, [pc, #340]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ec      	bne.n	8003a32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4b52      	ldr	r3, [pc, #328]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	4b52      	ldr	r3, [pc, #328]	; (8003ba8 <HAL_RCC_OscConfig+0x61c>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6a11      	ldr	r1, [r2, #32]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0112      	lsls	r2, r2, #4
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a72:	0212      	lsls	r2, r2, #8
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0552      	lsls	r2, r2, #21
 8003a80:	4311      	orrs	r1, r2
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0652      	lsls	r2, r2, #25
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a92:	06d2      	lsls	r2, r2, #27
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4943      	ldr	r1, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a3d      	ldr	r2, [pc, #244]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fa8c 	bl	8000fd0 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fd fa88 	bl	8000fd0 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e066      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x530>
 8003ada:	e05e      	b.n	8003b9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b31      	ldr	r3, [pc, #196]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a30      	ldr	r2, [pc, #192]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fa72 	bl	8000fd0 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af0:	f7fd fa6e 	bl	8000fd0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e04c      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b0e:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	4924      	ldr	r1, [pc, #144]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <HAL_RCC_OscConfig+0x620>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	60cb      	str	r3, [r1, #12]
 8003b1a:	e03e      	b.n	8003b9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e039      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <HAL_RCC_OscConfig+0x618>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d12c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	3b01      	subs	r3, #1
 8003b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d123      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d11b      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d113      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	019f800c 	.word	0x019f800c
 8003bac:	feeefffc 	.word	0xfeeefffc

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e11e      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b91      	ldr	r3, [pc, #580]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b8e      	ldr	r3, [pc, #568]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	498c      	ldr	r1, [pc, #560]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b8a      	ldr	r3, [pc, #552]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e106      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d073      	beq.n	8003cec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d129      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0c:	4b81      	ldr	r3, [pc, #516]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0f4      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c1c:	f000 f966 	bl	8003eec <RCC_GetSysClockFreqFromPLLSource>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4a7c      	ldr	r2, [pc, #496]	; (8003e18 <HAL_RCC_ClockConfig+0x268>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d93f      	bls.n	8003caa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c2a:	4b7a      	ldr	r3, [pc, #488]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d033      	beq.n	8003caa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d12f      	bne.n	8003caa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c4a:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c52:	4a70      	ldr	r2, [pc, #448]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e024      	b.n	8003caa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c68:	4b6a      	ldr	r3, [pc, #424]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0c6      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c78:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0be      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c88:	f000 f8ce 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4a61      	ldr	r2, [pc, #388]	; (8003e18 <HAL_RCC_ClockConfig+0x268>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d909      	bls.n	8003caa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c96:	4b5f      	ldr	r3, [pc, #380]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c9e:	4a5d      	ldr	r2, [pc, #372]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b5a      	ldr	r3, [pc, #360]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4957      	ldr	r1, [pc, #348]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd f988 	bl	8000fd0 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fd f984 	bl	8000fd0 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e095      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b4e      	ldr	r3, [pc, #312]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d023      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d1c:	4b3d      	ldr	r3, [pc, #244]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d24:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4936      	ldr	r1, [pc, #216]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d105      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d46:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4a32      	ldr	r2, [pc, #200]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d52:	4b2f      	ldr	r3, [pc, #188]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d21d      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 020f 	bic.w	r2, r3, #15
 8003d68:	4929      	ldr	r1, [pc, #164]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d70:	f7fd f92e 	bl	8000fd0 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fd f92a 	bl	8000fd0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e03b      	b.n	8003e06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCC_ClockConfig+0x260>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1ed      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4917      	ldr	r1, [pc, #92]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490f      	ldr	r1, [pc, #60]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dda:	f000 f825 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_RCC_ClockConfig+0x264>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490c      	ldr	r1, [pc, #48]	; (8003e1c <HAL_RCC_ClockConfig+0x26c>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	fa22 f303 	lsr.w	r3, r2, r3
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x270>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x274>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f89a 	bl	8000f38 <HAL_InitTick>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40021000 	.word	0x40021000
 8003e18:	04c4b400 	.word	0x04c4b400
 8003e1c:	0800bd4c 	.word	0x0800bd4c
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d102      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e047      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	e03e      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d136      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	3301      	adds	r3, #1
 8003e74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e86:	68d2      	ldr	r2, [r2, #12]
 8003e88:	0a12      	lsrs	r2, r2, #8
 8003e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	617b      	str	r3, [r7, #20]
      break;
 8003e94:	e00c      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	0a12      	lsrs	r2, r2, #8
 8003ea4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
      break;
 8003eae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	0e5b      	lsrs	r3, r3, #25
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	e001      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ed0:	693b      	ldr	r3, [r7, #16]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	02dc6c00 	.word	0x02dc6c00

08003eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d10c      	bne.n	8003f2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f10:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1a:	68d2      	ldr	r2, [r2, #12]
 8003f1c:	0a12      	lsrs	r2, r2, #8
 8003f1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]
    break;
 8003f28:	e00c      	b.n	8003f44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f2a:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f34:	68d2      	ldr	r2, [r2, #12]
 8003f36:	0a12      	lsrs	r2, r2, #8
 8003f38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
    break;
 8003f42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f44:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0e5b      	lsrs	r3, r3, #25
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f5e:	687b      	ldr	r3, [r7, #4]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	02dc6c00 	.word	0x02dc6c00
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f80:	2300      	movs	r3, #0
 8003f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f84:	2300      	movs	r3, #0
 8003f86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8098 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f96:	2300      	movs	r3, #0
 8003f98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb2:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a39      	ldr	r2, [pc, #228]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fce:	f7fc ffff 	bl	8000fd0 <HAL_GetTick>
 8003fd2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fd4:	e009      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd6:	f7fc fffb 	bl	8000fd0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d902      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe8:	e005      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0ef      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d159      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01e      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	d019      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004018:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004034:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fc ffbb 	bl	8000fd0 <HAL_GetTick>
 800405a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405c:	e00b      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fc ffb7 	bl	8000fd0 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d902      	bls.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	74fb      	strb	r3, [r7, #19]
            break;
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ec      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	4903      	ldr	r1, [pc, #12]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040a0:	e008      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7c7b      	ldrb	r3, [r7, #17]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4ba7      	ldr	r3, [pc, #668]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4aa6      	ldr	r2, [pc, #664]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d2:	4ba1      	ldr	r3, [pc, #644]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f023 0203 	bic.w	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	499d      	ldr	r1, [pc, #628]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f4:	4b98      	ldr	r3, [pc, #608]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f023 020c 	bic.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	4995      	ldr	r1, [pc, #596]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004116:	4b90      	ldr	r3, [pc, #576]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	498c      	ldr	r1, [pc, #560]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004138:	4b87      	ldr	r3, [pc, #540]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4984      	ldr	r1, [pc, #528]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800415a:	4b7f      	ldr	r3, [pc, #508]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	497b      	ldr	r1, [pc, #492]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417c:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4973      	ldr	r1, [pc, #460]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800419e:	4b6e      	ldr	r3, [pc, #440]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	496a      	ldr	r1, [pc, #424]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c0:	4b65      	ldr	r3, [pc, #404]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4962      	ldr	r1, [pc, #392]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e2:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	4959      	ldr	r1, [pc, #356]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004204:	4b54      	ldr	r3, [pc, #336]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	4951      	ldr	r1, [pc, #324]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	4948      	ldr	r1, [pc, #288]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d015      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004248:	4b43      	ldr	r3, [pc, #268]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4940      	ldr	r1, [pc, #256]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004266:	d105      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004268:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a3a      	ldr	r2, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004272:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428e:	4932      	ldr	r1, [pc, #200]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a2c      	ldr	r2, [pc, #176]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042b8:	4b27      	ldr	r3, [pc, #156]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	4924      	ldr	r1, [pc, #144]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d015      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	4916      	ldr	r1, [pc, #88]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430e:	d105      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a10      	ldr	r2, [pc, #64]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d019      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004346:	d109      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4a02      	ldr	r2, [pc, #8]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004352:	60d3      	str	r3, [r2, #12]
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004368:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	4926      	ldr	r1, [pc, #152]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a20      	ldr	r2, [pc, #128]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800438e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004392:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043a0:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	4918      	ldr	r1, [pc, #96]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a12      	ldr	r2, [pc, #72]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	490a      	ldr	r1, [pc, #40]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f6:	d105      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004404:	7cbb      	ldrb	r3, [r7, #18]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000

08004414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e09d      	b.n	8004562 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004436:	d009      	beq.n	800444c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
 800443e:	e005      	b.n	800444c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fb9e 	bl	8000ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800448c:	d902      	bls.n	8004494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e002      	b.n	800449a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044a2:	d007      	beq.n	80044b4 <HAL_SPI_Init+0xa0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ac:	d002      	beq.n	80044b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	ea42 0103 	orr.w	r1, r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	f003 0204 	and.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004530:	ea42 0103 	orr.w	r1, r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b088      	sub	sp, #32
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_SPI_Transmit+0x22>
 8004588:	2302      	movs	r3, #2
 800458a:	e15f      	b.n	800484c <HAL_SPI_Transmit+0x2e2>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004594:	f7fc fd1c 	bl	8000fd0 <HAL_GetTick>
 8004598:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d002      	beq.n	80045b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
 80045ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045ae:	e148      	b.n	8004842 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Transmit+0x52>
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045c0:	e13f      	b.n	8004842 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2203      	movs	r2, #3
 80045c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800460c:	d10f      	bne.n	800462e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d007      	beq.n	800464c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004654:	d94f      	bls.n	80046f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_Transmit+0xfa>
 800465e:	8afb      	ldrh	r3, [r7, #22]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d142      	bne.n	80046ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004688:	e02f      	b.n	80046ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d112      	bne.n	80046be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	881a      	ldrh	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	1c9a      	adds	r2, r3, #2
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046bc:	e015      	b.n	80046ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046be:	f7fc fc87 	bl	8000fd0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d803      	bhi.n	80046d6 <HAL_SPI_Transmit+0x16c>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d4:	d102      	bne.n	80046dc <HAL_SPI_Transmit+0x172>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80046e8:	e0ab      	b.n	8004842 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ca      	bne.n	800468a <HAL_SPI_Transmit+0x120>
 80046f4:	e080      	b.n	80047f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_SPI_Transmit+0x19a>
 80046fe:	8afb      	ldrh	r3, [r7, #22]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d174      	bne.n	80047ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d912      	bls.n	8004734 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	881a      	ldrh	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	1c9a      	adds	r2, r3, #2
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b02      	subs	r3, #2
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004732:	e05c      	b.n	80047ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	7812      	ldrb	r2, [r2, #0]
 8004740:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800475a:	e048      	b.n	80047ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d12b      	bne.n	80047c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d912      	bls.n	800479a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	1c9a      	adds	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b02      	subs	r3, #2
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004798:	e029      	b.n	80047ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	7812      	ldrb	r2, [r2, #0]
 80047a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c0:	e015      	b.n	80047ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c2:	f7fc fc05 	bl	8000fd0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d803      	bhi.n	80047da <HAL_SPI_Transmit+0x270>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_Transmit+0x276>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80047ec:	e029      	b.n	8004842 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1b1      	bne.n	800475c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fb69 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e003      	b.n	8004842 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800484a:	7ffb      	ldrb	r3, [r7, #31]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004862:	2301      	movs	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_SPI_TransmitReceive+0x26>
 8004876:	2302      	movs	r3, #2
 8004878:	e20a      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x43c>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004882:	f7fc fba5 	bl	8000fd0 <HAL_GetTick>
 8004886:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800488e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004896:	887b      	ldrh	r3, [r7, #2]
 8004898:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800489e:	7efb      	ldrb	r3, [r7, #27]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d00e      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x6e>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d106      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_TransmitReceive+0x66>
 80048b4:	7efb      	ldrb	r3, [r7, #27]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d003      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
 80048bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048c0:	e1e0      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x80>
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048da:	e1d3      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d003      	beq.n	80048f0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2205      	movs	r2, #5
 80048ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	887a      	ldrh	r2, [r7, #2]
 8004916:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	887a      	ldrh	r2, [r7, #2]
 800491c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004932:	d802      	bhi.n	800493a <HAL_SPI_TransmitReceive+0xe6>
 8004934:	8a3b      	ldrh	r3, [r7, #16]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d908      	bls.n	800494c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e007      	b.n	800495c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d007      	beq.n	800497a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004982:	f240 8081 	bls.w	8004a88 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x140>
 800498e:	8a7b      	ldrh	r3, [r7, #18]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d16d      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b8:	e05a      	b.n	8004a70 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d11b      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x1ac>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x1ac>
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d113      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	1c9a      	adds	r2, r3, #2
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d11c      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x1f4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	b292      	uxth	r2, r2
 8004a26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a44:	2301      	movs	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a48:	f7fc fac2 	bl	8000fd0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d80b      	bhi.n	8004a70 <HAL_SPI_TransmitReceive+0x21c>
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a5e:	d007      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004a6e:	e109      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d19f      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x166>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d199      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x166>
 8004a86:	e0e3      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_SPI_TransmitReceive+0x244>
 8004a90:	8a7b      	ldrh	r3, [r7, #18]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	f040 80cf 	bne.w	8004c36 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d912      	bls.n	8004ac8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b02      	subs	r3, #2
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ac6:	e0b6      	b.n	8004c36 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aee:	e0a2      	b.n	8004c36 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d134      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x314>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02f      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x314>
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d12c      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d912      	bls.n	8004b3e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b02      	subs	r3, #2
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3c:	e012      	b.n	8004b64 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d148      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x3b4>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d042      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d923      	bls.n	8004bd6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b02      	subs	r3, #2
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d81f      	bhi.n	8004c04 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	e016      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f103 020c 	add.w	r2, r3, #12
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c04:	2301      	movs	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c08:	f7fc f9e2 	bl	8000fd0 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d803      	bhi.n	8004c20 <HAL_SPI_TransmitReceive+0x3cc>
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1e:	d102      	bne.n	8004c26 <HAL_SPI_TransmitReceive+0x3d2>
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d107      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c34:	e026      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f47f af57 	bne.w	8004af0 <HAL_SPI_TransmitReceive+0x29c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f47f af50 	bne.w	8004af0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f93d 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e003      	b.n	8004c84 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ca8:	f7fc f992 	bl	8000fd0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cb8:	f7fc f98a 	bl	8000fd0 <HAL_GetTick>
 8004cbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cbe:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	015b      	lsls	r3, r3, #5
 8004cc4:	0d1b      	lsrs	r3, r3, #20
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cce:	e054      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd6:	d050      	beq.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cd8:	f7fc f97a 	bl	8000fd0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d902      	bls.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d13d      	bne.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d06:	d111      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d10:	d004      	beq.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1a:	d107      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d34:	d10f      	bne.n	8004d56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e017      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d19b      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000

08004da8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dba:	f7fc f909 	bl	8000fd0 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004dca:	f7fc f901 	bl	8000fd0 <HAL_GetTick>
 8004dce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004dd8:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	00da      	lsls	r2, r3, #3
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	0d1b      	lsrs	r3, r3, #20
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004df0:	e060      	b.n	8004eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004df8:	d107      	bne.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e10:	d050      	beq.n	8004eb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e12:	f7fc f8dd 	bl	8000fd0 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d902      	bls.n	8004e28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d13d      	bne.n	8004ea4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e40:	d111      	bne.n	8004e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4a:	d004      	beq.n	8004e56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d107      	bne.n	8004e66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	d10f      	bne.n	8004e90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e010      	b.n	8004ec6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d196      	bne.n	8004df2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000000 	.word	0x20000000

08004ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ff5b 	bl	8004da8 <SPI_WaitFifoStateUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e027      	b.n	8004f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2180      	movs	r1, #128	; 0x80
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff fec0 	bl	8004c98 <SPI_WaitFlagStateUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f22:	f043 0220 	orr.w	r2, r3, #32
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e014      	b.n	8004f58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff ff34 	bl	8004da8 <SPI_WaitFifoStateUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e000      	b.n	8004f58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b09d      	sub	sp, #116	; 0x74
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	78db      	ldrb	r3, [r3, #3]
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d81f      	bhi.n	8004fd2 <USB_ActivateEndpoint+0x72>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <USB_ActivateEndpoint+0x38>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fdb 	.word	0x08004fdb
 8004fa4:	08004fb7 	.word	0x08004fb7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004fa8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fb4:	e012      	b.n	8004fdc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004fb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004fbe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fc2:	e00b      	b.n	8004fdc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fc4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004fd0:	e004      	b.n	8004fdc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004fd8:	e000      	b.n	8004fdc <USB_ActivateEndpoint+0x7c>
      break;
 8004fda:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29b      	uxth	r3, r3
 800500c:	b21b      	sxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	b21a      	sxth	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b21b      	sxth	r3, r3
 800501e:	4313      	orrs	r3, r2
 8005020:	b21b      	sxth	r3, r3
 8005022:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8178 	bne.w	8005342 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 8084 	beq.w	8005164 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	4413      	add	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	00da      	lsls	r2, r3, #3
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	88db      	ldrh	r3, [r3, #6]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	827b      	strh	r3, [r7, #18]
 800509e:	8a7b      	ldrh	r3, [r7, #18]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <USB_ActivateEndpoint+0x180>
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	823b      	strh	r3, [r7, #16]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	8a3b      	ldrh	r3, [r7, #16]
 80050cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050dc:	b29b      	uxth	r3, r3
 80050de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d020      	beq.n	800512a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fe:	81bb      	strh	r3, [r7, #12]
 8005100:	89bb      	ldrh	r3, [r7, #12]
 8005102:	f083 0320 	eor.w	r3, r3, #32
 8005106:	81bb      	strh	r3, [r7, #12]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	89bb      	ldrh	r3, [r7, #12]
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
 8005128:	e2d5      	b.n	80056d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005140:	81fb      	strh	r3, [r7, #14]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	89fb      	ldrh	r3, [r7, #14]
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]
 8005162:	e2b8      	b.n	80056d6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	633b      	str	r3, [r7, #48]	; 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	4413      	add	r3, r2
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	00da      	lsls	r2, r3, #3
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	4413      	add	r3, r2
 8005182:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	88db      	ldrh	r3, [r3, #6]
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	b29b      	uxth	r3, r3
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	4413      	add	r3, r2
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	00da      	lsls	r2, r3, #3
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	4413      	add	r3, r2
 80051b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b3e      	cmp	r3, #62	; 0x3e
 80051d2:	d91d      	bls.n	8005210 <USB_ActivateEndpoint+0x2b0>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	66bb      	str	r3, [r7, #104]	; 0x68
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <USB_ActivateEndpoint+0x28e>
 80051e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051ea:	3b01      	subs	r3, #1
 80051ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4313      	orrs	r3, r2
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005208:	b29a      	uxth	r2, r3
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	e026      	b.n	800525e <USB_ActivateEndpoint+0x2fe>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <USB_ActivateEndpoint+0x2ce>
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005226:	b29a      	uxth	r2, r3
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e017      	b.n	800525e <USB_ActivateEndpoint+0x2fe>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	66bb      	str	r3, [r7, #104]	; 0x68
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <USB_ActivateEndpoint+0x2e8>
 8005242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005244:	3301      	adds	r3, #1
 8005246:	66bb      	str	r3, [r7, #104]	; 0x68
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29a      	uxth	r2, r3
 800524e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005250:	b29b      	uxth	r3, r3
 8005252:	029b      	lsls	r3, r3, #10
 8005254:	b29b      	uxth	r3, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	b29a      	uxth	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	847b      	strh	r3, [r7, #34]	; 0x22
 800526c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800526e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01b      	beq.n	80052ae <USB_ActivateEndpoint+0x34e>
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	843b      	strh	r3, [r7, #32]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	8c3b      	ldrh	r3, [r7, #32]
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d124      	bne.n	8005300 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	83bb      	strh	r3, [r7, #28]
 80052ce:	8bbb      	ldrh	r3, [r7, #28]
 80052d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80052d4:	83bb      	strh	r3, [r7, #28]
 80052d6:	8bbb      	ldrh	r3, [r7, #28]
 80052d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052dc:	83bb      	strh	r3, [r7, #28]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8bbb      	ldrh	r3, [r7, #28]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
 80052fe:	e1ea      	b.n	80056d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	83fb      	strh	r3, [r7, #30]
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800531e:	83fb      	strh	r3, [r7, #30]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	8bfb      	ldrh	r3, [r7, #30]
 800532c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	b29b      	uxth	r3, r3
 800533e:	8013      	strh	r3, [r2, #0]
 8005340:	e1c9      	b.n	80056d6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	78db      	ldrb	r3, [r3, #3]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d11e      	bne.n	8005388 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
 8005386:	e01d      	b.n	80053c4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d4:	4413      	add	r3, r2
 80053d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	00da      	lsls	r2, r3, #3
 80053de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	891b      	ldrh	r3, [r3, #8]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	657b      	str	r3, [r7, #84]	; 0x54
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005408:	4413      	add	r3, r2
 800540a:	657b      	str	r3, [r7, #84]	; 0x54
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	00da      	lsls	r2, r3, #3
 8005412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005414:	4413      	add	r3, r2
 8005416:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800541a:	653b      	str	r3, [r7, #80]	; 0x50
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	895b      	ldrh	r3, [r3, #10]
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	b29b      	uxth	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800542a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 8093 	bne.w	800555c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005446:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800544a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01b      	beq.n	800548a <USB_ActivateEndpoint+0x52a>
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005498:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01b      	beq.n	80054da <USB_ActivateEndpoint+0x57a>
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	441a      	add	r2, r3
 80054c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80054c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80054f2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80054fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80054fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005500:	873b      	strh	r3, [r7, #56]	; 0x38
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800550e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551e:	b29b      	uxth	r3, r3
 8005520:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005538:	86fb      	strh	r3, [r7, #54]	; 0x36
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	441a      	add	r2, r3
 8005544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]
 800555a:	e0bc      	b.n	80056d6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800556c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01d      	beq.n	80055b4 <USB_ActivateEndpoint+0x654>
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80055a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80055c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01d      	beq.n	800560c <USB_ActivateEndpoint+0x6ac>
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005608:	b29b      	uxth	r3, r3
 800560a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	78db      	ldrb	r3, [r3, #3]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d024      	beq.n	800565e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800562e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005632:	f083 0320 	eor.w	r3, r3, #32
 8005636:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005658:	b29b      	uxth	r3, r3
 800565a:	8013      	strh	r3, [r2, #0]
 800565c:	e01d      	b.n	800569a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005674:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80056d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3774      	adds	r7, #116	; 0x74
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop

080056e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b0c2      	sub	sp, #264	; 0x108
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f6:	6018      	str	r0, [r3, #0]
 80056f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005700:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 86b7 	bne.w	8006482 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	429a      	cmp	r2, r3
 800572e:	d908      	bls.n	8005742 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005740:	e007      	b.n	8005752 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	7b1b      	ldrb	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d13a      	bne.n	80057d8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6959      	ldr	r1, [r3, #20]
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	88da      	ldrh	r2, [r3, #6]
 800577a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577e:	b29b      	uxth	r3, r3
 8005780:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005784:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005788:	6800      	ldr	r0, [r0, #0]
 800578a:	f001 fc81 	bl	8007090 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	00da      	lsls	r2, r3, #3
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	f000 be1f 	b.w	8006416 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	78db      	ldrb	r3, [r3, #3]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	f040 8462 	bne.w	80060ae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	429a      	cmp	r2, r3
 8005804:	f240 83df 	bls.w	8005fc6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005858:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	b29b      	uxth	r3, r3
 8005862:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005874:	1ad2      	subs	r2, r2, r3
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 81c7 	beq.w	8005c38 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
 80058b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d177      	bne.n	80059b6 <USB_EPStartXfer+0x2ce>
 80058c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	4413      	add	r3, r2
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	00da      	lsls	r2, r3, #3
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	4413      	add	r3, r2
 80058fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590c:	b29a      	uxth	r2, r3
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005916:	2b3e      	cmp	r3, #62	; 0x3e
 8005918:	d921      	bls.n	800595e <USB_EPStartXfer+0x276>
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2b00      	cmp	r3, #0
 800592e:	d104      	bne.n	800593a <USB_EPStartXfer+0x252>
 8005930:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005934:	3b01      	subs	r3, #1
 8005936:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005944:	b29b      	uxth	r3, r3
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	b29b      	uxth	r3, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	e050      	b.n	8005a00 <USB_EPStartXfer+0x318>
 800595e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <USB_EPStartXfer+0x294>
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005974:	b29a      	uxth	r2, r3
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	e041      	b.n	8005a00 <USB_EPStartXfer+0x318>
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <USB_EPStartXfer+0x2b4>
 8005992:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005996:	3301      	adds	r3, #1
 8005998:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	029b      	lsls	r3, r3, #10
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	4313      	orrs	r3, r2
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e024      	b.n	8005a00 <USB_EPStartXfer+0x318>
 80059b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d11c      	bne.n	8005a00 <USB_EPStartXfer+0x318>
 80059c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	4413      	add	r3, r2
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30
 80059de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	00da      	lsls	r2, r3, #3
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	895b      	ldrh	r3, [r3, #10]
 8005a0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6959      	ldr	r1, [r3, #20]
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a26:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a2a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a2e:	6800      	ldr	r0, [r0, #0]
 8005a30:	f001 fb2e 	bl	8007090 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	441a      	add	r2, r3
 8005a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d90f      	bls.n	8005a8e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	621a      	str	r2, [r3, #32]
 8005a8c:	e00e      	b.n	8005aac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d177      	bne.n	8005bac <USB_EPStartXfer+0x4c4>
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	4413      	add	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	00da      	lsls	r2, r3, #3
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	801a      	strh	r2, [r3, #0]
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b0e:	d921      	bls.n	8005b54 <USB_EPStartXfer+0x46c>
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <USB_EPStartXfer+0x448>
 8005b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	e056      	b.n	8005c02 <USB_EPStartXfer+0x51a>
 8005b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <USB_EPStartXfer+0x48a>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e047      	b.n	8005c02 <USB_EPStartXfer+0x51a>
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <USB_EPStartXfer+0x4aa>
 8005b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e02a      	b.n	8005c02 <USB_EPStartXfer+0x51a>
 8005bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d122      	bne.n	8005c02 <USB_EPStartXfer+0x51a>
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	4413      	add	r3, r2
 8005bde:	623b      	str	r3, [r7, #32]
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	00da      	lsls	r2, r3, #3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bf6:	61fb      	str	r3, [r7, #28]
 8005bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	891b      	ldrh	r3, [r3, #8]
 8005c0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6959      	ldr	r1, [r3, #20]
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c30:	6800      	ldr	r0, [r0, #0]
 8005c32:	f001 fa2d 	bl	8007090 <USB_WritePMA>
 8005c36:	e3ee      	b.n	8006416 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d177      	bne.n	8005d38 <USB_EPStartXfer+0x650>
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	4413      	add	r3, r2
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	00da      	lsls	r2, r3, #3
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c82:	647b      	str	r3, [r7, #68]	; 0x44
 8005c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c98:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9a:	d921      	bls.n	8005ce0 <USB_EPStartXfer+0x5f8>
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <USB_EPStartXfer+0x5d4>
 8005cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	029b      	lsls	r3, r3, #10
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e056      	b.n	8005d8e <USB_EPStartXfer+0x6a6>
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <USB_EPStartXfer+0x616>
 8005ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfa:	801a      	strh	r2, [r3, #0]
 8005cfc:	e047      	b.n	8005d8e <USB_EPStartXfer+0x6a6>
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <USB_EPStartXfer+0x636>
 8005d14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e02a      	b.n	8005d8e <USB_EPStartXfer+0x6a6>
 8005d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d122      	bne.n	8005d8e <USB_EPStartXfer+0x6a6>
 8005d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	653b      	str	r3, [r7, #80]	; 0x50
 8005d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	4413      	add	r3, r2
 8005d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	891b      	ldrh	r3, [r3, #8]
 8005d9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6959      	ldr	r1, [r3, #20]
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005db4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005db8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f001 f967 	bl	8007090 <USB_WritePMA>
            ep->xfer_buff += len;
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	441a      	add	r2, r3
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d90f      	bls.n	8005e1c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a1a      	ldr	r2, [r3, #32]
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0c:	1ad2      	subs	r2, r2, r3
 8005e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	621a      	str	r2, [r3, #32]
 8005e1a:	e00e      	b.n	8005e3a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
 8005e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d177      	bne.n	8005f46 <USB_EPStartXfer+0x85e>
 8005e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	4413      	add	r3, r2
 8005e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	00da      	lsls	r2, r3, #3
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ea8:	d921      	bls.n	8005eee <USB_EPStartXfer+0x806>
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <USB_EPStartXfer+0x7e2>
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	029b      	lsls	r3, r3, #10
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e050      	b.n	8005f90 <USB_EPStartXfer+0x8a8>
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <USB_EPStartXfer+0x824>
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	801a      	strh	r2, [r3, #0]
 8005f0a:	e041      	b.n	8005f90 <USB_EPStartXfer+0x8a8>
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <USB_EPStartXfer+0x844>
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	3301      	adds	r3, #1
 8005f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	029b      	lsls	r3, r3, #10
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e024      	b.n	8005f90 <USB_EPStartXfer+0x8a8>
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d11c      	bne.n	8005f90 <USB_EPStartXfer+0x8a8>
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6a:	4413      	add	r3, r2
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	00da      	lsls	r2, r3, #3
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	895b      	ldrh	r3, [r3, #10]
 8005f9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6959      	ldr	r1, [r3, #20]
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fbe:	6800      	ldr	r0, [r0, #0]
 8005fc0:	f001 f866 	bl	8007090 <USB_WritePMA>
 8005fc4:	e227      	b.n	8006416 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800603e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604c:	b29b      	uxth	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006052:	4413      	add	r3, r2
 8006054:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	00da      	lsls	r2, r3, #3
 8006064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006066:	4413      	add	r3, r2
 8006068:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800606c:	65bb      	str	r3, [r7, #88]	; 0x58
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006072:	b29a      	uxth	r2, r3
 8006074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006076:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	891b      	ldrh	r3, [r3, #8]
 8006084:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6959      	ldr	r1, [r3, #20]
 8006094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006098:	b29b      	uxth	r3, r3
 800609a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800609e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80060a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80060a6:	6800      	ldr	r0, [r0, #0]
 80060a8:	f000 fff2 	bl	8007090 <USB_WritePMA>
 80060ac:	e1b3      	b.n	8006416 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80060ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80c6 	beq.w	8006280 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d177      	bne.n	8006200 <USB_EPStartXfer+0xb18>
 8006110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	66bb      	str	r3, [r7, #104]	; 0x68
 800611c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006130:	4413      	add	r3, r2
 8006132:	66bb      	str	r3, [r7, #104]	; 0x68
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	00da      	lsls	r2, r3, #3
 8006142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006144:	4413      	add	r3, r2
 8006146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800614a:	667b      	str	r3, [r7, #100]	; 0x64
 800614c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800614e:	881b      	ldrh	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006156:	b29a      	uxth	r2, r3
 8006158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800615a:	801a      	strh	r2, [r3, #0]
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	2b3e      	cmp	r3, #62	; 0x3e
 8006162:	d921      	bls.n	80061a8 <USB_EPStartXfer+0xac0>
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2b00      	cmp	r3, #0
 8006178:	d104      	bne.n	8006184 <USB_EPStartXfer+0xa9c>
 800617a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800617e:	3b01      	subs	r3, #1
 8006180:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800618e:	b29b      	uxth	r3, r3
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	b29b      	uxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e050      	b.n	800624a <USB_EPStartXfer+0xb62>
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <USB_EPStartXfer+0xade>
 80061b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e041      	b.n	800624a <USB_EPStartXfer+0xb62>
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <USB_EPStartXfer+0xafe>
 80061dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061e0:	3301      	adds	r3, #1
 80061e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e024      	b.n	800624a <USB_EPStartXfer+0xb62>
 8006200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d11c      	bne.n	800624a <USB_EPStartXfer+0xb62>
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800621e:	b29b      	uxth	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006224:	4413      	add	r3, r2
 8006226:	673b      	str	r3, [r7, #112]	; 0x70
 8006228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	00da      	lsls	r2, r3, #3
 8006236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006238:	4413      	add	r3, r2
 800623a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800623e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006244:	b29a      	uxth	r2, r3
 8006246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006248:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	895b      	ldrh	r3, [r3, #10]
 8006256:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800625a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6959      	ldr	r1, [r3, #20]
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626a:	b29b      	uxth	r3, r3
 800626c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006270:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006274:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f000 ff09 	bl	8007090 <USB_WritePMA>
 800627e:	e0ca      	b.n	8006416 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d177      	bne.n	8006380 <USB_EPStartXfer+0xc98>
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062b0:	4413      	add	r3, r2
 80062b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	00da      	lsls	r2, r3, #3
 80062c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80062cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	2b3e      	cmp	r3, #62	; 0x3e
 80062e2:	d921      	bls.n	8006328 <USB_EPStartXfer+0xc40>
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <USB_EPStartXfer+0xc1c>
 80062fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062fe:	3b01      	subs	r3, #1
 8006300:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800630e:	b29b      	uxth	r3, r3
 8006310:	029b      	lsls	r3, r3, #10
 8006312:	b29b      	uxth	r3, r3
 8006314:	4313      	orrs	r3, r2
 8006316:	b29b      	uxth	r3, r3
 8006318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800631c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006320:	b29a      	uxth	r2, r3
 8006322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e05c      	b.n	80063e2 <USB_EPStartXfer+0xcfa>
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <USB_EPStartXfer+0xc5e>
 8006330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633e:	b29a      	uxth	r2, r3
 8006340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e04d      	b.n	80063e2 <USB_EPStartXfer+0xcfa>
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <USB_EPStartXfer+0xc7e>
 800635c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006360:	3301      	adds	r3, #1
 8006362:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29b      	uxth	r3, r3
 8006376:	4313      	orrs	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637c:	801a      	strh	r2, [r3, #0]
 800637e:	e030      	b.n	80063e2 <USB_EPStartXfer+0xcfa>
 8006380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d128      	bne.n	80063e2 <USB_EPStartXfer+0xcfa>
 8006390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800639e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b4:	4413      	add	r3, r2
 80063b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	00da      	lsls	r2, r3, #3
 80063c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063da:	b29a      	uxth	r2, r3
 80063dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	891b      	ldrh	r3, [r3, #8]
 80063ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6959      	ldr	r1, [r3, #20]
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	b29b      	uxth	r3, r3
 8006404:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006408:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800640c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006410:	6800      	ldr	r0, [r0, #0]
 8006412:	f000 fe3d 	bl	8007090 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643c:	817b      	strh	r3, [r7, #10]
 800643e:	897b      	ldrh	r3, [r7, #10]
 8006440:	f083 0310 	eor.w	r3, r3, #16
 8006444:	817b      	strh	r3, [r7, #10]
 8006446:	897b      	ldrh	r3, [r7, #10]
 8006448:	f083 0320 	eor.w	r3, r3, #32
 800644c:	817b      	strh	r3, [r7, #10]
 800644e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	441a      	add	r2, r3
 8006468:	897b      	ldrh	r3, [r7, #10]
 800646a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647a:	b29b      	uxth	r3, r3
 800647c:	8013      	strh	r3, [r2, #0]
 800647e:	f000 bcde 	b.w	8006e3e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	7b1b      	ldrb	r3, [r3, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 80bb 	bne.w	800660a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d917      	bls.n	80064e0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80064b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80064c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d0:	1ad2      	subs	r2, r2, r3
 80064d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	619a      	str	r2, [r3, #24]
 80064de:	e00e      	b.n	80064fe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800650c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006522:	4413      	add	r3, r2
 8006524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	00da      	lsls	r2, r3, #3
 8006536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800653a:	4413      	add	r3, r2
 800653c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006550:	b29a      	uxth	r2, r3
 8006552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655c:	2b3e      	cmp	r3, #62	; 0x3e
 800655e:	d924      	bls.n	80065aa <USB_EPStartXfer+0xec2>
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <USB_EPStartXfer+0xe98>
 8006576:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800657a:	3b01      	subs	r3, #1
 800657c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800658c:	b29b      	uxth	r3, r3
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	b29b      	uxth	r3, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	f000 bc10 	b.w	8006dca <USB_EPStartXfer+0x16e2>
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <USB_EPStartXfer+0xee4>
 80065b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e3fe      	b.n	8006dca <USB_EPStartXfer+0x16e2>
 80065cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <USB_EPStartXfer+0xf04>
 80065e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065e6:	3301      	adds	r3, #1
 80065e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	029b      	lsls	r3, r3, #10
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	4313      	orrs	r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006606:	801a      	strh	r2, [r3, #0]
 8006608:	e3df      	b.n	8006dca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800660a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	78db      	ldrb	r3, [r3, #3]
 8006616:	2b02      	cmp	r3, #2
 8006618:	f040 8218 	bne.w	8006a4c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800661c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 809d 	bne.w	8006768 <USB_EPStartXfer+0x1080>
 800662e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800663c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006652:	4413      	add	r3, r2
 8006654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	00da      	lsls	r2, r3, #3
 8006666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800666a:	4413      	add	r3, r2
 800666c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	b29b      	uxth	r3, r3
 800667c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006680:	b29a      	uxth	r2, r3
 8006682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	2b3e      	cmp	r3, #62	; 0x3e
 8006696:	d92b      	bls.n	80066f0 <USB_EPStartXfer+0x1008>
 8006698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <USB_EPStartXfer+0xfe0>
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	3b01      	subs	r3, #1
 80066c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29b      	uxth	r3, r3
 80066da:	4313      	orrs	r3, r2
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e070      	b.n	80067d2 <USB_EPStartXfer+0x10ea>
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10c      	bne.n	800671a <USB_EPStartXfer+0x1032>
 8006700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e05b      	b.n	80067d2 <USB_EPStartXfer+0x10ea>
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <USB_EPStartXfer+0x1062>
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006744:	3301      	adds	r3, #1
 8006746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800674a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006756:	b29b      	uxth	r3, r3
 8006758:	029b      	lsls	r3, r3, #10
 800675a:	b29b      	uxth	r3, r3
 800675c:	4313      	orrs	r3, r2
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e034      	b.n	80067d2 <USB_EPStartXfer+0x10ea>
 8006768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800676c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d12c      	bne.n	80067d2 <USB_EPStartXfer+0x10ea>
 8006778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800677c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800679c:	4413      	add	r3, r2
 800679e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	00da      	lsls	r2, r3, #3
 80067b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067b4:	4413      	add	r3, r2
 80067b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 809d 	bne.w	800692c <USB_EPStartXfer+0x1244>
 80067f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006816:	4413      	add	r3, r2
 8006818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800681c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	00da      	lsls	r2, r3, #3
 800682a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800682e:	4413      	add	r3, r2
 8006830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006844:	b29a      	uxth	r2, r3
 8006846:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b3e      	cmp	r3, #62	; 0x3e
 800685a:	d92b      	bls.n	80068b4 <USB_EPStartXfer+0x11cc>
 800685c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800686e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <USB_EPStartXfer+0x11a4>
 8006882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006886:	3b01      	subs	r3, #1
 8006888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800688c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29a      	uxth	r2, r3
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	b29b      	uxth	r3, r3
 800689a:	029b      	lsls	r3, r3, #10
 800689c:	b29b      	uxth	r3, r3
 800689e:	4313      	orrs	r3, r2
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e069      	b.n	8006988 <USB_EPStartXfer+0x12a0>
 80068b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10c      	bne.n	80068de <USB_EPStartXfer+0x11f6>
 80068c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e054      	b.n	8006988 <USB_EPStartXfer+0x12a0>
 80068de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <USB_EPStartXfer+0x1226>
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006908:	3301      	adds	r3, #1
 800690a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800690e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	b29a      	uxth	r2, r3
 8006916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691a:	b29b      	uxth	r3, r3
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	b29b      	uxth	r3, r3
 8006920:	4313      	orrs	r3, r2
 8006922:	b29a      	uxth	r2, r3
 8006924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006928:	801a      	strh	r2, [r3, #0]
 800692a:	e02d      	b.n	8006988 <USB_EPStartXfer+0x12a0>
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d125      	bne.n	8006988 <USB_EPStartXfer+0x12a0>
 800693c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006952:	4413      	add	r3, r2
 8006954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	00da      	lsls	r2, r3, #3
 8006966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800696a:	4413      	add	r3, r2
 800696c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	b29a      	uxth	r2, r3
 8006982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006986:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8218 	beq.w	8006dca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800699a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <USB_EPStartXfer+0x12ea>
 80069c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 81f5 	bne.w	8006dca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80069e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 81ee 	bne.w	8006dca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a14:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	441a      	add	r2, r3
 8006a32:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
 8006a4a:	e1be      	b.n	8006dca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	78db      	ldrb	r3, [r3, #3]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	f040 81b4 	bne.w	8006dc6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d917      	bls.n	8006aaa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	619a      	str	r2, [r3, #24]
 8006aa8:	e00e      	b.n	8006ac8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 8085 	bne.w	8006be4 <USB_EPStartXfer+0x14fc>
 8006ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006afe:	4413      	add	r3, r2
 8006b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	00da      	lsls	r2, r3, #3
 8006b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b16:	4413      	add	r3, r2
 8006b18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	2b3e      	cmp	r3, #62	; 0x3e
 8006b3a:	d923      	bls.n	8006b84 <USB_EPStartXfer+0x149c>
 8006b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	f003 031f 	and.w	r3, r3, #31
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d104      	bne.n	8006b5c <USB_EPStartXfer+0x1474>
 8006b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b56:	3b01      	subs	r3, #1
 8006b58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b80:	801a      	strh	r2, [r3, #0]
 8006b82:	e060      	b.n	8006c46 <USB_EPStartXfer+0x155e>
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10c      	bne.n	8006ba6 <USB_EPStartXfer+0x14be>
 8006b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	e04f      	b.n	8006c46 <USB_EPStartXfer+0x155e>
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <USB_EPStartXfer+0x14de>
 8006bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006be0:	801a      	strh	r2, [r3, #0]
 8006be2:	e030      	b.n	8006c46 <USB_EPStartXfer+0x155e>
 8006be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d128      	bne.n	8006c46 <USB_EPStartXfer+0x155e>
 8006bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c18:	4413      	add	r3, r2
 8006c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	00da      	lsls	r2, r3, #3
 8006c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f040 8085 	bne.w	8006d70 <USB_EPStartXfer+0x1688>
 8006c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	00da      	lsls	r2, r3, #3
 8006c9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	2b3e      	cmp	r3, #62	; 0x3e
 8006cc6:	d923      	bls.n	8006d10 <USB_EPStartXfer+0x1628>
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <USB_EPStartXfer+0x1600>
 8006cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	029b      	lsls	r3, r3, #10
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e05c      	b.n	8006dca <USB_EPStartXfer+0x16e2>
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10c      	bne.n	8006d32 <USB_EPStartXfer+0x164a>
 8006d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d2e:	801a      	strh	r2, [r3, #0]
 8006d30:	e04b      	b.n	8006dca <USB_EPStartXfer+0x16e2>
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <USB_EPStartXfer+0x166a>
 8006d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	029b      	lsls	r3, r3, #10
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d6c:	801a      	strh	r2, [r3, #0]
 8006d6e:	e02c      	b.n	8006dca <USB_EPStartXfer+0x16e2>
 8006d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d124      	bne.n	8006dca <USB_EPStartXfer+0x16e2>
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d96:	4413      	add	r3, r2
 8006d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	00da      	lsls	r2, r3, #3
 8006daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dae:	4413      	add	r3, r2
 8006db0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006db4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	e001      	b.n	8006dca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e03a      	b.n	8006e40 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006df4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006df8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b085      	sub	sp, #20
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	785b      	ldrb	r3, [r3, #1]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d020      	beq.n	8006e9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e72:	81bb      	strh	r3, [r7, #12]
 8006e74:	89bb      	ldrh	r3, [r7, #12]
 8006e76:	f083 0310 	eor.w	r3, r3, #16
 8006e7a:	81bb      	strh	r3, [r7, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	441a      	add	r2, r3
 8006e86:	89bb      	ldrh	r3, [r7, #12]
 8006e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	8013      	strh	r3, [r2, #0]
 8006e9c:	e01f      	b.n	8006ede <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb4:	81fb      	strh	r3, [r7, #14]
 8006eb6:	89fb      	ldrh	r3, [r7, #14]
 8006eb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ebc:	81fb      	strh	r3, [r7, #14]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	89fb      	ldrh	r3, [r7, #14]
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 809d 	bne.w	800703a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d04c      	beq.n	8006fa2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	823b      	strh	r3, [r7, #16]
 8006f16:	8a3b      	ldrh	r3, [r7, #16]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01b      	beq.n	8006f58 <USB_EPClearStall+0x6c>
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	81fb      	strh	r3, [r7, #14]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	89fb      	ldrh	r3, [r7, #14]
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	78db      	ldrb	r3, [r3, #3]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d06c      	beq.n	800703a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f76:	81bb      	strh	r3, [r7, #12]
 8006f78:	89bb      	ldrh	r3, [r7, #12]
 8006f7a:	f083 0320 	eor.w	r3, r3, #32
 8006f7e:	81bb      	strh	r3, [r7, #12]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	441a      	add	r2, r3
 8006f8a:	89bb      	ldrh	r3, [r7, #12]
 8006f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	8013      	strh	r3, [r2, #0]
 8006fa0:	e04b      	b.n	800703a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	82fb      	strh	r3, [r7, #22]
 8006fb0:	8afb      	ldrh	r3, [r7, #22]
 8006fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01b      	beq.n	8006ff2 <USB_EPClearStall+0x106>
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	82bb      	strh	r3, [r7, #20]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8abb      	ldrh	r3, [r7, #20]
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007008:	827b      	strh	r3, [r7, #18]
 800700a:	8a7b      	ldrh	r3, [r7, #18]
 800700c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007010:	827b      	strh	r3, [r7, #18]
 8007012:	8a7b      	ldrh	r3, [r7, #18]
 8007014:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007018:	827b      	strh	r3, [r7, #18]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	8a7b      	ldrh	r3, [r7, #18]
 8007026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007036:	b29b      	uxth	r3, r3
 8007038:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2280      	movs	r2, #128	; 0x80
 800705e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800707e:	b29b      	uxth	r3, r3
 8007080:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007082:	68fb      	ldr	r3, [r7, #12]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007090:	b480      	push	{r7}
 8007092:	b08b      	sub	sp, #44	; 0x2c
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4611      	mov	r1, r2
 800709c:	461a      	mov	r2, r3
 800709e:	460b      	mov	r3, r1
 80070a0:	80fb      	strh	r3, [r7, #6]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070a6:	88bb      	ldrh	r3, [r7, #4]
 80070a8:	3301      	adds	r3, #1
 80070aa:	085b      	lsrs	r3, r3, #1
 80070ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070b6:	88fa      	ldrh	r2, [r7, #6]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
 80070c6:	e01b      	b.n	8007100 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3301      	adds	r3, #1
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	b21a      	sxth	r2, r3
 80070d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070dc:	4313      	orrs	r3, r2
 80070de:	b21b      	sxth	r3, r3
 80070e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	8a7a      	ldrh	r2, [r7, #18]
 80070e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	3302      	adds	r3, #2
 80070ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	3301      	adds	r3, #1
 80070f2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	3301      	adds	r3, #1
 80070f8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	3b01      	subs	r3, #1
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e0      	bne.n	80070c8 <USB_WritePMA+0x38>
  }
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	372c      	adds	r7, #44	; 0x2c
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007114:	b480      	push	{r7}
 8007116:	b08b      	sub	sp, #44	; 0x2c
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	460b      	mov	r3, r1
 8007124:	80fb      	strh	r3, [r7, #6]
 8007126:	4613      	mov	r3, r2
 8007128:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800712a:	88bb      	ldrh	r3, [r7, #4]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	b29b      	uxth	r3, r3
 8007130:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007144:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
 800714a:	e018      	b.n	800717e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	3302      	adds	r3, #2
 8007158:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	3301      	adds	r3, #1
 8007166:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	b2da      	uxtb	r2, r3
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	3b01      	subs	r3, #1
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e3      	bne.n	800714c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007184:	88bb      	ldrh	r3, [r7, #4]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	b29b      	uxth	r3, r3
 8007196:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	701a      	strb	r2, [r3, #0]
  }
}
 80071a0:	bf00      	nop
 80071a2:	372c      	adds	r7, #44	; 0x2c
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	78fa      	ldrb	r2, [r7, #3]
 80071e6:	4611      	mov	r1, r2
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	4611      	mov	r1, r2
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
  }

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f000 ff47 	bl	80080d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007250:	461a      	mov	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	2b02      	cmp	r3, #2
 8007264:	d01a      	beq.n	800729c <USBD_LL_SetupStage+0x72>
 8007266:	2b02      	cmp	r3, #2
 8007268:	d822      	bhi.n	80072b0 <USBD_LL_SetupStage+0x86>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <USBD_LL_SetupStage+0x4a>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d00a      	beq.n	8007288 <USBD_LL_SetupStage+0x5e>
 8007272:	e01d      	b.n	80072b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f9ef 	bl	8007660 <USBD_StdDevReq>
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
      break;
 8007286:	e020      	b.n	80072ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa53 	bl	800773c <USBD_StdItfReq>
 8007296:	4603      	mov	r3, r0
 8007298:	73fb      	strb	r3, [r7, #15]
      break;
 800729a:	e016      	b.n	80072ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fa92 	bl	80077ce <USBD_StdEPReq>
 80072aa:	4603      	mov	r3, r0
 80072ac:	73fb      	strb	r3, [r7, #15]
      break;
 80072ae:	e00c      	b.n	80072ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f004 f9c8 	bl	800b654 <USBD_LL_StallEP>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
      break;
 80072c8:	bf00      	nop
  }

  return ret;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	460b      	mov	r3, r1
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d138      	bne.n	800735a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d14a      	bne.n	8007390 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	429a      	cmp	r2, r3
 8007304:	d913      	bls.n	800732e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	4293      	cmp	r3, r2
 800731e:	bf28      	it	cs
 8007320:	4613      	movcs	r3, r2
 8007322:	461a      	mov	r2, r3
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 ff49 	bl	80081be <USBD_CtlContinueRx>
 800732c:	e030      	b.n	8007390 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b03      	cmp	r3, #3
 8007338:	d10b      	bne.n	8007352 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 ff44 	bl	80081e0 <USBD_CtlSendStatus>
 8007358:	e01a      	b.n	8007390 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b03      	cmp	r3, #3
 8007364:	d114      	bne.n	8007390 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00e      	beq.n	8007390 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	7afa      	ldrb	r2, [r7, #11]
 800737c:	4611      	mov	r1, r2
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	4798      	blx	r3
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	e000      	b.n	8007392 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	460b      	mov	r3, r1
 80073a4:	607a      	str	r2, [r7, #4]
 80073a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073a8:	7afb      	ldrb	r3, [r7, #11]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d16b      	bne.n	8007486 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3314      	adds	r3, #20
 80073b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d156      	bne.n	800746c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d914      	bls.n	80073f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	461a      	mov	r2, r3
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fedb 	bl	800819c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e6:	2300      	movs	r3, #0
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f004 f9db 	bl	800b7a8 <USBD_LL_PrepareReceive>
 80073f2:	e03b      	b.n	800746c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d11c      	bne.n	800743a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007408:	429a      	cmp	r2, r3
 800740a:	d316      	bcc.n	800743a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007416:	429a      	cmp	r2, r3
 8007418:	d20f      	bcs.n	800743a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800741a:	2200      	movs	r2, #0
 800741c:	2100      	movs	r1, #0
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 febc 	bl	800819c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742c:	2300      	movs	r3, #0
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f004 f9b8 	bl	800b7a8 <USBD_LL_PrepareReceive>
 8007438:	e018      	b.n	800746c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b03      	cmp	r3, #3
 8007444:	d10b      	bne.n	800745e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800745e:	2180      	movs	r1, #128	; 0x80
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f004 f8f7 	bl	800b654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f000 fecd 	bl	8008206 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007472:	2b01      	cmp	r3, #1
 8007474:	d122      	bne.n	80074bc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fe98 	bl	80071ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007484:	e01a      	b.n	80074bc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b03      	cmp	r3, #3
 8007490:	d114      	bne.n	80074bc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00e      	beq.n	80074bc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	7afa      	ldrb	r2, [r7, #11]
 80074a8:	4611      	mov	r1, r2
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	e000      	b.n	80074be <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e02f      	b.n	800755a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6852      	ldr	r2, [r2, #4]
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	4611      	mov	r1, r2
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f004 f86c 	bl	800b608 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007540:	2340      	movs	r3, #64	; 0x40
 8007542:	2200      	movs	r2, #0
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f004 f85e 	bl	800b608 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2240      	movs	r2, #64	; 0x40
 8007556:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	78fa      	ldrb	r2, [r7, #3]
 8007572:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2204      	movs	r2, #4
 800759c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d106      	bne.n	80075d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e012      	b.n	800761a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d10b      	bne.n	8007618 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007622:	b480      	push	{r7}
 8007624:	b087      	sub	sp, #28
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	3301      	adds	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007640:	8a3b      	ldrh	r3, [r7, #16]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	b21a      	sxth	r2, r3
 8007646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800764a:	4313      	orrs	r3, r2
 800764c:	b21b      	sxth	r3, r3
 800764e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007650:	89fb      	ldrh	r3, [r7, #14]
}
 8007652:	4618      	mov	r0, r3
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d005      	beq.n	8007686 <USBD_StdDevReq+0x26>
 800767a:	2b40      	cmp	r3, #64	; 0x40
 800767c:	d853      	bhi.n	8007726 <USBD_StdDevReq+0xc6>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <USBD_StdDevReq+0x3a>
 8007682:	2b20      	cmp	r3, #32
 8007684:	d14f      	bne.n	8007726 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e04a      	b.n	8007730 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b09      	cmp	r3, #9
 80076a0:	d83b      	bhi.n	800771a <USBD_StdDevReq+0xba>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_StdDevReq+0x48>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076fd 	.word	0x080076fd
 80076ac:	08007711 	.word	0x08007711
 80076b0:	0800771b 	.word	0x0800771b
 80076b4:	08007707 	.word	0x08007707
 80076b8:	0800771b 	.word	0x0800771b
 80076bc:	080076db 	.word	0x080076db
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	0800771b 	.word	0x0800771b
 80076c8:	080076f3 	.word	0x080076f3
 80076cc:	080076e5 	.word	0x080076e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9de 	bl	8007a94 <USBD_GetDescriptor>
          break;
 80076d8:	e024      	b.n	8007724 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb6d 	bl	8007dbc <USBD_SetAddress>
          break;
 80076e2:	e01f      	b.n	8007724 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fbac 	bl	8007e44 <USBD_SetConfig>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
          break;
 80076f0:	e018      	b.n	8007724 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc4b 	bl	8007f90 <USBD_GetConfig>
          break;
 80076fa:	e013      	b.n	8007724 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc7c 	bl	8007ffc <USBD_GetStatus>
          break;
 8007704:	e00e      	b.n	8007724 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fcab 	bl	8008064 <USBD_SetFeature>
          break;
 800770e:	e009      	b.n	8007724 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fcba 	bl	800808c <USBD_ClrFeature>
          break;
 8007718:	e004      	b.n	8007724 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fd11 	bl	8008144 <USBD_CtlError>
          break;
 8007722:	bf00      	nop
      }
      break;
 8007724:	e004      	b.n	8007730 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fd0b 	bl	8008144 <USBD_CtlError>
      break;
 800772e:	bf00      	nop
  }

  return ret;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop

0800773c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d005      	beq.n	8007762 <USBD_StdItfReq+0x26>
 8007756:	2b40      	cmp	r3, #64	; 0x40
 8007758:	d82f      	bhi.n	80077ba <USBD_StdItfReq+0x7e>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <USBD_StdItfReq+0x26>
 800775e:	2b20      	cmp	r3, #32
 8007760:	d12b      	bne.n	80077ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	2b02      	cmp	r3, #2
 800776e:	d81d      	bhi.n	80077ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	889b      	ldrh	r3, [r3, #4]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b01      	cmp	r3, #1
 8007778:	d813      	bhi.n	80077a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	88db      	ldrh	r3, [r3, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d110      	bne.n	80077b6 <USBD_StdItfReq+0x7a>
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10d      	bne.n	80077b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fd20 	bl	80081e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077a0:	e009      	b.n	80077b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fccd 	bl	8008144 <USBD_CtlError>
          break;
 80077aa:	e004      	b.n	80077b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fcc8 	bl	8008144 <USBD_CtlError>
          break;
 80077b4:	e000      	b.n	80077b8 <USBD_StdItfReq+0x7c>
          break;
 80077b6:	bf00      	nop
      }
      break;
 80077b8:	e004      	b.n	80077c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fcc1 	bl	8008144 <USBD_CtlError>
      break;
 80077c2:	bf00      	nop
  }

  return ret;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	889b      	ldrh	r3, [r3, #4]
 80077e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d007      	beq.n	80077fe <USBD_StdEPReq+0x30>
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	f200 8145 	bhi.w	8007a7e <USBD_StdEPReq+0x2b0>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00c      	beq.n	8007812 <USBD_StdEPReq+0x44>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	f040 8140 	bne.w	8007a7e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e13a      	b.n	8007a88 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d007      	beq.n	800782a <USBD_StdEPReq+0x5c>
 800781a:	2b03      	cmp	r3, #3
 800781c:	f300 8129 	bgt.w	8007a72 <USBD_StdEPReq+0x2a4>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d07f      	beq.n	8007924 <USBD_StdEPReq+0x156>
 8007824:	2b01      	cmp	r3, #1
 8007826:	d03c      	beq.n	80078a2 <USBD_StdEPReq+0xd4>
 8007828:	e123      	b.n	8007a72 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d002      	beq.n	800783c <USBD_StdEPReq+0x6e>
 8007836:	2b03      	cmp	r3, #3
 8007838:	d016      	beq.n	8007868 <USBD_StdEPReq+0x9a>
 800783a:	e02c      	b.n	8007896 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00d      	beq.n	800785e <USBD_StdEPReq+0x90>
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b80      	cmp	r3, #128	; 0x80
 8007846:	d00a      	beq.n	800785e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f003 ff01 	bl	800b654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f003 fefd 	bl	800b654 <USBD_LL_StallEP>
 800785a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800785c:	e020      	b.n	80078a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc6f 	bl	8008144 <USBD_CtlError>
              break;
 8007866:	e01b      	b.n	80078a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	885b      	ldrh	r3, [r3, #2]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10e      	bne.n	800788e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <USBD_StdEPReq+0xc0>
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d008      	beq.n	800788e <USBD_StdEPReq+0xc0>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	88db      	ldrh	r3, [r3, #6]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f003 fee3 	bl	800b654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fca6 	bl	80081e0 <USBD_CtlSendStatus>

              break;
 8007894:	e004      	b.n	80078a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc53 	bl	8008144 <USBD_CtlError>
              break;
 800789e:	bf00      	nop
          }
          break;
 80078a0:	e0ec      	b.n	8007a7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d002      	beq.n	80078b4 <USBD_StdEPReq+0xe6>
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d016      	beq.n	80078e0 <USBD_StdEPReq+0x112>
 80078b2:	e030      	b.n	8007916 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00d      	beq.n	80078d6 <USBD_StdEPReq+0x108>
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b80      	cmp	r3, #128	; 0x80
 80078be:	d00a      	beq.n	80078d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f003 fec5 	bl	800b654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f003 fec1 	bl	800b654 <USBD_LL_StallEP>
 80078d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078d4:	e025      	b.n	8007922 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fc33 	bl	8008144 <USBD_CtlError>
              break;
 80078de:	e020      	b.n	8007922 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	885b      	ldrh	r3, [r3, #2]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d11b      	bne.n	8007920 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f003 fecb 	bl	800b692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc6f 	bl	80081e0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007914:	e004      	b.n	8007920 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc13 	bl	8008144 <USBD_CtlError>
              break;
 800791e:	e000      	b.n	8007922 <USBD_StdEPReq+0x154>
              break;
 8007920:	bf00      	nop
          }
          break;
 8007922:	e0ab      	b.n	8007a7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d002      	beq.n	8007936 <USBD_StdEPReq+0x168>
 8007930:	2b03      	cmp	r3, #3
 8007932:	d032      	beq.n	800799a <USBD_StdEPReq+0x1cc>
 8007934:	e097      	b.n	8007a66 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <USBD_StdEPReq+0x17e>
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d004      	beq.n	800794c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fbfd 	bl	8008144 <USBD_CtlError>
                break;
 800794a:	e091      	b.n	8007a70 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800794c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da0b      	bge.n	800796c <USBD_StdEPReq+0x19e>
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	3310      	adds	r3, #16
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	3304      	adds	r3, #4
 800796a:	e00b      	b.n	8007984 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007972:	4613      	mov	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	3304      	adds	r3, #4
 8007984:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2202      	movs	r2, #2
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fbe7 	bl	8008166 <USBD_CtlSendData>
              break;
 8007998:	e06a      	b.n	8007a70 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800799a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da11      	bge.n	80079c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	f003 020f 	and.w	r2, r3, #15
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	3324      	adds	r3, #36	; 0x24
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d117      	bne.n	80079ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fbc0 	bl	8008144 <USBD_CtlError>
                  break;
 80079c4:	e054      	b.n	8007a70 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d104      	bne.n	80079ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fbad 	bl	8008144 <USBD_CtlError>
                  break;
 80079ea:	e041      	b.n	8007a70 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	da0b      	bge.n	8007a0c <USBD_StdEPReq+0x23e>
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	3310      	adds	r3, #16
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	3304      	adds	r3, #4
 8007a0a:	e00b      	b.n	8007a24 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <USBD_StdEPReq+0x264>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d103      	bne.n	8007a3a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	e00e      	b.n	8007a58 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f003 fe46 	bl	800b6d0 <USBD_LL_IsStallEP>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	e002      	b.n	8007a58 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fb81 	bl	8008166 <USBD_CtlSendData>
              break;
 8007a64:	e004      	b.n	8007a70 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb6b 	bl	8008144 <USBD_CtlError>
              break;
 8007a6e:	bf00      	nop
          }
          break;
 8007a70:	e004      	b.n	8007a7c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fb65 	bl	8008144 <USBD_CtlError>
          break;
 8007a7a:	bf00      	nop
      }
      break;
 8007a7c:	e004      	b.n	8007a88 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb5f 	bl	8008144 <USBD_CtlError>
      break;
 8007a86:	bf00      	nop
  }

  return ret;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b0e      	cmp	r3, #14
 8007ab6:	f200 8152 	bhi.w	8007d5e <USBD_GetDescriptor+0x2ca>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <USBD_GetDescriptor+0x2c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007b31 	.word	0x08007b31
 8007ac4:	08007b49 	.word	0x08007b49
 8007ac8:	08007b89 	.word	0x08007b89
 8007acc:	08007d5f 	.word	0x08007d5f
 8007ad0:	08007d5f 	.word	0x08007d5f
 8007ad4:	08007cff 	.word	0x08007cff
 8007ad8:	08007d2b 	.word	0x08007d2b
 8007adc:	08007d5f 	.word	0x08007d5f
 8007ae0:	08007d5f 	.word	0x08007d5f
 8007ae4:	08007d5f 	.word	0x08007d5f
 8007ae8:	08007d5f 	.word	0x08007d5f
 8007aec:	08007d5f 	.word	0x08007d5f
 8007af0:	08007d5f 	.word	0x08007d5f
 8007af4:	08007d5f 	.word	0x08007d5f
 8007af8:	08007afd 	.word	0x08007afd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7c12      	ldrb	r2, [r2, #16]
 8007b14:	f107 0108 	add.w	r1, r7, #8
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b1e:	e126      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb0e 	bl	8008144 <USBD_CtlError>
        err++;
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007b2e:	e11e      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
      break;
 8007b46:	e112      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7c1b      	ldrb	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	f107 0208 	add.w	r2, r7, #8
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	2202      	movs	r2, #2
 8007b68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b6a:	e100      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	f107 0208 	add.w	r2, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	2202      	movs	r2, #2
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e0f2      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	885b      	ldrh	r3, [r3, #2]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	f200 80ac 	bhi.w	8007cec <USBD_GetDescriptor+0x258>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_GetDescriptor+0x108>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007c1d 	.word	0x08007c1d
 8007ba8:	08007c51 	.word	0x08007c51
 8007bac:	08007c85 	.word	0x08007c85
 8007bb0:	08007cb9 	.word	0x08007cb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd6:	e091      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fab2 	bl	8008144 <USBD_CtlError>
            err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
          break;
 8007be6:	e089      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0a:	e077      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa98 	bl	8008144 <USBD_CtlError>
            err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1a:	e06f      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e05d      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa7e 	bl	8008144 <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e055      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c72:	e043      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa64 	bl	8008144 <USBD_CtlError>
            err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
          break;
 8007c82:	e03b      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca6:	e029      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa4a 	bl	8008144 <USBD_CtlError>
            err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb6:	e021      	b.n	8007cfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cda:	e00f      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa30 	bl	8008144 <USBD_CtlError>
            err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cea:	e007      	b.n	8007cfc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa28 	bl	8008144 <USBD_CtlError>
          err++;
 8007cf4:	7afb      	ldrb	r3, [r7, #11]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007cfa:	bf00      	nop
      }
      break;
 8007cfc:	e037      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	7c1b      	ldrb	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d109      	bne.n	8007d1a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0e:	f107 0208 	add.w	r2, r7, #8
 8007d12:	4610      	mov	r0, r2
 8007d14:	4798      	blx	r3
 8007d16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d18:	e029      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa11 	bl	8008144 <USBD_CtlError>
        err++;
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	3301      	adds	r3, #1
 8007d26:	72fb      	strb	r3, [r7, #11]
      break;
 8007d28:	e021      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f107 0208 	add.w	r2, r7, #8
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4798      	blx	r3
 8007d42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	2207      	movs	r2, #7
 8007d4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d4c:	e00f      	b.n	8007d6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9f7 	bl	8008144 <USBD_CtlError>
        err++;
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d5c:	e007      	b.n	8007d6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9ef 	bl	8008144 <USBD_CtlError>
      err++;
 8007d66:	7afb      	ldrb	r3, [r7, #11]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6c:	bf00      	nop
  }

  if (err != 0U)
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11e      	bne.n	8007db2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d016      	beq.n	8007daa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007d7c:	893b      	ldrh	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00e      	beq.n	8007da0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	88da      	ldrh	r2, [r3, #6]
 8007d86:	893b      	ldrh	r3, [r7, #8]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	bf28      	it	cs
 8007d8c:	4613      	movcs	r3, r2
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d92:	893b      	ldrh	r3, [r7, #8]
 8007d94:	461a      	mov	r2, r3
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9e4 	bl	8008166 <USBD_CtlSendData>
 8007d9e:	e009      	b.n	8007db4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9ce 	bl	8008144 <USBD_CtlError>
 8007da8:	e004      	b.n	8007db4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa18 	bl	80081e0 <USBD_CtlSendStatus>
 8007db0:	e000      	b.n	8007db4 <USBD_GetDescriptor+0x320>
    return;
 8007db2:	bf00      	nop
  }
}
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop

08007dbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	889b      	ldrh	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d131      	bne.n	8007e32 <USBD_SetAddress+0x76>
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d12d      	bne.n	8007e32 <USBD_SetAddress+0x76>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	885b      	ldrh	r3, [r3, #2]
 8007dda:	2b7f      	cmp	r3, #127	; 0x7f
 8007ddc:	d829      	bhi.n	8007e32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d104      	bne.n	8007e00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f9a3 	bl	8008144 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	e01d      	b.n	8007e3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7bfa      	ldrb	r2, [r7, #15]
 8007e04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f003 fc8b 	bl	800b728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9e4 	bl	80081e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e26:	e009      	b.n	8007e3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	e004      	b.n	8007e3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f985 	bl	8008144 <USBD_CtlError>
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	885b      	ldrh	r3, [r3, #2]
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	4b4c      	ldr	r3, [pc, #304]	; (8007f8c <USBD_SetConfig+0x148>)
 8007e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e5c:	4b4b      	ldr	r3, [pc, #300]	; (8007f8c <USBD_SetConfig+0x148>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d905      	bls.n	8007e70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f96c 	bl	8008144 <USBD_CtlError>
    return USBD_FAIL;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e088      	b.n	8007f82 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d002      	beq.n	8007e82 <USBD_SetConfig+0x3e>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d025      	beq.n	8007ecc <USBD_SetConfig+0x88>
 8007e80:	e071      	b.n	8007f66 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e82:	4b42      	ldr	r3, [pc, #264]	; (8007f8c <USBD_SetConfig+0x148>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01c      	beq.n	8007ec4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007e8a:	4b40      	ldr	r3, [pc, #256]	; (8007f8c <USBD_SetConfig+0x148>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e94:	4b3d      	ldr	r3, [pc, #244]	; (8007f8c <USBD_SetConfig+0x148>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff f991 	bl	80071c2 <USBD_SetClassConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f949 	bl	8008144 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eb2:	e065      	b.n	8007f80 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f993 	bl	80081e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ec2:	e05d      	b.n	8007f80 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f98b 	bl	80081e0 <USBD_CtlSendStatus>
      break;
 8007eca:	e059      	b.n	8007f80 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ecc:	4b2f      	ldr	r3, [pc, #188]	; (8007f8c <USBD_SetConfig+0x148>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d112      	bne.n	8007efa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007edc:	4b2b      	ldr	r3, [pc, #172]	; (8007f8c <USBD_SetConfig+0x148>)
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ee6:	4b29      	ldr	r3, [pc, #164]	; (8007f8c <USBD_SetConfig+0x148>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff f984 	bl	80071fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f974 	bl	80081e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ef8:	e042      	b.n	8007f80 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007efa:	4b24      	ldr	r3, [pc, #144]	; (8007f8c <USBD_SetConfig+0x148>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d02a      	beq.n	8007f5e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff f972 	bl	80071fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f16:	4b1d      	ldr	r3, [pc, #116]	; (8007f8c <USBD_SetConfig+0x148>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <USBD_SetConfig+0x148>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff f94b 	bl	80071c2 <USBD_SetClassConfig>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00f      	beq.n	8007f56 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f903 	bl	8008144 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff f957 	bl	80071fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f54:	e014      	b.n	8007f80 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f942 	bl	80081e0 <USBD_CtlSendStatus>
      break;
 8007f5c:	e010      	b.n	8007f80 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f93e 	bl	80081e0 <USBD_CtlSendStatus>
      break;
 8007f64:	e00c      	b.n	8007f80 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f8eb 	bl	8008144 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <USBD_SetConfig+0x148>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff f940 	bl	80071fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7e:	bf00      	nop
  }

  return ret;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000358 	.word	0x20000358

08007f90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d004      	beq.n	8007fac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8cd 	bl	8008144 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007faa:	e023      	b.n	8007ff4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	dc02      	bgt.n	8007fbe <USBD_GetConfig+0x2e>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dc03      	bgt.n	8007fc4 <USBD_GetConfig+0x34>
 8007fbc:	e015      	b.n	8007fea <USBD_GetConfig+0x5a>
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d00b      	beq.n	8007fda <USBD_GetConfig+0x4a>
 8007fc2:	e012      	b.n	8007fea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f8c7 	bl	8008166 <USBD_CtlSendData>
        break;
 8007fd8:	e00c      	b.n	8007ff4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8bf 	bl	8008166 <USBD_CtlSendData>
        break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f8a9 	bl	8008144 <USBD_CtlError>
        break;
 8007ff2:	bf00      	nop
}
 8007ff4:	bf00      	nop
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800c:	b2db      	uxtb	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	2b02      	cmp	r3, #2
 8008012:	d81e      	bhi.n	8008052 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d004      	beq.n	8008026 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800801c:	6839      	ldr	r1, [r7, #0]
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f890 	bl	8008144 <USBD_CtlError>
        break;
 8008024:	e01a      	b.n	800805c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008032:	2b00      	cmp	r3, #0
 8008034:	d005      	beq.n	8008042 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f043 0202 	orr.w	r2, r3, #2
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	330c      	adds	r3, #12
 8008046:	2202      	movs	r2, #2
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f88b 	bl	8008166 <USBD_CtlSendData>
      break;
 8008050:	e004      	b.n	800805c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f875 	bl	8008144 <USBD_CtlError>
      break;
 800805a:	bf00      	nop
  }
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	885b      	ldrh	r3, [r3, #2]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d106      	bne.n	8008084 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8ae 	bl	80081e0 <USBD_CtlSendStatus>
  }
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	b2db      	uxtb	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d80b      	bhi.n	80080bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	885b      	ldrh	r3, [r3, #2]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d10c      	bne.n	80080c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f893 	bl	80081e0 <USBD_CtlSendStatus>
      }
      break;
 80080ba:	e004      	b.n	80080c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f840 	bl	8008144 <USBD_CtlError>
      break;
 80080c4:	e000      	b.n	80080c8 <USBD_ClrFeature+0x3c>
      break;
 80080c6:	bf00      	nop
  }
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3301      	adds	r3, #1
 80080ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fa91 	bl	8007622 <SWAPBYTE>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7ff fa84 	bl	8007622 <SWAPBYTE>
 800811a:	4603      	mov	r3, r0
 800811c:	461a      	mov	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f7ff fa77 	bl	8007622 <SWAPBYTE>
 8008134:	4603      	mov	r3, r0
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	80da      	strh	r2, [r3, #6]
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800814e:	2180      	movs	r1, #128	; 0x80
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f003 fa7f 	bl	800b654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008156:	2100      	movs	r1, #0
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f003 fa7b 	bl	800b654 <USBD_LL_StallEP>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2202      	movs	r2, #2
 8008176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	2100      	movs	r1, #0
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f003 faea 	bl	800b766 <USBD_LL_Transmit>

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	2100      	movs	r1, #0
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f003 fad9 	bl	800b766 <USBD_LL_Transmit>

  return USBD_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	2100      	movs	r1, #0
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f003 fae9 	bl	800b7a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2204      	movs	r2, #4
 80081ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081f0:	2300      	movs	r3, #0
 80081f2:	2200      	movs	r2, #0
 80081f4:	2100      	movs	r1, #0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f003 fab5 	bl	800b766 <USBD_LL_Transmit>

  return USBD_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2205      	movs	r2, #5
 8008212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008216:	2300      	movs	r3, #0
 8008218:	2200      	movs	r2, #0
 800821a:	2100      	movs	r1, #0
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f003 fac3 	bl	800b7a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <__NVIC_SetPriority>:
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	6039      	str	r1, [r7, #0]
 8008236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823c:	2b00      	cmp	r3, #0
 800823e:	db0a      	blt.n	8008256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	490c      	ldr	r1, [pc, #48]	; (8008278 <__NVIC_SetPriority+0x4c>)
 8008246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824a:	0112      	lsls	r2, r2, #4
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	440b      	add	r3, r1
 8008250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008254:	e00a      	b.n	800826c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	b2da      	uxtb	r2, r3
 800825a:	4908      	ldr	r1, [pc, #32]	; (800827c <__NVIC_SetPriority+0x50>)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	f003 030f 	and.w	r3, r3, #15
 8008262:	3b04      	subs	r3, #4
 8008264:	0112      	lsls	r2, r2, #4
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	440b      	add	r3, r1
 800826a:	761a      	strb	r2, [r3, #24]
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	e000e100 	.word	0xe000e100
 800827c:	e000ed00 	.word	0xe000ed00

08008280 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008284:	2100      	movs	r1, #0
 8008286:	f06f 0004 	mvn.w	r0, #4
 800828a:	f7ff ffcf 	bl	800822c <__NVIC_SetPriority>
#endif
}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800829a:	f3ef 8305 	mrs	r3, IPSR
 800829e:	603b      	str	r3, [r7, #0]
  return(result);
 80082a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082a6:	f06f 0305 	mvn.w	r3, #5
 80082aa:	607b      	str	r3, [r7, #4]
 80082ac:	e00c      	b.n	80082c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <osKernelInitialize+0x44>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d105      	bne.n	80082c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082b6:	4b08      	ldr	r3, [pc, #32]	; (80082d8 <osKernelInitialize+0x44>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082bc:	2300      	movs	r3, #0
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e002      	b.n	80082c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	2000035c 	.word	0x2000035c

080082dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e2:	f3ef 8305 	mrs	r3, IPSR
 80082e6:	603b      	str	r3, [r7, #0]
  return(result);
 80082e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80082ee:	f06f 0305 	mvn.w	r3, #5
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e010      	b.n	8008318 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <osKernelStart+0x48>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d109      	bne.n	8008312 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082fe:	f7ff ffbf 	bl	8008280 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008302:	4b08      	ldr	r3, [pc, #32]	; (8008324 <osKernelStart+0x48>)
 8008304:	2202      	movs	r2, #2
 8008306:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008308:	f001 f8ee 	bl	80094e8 <vTaskStartScheduler>
      stat = osOK;
 800830c:	2300      	movs	r3, #0
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	e002      	b.n	8008318 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008316:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008318:	687b      	ldr	r3, [r7, #4]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	2000035c 	.word	0x2000035c

08008328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	; 0x38
 800832c:	af04      	add	r7, sp, #16
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008338:	f3ef 8305 	mrs	r3, IPSR
 800833c:	617b      	str	r3, [r7, #20]
  return(result);
 800833e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008340:	2b00      	cmp	r3, #0
 8008342:	d17e      	bne.n	8008442 <osThreadNew+0x11a>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d07b      	beq.n	8008442 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800834a:	2380      	movs	r3, #128	; 0x80
 800834c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800834e:	2318      	movs	r3, #24
 8008350:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800835a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d045      	beq.n	80083ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <osThreadNew+0x48>
        name = attr->name;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <osThreadNew+0x6e>
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	2b38      	cmp	r3, #56	; 0x38
 8008388:	d805      	bhi.n	8008396 <osThreadNew+0x6e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <osThreadNew+0x72>
        return (NULL);
 8008396:	2300      	movs	r3, #0
 8008398:	e054      	b.n	8008444 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00e      	beq.n	80083d0 <osThreadNew+0xa8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2ba7      	cmp	r3, #167	; 0xa7
 80083b8:	d90a      	bls.n	80083d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d006      	beq.n	80083d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <osThreadNew+0xa8>
        mem = 1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61bb      	str	r3, [r7, #24]
 80083ce:	e010      	b.n	80083f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10c      	bne.n	80083f2 <osThreadNew+0xca>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d108      	bne.n	80083f2 <osThreadNew+0xca>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d104      	bne.n	80083f2 <osThreadNew+0xca>
          mem = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	61bb      	str	r3, [r7, #24]
 80083ec:	e001      	b.n	80083f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d110      	bne.n	800841a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008400:	9202      	str	r2, [sp, #8]
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	6a3a      	ldr	r2, [r7, #32]
 800840c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fe0c 	bl	800902c <xTaskCreateStatic>
 8008414:	4603      	mov	r3, r0
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	e013      	b.n	8008442 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d110      	bne.n	8008442 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	b29a      	uxth	r2, r3
 8008424:	f107 0310 	add.w	r3, r7, #16
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fe57 	bl	80090e6 <xTaskCreate>
 8008438:	4603      	mov	r3, r0
 800843a:	2b01      	cmp	r3, #1
 800843c:	d001      	beq.n	8008442 <osThreadNew+0x11a>
            hTask = NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008442:	693b      	ldr	r3, [r7, #16]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3728      	adds	r7, #40	; 0x28
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008454:	f3ef 8305 	mrs	r3, IPSR
 8008458:	60bb      	str	r3, [r7, #8]
  return(result);
 800845a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <osDelay+0x1c>
    stat = osErrorISR;
 8008460:	f06f 0305 	mvn.w	r3, #5
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	e007      	b.n	8008478 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f804 	bl	8009480 <vTaskDelay>
    }
  }

  return (stat);
 8008478:	68fb      	ldr	r3, [r7, #12]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008494:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4a06      	ldr	r2, [pc, #24]	; (80084b4 <vApplicationGetIdleTaskMemory+0x30>)
 800849a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2280      	movs	r2, #128	; 0x80
 80084a0:	601a      	str	r2, [r3, #0]
}
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	20000360 	.word	0x20000360
 80084b4:	20000408 	.word	0x20000408

080084b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4a07      	ldr	r2, [pc, #28]	; (80084e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80084c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4a06      	ldr	r2, [pc, #24]	; (80084e8 <vApplicationGetTimerTaskMemory+0x30>)
 80084ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084d6:	601a      	str	r2, [r3, #0]
}
 80084d8:	bf00      	nop
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	20000608 	.word	0x20000608
 80084e8:	200006b0 	.word	0x200006b0

080084ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f103 0208 	add.w	r2, r3, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008504:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f103 0208 	add.w	r2, r3, #8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f103 0208 	add.w	r2, r3, #8
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	601a      	str	r2, [r3, #0]
}
 8008582:	bf00      	nop
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a4:	d103      	bne.n	80085ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e00c      	b.n	80085c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3308      	adds	r3, #8
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e002      	b.n	80085bc <vListInsert+0x2e>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d2f6      	bcs.n	80085b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6892      	ldr	r2, [r2, #8]
 8008616:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6852      	ldr	r2, [r2, #4]
 8008620:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d103      	bne.n	8008634 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	1e5a      	subs	r2, r3, #1
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800867e:	f002 f8e9 	bl	800a854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ae:	3b01      	subs	r3, #1
 80086b0:	68f9      	ldr	r1, [r7, #12]
 80086b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	441a      	add	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d114      	bne.n	80086fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01a      	beq.n	8008712 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3310      	adds	r3, #16
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 f99b 	bl	8009a1c <xTaskRemoveFromEventList>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d012      	beq.n	8008712 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086ec:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <xQueueGenericReset+0xcc>)
 80086ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	e009      	b.n	8008712 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3310      	adds	r3, #16
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fef2 	bl	80084ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3324      	adds	r3, #36	; 0x24
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff feed 	bl	80084ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008712:	f002 f8cf 	bl	800a8b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008716:	2301      	movs	r3, #1
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008724:	b580      	push	{r7, lr}
 8008726:	b08e      	sub	sp, #56	; 0x38
 8008728:	af02      	add	r7, sp, #8
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <xQueueGenericCreateStatic+0x52>
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <xQueueGenericCreateStatic+0x56>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericCreateStatic+0x58>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	623b      	str	r3, [r7, #32]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <xQueueGenericCreateStatic+0x7e>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <xQueueGenericCreateStatic+0x82>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <xQueueGenericCreateStatic+0x84>
 80087a6:	2300      	movs	r3, #0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	61fb      	str	r3, [r7, #28]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087c2:	2350      	movs	r3, #80	; 0x50
 80087c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b50      	cmp	r3, #80	; 0x50
 80087ca:	d00a      	beq.n	80087e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	61bb      	str	r3, [r7, #24]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00d      	beq.n	800880a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f805 	bl	8008814 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800880c:	4618      	mov	r0, r3
 800880e:	3730      	adds	r7, #48	; 0x30
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	e002      	b.n	8008836 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008842:	2101      	movs	r1, #1
 8008844:	69b8      	ldr	r0, [r7, #24]
 8008846:	f7ff ff05 	bl	8008654 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	78fa      	ldrb	r2, [r7, #3]
 800884e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08e      	sub	sp, #56	; 0x38
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800886a:	2300      	movs	r3, #0
 800886c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <xQueueGenericSend+0x32>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <xQueueGenericSend+0x40>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <xQueueGenericSend+0x44>
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <xQueueGenericSend+0x46>
 80088a0:	2300      	movs	r3, #0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <xQueueGenericSend+0x60>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088b8:	bf00      	nop
 80088ba:	e7fe      	b.n	80088ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d103      	bne.n	80088ca <xQueueGenericSend+0x6e>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <xQueueGenericSend+0x72>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <xQueueGenericSend+0x74>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <xQueueGenericSend+0x8e>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	623b      	str	r3, [r7, #32]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088ea:	f001 fa59 	bl	8009da0 <xTaskGetSchedulerState>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d102      	bne.n	80088fa <xQueueGenericSend+0x9e>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <xQueueGenericSend+0xa2>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <xQueueGenericSend+0xa4>
 80088fe:	2300      	movs	r3, #0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10a      	bne.n	800891a <xQueueGenericSend+0xbe>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	61fb      	str	r3, [r7, #28]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800891a:	f001 ff9b 	bl	800a854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008926:	429a      	cmp	r2, r3
 8008928:	d302      	bcc.n	8008930 <xQueueGenericSend+0xd4>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b02      	cmp	r3, #2
 800892e:	d129      	bne.n	8008984 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008936:	f000 fa0b 	bl	8008d50 <prvCopyDataToQueue>
 800893a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	3324      	adds	r3, #36	; 0x24
 8008948:	4618      	mov	r0, r3
 800894a:	f001 f867 	bl	8009a1c <xTaskRemoveFromEventList>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d013      	beq.n	800897c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008954:	4b3f      	ldr	r3, [pc, #252]	; (8008a54 <xQueueGenericSend+0x1f8>)
 8008956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	e00a      	b.n	800897c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800896c:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <xQueueGenericSend+0x1f8>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800897c:	f001 ff9a 	bl	800a8b4 <vPortExitCritical>
				return pdPASS;
 8008980:	2301      	movs	r3, #1
 8008982:	e063      	b.n	8008a4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d103      	bne.n	8008992 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800898a:	f001 ff93 	bl	800a8b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800898e:	2300      	movs	r3, #0
 8008990:	e05c      	b.n	8008a4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008998:	f107 0314 	add.w	r3, r7, #20
 800899c:	4618      	mov	r0, r3
 800899e:	f001 f8a1 	bl	8009ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089a6:	f001 ff85 	bl	800a8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089aa:	f000 fe0d 	bl	80095c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089ae:	f001 ff51 	bl	800a854 <vPortEnterCritical>
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089b8:	b25b      	sxtb	r3, r3
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089be:	d103      	bne.n	80089c8 <xQueueGenericSend+0x16c>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d4:	d103      	bne.n	80089de <xQueueGenericSend+0x182>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089de:	f001 ff69 	bl	800a8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089e2:	1d3a      	adds	r2, r7, #4
 80089e4:	f107 0314 	add.w	r3, r7, #20
 80089e8:	4611      	mov	r1, r2
 80089ea:	4618      	mov	r0, r3
 80089ec:	f001 f890 	bl	8009b10 <xTaskCheckForTimeOut>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d124      	bne.n	8008a40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089f8:	f000 faa2 	bl	8008f40 <prvIsQueueFull>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d018      	beq.n	8008a34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	3310      	adds	r3, #16
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 ffb6 	bl	800997c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a12:	f000 fa2d 	bl	8008e70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a16:	f000 fde5 	bl	80095e4 <xTaskResumeAll>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f47f af7c 	bne.w	800891a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a22:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <xQueueGenericSend+0x1f8>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	e772      	b.n	800891a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a36:	f000 fa1b 	bl	8008e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a3a:	f000 fdd3 	bl	80095e4 <xTaskResumeAll>
 8008a3e:	e76c      	b.n	800891a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a42:	f000 fa15 	bl	8008e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a46:	f000 fdcd 	bl	80095e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3738      	adds	r7, #56	; 0x38
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b090      	sub	sp, #64	; 0x40
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <xQueueGenericSendFromISR+0x3c>
 8008a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <xQueueGenericSendFromISR+0x40>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e000      	b.n	8008a9a <xQueueGenericSendFromISR+0x42>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d103      	bne.n	8008ac2 <xQueueGenericSendFromISR+0x6a>
 8008aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <xQueueGenericSendFromISR+0x6e>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueGenericSendFromISR+0x70>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	623b      	str	r3, [r7, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ae2:	f001 ff99 	bl	800aa18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	61fa      	str	r2, [r7, #28]
 8008afc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008afe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d302      	bcc.n	8008b14 <xQueueGenericSendFromISR+0xbc>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d12f      	bne.n	8008b74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b2a:	f000 f911 	bl	8008d50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b36:	d112      	bne.n	8008b5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d016      	beq.n	8008b6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	3324      	adds	r3, #36	; 0x24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 ff69 	bl	8009a1c <xTaskRemoveFromEventList>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00e      	beq.n	8008b6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e007      	b.n	8008b6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b62:	3301      	adds	r3, #1
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	b25a      	sxtb	r2, r3
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b72:	e001      	b.n	8008b78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3740      	adds	r7, #64	; 0x40
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	; 0x30
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <xQueueReceive+0x30>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	623b      	str	r3, [r7, #32]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <xQueueReceive+0x3e>
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <xQueueReceive+0x42>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <xQueueReceive+0x44>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xQueueReceive+0x5e>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	61fb      	str	r3, [r7, #28]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bee:	f001 f8d7 	bl	8009da0 <xTaskGetSchedulerState>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <xQueueReceive+0x6e>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueReceive+0x72>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueReceive+0x74>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10a      	bne.n	8008c1e <xQueueReceive+0x8e>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61bb      	str	r3, [r7, #24]
}
 8008c1a:	bf00      	nop
 8008c1c:	e7fe      	b.n	8008c1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c1e:	f001 fe19 	bl	800a854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01f      	beq.n	8008c6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c32:	f000 f8f7 	bl	8008e24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	1e5a      	subs	r2, r3, #1
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	3310      	adds	r3, #16
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fee6 	bl	8009a1c <xTaskRemoveFromEventList>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c56:	4b3d      	ldr	r3, [pc, #244]	; (8008d4c <xQueueReceive+0x1bc>)
 8008c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c66:	f001 fe25 	bl	800a8b4 <vPortExitCritical>
				return pdPASS;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e069      	b.n	8008d42 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c74:	f001 fe1e 	bl	800a8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e062      	b.n	8008d42 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d106      	bne.n	8008c90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c82:	f107 0310 	add.w	r3, r7, #16
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 ff2c 	bl	8009ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c90:	f001 fe10 	bl	800a8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c94:	f000 fc98 	bl	80095c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c98:	f001 fddc 	bl	800a854 <vPortEnterCritical>
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ca8:	d103      	bne.n	8008cb2 <xQueueReceive+0x122>
 8008caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cbe:	d103      	bne.n	8008cc8 <xQueueReceive+0x138>
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cc8:	f001 fdf4 	bl	800a8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ccc:	1d3a      	adds	r2, r7, #4
 8008cce:	f107 0310 	add.w	r3, r7, #16
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 ff1b 	bl	8009b10 <xTaskCheckForTimeOut>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d123      	bne.n	8008d28 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce2:	f000 f917 	bl	8008f14 <prvIsQueueEmpty>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d017      	beq.n	8008d1c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	3324      	adds	r3, #36	; 0x24
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fe41 	bl	800997c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfc:	f000 f8b8 	bl	8008e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d00:	f000 fc70 	bl	80095e4 <xTaskResumeAll>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d189      	bne.n	8008c1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <xQueueReceive+0x1bc>)
 8008d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	e780      	b.n	8008c1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d1e:	f000 f8a7 	bl	8008e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d22:	f000 fc5f 	bl	80095e4 <xTaskResumeAll>
 8008d26:	e77a      	b.n	8008c1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2a:	f000 f8a1 	bl	8008e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d2e:	f000 fc59 	bl	80095e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d34:	f000 f8ee 	bl	8008f14 <prvIsQueueEmpty>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f43f af6f 	beq.w	8008c1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3730      	adds	r7, #48	; 0x30
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10d      	bne.n	8008d8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d14d      	bne.n	8008e12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 f82e 	bl	8009ddc <xTaskPriorityDisinherit>
 8008d80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	609a      	str	r2, [r3, #8]
 8008d88:	e043      	b.n	8008e12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d119      	bne.n	8008dc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6858      	ldr	r0, [r3, #4]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	f002 ff5c 	bl	800bc58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d32b      	bcc.n	8008e12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	e026      	b.n	8008e12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68d8      	ldr	r0, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	f002 ff42 	bl	800bc58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ddc:	425b      	negs	r3, r3
 8008dde:	441a      	add	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d207      	bcs.n	8008e00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df8:	425b      	negs	r3, r3
 8008dfa:	441a      	add	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d105      	bne.n	8008e12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e1a:	697b      	ldr	r3, [r7, #20]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d018      	beq.n	8008e68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	441a      	add	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d303      	bcc.n	8008e58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68d9      	ldr	r1, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	461a      	mov	r2, r3
 8008e62:	6838      	ldr	r0, [r7, #0]
 8008e64:	f002 fef8 	bl	800bc58 <memcpy>
	}
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e78:	f001 fcec 	bl	800a854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e84:	e011      	b.n	8008eaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d012      	beq.n	8008eb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3324      	adds	r3, #36	; 0x24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fdc2 	bl	8009a1c <xTaskRemoveFromEventList>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e9e:	f000 fe99 	bl	8009bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dce9      	bgt.n	8008e86 <prvUnlockQueue+0x16>
 8008eb2:	e000      	b.n	8008eb6 <prvUnlockQueue+0x46>
					break;
 8008eb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	22ff      	movs	r2, #255	; 0xff
 8008eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ebe:	f001 fcf9 	bl	800a8b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ec2:	f001 fcc7 	bl	800a854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ecc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ece:	e011      	b.n	8008ef4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d012      	beq.n	8008efe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3310      	adds	r3, #16
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fd9d 	bl	8009a1c <xTaskRemoveFromEventList>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ee8:	f000 fe74 	bl	8009bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dce9      	bgt.n	8008ed0 <prvUnlockQueue+0x60>
 8008efc:	e000      	b.n	8008f00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008efe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	22ff      	movs	r2, #255	; 0xff
 8008f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f08:	f001 fcd4 	bl	800a8b4 <vPortExitCritical>
}
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f1c:	f001 fc9a 	bl	800a854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	e001      	b.n	8008f32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f32:	f001 fcbf 	bl	800a8b4 <vPortExitCritical>

	return xReturn;
 8008f36:	68fb      	ldr	r3, [r7, #12]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f48:	f001 fc84 	bl	800a854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d102      	bne.n	8008f5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e001      	b.n	8008f62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f62:	f001 fca7 	bl	800a8b4 <vPortExitCritical>

	return xReturn;
 8008f66:	68fb      	ldr	r3, [r7, #12]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	e014      	b.n	8008faa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f80:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <vQueueAddToRegistry+0x50>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10b      	bne.n	8008fa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f8c:	490c      	ldr	r1, [pc, #48]	; (8008fc0 <vQueueAddToRegistry+0x50>)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f96:	4a0a      	ldr	r2, [pc, #40]	; (8008fc0 <vQueueAddToRegistry+0x50>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fa2:	e006      	b.n	8008fb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	d9e7      	bls.n	8008f80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20000ab0 	.word	0x20000ab0

08008fc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fd4:	f001 fc3e 	bl	800a854 <vPortEnterCritical>
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fde:	b25b      	sxtb	r3, r3
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe4:	d103      	bne.n	8008fee <vQueueWaitForMessageRestricted+0x2a>
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ffa:	d103      	bne.n	8009004 <vQueueWaitForMessageRestricted+0x40>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009004:	f001 fc56 	bl	800a8b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	2b00      	cmp	r3, #0
 800900e:	d106      	bne.n	800901e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	3324      	adds	r3, #36	; 0x24
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fcd3 	bl	80099c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800901e:	6978      	ldr	r0, [r7, #20]
 8009020:	f7ff ff26 	bl	8008e70 <prvUnlockQueue>
	}
 8009024:	bf00      	nop
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08e      	sub	sp, #56	; 0x38
 8009030:	af04      	add	r7, sp, #16
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	623b      	str	r3, [r7, #32]
}
 8009052:	bf00      	nop
 8009054:	e7fe      	b.n	8009054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <xTaskCreateStatic+0x46>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	61fb      	str	r3, [r7, #28]
}
 800906e:	bf00      	nop
 8009070:	e7fe      	b.n	8009070 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009072:	23a8      	movs	r3, #168	; 0xa8
 8009074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	2ba8      	cmp	r3, #168	; 0xa8
 800907a:	d00a      	beq.n	8009092 <xTaskCreateStatic+0x66>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	61bb      	str	r3, [r7, #24]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009092:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01e      	beq.n	80090d8 <xTaskCreateStatic+0xac>
 800909a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01b      	beq.n	80090d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090b2:	2300      	movs	r3, #0
 80090b4:	9303      	str	r3, [sp, #12]
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	9302      	str	r3, [sp, #8]
 80090ba:	f107 0314 	add.w	r3, r7, #20
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 f850 	bl	8009170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090d2:	f000 f8f3 	bl	80092bc <prvAddNewTaskToReadyList>
 80090d6:	e001      	b.n	80090dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090dc:	697b      	ldr	r3, [r7, #20]
	}
 80090de:	4618      	mov	r0, r3
 80090e0:	3728      	adds	r7, #40	; 0x28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b08c      	sub	sp, #48	; 0x30
 80090ea:	af04      	add	r7, sp, #16
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	4613      	mov	r3, r2
 80090f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090f6:	88fb      	ldrh	r3, [r7, #6]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 fccc 	bl	800aa98 <pvPortMalloc>
 8009100:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00e      	beq.n	8009126 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009108:	20a8      	movs	r0, #168	; 0xa8
 800910a:	f001 fcc5 	bl	800aa98 <pvPortMalloc>
 800910e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	631a      	str	r2, [r3, #48]	; 0x30
 800911c:	e005      	b.n	800912a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	f001 fd86 	bl	800ac30 <vPortFree>
 8009124:	e001      	b.n	800912a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d017      	beq.n	8009160 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009138:	88fa      	ldrh	r2, [r7, #6]
 800913a:	2300      	movs	r3, #0
 800913c:	9303      	str	r3, [sp, #12]
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f80e 	bl	8009170 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009154:	69f8      	ldr	r0, [r7, #28]
 8009156:	f000 f8b1 	bl	80092bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800915a:	2301      	movs	r3, #1
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	e002      	b.n	8009166 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009164:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009166:	69bb      	ldr	r3, [r7, #24]
	}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b088      	sub	sp, #32
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	461a      	mov	r2, r3
 8009188:	21a5      	movs	r1, #165	; 0xa5
 800918a:	f002 fc87 	bl	800ba9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009198:	3b01      	subs	r3, #1
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	f023 0307 	bic.w	r3, r3, #7
 80091a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	617b      	str	r3, [r7, #20]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01f      	beq.n	800920e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	e012      	b.n	80091fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	7819      	ldrb	r1, [r3, #0]
 80091dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	3334      	adds	r3, #52	; 0x34
 80091e4:	460a      	mov	r2, r1
 80091e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	4413      	add	r3, r2
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d006      	beq.n	8009202 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	2b0f      	cmp	r3, #15
 80091fe:	d9e9      	bls.n	80091d4 <prvInitialiseNewTask+0x64>
 8009200:	e000      	b.n	8009204 <prvInitialiseNewTask+0x94>
			{
				break;
 8009202:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800920c:	e003      	b.n	8009216 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	2b37      	cmp	r3, #55	; 0x37
 800921a:	d901      	bls.n	8009220 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800921c:	2337      	movs	r3, #55	; 0x37
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009224:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800922a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	2200      	movs	r2, #0
 8009230:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	3304      	adds	r3, #4
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff f978 	bl	800852c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800923c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923e:	3318      	adds	r3, #24
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff f973 	bl	800852c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	2200      	movs	r2, #0
 8009260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	2200      	movs	r2, #0
 8009268:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	3354      	adds	r3, #84	; 0x54
 8009270:	224c      	movs	r2, #76	; 0x4c
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f002 fc11 	bl	800ba9c <memset>
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	4a0c      	ldr	r2, [pc, #48]	; (80092b0 <prvInitialiseNewTask+0x140>)
 800927e:	659a      	str	r2, [r3, #88]	; 0x58
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	4a0c      	ldr	r2, [pc, #48]	; (80092b4 <prvInitialiseNewTask+0x144>)
 8009284:	65da      	str	r2, [r3, #92]	; 0x5c
 8009286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009288:	4a0b      	ldr	r2, [pc, #44]	; (80092b8 <prvInitialiseNewTask+0x148>)
 800928a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	69b8      	ldr	r0, [r7, #24]
 8009292:	f001 f9b3 	bl	800a5fc <pxPortInitialiseStack>
 8009296:	4602      	mov	r2, r0
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092a8:	bf00      	nop
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20010434 	.word	0x20010434
 80092b4:	2001049c 	.word	0x2001049c
 80092b8:	20010504 	.word	0x20010504

080092bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092c4:	f001 fac6 	bl	800a854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092c8:	4b2d      	ldr	r3, [pc, #180]	; (8009380 <prvAddNewTaskToReadyList+0xc4>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3301      	adds	r3, #1
 80092ce:	4a2c      	ldr	r2, [pc, #176]	; (8009380 <prvAddNewTaskToReadyList+0xc4>)
 80092d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092d2:	4b2c      	ldr	r3, [pc, #176]	; (8009384 <prvAddNewTaskToReadyList+0xc8>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092da:	4a2a      	ldr	r2, [pc, #168]	; (8009384 <prvAddNewTaskToReadyList+0xc8>)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092e0:	4b27      	ldr	r3, [pc, #156]	; (8009380 <prvAddNewTaskToReadyList+0xc4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d110      	bne.n	800930a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092e8:	f000 fc98 	bl	8009c1c <prvInitialiseTaskLists>
 80092ec:	e00d      	b.n	800930a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092ee:	4b26      	ldr	r3, [pc, #152]	; (8009388 <prvAddNewTaskToReadyList+0xcc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092f6:	4b23      	ldr	r3, [pc, #140]	; (8009384 <prvAddNewTaskToReadyList+0xc8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009300:	429a      	cmp	r2, r3
 8009302:	d802      	bhi.n	800930a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009304:	4a1f      	ldr	r2, [pc, #124]	; (8009384 <prvAddNewTaskToReadyList+0xc8>)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800930a:	4b20      	ldr	r3, [pc, #128]	; (800938c <prvAddNewTaskToReadyList+0xd0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	4a1e      	ldr	r2, [pc, #120]	; (800938c <prvAddNewTaskToReadyList+0xd0>)
 8009312:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009314:	4b1d      	ldr	r3, [pc, #116]	; (800938c <prvAddNewTaskToReadyList+0xd0>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	4b1b      	ldr	r3, [pc, #108]	; (8009390 <prvAddNewTaskToReadyList+0xd4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d903      	bls.n	8009330 <prvAddNewTaskToReadyList+0x74>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	4a18      	ldr	r2, [pc, #96]	; (8009390 <prvAddNewTaskToReadyList+0xd4>)
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4a15      	ldr	r2, [pc, #84]	; (8009394 <prvAddNewTaskToReadyList+0xd8>)
 800933e:	441a      	add	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3304      	adds	r3, #4
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7ff f8fd 	bl	8008546 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800934c:	f001 fab2 	bl	800a8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <prvAddNewTaskToReadyList+0xcc>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00e      	beq.n	8009376 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009358:	4b0a      	ldr	r3, [pc, #40]	; (8009384 <prvAddNewTaskToReadyList+0xc8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	429a      	cmp	r2, r3
 8009364:	d207      	bcs.n	8009376 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <prvAddNewTaskToReadyList+0xdc>)
 8009368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000fc4 	.word	0x20000fc4
 8009384:	20000af0 	.word	0x20000af0
 8009388:	20000fd0 	.word	0x20000fd0
 800938c:	20000fe0 	.word	0x20000fe0
 8009390:	20000fcc 	.word	0x20000fcc
 8009394:	20000af4 	.word	0x20000af4
 8009398:	e000ed04 	.word	0xe000ed04

0800939c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80093a4:	f001 fa56 	bl	800a854 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <vTaskDelete+0x18>
 80093ae:	4b2c      	ldr	r3, [pc, #176]	; (8009460 <vTaskDelete+0xc4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	e000      	b.n	80093b6 <vTaskDelete+0x1a>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff f91f 	bl	8008600 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3318      	adds	r3, #24
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff f916 	bl	8008600 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80093d4:	4b23      	ldr	r3, [pc, #140]	; (8009464 <vTaskDelete+0xc8>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	4a22      	ldr	r2, [pc, #136]	; (8009464 <vTaskDelete+0xc8>)
 80093dc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80093de:	4b20      	ldr	r3, [pc, #128]	; (8009460 <vTaskDelete+0xc4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d10b      	bne.n	8009400 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	481e      	ldr	r0, [pc, #120]	; (8009468 <vTaskDelete+0xcc>)
 80093f0:	f7ff f8a9 	bl	8008546 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80093f4:	4b1d      	ldr	r3, [pc, #116]	; (800946c <vTaskDelete+0xd0>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	4a1c      	ldr	r2, [pc, #112]	; (800946c <vTaskDelete+0xd0>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	e009      	b.n	8009414 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009400:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <vTaskDelete+0xd4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3b01      	subs	r3, #1
 8009406:	4a1a      	ldr	r2, [pc, #104]	; (8009470 <vTaskDelete+0xd4>)
 8009408:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 fc74 	bl	8009cf8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009410:	f000 fca6 	bl	8009d60 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009414:	f001 fa4e 	bl	800a8b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <vTaskDelete+0xd8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01b      	beq.n	8009458 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <vTaskDelete+0xc4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	429a      	cmp	r2, r3
 8009428:	d116      	bne.n	8009458 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <vTaskDelete+0xdc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <vTaskDelete+0xac>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60bb      	str	r3, [r7, #8]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009448:	4b0c      	ldr	r3, [pc, #48]	; (800947c <vTaskDelete+0xe0>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20000af0 	.word	0x20000af0
 8009464:	20000fe0 	.word	0x20000fe0
 8009468:	20000f98 	.word	0x20000f98
 800946c:	20000fac 	.word	0x20000fac
 8009470:	20000fc4 	.word	0x20000fc4
 8009474:	20000fd0 	.word	0x20000fd0
 8009478:	20000fec 	.word	0x20000fec
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d017      	beq.n	80094c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <vTaskDelay+0x60>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <vTaskDelay+0x30>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	60bb      	str	r3, [r7, #8]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094b0:	f000 f88a 	bl	80095c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094b4:	2100      	movs	r1, #0
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fcfe 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094bc:	f000 f892 	bl	80095e4 <xTaskResumeAll>
 80094c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d107      	bne.n	80094d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094c8:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <vTaskDelay+0x64>)
 80094ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20000fec 	.word	0x20000fec
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	; 0x28
 80094ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094f6:	463a      	mov	r2, r7
 80094f8:	1d39      	adds	r1, r7, #4
 80094fa:	f107 0308 	add.w	r3, r7, #8
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe ffc0 	bl	8008484 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	9202      	str	r2, [sp, #8]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	2300      	movs	r3, #0
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	2300      	movs	r3, #0
 8009514:	460a      	mov	r2, r1
 8009516:	4924      	ldr	r1, [pc, #144]	; (80095a8 <vTaskStartScheduler+0xc0>)
 8009518:	4824      	ldr	r0, [pc, #144]	; (80095ac <vTaskStartScheduler+0xc4>)
 800951a:	f7ff fd87 	bl	800902c <xTaskCreateStatic>
 800951e:	4603      	mov	r3, r0
 8009520:	4a23      	ldr	r2, [pc, #140]	; (80095b0 <vTaskStartScheduler+0xc8>)
 8009522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009524:	4b22      	ldr	r3, [pc, #136]	; (80095b0 <vTaskStartScheduler+0xc8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800952c:	2301      	movs	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
 8009530:	e001      	b.n	8009536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009532:	2300      	movs	r3, #0
 8009534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d102      	bne.n	8009542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800953c:	f000 fd10 	bl	8009f60 <xTimerCreateTimerTask>
 8009540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d11b      	bne.n	8009580 <vTaskStartScheduler+0x98>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	613b      	str	r3, [r7, #16]
}
 800955a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800955c:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <vTaskStartScheduler+0xcc>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3354      	adds	r3, #84	; 0x54
 8009562:	4a15      	ldr	r2, [pc, #84]	; (80095b8 <vTaskStartScheduler+0xd0>)
 8009564:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <vTaskStartScheduler+0xd4>)
 8009568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800956c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800956e:	4b14      	ldr	r3, [pc, #80]	; (80095c0 <vTaskStartScheduler+0xd8>)
 8009570:	2201      	movs	r2, #1
 8009572:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009574:	4b13      	ldr	r3, [pc, #76]	; (80095c4 <vTaskStartScheduler+0xdc>)
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800957a:	f001 f8c9 	bl	800a710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800957e:	e00e      	b.n	800959e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009586:	d10a      	bne.n	800959e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <vTaskStartScheduler+0xb4>
}
 800959e:	bf00      	nop
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	0800bd24 	.word	0x0800bd24
 80095ac:	08009bed 	.word	0x08009bed
 80095b0:	20000fe8 	.word	0x20000fe8
 80095b4:	20000af0 	.word	0x20000af0
 80095b8:	2000005c 	.word	0x2000005c
 80095bc:	20000fe4 	.word	0x20000fe4
 80095c0:	20000fd0 	.word	0x20000fd0
 80095c4:	20000fc8 	.word	0x20000fc8

080095c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095cc:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <vTaskSuspendAll+0x18>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3301      	adds	r3, #1
 80095d2:	4a03      	ldr	r2, [pc, #12]	; (80095e0 <vTaskSuspendAll+0x18>)
 80095d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095d6:	bf00      	nop
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	20000fec 	.word	0x20000fec

080095e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095f2:	4b42      	ldr	r3, [pc, #264]	; (80096fc <xTaskResumeAll+0x118>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <xTaskResumeAll+0x2c>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	603b      	str	r3, [r7, #0]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009610:	f001 f920 	bl	800a854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009614:	4b39      	ldr	r3, [pc, #228]	; (80096fc <xTaskResumeAll+0x118>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3b01      	subs	r3, #1
 800961a:	4a38      	ldr	r2, [pc, #224]	; (80096fc <xTaskResumeAll+0x118>)
 800961c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800961e:	4b37      	ldr	r3, [pc, #220]	; (80096fc <xTaskResumeAll+0x118>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d162      	bne.n	80096ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009626:	4b36      	ldr	r3, [pc, #216]	; (8009700 <xTaskResumeAll+0x11c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d05e      	beq.n	80096ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800962e:	e02f      	b.n	8009690 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	4b34      	ldr	r3, [pc, #208]	; (8009704 <xTaskResumeAll+0x120>)
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3318      	adds	r3, #24
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe ffdf 	bl	8008600 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3304      	adds	r3, #4
 8009646:	4618      	mov	r0, r3
 8009648:	f7fe ffda 	bl	8008600 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4b2d      	ldr	r3, [pc, #180]	; (8009708 <xTaskResumeAll+0x124>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d903      	bls.n	8009660 <xTaskResumeAll+0x7c>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	4a2a      	ldr	r2, [pc, #168]	; (8009708 <xTaskResumeAll+0x124>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4a27      	ldr	r2, [pc, #156]	; (800970c <xTaskResumeAll+0x128>)
 800966e:	441a      	add	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f7fe ff65 	bl	8008546 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	4b23      	ldr	r3, [pc, #140]	; (8009710 <xTaskResumeAll+0x12c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009686:	429a      	cmp	r2, r3
 8009688:	d302      	bcc.n	8009690 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800968a:	4b22      	ldr	r3, [pc, #136]	; (8009714 <xTaskResumeAll+0x130>)
 800968c:	2201      	movs	r2, #1
 800968e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009690:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <xTaskResumeAll+0x120>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1cb      	bne.n	8009630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800969e:	f000 fb5f 	bl	8009d60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <xTaskResumeAll+0x134>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d010      	beq.n	80096d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096ae:	f000 f847 	bl	8009740 <xTaskIncrementTick>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80096b8:	4b16      	ldr	r3, [pc, #88]	; (8009714 <xTaskResumeAll+0x130>)
 80096ba:	2201      	movs	r2, #1
 80096bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1f1      	bne.n	80096ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80096ca:	4b13      	ldr	r3, [pc, #76]	; (8009718 <xTaskResumeAll+0x134>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096d0:	4b10      	ldr	r3, [pc, #64]	; (8009714 <xTaskResumeAll+0x130>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d009      	beq.n	80096ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <xTaskResumeAll+0x138>)
 80096de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	f3bf 8f4f 	dsb	sy
 80096e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ec:	f001 f8e2 	bl	800a8b4 <vPortExitCritical>

	return xAlreadyYielded;
 80096f0:	68bb      	ldr	r3, [r7, #8]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000fec 	.word	0x20000fec
 8009700:	20000fc4 	.word	0x20000fc4
 8009704:	20000f84 	.word	0x20000f84
 8009708:	20000fcc 	.word	0x20000fcc
 800970c:	20000af4 	.word	0x20000af4
 8009710:	20000af0 	.word	0x20000af0
 8009714:	20000fd8 	.word	0x20000fd8
 8009718:	20000fd4 	.word	0x20000fd4
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009726:	4b05      	ldr	r3, [pc, #20]	; (800973c <xTaskGetTickCount+0x1c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800972c:	687b      	ldr	r3, [r7, #4]
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	20000fc8 	.word	0x20000fc8

08009740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800974a:	4b4f      	ldr	r3, [pc, #316]	; (8009888 <xTaskIncrementTick+0x148>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	f040 808f 	bne.w	8009872 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009754:	4b4d      	ldr	r3, [pc, #308]	; (800988c <xTaskIncrementTick+0x14c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800975c:	4a4b      	ldr	r2, [pc, #300]	; (800988c <xTaskIncrementTick+0x14c>)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d120      	bne.n	80097aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009768:	4b49      	ldr	r3, [pc, #292]	; (8009890 <xTaskIncrementTick+0x150>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <xTaskIncrementTick+0x48>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	603b      	str	r3, [r7, #0]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xTaskIncrementTick+0x46>
 8009788:	4b41      	ldr	r3, [pc, #260]	; (8009890 <xTaskIncrementTick+0x150>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	4b41      	ldr	r3, [pc, #260]	; (8009894 <xTaskIncrementTick+0x154>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a3f      	ldr	r2, [pc, #252]	; (8009890 <xTaskIncrementTick+0x150>)
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	4a3f      	ldr	r2, [pc, #252]	; (8009894 <xTaskIncrementTick+0x154>)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	4b3e      	ldr	r3, [pc, #248]	; (8009898 <xTaskIncrementTick+0x158>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	4a3d      	ldr	r2, [pc, #244]	; (8009898 <xTaskIncrementTick+0x158>)
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	f000 fadb 	bl	8009d60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097aa:	4b3c      	ldr	r3, [pc, #240]	; (800989c <xTaskIncrementTick+0x15c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d349      	bcc.n	8009848 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b4:	4b36      	ldr	r3, [pc, #216]	; (8009890 <xTaskIncrementTick+0x150>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097be:	4b37      	ldr	r3, [pc, #220]	; (800989c <xTaskIncrementTick+0x15c>)
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c4:	601a      	str	r2, [r3, #0]
					break;
 80097c6:	e03f      	b.n	8009848 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c8:	4b31      	ldr	r3, [pc, #196]	; (8009890 <xTaskIncrementTick+0x150>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d203      	bcs.n	80097e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097e0:	4a2e      	ldr	r2, [pc, #184]	; (800989c <xTaskIncrementTick+0x15c>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097e6:	e02f      	b.n	8009848 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	3304      	adds	r3, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe ff07 	bl	8008600 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d004      	beq.n	8009804 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	3318      	adds	r3, #24
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fefe 	bl	8008600 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009808:	4b25      	ldr	r3, [pc, #148]	; (80098a0 <xTaskIncrementTick+0x160>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d903      	bls.n	8009818 <xTaskIncrementTick+0xd8>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	4a22      	ldr	r2, [pc, #136]	; (80098a0 <xTaskIncrementTick+0x160>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4a1f      	ldr	r2, [pc, #124]	; (80098a4 <xTaskIncrementTick+0x164>)
 8009826:	441a      	add	r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	3304      	adds	r3, #4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f7fe fe89 	bl	8008546 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <xTaskIncrementTick+0x168>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	429a      	cmp	r2, r3
 8009840:	d3b8      	bcc.n	80097b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009842:	2301      	movs	r3, #1
 8009844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009846:	e7b5      	b.n	80097b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009848:	4b17      	ldr	r3, [pc, #92]	; (80098a8 <xTaskIncrementTick+0x168>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	4915      	ldr	r1, [pc, #84]	; (80098a4 <xTaskIncrementTick+0x164>)
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d901      	bls.n	8009864 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009860:	2301      	movs	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009864:	4b11      	ldr	r3, [pc, #68]	; (80098ac <xTaskIncrementTick+0x16c>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e004      	b.n	800987c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009872:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <xTaskIncrementTick+0x170>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	4a0d      	ldr	r2, [pc, #52]	; (80098b0 <xTaskIncrementTick+0x170>)
 800987a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800987c:	697b      	ldr	r3, [r7, #20]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000fec 	.word	0x20000fec
 800988c:	20000fc8 	.word	0x20000fc8
 8009890:	20000f7c 	.word	0x20000f7c
 8009894:	20000f80 	.word	0x20000f80
 8009898:	20000fdc 	.word	0x20000fdc
 800989c:	20000fe4 	.word	0x20000fe4
 80098a0:	20000fcc 	.word	0x20000fcc
 80098a4:	20000af4 	.word	0x20000af4
 80098a8:	20000af0 	.word	0x20000af0
 80098ac:	20000fd8 	.word	0x20000fd8
 80098b0:	20000fd4 	.word	0x20000fd4

080098b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098ba:	4b2a      	ldr	r3, [pc, #168]	; (8009964 <vTaskSwitchContext+0xb0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098c2:	4b29      	ldr	r3, [pc, #164]	; (8009968 <vTaskSwitchContext+0xb4>)
 80098c4:	2201      	movs	r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098c8:	e046      	b.n	8009958 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80098ca:	4b27      	ldr	r3, [pc, #156]	; (8009968 <vTaskSwitchContext+0xb4>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d0:	4b26      	ldr	r3, [pc, #152]	; (800996c <vTaskSwitchContext+0xb8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	e010      	b.n	80098fa <vTaskSwitchContext+0x46>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	607b      	str	r3, [r7, #4]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <vTaskSwitchContext+0x3e>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	491d      	ldr	r1, [pc, #116]	; (8009970 <vTaskSwitchContext+0xbc>)
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0e4      	beq.n	80098d8 <vTaskSwitchContext+0x24>
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4a15      	ldr	r2, [pc, #84]	; (8009970 <vTaskSwitchContext+0xbc>)
 800991a:	4413      	add	r3, r2
 800991c:	60bb      	str	r3, [r7, #8]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	605a      	str	r2, [r3, #4]
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	3308      	adds	r3, #8
 8009930:	429a      	cmp	r2, r3
 8009932:	d104      	bne.n	800993e <vTaskSwitchContext+0x8a>
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	4a0b      	ldr	r2, [pc, #44]	; (8009974 <vTaskSwitchContext+0xc0>)
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4a08      	ldr	r2, [pc, #32]	; (800996c <vTaskSwitchContext+0xb8>)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <vTaskSwitchContext+0xc0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3354      	adds	r3, #84	; 0x54
 8009954:	4a08      	ldr	r2, [pc, #32]	; (8009978 <vTaskSwitchContext+0xc4>)
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr
 8009964:	20000fec 	.word	0x20000fec
 8009968:	20000fd8 	.word	0x20000fd8
 800996c:	20000fcc 	.word	0x20000fcc
 8009970:	20000af4 	.word	0x20000af4
 8009974:	20000af0 	.word	0x20000af0
 8009978:	2000005c 	.word	0x2000005c

0800997c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	60fb      	str	r3, [r7, #12]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a2:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <vTaskPlaceOnEventList+0x44>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3318      	adds	r3, #24
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7fe fdef 	bl	800858e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099b0:	2101      	movs	r1, #1
 80099b2:	6838      	ldr	r0, [r7, #0]
 80099b4:	f000 fa80 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	20000af0 	.word	0x20000af0

080099c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10a      	bne.n	80099ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	617b      	str	r3, [r7, #20]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ec:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <vTaskPlaceOnEventListRestricted+0x54>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3318      	adds	r3, #24
 80099f2:	4619      	mov	r1, r3
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7fe fda6 	bl	8008546 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	68b8      	ldr	r0, [r7, #8]
 8009a0a:	f000 fa55 	bl	8009eb8 <prvAddCurrentTaskToDelayedList>
	}
 8009a0e:	bf00      	nop
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000af0 	.word	0x20000af0

08009a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	60fb      	str	r3, [r7, #12]
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	3318      	adds	r3, #24
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fdd7 	bl	8008600 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a52:	4b1e      	ldr	r3, [pc, #120]	; (8009acc <xTaskRemoveFromEventList+0xb0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d11d      	bne.n	8009a96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe fdce 	bl	8008600 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <xTaskRemoveFromEventList+0xb4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d903      	bls.n	8009a78 <xTaskRemoveFromEventList+0x5c>
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a74:	4a16      	ldr	r2, [pc, #88]	; (8009ad0 <xTaskRemoveFromEventList+0xb4>)
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a13      	ldr	r2, [pc, #76]	; (8009ad4 <xTaskRemoveFromEventList+0xb8>)
 8009a86:	441a      	add	r2, r3
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe fd59 	bl	8008546 <vListInsertEnd>
 8009a94:	e005      	b.n	8009aa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	3318      	adds	r3, #24
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	480e      	ldr	r0, [pc, #56]	; (8009ad8 <xTaskRemoveFromEventList+0xbc>)
 8009a9e:	f7fe fd52 	bl	8008546 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <xTaskRemoveFromEventList+0xc0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d905      	bls.n	8009abc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ab4:	4b0a      	ldr	r3, [pc, #40]	; (8009ae0 <xTaskRemoveFromEventList+0xc4>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	e001      	b.n	8009ac0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009abc:	2300      	movs	r3, #0
 8009abe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ac0:	697b      	ldr	r3, [r7, #20]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000fec 	.word	0x20000fec
 8009ad0:	20000fcc 	.word	0x20000fcc
 8009ad4:	20000af4 	.word	0x20000af4
 8009ad8:	20000f84 	.word	0x20000f84
 8009adc:	20000af0 	.word	0x20000af0
 8009ae0:	20000fd8 	.word	0x20000fd8

08009ae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009aec:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <vTaskInternalSetTimeOutState+0x24>)
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009af4:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <vTaskInternalSetTimeOutState+0x28>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	605a      	str	r2, [r3, #4]
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	20000fdc 	.word	0x20000fdc
 8009b0c:	20000fc8 	.word	0x20000fc8

08009b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	613b      	str	r3, [r7, #16]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d10a      	bne.n	8009b52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b40:	f383 8811 	msr	BASEPRI, r3
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	f3bf 8f4f 	dsb	sy
 8009b4c:	60fb      	str	r3, [r7, #12]
}
 8009b4e:	bf00      	nop
 8009b50:	e7fe      	b.n	8009b50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b52:	f000 fe7f 	bl	800a854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b56:	4b1d      	ldr	r3, [pc, #116]	; (8009bcc <xTaskCheckForTimeOut+0xbc>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b6e:	d102      	bne.n	8009b76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61fb      	str	r3, [r7, #28]
 8009b74:	e023      	b.n	8009bbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <xTaskCheckForTimeOut+0xc0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d007      	beq.n	8009b92 <xTaskCheckForTimeOut+0x82>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d302      	bcc.n	8009b92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	e015      	b.n	8009bbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d20b      	bcs.n	8009bb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ff9b 	bl	8009ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61fb      	str	r3, [r7, #28]
 8009bb2:	e004      	b.n	8009bbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bbe:	f000 fe79 	bl	800a8b4 <vPortExitCritical>

	return xReturn;
 8009bc2:	69fb      	ldr	r3, [r7, #28]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3720      	adds	r7, #32
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000fc8 	.word	0x20000fc8
 8009bd0:	20000fdc 	.word	0x20000fdc

08009bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bd8:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <vTaskMissedYield+0x14>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
}
 8009bde:	bf00      	nop
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20000fd8 	.word	0x20000fd8

08009bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bf4:	f000 f852 	bl	8009c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf8:	4b06      	ldr	r3, [pc, #24]	; (8009c14 <prvIdleTask+0x28>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d9f9      	bls.n	8009bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c00:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <prvIdleTask+0x2c>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c10:	e7f0      	b.n	8009bf4 <prvIdleTask+0x8>
 8009c12:	bf00      	nop
 8009c14:	20000af4 	.word	0x20000af4
 8009c18:	e000ed04 	.word	0xe000ed04

08009c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c22:	2300      	movs	r3, #0
 8009c24:	607b      	str	r3, [r7, #4]
 8009c26:	e00c      	b.n	8009c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4a12      	ldr	r2, [pc, #72]	; (8009c7c <prvInitialiseTaskLists+0x60>)
 8009c34:	4413      	add	r3, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe fc58 	bl	80084ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b37      	cmp	r3, #55	; 0x37
 8009c46:	d9ef      	bls.n	8009c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c48:	480d      	ldr	r0, [pc, #52]	; (8009c80 <prvInitialiseTaskLists+0x64>)
 8009c4a:	f7fe fc4f 	bl	80084ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c4e:	480d      	ldr	r0, [pc, #52]	; (8009c84 <prvInitialiseTaskLists+0x68>)
 8009c50:	f7fe fc4c 	bl	80084ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c54:	480c      	ldr	r0, [pc, #48]	; (8009c88 <prvInitialiseTaskLists+0x6c>)
 8009c56:	f7fe fc49 	bl	80084ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c5a:	480c      	ldr	r0, [pc, #48]	; (8009c8c <prvInitialiseTaskLists+0x70>)
 8009c5c:	f7fe fc46 	bl	80084ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c60:	480b      	ldr	r0, [pc, #44]	; (8009c90 <prvInitialiseTaskLists+0x74>)
 8009c62:	f7fe fc43 	bl	80084ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <prvInitialiseTaskLists+0x78>)
 8009c68:	4a05      	ldr	r2, [pc, #20]	; (8009c80 <prvInitialiseTaskLists+0x64>)
 8009c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <prvInitialiseTaskLists+0x7c>)
 8009c6e:	4a05      	ldr	r2, [pc, #20]	; (8009c84 <prvInitialiseTaskLists+0x68>)
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000af4 	.word	0x20000af4
 8009c80:	20000f54 	.word	0x20000f54
 8009c84:	20000f68 	.word	0x20000f68
 8009c88:	20000f84 	.word	0x20000f84
 8009c8c:	20000f98 	.word	0x20000f98
 8009c90:	20000fb0 	.word	0x20000fb0
 8009c94:	20000f7c 	.word	0x20000f7c
 8009c98:	20000f80 	.word	0x20000f80

08009c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ca2:	e019      	b.n	8009cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ca4:	f000 fdd6 	bl	800a854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca8:	4b10      	ldr	r3, [pc, #64]	; (8009cec <prvCheckTasksWaitingTermination+0x50>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fca3 	bl	8008600 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <prvCheckTasksWaitingTermination+0x54>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	4a0b      	ldr	r2, [pc, #44]	; (8009cf0 <prvCheckTasksWaitingTermination+0x54>)
 8009cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	4a0a      	ldr	r2, [pc, #40]	; (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cce:	f000 fdf1 	bl	800a8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f810 	bl	8009cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd8:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <prvCheckTasksWaitingTermination+0x58>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e1      	bne.n	8009ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ce0:	bf00      	nop
 8009ce2:	bf00      	nop
 8009ce4:	3708      	adds	r7, #8
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000f98 	.word	0x20000f98
 8009cf0:	20000fc4 	.word	0x20000fc4
 8009cf4:	20000fac 	.word	0x20000fac

08009cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3354      	adds	r3, #84	; 0x54
 8009d04:	4618      	mov	r0, r3
 8009d06:	f001 fed1 	bl	800baac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 ff89 	bl	800ac30 <vPortFree>
				vPortFree( pxTCB );
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 ff86 	bl	800ac30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d24:	e018      	b.n	8009d58 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d103      	bne.n	8009d38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 ff7d 	bl	800ac30 <vPortFree>
	}
 8009d36:	e00f      	b.n	8009d58 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d00a      	beq.n	8009d58 <prvDeleteTCB+0x60>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	60fb      	str	r3, [r7, #12]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <prvDeleteTCB+0x5e>
	}
 8009d58:	bf00      	nop
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d66:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <prvResetNextTaskUnblockTime+0x38>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d70:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <prvResetNextTaskUnblockTime+0x3c>)
 8009d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d78:	e008      	b.n	8009d8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7a:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <prvResetNextTaskUnblockTime+0x38>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <prvResetNextTaskUnblockTime+0x3c>)
 8009d8a:	6013      	str	r3, [r2, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr
 8009d98:	20000f7c 	.word	0x20000f7c
 8009d9c:	20000fe4 	.word	0x20000fe4

08009da0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <xTaskGetSchedulerState+0x34>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dae:	2301      	movs	r3, #1
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	e008      	b.n	8009dc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009db4:	4b08      	ldr	r3, [pc, #32]	; (8009dd8 <xTaskGetSchedulerState+0x38>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	607b      	str	r3, [r7, #4]
 8009dc0:	e001      	b.n	8009dc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dc6:	687b      	ldr	r3, [r7, #4]
	}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	20000fd0 	.word	0x20000fd0
 8009dd8:	20000fec 	.word	0x20000fec

08009ddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d056      	beq.n	8009ea0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009df2:	4b2e      	ldr	r3, [pc, #184]	; (8009eac <xTaskPriorityDisinherit+0xd0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d00a      	beq.n	8009e12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60fb      	str	r3, [r7, #12]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	60bb      	str	r3, [r7, #8]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e34:	1e5a      	subs	r2, r3, #1
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d02c      	beq.n	8009ea0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d128      	bne.n	8009ea0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fbd4 	bl	8008600 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <xTaskPriorityDisinherit+0xd4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d903      	bls.n	8009e80 <xTaskPriorityDisinherit+0xa4>
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	4a0c      	ldr	r2, [pc, #48]	; (8009eb0 <xTaskPriorityDisinherit+0xd4>)
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4a09      	ldr	r2, [pc, #36]	; (8009eb4 <xTaskPriorityDisinherit+0xd8>)
 8009e8e:	441a      	add	r2, r3
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4619      	mov	r1, r3
 8009e96:	4610      	mov	r0, r2
 8009e98:	f7fe fb55 	bl	8008546 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ea0:	697b      	ldr	r3, [r7, #20]
	}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000af0 	.word	0x20000af0
 8009eb0:	20000fcc 	.word	0x20000fcc
 8009eb4:	20000af4 	.word	0x20000af4

08009eb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ec2:	4b21      	ldr	r3, [pc, #132]	; (8009f48 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ec8:	4b20      	ldr	r3, [pc, #128]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fb96 	bl	8008600 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eda:	d10a      	bne.n	8009ef2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ee2:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4819      	ldr	r0, [pc, #100]	; (8009f50 <prvAddCurrentTaskToDelayedList+0x98>)
 8009eec:	f7fe fb2b 	bl	8008546 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ef0:	e026      	b.n	8009f40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009efa:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d209      	bcs.n	8009f1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f0a:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fe fb39 	bl	800858e <vListInsert>
}
 8009f1c:	e010      	b.n	8009f40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f1e:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3304      	adds	r3, #4
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	f7fe fb2f 	bl	800858e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d202      	bcs.n	8009f40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f3a:	4a08      	ldr	r2, [pc, #32]	; (8009f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6013      	str	r3, [r2, #0]
}
 8009f40:	bf00      	nop
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	20000fc8 	.word	0x20000fc8
 8009f4c:	20000af0 	.word	0x20000af0
 8009f50:	20000fb0 	.word	0x20000fb0
 8009f54:	20000f80 	.word	0x20000f80
 8009f58:	20000f7c 	.word	0x20000f7c
 8009f5c:	20000fe4 	.word	0x20000fe4

08009f60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f6a:	f000 fb07 	bl	800a57c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f6e:	4b1c      	ldr	r3, [pc, #112]	; (8009fe0 <xTimerCreateTimerTask+0x80>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d021      	beq.n	8009fba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f7e:	1d3a      	adds	r2, r7, #4
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	f107 030c 	add.w	r3, r7, #12
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe fa95 	bl	80084b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f8e:	6879      	ldr	r1, [r7, #4]
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	9202      	str	r2, [sp, #8]
 8009f96:	9301      	str	r3, [sp, #4]
 8009f98:	2302      	movs	r3, #2
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	460a      	mov	r2, r1
 8009fa0:	4910      	ldr	r1, [pc, #64]	; (8009fe4 <xTimerCreateTimerTask+0x84>)
 8009fa2:	4811      	ldr	r0, [pc, #68]	; (8009fe8 <xTimerCreateTimerTask+0x88>)
 8009fa4:	f7ff f842 	bl	800902c <xTaskCreateStatic>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	4a10      	ldr	r2, [pc, #64]	; (8009fec <xTimerCreateTimerTask+0x8c>)
 8009fac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <xTimerCreateTimerTask+0x8c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	613b      	str	r3, [r7, #16]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009fd6:	697b      	ldr	r3, [r7, #20]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20001020 	.word	0x20001020
 8009fe4:	0800bd2c 	.word	0x0800bd2c
 8009fe8:	0800a125 	.word	0x0800a125
 8009fec:	20001024 	.word	0x20001024

08009ff0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	623b      	str	r3, [r7, #32]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a01e:	4b1a      	ldr	r3, [pc, #104]	; (800a088 <xTimerGenericCommand+0x98>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d02a      	beq.n	800a07c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b05      	cmp	r3, #5
 800a036:	dc18      	bgt.n	800a06a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a038:	f7ff feb2 	bl	8009da0 <xTaskGetSchedulerState>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d109      	bne.n	800a056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a042:	4b11      	ldr	r3, [pc, #68]	; (800a088 <xTimerGenericCommand+0x98>)
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	f107 0110 	add.w	r1, r7, #16
 800a04a:	2300      	movs	r3, #0
 800a04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04e:	f7fe fc05 	bl	800885c <xQueueGenericSend>
 800a052:	6278      	str	r0, [r7, #36]	; 0x24
 800a054:	e012      	b.n	800a07c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a056:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <xTimerGenericCommand+0x98>)
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f107 0110 	add.w	r1, r7, #16
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	f7fe fbfb 	bl	800885c <xQueueGenericSend>
 800a066:	6278      	str	r0, [r7, #36]	; 0x24
 800a068:	e008      	b.n	800a07c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <xTimerGenericCommand+0x98>)
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f107 0110 	add.w	r1, r7, #16
 800a072:	2300      	movs	r3, #0
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	f7fe fcef 	bl	8008a58 <xQueueGenericSendFromISR>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3728      	adds	r7, #40	; 0x28
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20001020 	.word	0x20001020

0800a08c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a096:	4b22      	ldr	r3, [pc, #136]	; (800a120 <prvProcessExpiredTimer+0x94>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe faab 	bl	8008600 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d022      	beq.n	800a0fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	18d1      	adds	r1, r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	6978      	ldr	r0, [r7, #20]
 800a0c6:	f000 f8d1 	bl	800a26c <prvInsertTimerInActiveList>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01f      	beq.n	800a110 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6978      	ldr	r0, [r7, #20]
 800a0dc:	f7ff ff88 	bl	8009ff0 <xTimerGenericCommand>
 800a0e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d113      	bne.n	800a110 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	60fb      	str	r3, [r7, #12]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a104:	f023 0301 	bic.w	r3, r3, #1
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	6978      	ldr	r0, [r7, #20]
 800a116:	4798      	blx	r3
}
 800a118:	bf00      	nop
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	20001018 	.word	0x20001018

0800a124 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a12c:	f107 0308 	add.w	r3, r7, #8
 800a130:	4618      	mov	r0, r3
 800a132:	f000 f857 	bl	800a1e4 <prvGetNextExpireTime>
 800a136:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	4619      	mov	r1, r3
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f803 	bl	800a148 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a142:	f000 f8d5 	bl	800a2f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a146:	e7f1      	b.n	800a12c <prvTimerTask+0x8>

0800a148 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a152:	f7ff fa39 	bl	80095c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a156:	f107 0308 	add.w	r3, r7, #8
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 f866 	bl	800a22c <prvSampleTimeNow>
 800a160:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d130      	bne.n	800a1ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <prvProcessTimerOrBlockTask+0x3c>
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	429a      	cmp	r2, r3
 800a174:	d806      	bhi.n	800a184 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a176:	f7ff fa35 	bl	80095e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a17a:	68f9      	ldr	r1, [r7, #12]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff ff85 	bl	800a08c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a182:	e024      	b.n	800a1ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d008      	beq.n	800a19c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a18a:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <prvProcessTimerOrBlockTask+0x90>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <prvProcessTimerOrBlockTask+0x50>
 800a194:	2301      	movs	r3, #1
 800a196:	e000      	b.n	800a19a <prvProcessTimerOrBlockTask+0x52>
 800a198:	2300      	movs	r3, #0
 800a19a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a19c:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <prvProcessTimerOrBlockTask+0x94>)
 800a19e:	6818      	ldr	r0, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	f7fe ff0b 	bl	8008fc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a1ae:	f7ff fa19 	bl	80095e4 <xTaskResumeAll>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a1b8:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <prvProcessTimerOrBlockTask+0x98>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
}
 800a1c8:	e001      	b.n	800a1ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a1ca:	f7ff fa0b 	bl	80095e4 <xTaskResumeAll>
}
 800a1ce:	bf00      	nop
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2000101c 	.word	0x2000101c
 800a1dc:	20001020 	.word	0x20001020
 800a1e0:	e000ed04 	.word	0xe000ed04

0800a1e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a1ec:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <prvGetNextExpireTime+0x44>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <prvGetNextExpireTime+0x16>
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	e000      	b.n	800a1fc <prvGetNextExpireTime+0x18>
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a208:	4b07      	ldr	r3, [pc, #28]	; (800a228 <prvGetNextExpireTime+0x44>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	e001      	b.n	800a218 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	20001018 	.word	0x20001018

0800a22c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a234:	f7ff fa74 	bl	8009720 <xTaskGetTickCount>
 800a238:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a23a:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <prvSampleTimeNow+0x3c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	429a      	cmp	r2, r3
 800a242:	d205      	bcs.n	800a250 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a244:	f000 f936 	bl	800a4b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e002      	b.n	800a256 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a256:	4a04      	ldr	r2, [pc, #16]	; (800a268 <prvSampleTimeNow+0x3c>)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20001028 	.word	0x20001028

0800a26c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d812      	bhi.n	800a2b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	1ad2      	subs	r2, r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d302      	bcc.n	800a2a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	e01b      	b.n	800a2de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2a6:	4b10      	ldr	r3, [pc, #64]	; (800a2e8 <prvInsertTimerInActiveList+0x7c>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	f7fe f96c 	bl	800858e <vListInsert>
 800a2b6:	e012      	b.n	800a2de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d206      	bcs.n	800a2ce <prvInsertTimerInActiveList+0x62>
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d302      	bcc.n	800a2ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e007      	b.n	800a2de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2ce:	4b07      	ldr	r3, [pc, #28]	; (800a2ec <prvInsertTimerInActiveList+0x80>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	4610      	mov	r0, r2
 800a2da:	f7fe f958 	bl	800858e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a2de:	697b      	ldr	r3, [r7, #20]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	2000101c 	.word	0x2000101c
 800a2ec:	20001018 	.word	0x20001018

0800a2f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08e      	sub	sp, #56	; 0x38
 800a2f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2f6:	e0ca      	b.n	800a48e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da18      	bge.n	800a330 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a2fe:	1d3b      	adds	r3, r7, #4
 800a300:	3304      	adds	r3, #4
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d10a      	bne.n	800a320 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	61fb      	str	r3, [r7, #28]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a326:	6850      	ldr	r0, [r2, #4]
 800a328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a32a:	6892      	ldr	r2, [r2, #8]
 800a32c:	4611      	mov	r1, r2
 800a32e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f2c0 80ab 	blt.w	800a48e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	3304      	adds	r3, #4
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fe f959 	bl	8008600 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a34e:	463b      	mov	r3, r7
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff ff6b 	bl	800a22c <prvSampleTimeNow>
 800a356:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b09      	cmp	r3, #9
 800a35c:	f200 8096 	bhi.w	800a48c <prvProcessReceivedCommands+0x19c>
 800a360:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <prvProcessReceivedCommands+0x78>)
 800a362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a366:	bf00      	nop
 800a368:	0800a391 	.word	0x0800a391
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a391 	.word	0x0800a391
 800a374:	0800a405 	.word	0x0800a405
 800a378:	0800a419 	.word	0x0800a419
 800a37c:	0800a463 	.word	0x0800a463
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a391 	.word	0x0800a391
 800a388:	0800a405 	.word	0x0800a405
 800a38c:	0800a419 	.word	0x0800a419
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a396:	f043 0301 	orr.w	r3, r3, #1
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	18d1      	adds	r1, r2, r3
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b0:	f7ff ff5c 	bl	800a26c <prvInsertTimerInActiveList>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d069      	beq.n	800a48e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d05e      	beq.n	800a48e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	441a      	add	r2, r3
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e2:	f7ff fe05 	bl	8009ff0 <xTimerGenericCommand>
 800a3e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d14f      	bne.n	800a48e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	61bb      	str	r3, [r7, #24]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a40a:	f023 0301 	bic.w	r3, r3, #1
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a416:	e03a      	b.n	800a48e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a41e:	f043 0301 	orr.w	r3, r3, #1
 800a422:	b2da      	uxtb	r2, r3
 800a424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	617b      	str	r3, [r7, #20]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	699a      	ldr	r2, [r3, #24]
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	18d1      	adds	r1, r2, r3
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a45c:	f7ff ff06 	bl	800a26c <prvInsertTimerInActiveList>
					break;
 800a460:	e015      	b.n	800a48e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d103      	bne.n	800a478 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a472:	f000 fbdd 	bl	800ac30 <vPortFree>
 800a476:	e00a      	b.n	800a48e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a47e:	f023 0301 	bic.w	r3, r3, #1
 800a482:	b2da      	uxtb	r2, r3
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a48a:	e000      	b.n	800a48e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a48c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a48e:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <prvProcessReceivedCommands+0x1c0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1d39      	adds	r1, r7, #4
 800a494:	2200      	movs	r2, #0
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fb7a 	bl	8008b90 <xQueueReceive>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f47f af2a 	bne.w	800a2f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop
 800a4a8:	3730      	adds	r7, #48	; 0x30
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20001020 	.word	0x20001020

0800a4b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4ba:	e048      	b.n	800a54e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4bc:	4b2d      	ldr	r3, [pc, #180]	; (800a574 <prvSwitchTimerLists+0xc0>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c6:	4b2b      	ldr	r3, [pc, #172]	; (800a574 <prvSwitchTimerLists+0xc0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe f893 	bl	8008600 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d02e      	beq.n	800a54e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d90e      	bls.n	800a520 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a50e:	4b19      	ldr	r3, [pc, #100]	; (800a574 <prvSwitchTimerLists+0xc0>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f7fe f838 	bl	800858e <vListInsert>
 800a51e:	e016      	b.n	800a54e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a520:	2300      	movs	r3, #0
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	2300      	movs	r3, #0
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	2100      	movs	r1, #0
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7ff fd60 	bl	8009ff0 <xTimerGenericCommand>
 800a530:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	603b      	str	r3, [r7, #0]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a54e:	4b09      	ldr	r3, [pc, #36]	; (800a574 <prvSwitchTimerLists+0xc0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1b1      	bne.n	800a4bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a558:	4b06      	ldr	r3, [pc, #24]	; (800a574 <prvSwitchTimerLists+0xc0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <prvSwitchTimerLists+0xc4>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a04      	ldr	r2, [pc, #16]	; (800a574 <prvSwitchTimerLists+0xc0>)
 800a564:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a566:	4a04      	ldr	r2, [pc, #16]	; (800a578 <prvSwitchTimerLists+0xc4>)
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	6013      	str	r3, [r2, #0]
}
 800a56c:	bf00      	nop
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	20001018 	.word	0x20001018
 800a578:	2000101c 	.word	0x2000101c

0800a57c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a582:	f000 f967 	bl	800a854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <prvCheckForValidListAndQueue+0x60>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d120      	bne.n	800a5d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a58e:	4814      	ldr	r0, [pc, #80]	; (800a5e0 <prvCheckForValidListAndQueue+0x64>)
 800a590:	f7fd ffac 	bl	80084ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a594:	4813      	ldr	r0, [pc, #76]	; (800a5e4 <prvCheckForValidListAndQueue+0x68>)
 800a596:	f7fd ffa9 	bl	80084ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a59a:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <prvCheckForValidListAndQueue+0x6c>)
 800a59c:	4a10      	ldr	r2, [pc, #64]	; (800a5e0 <prvCheckForValidListAndQueue+0x64>)
 800a59e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a5a0:	4b12      	ldr	r3, [pc, #72]	; (800a5ec <prvCheckForValidListAndQueue+0x70>)
 800a5a2:	4a10      	ldr	r2, [pc, #64]	; (800a5e4 <prvCheckForValidListAndQueue+0x68>)
 800a5a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	4b11      	ldr	r3, [pc, #68]	; (800a5f0 <prvCheckForValidListAndQueue+0x74>)
 800a5ac:	4a11      	ldr	r2, [pc, #68]	; (800a5f4 <prvCheckForValidListAndQueue+0x78>)
 800a5ae:	2110      	movs	r1, #16
 800a5b0:	200a      	movs	r0, #10
 800a5b2:	f7fe f8b7 	bl	8008724 <xQueueGenericCreateStatic>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4a08      	ldr	r2, [pc, #32]	; (800a5dc <prvCheckForValidListAndQueue+0x60>)
 800a5ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a5bc:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <prvCheckForValidListAndQueue+0x60>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d005      	beq.n	800a5d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5c4:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <prvCheckForValidListAndQueue+0x60>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	490b      	ldr	r1, [pc, #44]	; (800a5f8 <prvCheckForValidListAndQueue+0x7c>)
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe fcd0 	bl	8008f70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5d0:	f000 f970 	bl	800a8b4 <vPortExitCritical>
}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20001020 	.word	0x20001020
 800a5e0:	20000ff0 	.word	0x20000ff0
 800a5e4:	20001004 	.word	0x20001004
 800a5e8:	20001018 	.word	0x20001018
 800a5ec:	2000101c 	.word	0x2000101c
 800a5f0:	200010cc 	.word	0x200010cc
 800a5f4:	2000102c 	.word	0x2000102c
 800a5f8:	0800bd34 	.word	0x0800bd34

0800a5fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3b04      	subs	r3, #4
 800a60c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3b04      	subs	r3, #4
 800a61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f023 0201 	bic.w	r2, r3, #1
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3b04      	subs	r3, #4
 800a62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a62c:	4a0c      	ldr	r2, [pc, #48]	; (800a660 <pxPortInitialiseStack+0x64>)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3b14      	subs	r3, #20
 800a636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3b04      	subs	r3, #4
 800a642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f06f 0202 	mvn.w	r2, #2
 800a64a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3b20      	subs	r3, #32
 800a650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	0800a665 	.word	0x0800a665

0800a664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a66e:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <prvTaskExitError+0x54>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a676:	d00a      	beq.n	800a68e <prvTaskExitError+0x2a>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	60fb      	str	r3, [r7, #12]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <prvTaskExitError+0x28>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	60bb      	str	r3, [r7, #8]
}
 800a6a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6a2:	bf00      	nop
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d0fc      	beq.n	800a6a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	2000000c 	.word	0x2000000c
 800a6bc:	00000000 	.word	0x00000000

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f3af 8000 	nop.w

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6e8:	4808      	ldr	r0, [pc, #32]	; (800a70c <prvPortStartFirstTask+0x24>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	f04f 0000 	mov.w	r0, #0
 800a6f6:	f380 8814 	msr	CONTROL, r0
 800a6fa:	b662      	cpsie	i
 800a6fc:	b661      	cpsie	f
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	df00      	svc	0
 800a708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a70a:	bf00      	nop
 800a70c:	e000ed08 	.word	0xe000ed08

0800a710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a716:	4b46      	ldr	r3, [pc, #280]	; (800a830 <xPortStartScheduler+0x120>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a46      	ldr	r2, [pc, #280]	; (800a834 <xPortStartScheduler+0x124>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d10a      	bne.n	800a736 <xPortStartScheduler+0x26>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a736:	4b3e      	ldr	r3, [pc, #248]	; (800a830 <xPortStartScheduler+0x120>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a3f      	ldr	r2, [pc, #252]	; (800a838 <xPortStartScheduler+0x128>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d10a      	bne.n	800a756 <xPortStartScheduler+0x46>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	60fb      	str	r3, [r7, #12]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a756:	4b39      	ldr	r3, [pc, #228]	; (800a83c <xPortStartScheduler+0x12c>)
 800a758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	22ff      	movs	r2, #255	; 0xff
 800a766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	4b31      	ldr	r3, [pc, #196]	; (800a840 <xPortStartScheduler+0x130>)
 800a77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a77e:	4b31      	ldr	r3, [pc, #196]	; (800a844 <xPortStartScheduler+0x134>)
 800a780:	2207      	movs	r2, #7
 800a782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a784:	e009      	b.n	800a79a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a786:	4b2f      	ldr	r3, [pc, #188]	; (800a844 <xPortStartScheduler+0x134>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	4a2d      	ldr	r2, [pc, #180]	; (800a844 <xPortStartScheduler+0x134>)
 800a78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	b2db      	uxtb	r3, r3
 800a798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d0ef      	beq.n	800a786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7a6:	4b27      	ldr	r3, [pc, #156]	; (800a844 <xPortStartScheduler+0x134>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f1c3 0307 	rsb	r3, r3, #7
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d00a      	beq.n	800a7c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60bb      	str	r3, [r7, #8]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7c8:	4b1e      	ldr	r3, [pc, #120]	; (800a844 <xPortStartScheduler+0x134>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	021b      	lsls	r3, r3, #8
 800a7ce:	4a1d      	ldr	r2, [pc, #116]	; (800a844 <xPortStartScheduler+0x134>)
 800a7d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7d2:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <xPortStartScheduler+0x134>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7da:	4a1a      	ldr	r2, [pc, #104]	; (800a844 <xPortStartScheduler+0x134>)
 800a7dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7e6:	4b18      	ldr	r3, [pc, #96]	; (800a848 <xPortStartScheduler+0x138>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a17      	ldr	r2, [pc, #92]	; (800a848 <xPortStartScheduler+0x138>)
 800a7ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7f2:	4b15      	ldr	r3, [pc, #84]	; (800a848 <xPortStartScheduler+0x138>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a14      	ldr	r2, [pc, #80]	; (800a848 <xPortStartScheduler+0x138>)
 800a7f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a7fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7fe:	f000 f8dd 	bl	800a9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a802:	4b12      	ldr	r3, [pc, #72]	; (800a84c <xPortStartScheduler+0x13c>)
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a808:	f000 f8fc 	bl	800aa04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a80c:	4b10      	ldr	r3, [pc, #64]	; (800a850 <xPortStartScheduler+0x140>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a0f      	ldr	r2, [pc, #60]	; (800a850 <xPortStartScheduler+0x140>)
 800a812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a818:	f7ff ff66 	bl	800a6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a81c:	f7ff f84a 	bl	80098b4 <vTaskSwitchContext>
	prvTaskExitError();
 800a820:	f7ff ff20 	bl	800a664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	e000ed00 	.word	0xe000ed00
 800a834:	410fc271 	.word	0x410fc271
 800a838:	410fc270 	.word	0x410fc270
 800a83c:	e000e400 	.word	0xe000e400
 800a840:	2000111c 	.word	0x2000111c
 800a844:	20001120 	.word	0x20001120
 800a848:	e000ed20 	.word	0xe000ed20
 800a84c:	2000000c 	.word	0x2000000c
 800a850:	e000ef34 	.word	0xe000ef34

0800a854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	607b      	str	r3, [r7, #4]
}
 800a86c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a86e:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <vPortEnterCritical+0x58>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	4a0d      	ldr	r2, [pc, #52]	; (800a8ac <vPortEnterCritical+0x58>)
 800a876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a878:	4b0c      	ldr	r3, [pc, #48]	; (800a8ac <vPortEnterCritical+0x58>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d10f      	bne.n	800a8a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a880:	4b0b      	ldr	r3, [pc, #44]	; (800a8b0 <vPortEnterCritical+0x5c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	603b      	str	r3, [r7, #0]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <vPortEnterCritical+0x4a>
	}
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	2000000c 	.word	0x2000000c
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8ba:	4b12      	ldr	r3, [pc, #72]	; (800a904 <vPortExitCritical+0x50>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <vPortExitCritical+0x24>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	607b      	str	r3, [r7, #4]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <vPortExitCritical+0x50>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	4a09      	ldr	r2, [pc, #36]	; (800a904 <vPortExitCritical+0x50>)
 800a8e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8e2:	4b08      	ldr	r3, [pc, #32]	; (800a904 <vPortExitCritical+0x50>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d105      	bne.n	800a8f6 <vPortExitCritical+0x42>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	f383 8811 	msr	BASEPRI, r3
}
 800a8f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8f6:	bf00      	nop
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	2000000c 	.word	0x2000000c
	...

0800a910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a910:	f3ef 8009 	mrs	r0, PSP
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	4b15      	ldr	r3, [pc, #84]	; (800a970 <pxCurrentTCBConst>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	f01e 0f10 	tst.w	lr, #16
 800a920:	bf08      	it	eq
 800a922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	6010      	str	r0, [r2, #0]
 800a92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a934:	f380 8811 	msr	BASEPRI, r0
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f7fe ffb8 	bl	80098b4 <vTaskSwitchContext>
 800a944:	f04f 0000 	mov.w	r0, #0
 800a948:	f380 8811 	msr	BASEPRI, r0
 800a94c:	bc09      	pop	{r0, r3}
 800a94e:	6819      	ldr	r1, [r3, #0]
 800a950:	6808      	ldr	r0, [r1, #0]
 800a952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a956:	f01e 0f10 	tst.w	lr, #16
 800a95a:	bf08      	it	eq
 800a95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a960:	f380 8809 	msr	PSP, r0
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	f3af 8000 	nop.w

0800a970 <pxCurrentTCBConst>:
 800a970:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop

0800a978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	607b      	str	r3, [r7, #4]
}
 800a990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a992:	f7fe fed5 	bl	8009740 <xTaskIncrementTick>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a99c:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <xPortSysTickHandler+0x40>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f383 8811 	msr	BASEPRI, r3
}
 800a9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	; (800a9f4 <vPortSetupTimerInterrupt+0x38>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <vPortSetupTimerInterrupt+0x3c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a0a      	ldr	r2, [pc, #40]	; (800a9fc <vPortSetupTimerInterrupt+0x40>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	099b      	lsrs	r3, r3, #6
 800a9d8:	4a09      	ldr	r2, [pc, #36]	; (800aa00 <vPortSetupTimerInterrupt+0x44>)
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9de:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	e000e010 	.word	0xe000e010
 800a9f4:	e000e018 	.word	0xe000e018
 800a9f8:	20000000 	.word	0x20000000
 800a9fc:	10624dd3 	.word	0x10624dd3
 800aa00:	e000e014 	.word	0xe000e014

0800aa04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa14 <vPortEnableVFP+0x10>
 800aa08:	6801      	ldr	r1, [r0, #0]
 800aa0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa0e:	6001      	str	r1, [r0, #0]
 800aa10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa12:	bf00      	nop
 800aa14:	e000ed88 	.word	0xe000ed88

0800aa18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa1e:	f3ef 8305 	mrs	r3, IPSR
 800aa22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b0f      	cmp	r3, #15
 800aa28:	d914      	bls.n	800aa54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa2a:	4a17      	ldr	r2, [pc, #92]	; (800aa88 <vPortValidateInterruptPriority+0x70>)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa34:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <vPortValidateInterruptPriority+0x74>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	7afa      	ldrb	r2, [r7, #11]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d20a      	bcs.n	800aa54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <vPortValidateInterruptPriority+0x78>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aa5c:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <vPortValidateInterruptPriority+0x7c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d90a      	bls.n	800aa7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	603b      	str	r3, [r7, #0]
}
 800aa76:	bf00      	nop
 800aa78:	e7fe      	b.n	800aa78 <vPortValidateInterruptPriority+0x60>
	}
 800aa7a:	bf00      	nop
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	e000e3f0 	.word	0xe000e3f0
 800aa8c:	2000111c 	.word	0x2000111c
 800aa90:	e000ed0c 	.word	0xe000ed0c
 800aa94:	20001120 	.word	0x20001120

0800aa98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	; 0x28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aaa4:	f7fe fd90 	bl	80095c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aaa8:	4b5b      	ldr	r3, [pc, #364]	; (800ac18 <pvPortMalloc+0x180>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aab0:	f000 f920 	bl	800acf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aab4:	4b59      	ldr	r3, [pc, #356]	; (800ac1c <pvPortMalloc+0x184>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4013      	ands	r3, r2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f040 8093 	bne.w	800abe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d01d      	beq.n	800ab04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aac8:	2208      	movs	r2, #8
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4413      	add	r3, r2
 800aace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f003 0307 	and.w	r3, r3, #7
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d014      	beq.n	800ab04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f023 0307 	bic.w	r3, r3, #7
 800aae0:	3308      	adds	r3, #8
 800aae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f003 0307 	and.w	r3, r3, #7
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <pvPortMalloc+0x6c>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	617b      	str	r3, [r7, #20]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d06e      	beq.n	800abe8 <pvPortMalloc+0x150>
 800ab0a:	4b45      	ldr	r3, [pc, #276]	; (800ac20 <pvPortMalloc+0x188>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d869      	bhi.n	800abe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab14:	4b43      	ldr	r3, [pc, #268]	; (800ac24 <pvPortMalloc+0x18c>)
 800ab16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab18:	4b42      	ldr	r3, [pc, #264]	; (800ac24 <pvPortMalloc+0x18c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab1e:	e004      	b.n	800ab2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d903      	bls.n	800ab3c <pvPortMalloc+0xa4>
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f1      	bne.n	800ab20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab3c:	4b36      	ldr	r3, [pc, #216]	; (800ac18 <pvPortMalloc+0x180>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d050      	beq.n	800abe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2208      	movs	r2, #8
 800ab4c:	4413      	add	r3, r2
 800ab4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	6a3b      	ldr	r3, [r7, #32]
 800ab56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	1ad2      	subs	r2, r2, r3
 800ab60:	2308      	movs	r3, #8
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d91f      	bls.n	800aba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ab68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00a      	beq.n	800ab90 <pvPortMalloc+0xf8>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	613b      	str	r3, [r7, #16]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	1ad2      	subs	r2, r2, r3
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aba2:	69b8      	ldr	r0, [r7, #24]
 800aba4:	f000 f908 	bl	800adb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aba8:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <pvPortMalloc+0x188>)
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	4a1b      	ldr	r2, [pc, #108]	; (800ac20 <pvPortMalloc+0x188>)
 800abb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800abb6:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <pvPortMalloc+0x188>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <pvPortMalloc+0x190>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d203      	bcs.n	800abca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800abc2:	4b17      	ldr	r3, [pc, #92]	; (800ac20 <pvPortMalloc+0x188>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a18      	ldr	r2, [pc, #96]	; (800ac28 <pvPortMalloc+0x190>)
 800abc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	4b13      	ldr	r3, [pc, #76]	; (800ac1c <pvPortMalloc+0x184>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	431a      	orrs	r2, r3
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800abde:	4b13      	ldr	r3, [pc, #76]	; (800ac2c <pvPortMalloc+0x194>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a11      	ldr	r2, [pc, #68]	; (800ac2c <pvPortMalloc+0x194>)
 800abe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800abe8:	f7fe fcfc 	bl	80095e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <pvPortMalloc+0x174>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	60fb      	str	r3, [r7, #12]
}
 800ac08:	bf00      	nop
 800ac0a:	e7fe      	b.n	800ac0a <pvPortMalloc+0x172>
	return pvReturn;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3728      	adds	r7, #40	; 0x28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	2001012c 	.word	0x2001012c
 800ac1c:	20010140 	.word	0x20010140
 800ac20:	20010130 	.word	0x20010130
 800ac24:	20010124 	.word	0x20010124
 800ac28:	20010134 	.word	0x20010134
 800ac2c:	20010138 	.word	0x20010138

0800ac30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d04d      	beq.n	800acde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac42:	2308      	movs	r3, #8
 800ac44:	425b      	negs	r3, r3
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4413      	add	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	4b24      	ldr	r3, [pc, #144]	; (800ace8 <vPortFree+0xb8>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <vPortFree+0x44>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	60fb      	str	r3, [r7, #12]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00a      	beq.n	800ac92 <vPortFree+0x62>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60bb      	str	r3, [r7, #8]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	4b14      	ldr	r3, [pc, #80]	; (800ace8 <vPortFree+0xb8>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d01e      	beq.n	800acde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d11a      	bne.n	800acde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <vPortFree+0xb8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	43db      	mvns	r3, r3
 800acb2:	401a      	ands	r2, r3
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acb8:	f7fe fc86 	bl	80095c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	4b0a      	ldr	r3, [pc, #40]	; (800acec <vPortFree+0xbc>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4413      	add	r3, r2
 800acc6:	4a09      	ldr	r2, [pc, #36]	; (800acec <vPortFree+0xbc>)
 800acc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acca:	6938      	ldr	r0, [r7, #16]
 800accc:	f000 f874 	bl	800adb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800acd0:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <vPortFree+0xc0>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3301      	adds	r3, #1
 800acd6:	4a06      	ldr	r2, [pc, #24]	; (800acf0 <vPortFree+0xc0>)
 800acd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800acda:	f7fe fc83 	bl	80095e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800acde:	bf00      	nop
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20010140 	.word	0x20010140
 800acec:	20010130 	.word	0x20010130
 800acf0:	2001013c 	.word	0x2001013c

0800acf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800acfa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800acfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad00:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <prvHeapInit+0xac>)
 800ad02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00c      	beq.n	800ad28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3307      	adds	r3, #7
 800ad12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0307 	bic.w	r3, r3, #7
 800ad1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	4a1f      	ldr	r2, [pc, #124]	; (800ada0 <prvHeapInit+0xac>)
 800ad24:	4413      	add	r3, r2
 800ad26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad2c:	4a1d      	ldr	r2, [pc, #116]	; (800ada4 <prvHeapInit+0xb0>)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad32:	4b1c      	ldr	r3, [pc, #112]	; (800ada4 <prvHeapInit+0xb0>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad40:	2208      	movs	r2, #8
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	1a9b      	subs	r3, r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 0307 	bic.w	r3, r3, #7
 800ad4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4a15      	ldr	r2, [pc, #84]	; (800ada8 <prvHeapInit+0xb4>)
 800ad54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ad56:	4b14      	ldr	r3, [pc, #80]	; (800ada8 <prvHeapInit+0xb4>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad5e:	4b12      	ldr	r3, [pc, #72]	; (800ada8 <prvHeapInit+0xb4>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad74:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <prvHeapInit+0xb4>)
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	4a0a      	ldr	r2, [pc, #40]	; (800adac <prvHeapInit+0xb8>)
 800ad82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	4a09      	ldr	r2, [pc, #36]	; (800adb0 <prvHeapInit+0xbc>)
 800ad8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad8c:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <prvHeapInit+0xc0>)
 800ad8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad92:	601a      	str	r2, [r3, #0]
}
 800ad94:	bf00      	nop
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	20001124 	.word	0x20001124
 800ada4:	20010124 	.word	0x20010124
 800ada8:	2001012c 	.word	0x2001012c
 800adac:	20010134 	.word	0x20010134
 800adb0:	20010130 	.word	0x20010130
 800adb4:	20010140 	.word	0x20010140

0800adb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adc0:	4b28      	ldr	r3, [pc, #160]	; (800ae64 <prvInsertBlockIntoFreeList+0xac>)
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	e002      	b.n	800adcc <prvInsertBlockIntoFreeList+0x14>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d8f7      	bhi.n	800adc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	4413      	add	r3, r2
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d108      	bne.n	800adfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	441a      	add	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	441a      	add	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d118      	bne.n	800ae40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <prvInsertBlockIntoFreeList+0xb0>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d00d      	beq.n	800ae36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685a      	ldr	r2, [r3, #4]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	441a      	add	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	e008      	b.n	800ae48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae36:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <prvInsertBlockIntoFreeList+0xb0>)
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	e003      	b.n	800ae48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d002      	beq.n	800ae56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae56:	bf00      	nop
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20010124 	.word	0x20010124
 800ae68:	2001012c 	.word	0x2001012c

0800ae6c <_ZN6System4initEv>:
#include <cstdio>
#include "cmsis_os2.h"
#include "stm32g4xx_hal.h"


void System::init(void) {
 800ae6c:	b598      	push	{r3, r4, r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
//    while (true) {
//    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
//    	HAL_Delay(1000);
//    }

	static PowerMonitor* powermonitor = new PowerMonitor(&hspi1);
 800ae70:	4b16      	ldr	r3, [pc, #88]	; (800aecc <_ZN6System4initEv+0x60>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f3bf 8f5b 	dmb	ish
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bf0c      	ite	eq
 800ae80:	2301      	moveq	r3, #1
 800ae82:	2300      	movne	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d018      	beq.n	800aebc <_ZN6System4initEv+0x50>
 800ae8a:	4810      	ldr	r0, [pc, #64]	; (800aecc <_ZN6System4initEv+0x60>)
 800ae8c:	f000 fd18 	bl	800b8c0 <__cxa_guard_acquire>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bf14      	ite	ne
 800ae96:	2301      	movne	r3, #1
 800ae98:	2300      	moveq	r3, #0
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00d      	beq.n	800aebc <_ZN6System4initEv+0x50>
 800aea0:	2040      	movs	r0, #64	; 0x40
 800aea2:	f000 fd1c 	bl	800b8de <_Znwj>
 800aea6:	4603      	mov	r3, r0
 800aea8:	461c      	mov	r4, r3
 800aeaa:	4909      	ldr	r1, [pc, #36]	; (800aed0 <_ZN6System4initEv+0x64>)
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 f833 	bl	800af18 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef>
 800aeb2:	4b08      	ldr	r3, [pc, #32]	; (800aed4 <_ZN6System4initEv+0x68>)
 800aeb4:	601c      	str	r4, [r3, #0]
 800aeb6:	4805      	ldr	r0, [pc, #20]	; (800aecc <_ZN6System4initEv+0x60>)
 800aeb8:	f000 fd0e 	bl	800b8d8 <__cxa_guard_release>
	powermonitor->set_tick_delay(100);
 800aebc:	4b05      	ldr	r3, [pc, #20]	; (800aed4 <_ZN6System4initEv+0x68>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2164      	movs	r1, #100	; 0x64
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fadd 	bl	800b482 <_ZN6Thread14set_tick_delayEm>
}
 800aec8:	bf00      	nop
 800aeca:	bd98      	pop	{r3, r4, r7, pc}
 800aecc:	20010148 	.word	0x20010148
 800aed0:	20000224 	.word	0x20000224
 800aed4:	20010144 	.word	0x20010144

0800aed8 <_ZN6ThreadD1Ev>:
public:
	Thread(const char* name);
	Thread(const char* name, osPriority_t priority);
	Thread(const char* name, uint32_t stack_size);
	Thread(const char* name, osPriority_t priority, uint32_t stack_size);
	virtual ~Thread() {};
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	4a04      	ldr	r2, [pc, #16]	; (800aef4 <_ZN6ThreadD1Ev+0x1c>)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	0800bd7c 	.word	0x0800bd7c

0800aef8 <_ZN6ThreadD0Ev>:
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ffe9 	bl	800aed8 <_ZN6ThreadD1Ev>
 800af06:	2138      	movs	r1, #56	; 0x38
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fcd7 	bl	800b8bc <_ZdlPvj>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef>:
#define SHUNT_VALUE	0.3e-3f // Ohm

#define CURRENT_LSB (MAX_CURRENT >> 15)


PowerMonitor::PowerMonitor(SPI_HandleTypeDef* spi) : Thread("PowerMonitor"), spi(spi), measurements(nullptr) {};
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4908      	ldr	r1, [pc, #32]	; (800af48 <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef+0x30>)
 800af26:	4618      	mov	r0, r3
 800af28:	f000 fa41 	bl	800b3ae <_ZN6ThreadC1EPKc>
 800af2c:	4a07      	ldr	r2, [pc, #28]	; (800af4c <_ZN12PowerMonitorC1EP19__SPI_HandleTypeDef+0x34>)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	639a      	str	r2, [r3, #56]	; 0x38
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	63da      	str	r2, [r3, #60]	; 0x3c
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	0800bd3c 	.word	0x0800bd3c
 800af4c:	0800bd64 	.word	0x0800bd64

0800af50 <_ZN12PowerMonitor4initEv>:


void PowerMonitor::init() {
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
	osDelay(100 / portTICK_PERIOD_MS);
 800af58:	2064      	movs	r0, #100	; 0x64
 800af5a:	f7fd fa77 	bl	800844c <osDelay>

	uint8_t attempts = 3;
 800af5e:	2303      	movs	r3, #3
 800af60:	73fb      	strb	r3, [r7, #15]
	bool init_success = false;
 800af62:	2300      	movs	r3, #0
 800af64:	73bb      	strb	r3, [r7, #14]

	while (attempts-- > 0) {
 800af66:	e011      	b.n	800af8c <_ZN12PowerMonitor4initEv+0x3c>
		if (get(INA239_DEVICE_ID_REG) == INA239_DEV_ID) {
 800af68:	213f      	movs	r1, #63	; 0x3f
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f91d 	bl	800b1aa <_ZN12PowerMonitor3getEh>
 800af70:	4603      	mov	r3, r0
 800af72:	461a      	mov	r2, r3
 800af74:	f242 3391 	movw	r3, #9105	; 0x2391
 800af78:	429a      	cmp	r2, r3
 800af7a:	bf0c      	ite	eq
 800af7c:	2301      	moveq	r3, #1
 800af7e:	2300      	movne	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d002      	beq.n	800af8c <_ZN12PowerMonitor4initEv+0x3c>
			init_success = true;
 800af86:	2301      	movs	r3, #1
 800af88:	73bb      	strb	r3, [r7, #14]
			break;
 800af8a:	e009      	b.n	800afa0 <_ZN12PowerMonitor4initEv+0x50>
	while (attempts-- > 0) {
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	1e5a      	subs	r2, r3, #1
 800af90:	73fa      	strb	r2, [r7, #15]
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf14      	ite	ne
 800af96:	2301      	movne	r3, #1
 800af98:	2300      	moveq	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e3      	bne.n	800af68 <_ZN12PowerMonitor4initEv+0x18>
		}
	}

	if (init_success) {
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d045      	beq.n	800b032 <_ZN12PowerMonitor4initEv+0xe2>
		bool config_success = set(INA239_CONFIG_REG, INA239_CONFIG_ADCRANGE);
 800afa6:	2210      	movs	r2, #16
 800afa8:	2100      	movs	r1, #0
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f911 	bl	800b1d2 <_ZN12PowerMonitor3setEht>
 800afb0:	4603      	mov	r3, r0
 800afb2:	737b      	strb	r3, [r7, #13]

		uint16_t adc_config = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_MODE & (0xF << INA239_ADCCONFIG_MODE_BIT);
 800afb8:	897b      	ldrh	r3, [r7, #10]
 800afba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800afbe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800afc2:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VBUSCT & (0x2 << INA239_ADCCONFIG_VBUSCT_BIT);
 800afc4:	897b      	ldrh	r3, [r7, #10]
 800afc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afca:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VSHCT & (0x2 << INA239_ADCCONFIG_VSHCT_BIT);
 800afcc:	897b      	ldrh	r3, [r7, #10]
 800afce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afd2:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_VTCT & (0x7 << INA239_ADCCONFIG_VTCT_BIT);
 800afd4:	897b      	ldrh	r3, [r7, #10]
 800afd6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800afda:	817b      	strh	r3, [r7, #10]
		adc_config |= INA239_ADCCONFIG_AVG & (0x3 << INA239_ADCCONFIG_AVG_BIT);
 800afdc:	897b      	ldrh	r3, [r7, #10]
 800afde:	f043 0303 	orr.w	r3, r3, #3
 800afe2:	817b      	strh	r3, [r7, #10]

		config_success |= set(INA239_ADC_CONFIG_REG, adc_config);
 800afe4:	897b      	ldrh	r3, [r7, #10]
 800afe6:	461a      	mov	r2, r3
 800afe8:	2101      	movs	r1, #1
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f8f1 	bl	800b1d2 <_ZN12PowerMonitor3setEht>
 800aff0:	4603      	mov	r3, r0
 800aff2:	461a      	mov	r2, r3
 800aff4:	7b7b      	ldrb	r3, [r7, #13]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	bf14      	ite	ne
 800affe:	2301      	movne	r3, #1
 800b000:	2300      	moveq	r3, #0
 800b002:	737b      	strb	r3, [r7, #13]

		config_success |= set(INA239_SHUNT_CAL_REG, 4 * SHUNT_CAL_CONST * MAX_CURRENT * SHUNT_VALUE);
 800b004:	2200      	movs	r2, #0
 800b006:	2102      	movs	r1, #2
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f8e2 	bl	800b1d2 <_ZN12PowerMonitor3setEht>
 800b00e:	4603      	mov	r3, r0
 800b010:	461a      	mov	r2, r3
 800b012:	7b7b      	ldrb	r3, [r7, #13]
 800b014:	4313      	orrs	r3, r2
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bf14      	ite	ne
 800b01c:	2301      	movne	r3, #1
 800b01e:	2300      	moveq	r3, #0
 800b020:	737b      	strb	r3, [r7, #13]

		if (config_success) {
 800b022:	7b7b      	ldrb	r3, [r7, #13]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d108      	bne.n	800b03a <_ZN12PowerMonitor4initEv+0xea>
			// TODO: print that the device has been initialized successfully
		} else {
			// TODO: print that the device config has failed
			terminate();
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fa1c 	bl	800b468 <_ZN6Thread9terminateEv>
		}
	} else {
		// TODO: print that the device hasnt been initialized
		terminate();
	}
}
 800b030:	e003      	b.n	800b03a <_ZN12PowerMonitor4initEv+0xea>
		terminate();
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fa17 	bl	800b468 <_ZN6Thread9terminateEv>
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <_ZN12PowerMonitor4loopEv>:

void PowerMonitor::loop() {
 800b042:	b590      	push	{r4, r7, lr}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
	measurements->shunt_voltage = read_shunt_voltage();
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f82c 	bl	800b0ac <_ZN12PowerMonitor18read_shunt_voltageEv>
 800b054:	eef0 7a40 	vmov.f32	s15, s0
 800b058:	edc4 7a00 	vstr	s15, [r4]
	measurements->bus_voltage = read_bus_voltage();
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f83b 	bl	800b0dc <_ZN12PowerMonitor16read_bus_voltageEv>
 800b066:	eef0 7a40 	vmov.f32	s15, s0
 800b06a:	edc4 7a01 	vstr	s15, [r4, #4]
	measurements->current = read_current();
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f84a 	bl	800b10c <_ZN12PowerMonitor12read_currentEv>
 800b078:	eef0 7a40 	vmov.f32	s15, s0
 800b07c:	edc4 7a02 	vstr	s15, [r4, #8]
	measurements->power = read_power();
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f859 	bl	800b13c <_ZN12PowerMonitor10read_powerEv>
 800b08a:	eef0 7a40 	vmov.f32	s15, s0
 800b08e:	edc4 7a03 	vstr	s15, [r4, #12]
	measurements->temperature = read_temperature();
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f86e 	bl	800b178 <_ZN12PowerMonitor16read_temperatureEv>
 800b09c:	eef0 7a40 	vmov.f32	s15, s0
 800b0a0:	edc4 7a04 	vstr	s15, [r4, #16]
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd90      	pop	{r4, r7, pc}

0800b0ac <_ZN12PowerMonitor18read_shunt_voltageEv>:

float PowerMonitor::read_shunt_voltage() {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
	return 1.25e-6f * get(INA239_VSHUNT_REG); // [V]
 800b0b4:	2104      	movs	r1, #4
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f877 	bl	800b1aa <_ZN12PowerMonitor3getEh>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0c6:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b0d8 <_ZN12PowerMonitor18read_shunt_voltageEv+0x2c>
 800b0ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b0ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	35a7c5ac 	.word	0x35a7c5ac

0800b0dc <_ZN12PowerMonitor16read_bus_voltageEv>:

float PowerMonitor::read_bus_voltage() {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	return 3.125e-3f * get(INA239_VBUS_REG); // [V]
 800b0e4:	2105      	movs	r1, #5
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f85f 	bl	800b1aa <_ZN12PowerMonitor3getEh>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0f6:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b108 <_ZN12PowerMonitor16read_bus_voltageEv+0x2c>
 800b0fa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b0fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	3b4ccccd 	.word	0x3b4ccccd

0800b10c <_ZN12PowerMonitor12read_currentEv>:

float PowerMonitor::read_current() {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	return 1.0f * CURRENT_LSB * get(INA239_CURRENT_REG); // [A]
 800b114:	2107      	movs	r1, #7
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f847 	bl	800b1aa <_ZN12PowerMonitor3getEh>
 800b11c:	4603      	mov	r3, r0
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b126:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b138 <_ZN12PowerMonitor12read_currentEv+0x2c>
 800b12a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b12e:	eeb0 0a67 	vmov.f32	s0, s15
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	00000000 	.word	0x00000000

0800b13c <_ZN12PowerMonitor10read_powerEv>:

float PowerMonitor::read_power() {
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	int32_t raw_power = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	60fb      	str	r3, [r7, #12]
	read(INA239_POWER_REG, (uint8_t*) &raw_power, 3);
 800b148:	f107 020c 	add.w	r2, r7, #12
 800b14c:	2303      	movs	r3, #3
 800b14e:	2108      	movs	r1, #8
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f891 	bl	800b278 <_ZN12PowerMonitor4readEhPhh>
	return 0.2f * CURRENT_LSB * raw_power;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	ee07 3a90 	vmov	s15, r3
 800b15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b160:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800b174 <_ZN12PowerMonitor10read_powerEv+0x38>
 800b164:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b168:	eeb0 0a67 	vmov.f32	s0, s15
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	00000000 	.word	0x00000000

0800b178 <_ZN12PowerMonitor16read_temperatureEv>:

float PowerMonitor::read_temperature() {
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
	return 125e-3f * ((int16_t) get(INA239_DIETEMP_REG) >> INA239_DIETEMP_BIT); // [deg C]
 800b180:	2106      	movs	r1, #6
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f811 	bl	800b1aa <_ZN12PowerMonitor3getEh>
 800b188:	4603      	mov	r3, r0
 800b18a:	b21b      	sxth	r3, r3
 800b18c:	111b      	asrs	r3, r3, #4
 800b18e:	b21b      	sxth	r3, r3
 800b190:	ee07 3a90 	vmov	s15, r3
 800b194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b198:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800b19c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800b1a0:	eeb0 0a67 	vmov.f32	s0, s15
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <_ZN12PowerMonitor3getEh>:

uint16_t PowerMonitor::get(uint8_t reg) {
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	70fb      	strb	r3, [r7, #3]
	uint16_t value = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	81fb      	strh	r3, [r7, #14]
	read(reg, (uint8_t*) &value, 2);
 800b1ba:	f107 020e 	add.w	r2, r7, #14
 800b1be:	78f9      	ldrb	r1, [r7, #3]
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f858 	bl	800b278 <_ZN12PowerMonitor4readEhPhh>
	return value;
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <_ZN12PowerMonitor3setEht>:

bool PowerMonitor::set(uint8_t reg, uint16_t value) {
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	70fb      	strb	r3, [r7, #3]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	803b      	strh	r3, [r7, #0]
	return write(reg, (uint8_t*) &value, 2);
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	78f9      	ldrb	r1, [r7, #3]
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f805 	bl	800b1f8 <_ZN12PowerMonitor5writeEhPhh>
 800b1ee:	4603      	mov	r3, r0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZN12PowerMonitor5writeEhPhh>:

bool PowerMonitor::write(uint8_t reg, uint8_t* data, uint8_t size) {
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	607a      	str	r2, [r7, #4]
 800b202:	461a      	mov	r2, r3
 800b204:	460b      	mov	r3, r1
 800b206:	72fb      	strb	r3, [r7, #11]
 800b208:	4613      	mov	r3, r2
 800b20a:	72bb      	strb	r3, [r7, #10]
	uint8_t tx_buffer[4];
	tx_buffer[0] = (reg << 2) | 0b00;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	b2db      	uxtb	r3, r3
 800b212:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < size; i++) {
 800b214:	2300      	movs	r3, #0
 800b216:	75fb      	strb	r3, [r7, #23]
 800b218:	e00f      	b.n	800b23a <_ZN12PowerMonitor5writeEhPhh+0x42>
		tx_buffer[i+1] = data[size-i-1];
 800b21a:	7aba      	ldrb	r2, [r7, #10]
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	1ad3      	subs	r3, r2, r3
 800b220:	3b01      	subs	r3, #1
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	441a      	add	r2, r3
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	3301      	adds	r3, #1
 800b22a:	7812      	ldrb	r2, [r2, #0]
 800b22c:	3318      	adds	r3, #24
 800b22e:	443b      	add	r3, r7
 800b230:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < size; i++) {
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	3301      	adds	r3, #1
 800b238:	75fb      	strb	r3, [r7, #23]
 800b23a:	7dfa      	ldrb	r2, [r7, #23]
 800b23c:	7abb      	ldrb	r3, [r7, #10]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d3eb      	bcc.n	800b21a <_ZN12PowerMonitor5writeEhPhh+0x22>
  __ASM volatile ("cpsid i" : : : "memory");
 800b242:	b672      	cpsid	i
}
 800b244:	bf00      	nop
	}

	__disable_irq();
	HAL_StatusTypeDef status = HAL_SPI_Transmit(spi, tx_buffer, size+1, 10 / portTICK_PERIOD_MS);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b24a:	7abb      	ldrb	r3, [r7, #10]
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3301      	adds	r3, #1
 800b250:	b29a      	uxth	r2, r3
 800b252:	f107 0110 	add.w	r1, r7, #16
 800b256:	230a      	movs	r3, #10
 800b258:	f7f9 f987 	bl	800456a <HAL_SPI_Transmit>
 800b25c:	4603      	mov	r3, r0
 800b25e:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsie i" : : : "memory");
 800b260:	b662      	cpsie	i
}
 800b262:	bf00      	nop
	__enable_irq();

	return status == HAL_OK;
 800b264:	7dbb      	ldrb	r3, [r7, #22]
 800b266:	2b00      	cmp	r3, #0
 800b268:	bf0c      	ite	eq
 800b26a:	2301      	moveq	r3, #1
 800b26c:	2300      	movne	r3, #0
 800b26e:	b2db      	uxtb	r3, r3
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZN12PowerMonitor4readEhPhh>:

bool PowerMonitor::read(uint8_t reg, uint8_t* data, uint8_t size) {
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b089      	sub	sp, #36	; 0x24
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	461a      	mov	r2, r3
 800b284:	460b      	mov	r3, r1
 800b286:	72fb      	strb	r3, [r7, #11]
 800b288:	4613      	mov	r3, r2
 800b28a:	72bb      	strb	r3, [r7, #10]
	uint8_t rx_buffer[4];
	rx_buffer[0] = (reg << 2) | 0b01;
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	b25b      	sxtb	r3, r3
 800b292:	f043 0301 	orr.w	r3, r3, #1
 800b296:	b25b      	sxtb	r3, r3
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	743b      	strb	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b29c:	b672      	cpsid	i
}
 800b29e:	bf00      	nop

	__disable_irq();
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(spi, rx_buffer, rx_buffer, size+1, 100 / portTICK_PERIOD_MS);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b2a4:	7abb      	ldrb	r3, [r7, #10]
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	f107 0210 	add.w	r2, r7, #16
 800b2b0:	f107 0110 	add.w	r1, r7, #16
 800b2b4:	2464      	movs	r4, #100	; 0x64
 800b2b6:	9400      	str	r4, [sp, #0]
 800b2b8:	f7f9 facc 	bl	8004854 <HAL_SPI_TransmitReceive>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsie i" : : : "memory");
 800b2c0:	b662      	cpsie	i
}
 800b2c2:	bf00      	nop
	__enable_irq();

	for (uint8_t i = 0; i < size; i++) {
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	75fb      	strb	r3, [r7, #23]
 800b2c8:	e00d      	b.n	800b2e6 <_ZN12PowerMonitor4readEhPhh+0x6e>
		data[i] = rx_buffer[size-i];
 800b2ca:	7aba      	ldrb	r2, [r7, #10]
 800b2cc:	7dfb      	ldrb	r3, [r7, #23]
 800b2ce:	1ad2      	subs	r2, r2, r3
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	440b      	add	r3, r1
 800b2d6:	3218      	adds	r2, #24
 800b2d8:	443a      	add	r2, r7
 800b2da:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800b2de:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
 800b2e6:	7dfa      	ldrb	r2, [r7, #23]
 800b2e8:	7abb      	ldrb	r3, [r7, #10]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d3ed      	bcc.n	800b2ca <_ZN12PowerMonitor4readEhPhh+0x52>
	}

	return status == HAL_OK;
 800b2ee:	7dbb      	ldrb	r3, [r7, #22]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	bf0c      	ite	eq
 800b2f4:	2301      	moveq	r3, #1
 800b2f6:	2300      	movne	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	371c      	adds	r7, #28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd90      	pop	{r4, r7, pc}
	...

0800b304 <_ZN12PowerMonitorD1Ev>:
	float power;
	float temperature;
} Measurements;


class PowerMonitor : public Thread {
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	4a05      	ldr	r2, [pc, #20]	; (800b324 <_ZN12PowerMonitorD1Ev+0x20>)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4618      	mov	r0, r3
 800b316:	f7ff fddf 	bl	800aed8 <_ZN6ThreadD1Ev>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4618      	mov	r0, r3
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	0800bd64 	.word	0x0800bd64

0800b328 <_ZN12PowerMonitorD0Ev>:
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7ff ffe7 	bl	800b304 <_ZN12PowerMonitorD1Ev>
 800b336:	2140      	movs	r1, #64	; 0x40
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fabf 	bl	800b8bc <_ZdlPvj>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <_Z10__task_runPv>:
#include "task.h"


#define DEFAULT_STACK_SIZE (1024)

void __task_run(void* arg) {
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
	Thread* thread = (Thread*) arg;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]

	osDelay(100 / portTICK_PERIOD_MS);
 800b354:	2064      	movs	r0, #100	; 0x64
 800b356:	f7fd f879 	bl	800844c <osDelay>

	thread->init();
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3308      	adds	r3, #8
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	4798      	blx	r3

	while(thread->is_running()) {
 800b366:	e00c      	b.n	800b382 <_Z10__task_runPv+0x3a>
		thread->loop();
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	330c      	adds	r3, #12
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	4798      	blx	r3
		osDelay(thread->get_tick_delay() / portTICK_PERIOD_MS);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 f892 	bl	800b49e <_ZN6Thread14get_tick_delayEv>
 800b37a:	4603      	mov	r3, r0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fd f865 	bl	800844c <osDelay>
	while(thread->is_running()) {
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 f864 	bl	800b450 <_ZN6Thread10is_runningEv>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1ec      	bne.n	800b368 <_Z10__task_runPv+0x20>
	}

	delete thread;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <_Z10__task_runPv+0x56>
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	3204      	adds	r2, #4
 800b398:	6812      	ldr	r2, [r2, #0]
 800b39a:	4618      	mov	r0, r3
 800b39c:	4790      	blx	r2

	vTaskDelete(nullptr);
 800b39e:	2000      	movs	r0, #0
 800b3a0:	f7fd fffc 	bl	800939c <vTaskDelete>

	while(true) {
		osDelay(1000 / portTICK_PERIOD_MS);
 800b3a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b3a8:	f7fd f850 	bl	800844c <osDelay>
 800b3ac:	e7fa      	b.n	800b3a4 <_Z10__task_runPv+0x5c>

0800b3ae <_ZN6ThreadC1EPKc>:
	}
}


Thread::Thread(const char* name) : Thread(name, (osPriority_t) osPriorityNormal) {};
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b082      	sub	sp, #8
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
 800b3b8:	2218      	movs	r2, #24
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 f805 	bl	800b3cc <_ZN6ThreadC1EPKc12osPriority_t>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <_ZN6ThreadC1EPKc12osPriority_t>:


Thread::Thread(const char* name, osPriority_t priority) : Thread(name, priority, DEFAULT_STACK_SIZE) {};
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f000 f805 	bl	800b3f0 <_ZN6ThreadC1EPKc12osPriority_tm>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <_ZN6ThreadC1EPKc12osPriority_tm>:


Thread::Thread(const char* name, uint32_t stack_size) : Thread(name, (osPriority_t) osPriorityNormal, stack_size) {};


Thread::Thread(const char* name, osPriority_t priority, uint32_t stack_size) {
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08e      	sub	sp, #56	; 0x38
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
 800b3fc:	603b      	str	r3, [r7, #0]
 800b3fe:	4a12      	ldr	r2, [pc, #72]	; (800b448 <_ZN6ThreadC1EPKc12osPriority_tm+0x58>)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2201      	movs	r2, #1
 800b408:	731a      	strb	r2, [r3, #12]
	const osThreadAttr_t thread_attributes = {
 800b40a:	f107 0314 	add.w	r3, r7, #20
 800b40e:	2224      	movs	r2, #36	; 0x24
 800b410:	2100      	movs	r1, #0
 800b412:	4618      	mov	r0, r3
 800b414:	f000 fb42 	bl	800ba9c <memset>
		.name = (char*) name,
		.stack_size = stack_size,
		.priority = (osPriority_t) priority,
	};
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	62fb      	str	r3, [r7, #44]	; 0x2c
	this->handle = (osThreadId_t) osThreadNew(&__task_run, this, &thread_attributes);
 800b424:	f107 0314 	add.w	r3, r7, #20
 800b428:	461a      	mov	r2, r3
 800b42a:	68f9      	ldr	r1, [r7, #12]
 800b42c:	4807      	ldr	r0, [pc, #28]	; (800b44c <_ZN6ThreadC1EPKc12osPriority_tm+0x5c>)
 800b42e:	f7fc ff7b 	bl	8008328 <osThreadNew>
 800b432:	4602      	mov	r2, r0
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	605a      	str	r2, [r3, #4]
	this->name = name;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	609a      	str	r2, [r3, #8]
}
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4618      	mov	r0, r3
 800b442:	3738      	adds	r7, #56	; 0x38
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	0800bd7c 	.word	0x0800bd7c
 800b44c:	0800b349 	.word	0x0800b349

0800b450 <_ZN6Thread10is_runningEv>:

bool Thread::is_running() {
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	return running;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7b1b      	ldrb	r3, [r3, #12]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <_ZN6Thread9terminateEv>:

void Thread::terminate() {
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
	running = false;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	731a      	strb	r2, [r3, #12]
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <_ZN6Thread14set_tick_delayEm>:

osThreadId_t Thread::get_handle() {
	return handle;
}

void Thread::set_tick_delay(uint32_t ms) {
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
 800b48a:	6039      	str	r1, [r7, #0]
	delay = ms;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	611a      	str	r2, [r3, #16]
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <_ZN6Thread14get_tick_delayEv>:

uint32_t Thread::get_tick_delay() {
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
	return delay;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	f7fb feac 	bl	800722a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b4d2:	bf00      	nop
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}

0800b4da <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b4ec:	78fa      	ldrb	r2, [r7, #3]
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	440b      	add	r3, r1
 800b4fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	4619      	mov	r1, r3
 800b504:	f7fb fee6 	bl	80072d4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b522:	78fa      	ldrb	r2, [r7, #3]
 800b524:	6879      	ldr	r1, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	440b      	add	r3, r1
 800b530:	3324      	adds	r3, #36	; 0x24
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	78fb      	ldrb	r3, [r7, #3]
 800b536:	4619      	mov	r1, r3
 800b538:	f7fb ff2f 	bl	800739a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b552:	4618      	mov	r0, r3
 800b554:	f7fc f843 	bl	80075de <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b568:	2301      	movs	r3, #1
 800b56a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	795b      	ldrb	r3, [r3, #5]
 800b570:	2b02      	cmp	r3, #2
 800b572:	d001      	beq.n	800b578 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b574:	f7f5 fa59 	bl	8000a2a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b57e:	7bfa      	ldrb	r2, [r7, #15]
 800b580:	4611      	mov	r1, r2
 800b582:	4618      	mov	r0, r3
 800b584:	f7fb ffed 	bl	8007562 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fb ff99 	bl	80074c6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b594:	bf00      	nop
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fb ffe9 	bl	8007582 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	7a5b      	ldrb	r3, [r3, #9]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5b8:	4b04      	ldr	r3, [pc, #16]	; (800b5cc <HAL_PCD_SuspendCallback+0x30>)
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	4a03      	ldr	r2, [pc, #12]	; (800b5cc <HAL_PCD_SuspendCallback+0x30>)
 800b5be:	f043 0306 	orr.w	r3, r3, #6
 800b5c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	e000ed00 	.word	0xe000ed00

0800b5d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7a5b      	ldrb	r3, [r3, #9]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d007      	beq.n	800b5f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5e0:	4b08      	ldr	r3, [pc, #32]	; (800b604 <HAL_PCD_ResumeCallback+0x34>)
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	4a07      	ldr	r2, [pc, #28]	; (800b604 <HAL_PCD_ResumeCallback+0x34>)
 800b5e6:	f023 0306 	bic.w	r3, r3, #6
 800b5ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b5ec:	f000 f934 	bl	800b858 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fb ffd9 	bl	80075ae <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b5fc:	bf00      	nop
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	e000ed00 	.word	0xe000ed00

0800b608 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	4608      	mov	r0, r1
 800b612:	4611      	mov	r1, r2
 800b614:	461a      	mov	r2, r3
 800b616:	4603      	mov	r3, r0
 800b618:	70fb      	strb	r3, [r7, #3]
 800b61a:	460b      	mov	r3, r1
 800b61c:	70bb      	strb	r3, [r7, #2]
 800b61e:	4613      	mov	r3, r2
 800b620:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b630:	78bb      	ldrb	r3, [r7, #2]
 800b632:	883a      	ldrh	r2, [r7, #0]
 800b634:	78f9      	ldrb	r1, [r7, #3]
 800b636:	f7f6 fcd9 	bl	8001fec <HAL_PCD_EP_Open>
 800b63a:	4603      	mov	r3, r0
 800b63c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
 800b640:	4618      	mov	r0, r3
 800b642:	f000 f90f 	bl	800b864 <USBD_Get_USB_Status>
 800b646:	4603      	mov	r3, r0
 800b648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b66e:	78fa      	ldrb	r2, [r7, #3]
 800b670:	4611      	mov	r1, r2
 800b672:	4618      	mov	r0, r3
 800b674:	f7f6 fd7f 	bl	8002176 <HAL_PCD_EP_SetStall>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f8f0 	bl	800b864 <USBD_Get_USB_Status>
 800b684:	4603      	mov	r3, r0
 800b686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b688:	7bbb      	ldrb	r3, [r7, #14]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6ac:	78fa      	ldrb	r2, [r7, #3]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f6 fdb2 	bl	800221a <HAL_PCD_EP_ClrStall>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 f8d1 	bl	800b864 <USBD_Get_USB_Status>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	da0b      	bge.n	800b704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6ec:	78fb      	ldrb	r3, [r7, #3]
 800b6ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6f2:	68f9      	ldr	r1, [r7, #12]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	440b      	add	r3, r1
 800b6fe:	3312      	adds	r3, #18
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	e00b      	b.n	800b71c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b70a:	68f9      	ldr	r1, [r7, #12]
 800b70c:	4613      	mov	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4413      	add	r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	440b      	add	r3, r1
 800b716:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b71a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b742:	78fa      	ldrb	r2, [r7, #3]
 800b744:	4611      	mov	r1, r2
 800b746:	4618      	mov	r0, r3
 800b748:	f7f6 fc2c 	bl	8001fa4 <HAL_PCD_SetAddress>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b750:	7bfb      	ldrb	r3, [r7, #15]
 800b752:	4618      	mov	r0, r3
 800b754:	f000 f886 	bl	800b864 <USBD_Get_USB_Status>
 800b758:	4603      	mov	r3, r0
 800b75a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b086      	sub	sp, #24
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]
 800b772:	460b      	mov	r3, r1
 800b774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b784:	7af9      	ldrb	r1, [r7, #11]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	f7f6 fcbd 	bl	8002108 <HAL_PCD_EP_Transmit>
 800b78e:	4603      	mov	r3, r0
 800b790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f865 	bl	800b864 <USBD_Get_USB_Status>
 800b79a:	4603      	mov	r3, r0
 800b79c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b79e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b7c6:	7af9      	ldrb	r1, [r7, #11]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	f7f6 fc6b 	bl	80020a6 <HAL_PCD_EP_Receive>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f844 	bl	800b864 <USBD_Get_USB_Status>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b7f8:	78fb      	ldrb	r3, [r7, #3]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <HAL_PCDEx_LPM_Callback+0x18>
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d013      	beq.n	800b82a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b802:	e023      	b.n	800b84c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7a5b      	ldrb	r3, [r3, #9]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d007      	beq.n	800b81c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b80c:	f000 f824 	bl	800b858 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b810:	4b10      	ldr	r3, [pc, #64]	; (800b854 <HAL_PCDEx_LPM_Callback+0x68>)
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	4a0f      	ldr	r2, [pc, #60]	; (800b854 <HAL_PCDEx_LPM_Callback+0x68>)
 800b816:	f023 0306 	bic.w	r3, r3, #6
 800b81a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b822:	4618      	mov	r0, r3
 800b824:	f7fb fec3 	bl	80075ae <USBD_LL_Resume>
    break;
 800b828:	e010      	b.n	800b84c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b830:	4618      	mov	r0, r3
 800b832:	f7fb fea6 	bl	8007582 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	7a5b      	ldrb	r3, [r3, #9]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d005      	beq.n	800b84a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b83e:	4b05      	ldr	r3, [pc, #20]	; (800b854 <HAL_PCDEx_LPM_Callback+0x68>)
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	4a04      	ldr	r2, [pc, #16]	; (800b854 <HAL_PCDEx_LPM_Callback+0x68>)
 800b844:	f043 0306 	orr.w	r3, r3, #6
 800b848:	6113      	str	r3, [r2, #16]
    break;
 800b84a:	bf00      	nop
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	e000ed00 	.word	0xe000ed00

0800b858 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b85c:	f7f5 f899 	bl	8000992 <SystemClock_Config>
}
 800b860:	bf00      	nop
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	2b03      	cmp	r3, #3
 800b876:	d817      	bhi.n	800b8a8 <USBD_Get_USB_Status+0x44>
 800b878:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <USBD_Get_USB_Status+0x1c>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b891 	.word	0x0800b891
 800b884:	0800b897 	.word	0x0800b897
 800b888:	0800b89d 	.word	0x0800b89d
 800b88c:	0800b8a3 	.word	0x0800b8a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
    break;
 800b894:	e00b      	b.n	800b8ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b896:	2303      	movs	r3, #3
 800b898:	73fb      	strb	r3, [r7, #15]
    break;
 800b89a:	e008      	b.n	800b8ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b89c:	2301      	movs	r3, #1
 800b89e:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a0:	e005      	b.n	800b8ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8a6:	e002      	b.n	800b8ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ac:	bf00      	nop
  }
  return usb_status;
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <_ZdlPvj>:
 800b8bc:	f000 b820 	b.w	800b900 <_ZdlPv>

0800b8c0 <__cxa_guard_acquire>:
 800b8c0:	6803      	ldr	r3, [r0, #0]
 800b8c2:	07db      	lsls	r3, r3, #31
 800b8c4:	d406      	bmi.n	800b8d4 <__cxa_guard_acquire+0x14>
 800b8c6:	7843      	ldrb	r3, [r0, #1]
 800b8c8:	b103      	cbz	r3, 800b8cc <__cxa_guard_acquire+0xc>
 800b8ca:	deff      	udf	#255	; 0xff
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	7043      	strb	r3, [r0, #1]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	4770      	bx	lr
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	4770      	bx	lr

0800b8d8 <__cxa_guard_release>:
 800b8d8:	2301      	movs	r3, #1
 800b8da:	6003      	str	r3, [r0, #0]
 800b8dc:	4770      	bx	lr

0800b8de <_Znwj>:
 800b8de:	2801      	cmp	r0, #1
 800b8e0:	bf38      	it	cc
 800b8e2:	2001      	movcc	r0, #1
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 f81b 	bl	800b924 <malloc>
 800b8ee:	b100      	cbz	r0, 800b8f2 <_Znwj+0x14>
 800b8f0:	bd10      	pop	{r4, pc}
 800b8f2:	f000 f807 	bl	800b904 <_ZSt15get_new_handlerv>
 800b8f6:	b908      	cbnz	r0, 800b8fc <_Znwj+0x1e>
 800b8f8:	f000 f80c 	bl	800b914 <abort>
 800b8fc:	4780      	blx	r0
 800b8fe:	e7f3      	b.n	800b8e8 <_Znwj+0xa>

0800b900 <_ZdlPv>:
 800b900:	f000 b818 	b.w	800b934 <free>

0800b904 <_ZSt15get_new_handlerv>:
 800b904:	4b02      	ldr	r3, [pc, #8]	; (800b910 <_ZSt15get_new_handlerv+0xc>)
 800b906:	6818      	ldr	r0, [r3, #0]
 800b908:	f3bf 8f5b 	dmb	ish
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	20010428 	.word	0x20010428

0800b914 <abort>:
 800b914:	b508      	push	{r3, lr}
 800b916:	2006      	movs	r0, #6
 800b918:	f000 f946 	bl	800bba8 <raise>
 800b91c:	2001      	movs	r0, #1
 800b91e:	f7f5 fa77 	bl	8000e10 <_exit>
	...

0800b924 <malloc>:
 800b924:	4b02      	ldr	r3, [pc, #8]	; (800b930 <malloc+0xc>)
 800b926:	4601      	mov	r1, r0
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	f000 b82b 	b.w	800b984 <_malloc_r>
 800b92e:	bf00      	nop
 800b930:	2000005c 	.word	0x2000005c

0800b934 <free>:
 800b934:	4b02      	ldr	r3, [pc, #8]	; (800b940 <free+0xc>)
 800b936:	4601      	mov	r1, r0
 800b938:	6818      	ldr	r0, [r3, #0]
 800b93a:	f000 b99b 	b.w	800bc74 <_free_r>
 800b93e:	bf00      	nop
 800b940:	2000005c 	.word	0x2000005c

0800b944 <sbrk_aligned>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	4e0e      	ldr	r6, [pc, #56]	; (800b980 <sbrk_aligned+0x3c>)
 800b948:	460c      	mov	r4, r1
 800b94a:	6831      	ldr	r1, [r6, #0]
 800b94c:	4605      	mov	r5, r0
 800b94e:	b911      	cbnz	r1, 800b956 <sbrk_aligned+0x12>
 800b950:	f000 f946 	bl	800bbe0 <_sbrk_r>
 800b954:	6030      	str	r0, [r6, #0]
 800b956:	4621      	mov	r1, r4
 800b958:	4628      	mov	r0, r5
 800b95a:	f000 f941 	bl	800bbe0 <_sbrk_r>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d00a      	beq.n	800b978 <sbrk_aligned+0x34>
 800b962:	1cc4      	adds	r4, r0, #3
 800b964:	f024 0403 	bic.w	r4, r4, #3
 800b968:	42a0      	cmp	r0, r4
 800b96a:	d007      	beq.n	800b97c <sbrk_aligned+0x38>
 800b96c:	1a21      	subs	r1, r4, r0
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f936 	bl	800bbe0 <_sbrk_r>
 800b974:	3001      	adds	r0, #1
 800b976:	d101      	bne.n	800b97c <sbrk_aligned+0x38>
 800b978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b97c:	4620      	mov	r0, r4
 800b97e:	bd70      	pop	{r4, r5, r6, pc}
 800b980:	20010430 	.word	0x20010430

0800b984 <_malloc_r>:
 800b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b988:	1ccd      	adds	r5, r1, #3
 800b98a:	f025 0503 	bic.w	r5, r5, #3
 800b98e:	3508      	adds	r5, #8
 800b990:	2d0c      	cmp	r5, #12
 800b992:	bf38      	it	cc
 800b994:	250c      	movcc	r5, #12
 800b996:	2d00      	cmp	r5, #0
 800b998:	4607      	mov	r7, r0
 800b99a:	db01      	blt.n	800b9a0 <_malloc_r+0x1c>
 800b99c:	42a9      	cmp	r1, r5
 800b99e:	d905      	bls.n	800b9ac <_malloc_r+0x28>
 800b9a0:	230c      	movs	r3, #12
 800b9a2:	603b      	str	r3, [r7, #0]
 800b9a4:	2600      	movs	r6, #0
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba80 <_malloc_r+0xfc>
 800b9b0:	f000 f868 	bl	800ba84 <__malloc_lock>
 800b9b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b8:	461c      	mov	r4, r3
 800b9ba:	bb5c      	cbnz	r4, 800ba14 <_malloc_r+0x90>
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7ff ffc0 	bl	800b944 <sbrk_aligned>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	d155      	bne.n	800ba76 <_malloc_r+0xf2>
 800b9ca:	f8d8 4000 	ldr.w	r4, [r8]
 800b9ce:	4626      	mov	r6, r4
 800b9d0:	2e00      	cmp	r6, #0
 800b9d2:	d145      	bne.n	800ba60 <_malloc_r+0xdc>
 800b9d4:	2c00      	cmp	r4, #0
 800b9d6:	d048      	beq.n	800ba6a <_malloc_r+0xe6>
 800b9d8:	6823      	ldr	r3, [r4, #0]
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4638      	mov	r0, r7
 800b9de:	eb04 0903 	add.w	r9, r4, r3
 800b9e2:	f000 f8fd 	bl	800bbe0 <_sbrk_r>
 800b9e6:	4581      	cmp	r9, r0
 800b9e8:	d13f      	bne.n	800ba6a <_malloc_r+0xe6>
 800b9ea:	6821      	ldr	r1, [r4, #0]
 800b9ec:	1a6d      	subs	r5, r5, r1
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7ff ffa7 	bl	800b944 <sbrk_aligned>
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	d037      	beq.n	800ba6a <_malloc_r+0xe6>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	442b      	add	r3, r5
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	f8d8 3000 	ldr.w	r3, [r8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d038      	beq.n	800ba7a <_malloc_r+0xf6>
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	42a2      	cmp	r2, r4
 800ba0c:	d12b      	bne.n	800ba66 <_malloc_r+0xe2>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	605a      	str	r2, [r3, #4]
 800ba12:	e00f      	b.n	800ba34 <_malloc_r+0xb0>
 800ba14:	6822      	ldr	r2, [r4, #0]
 800ba16:	1b52      	subs	r2, r2, r5
 800ba18:	d41f      	bmi.n	800ba5a <_malloc_r+0xd6>
 800ba1a:	2a0b      	cmp	r2, #11
 800ba1c:	d917      	bls.n	800ba4e <_malloc_r+0xca>
 800ba1e:	1961      	adds	r1, r4, r5
 800ba20:	42a3      	cmp	r3, r4
 800ba22:	6025      	str	r5, [r4, #0]
 800ba24:	bf18      	it	ne
 800ba26:	6059      	strne	r1, [r3, #4]
 800ba28:	6863      	ldr	r3, [r4, #4]
 800ba2a:	bf08      	it	eq
 800ba2c:	f8c8 1000 	streq.w	r1, [r8]
 800ba30:	5162      	str	r2, [r4, r5]
 800ba32:	604b      	str	r3, [r1, #4]
 800ba34:	4638      	mov	r0, r7
 800ba36:	f104 060b 	add.w	r6, r4, #11
 800ba3a:	f000 f829 	bl	800ba90 <__malloc_unlock>
 800ba3e:	f026 0607 	bic.w	r6, r6, #7
 800ba42:	1d23      	adds	r3, r4, #4
 800ba44:	1af2      	subs	r2, r6, r3
 800ba46:	d0ae      	beq.n	800b9a6 <_malloc_r+0x22>
 800ba48:	1b9b      	subs	r3, r3, r6
 800ba4a:	50a3      	str	r3, [r4, r2]
 800ba4c:	e7ab      	b.n	800b9a6 <_malloc_r+0x22>
 800ba4e:	42a3      	cmp	r3, r4
 800ba50:	6862      	ldr	r2, [r4, #4]
 800ba52:	d1dd      	bne.n	800ba10 <_malloc_r+0x8c>
 800ba54:	f8c8 2000 	str.w	r2, [r8]
 800ba58:	e7ec      	b.n	800ba34 <_malloc_r+0xb0>
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	6864      	ldr	r4, [r4, #4]
 800ba5e:	e7ac      	b.n	800b9ba <_malloc_r+0x36>
 800ba60:	4634      	mov	r4, r6
 800ba62:	6876      	ldr	r6, [r6, #4]
 800ba64:	e7b4      	b.n	800b9d0 <_malloc_r+0x4c>
 800ba66:	4613      	mov	r3, r2
 800ba68:	e7cc      	b.n	800ba04 <_malloc_r+0x80>
 800ba6a:	230c      	movs	r3, #12
 800ba6c:	603b      	str	r3, [r7, #0]
 800ba6e:	4638      	mov	r0, r7
 800ba70:	f000 f80e 	bl	800ba90 <__malloc_unlock>
 800ba74:	e797      	b.n	800b9a6 <_malloc_r+0x22>
 800ba76:	6025      	str	r5, [r4, #0]
 800ba78:	e7dc      	b.n	800ba34 <_malloc_r+0xb0>
 800ba7a:	605b      	str	r3, [r3, #4]
 800ba7c:	deff      	udf	#255	; 0xff
 800ba7e:	bf00      	nop
 800ba80:	2001042c 	.word	0x2001042c

0800ba84 <__malloc_lock>:
 800ba84:	4801      	ldr	r0, [pc, #4]	; (800ba8c <__malloc_lock+0x8>)
 800ba86:	f000 b8e5 	b.w	800bc54 <__retarget_lock_acquire_recursive>
 800ba8a:	bf00      	nop
 800ba8c:	20010570 	.word	0x20010570

0800ba90 <__malloc_unlock>:
 800ba90:	4801      	ldr	r0, [pc, #4]	; (800ba98 <__malloc_unlock+0x8>)
 800ba92:	f000 b8e0 	b.w	800bc56 <__retarget_lock_release_recursive>
 800ba96:	bf00      	nop
 800ba98:	20010570 	.word	0x20010570

0800ba9c <memset>:
 800ba9c:	4402      	add	r2, r0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d100      	bne.n	800baa6 <memset+0xa>
 800baa4:	4770      	bx	lr
 800baa6:	f803 1b01 	strb.w	r1, [r3], #1
 800baaa:	e7f9      	b.n	800baa0 <memset+0x4>

0800baac <_reclaim_reent>:
 800baac:	4b29      	ldr	r3, [pc, #164]	; (800bb54 <_reclaim_reent+0xa8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4283      	cmp	r3, r0
 800bab2:	b570      	push	{r4, r5, r6, lr}
 800bab4:	4604      	mov	r4, r0
 800bab6:	d04b      	beq.n	800bb50 <_reclaim_reent+0xa4>
 800bab8:	69c3      	ldr	r3, [r0, #28]
 800baba:	b143      	cbz	r3, 800bace <_reclaim_reent+0x22>
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d144      	bne.n	800bb4c <_reclaim_reent+0xa0>
 800bac2:	69e3      	ldr	r3, [r4, #28]
 800bac4:	6819      	ldr	r1, [r3, #0]
 800bac6:	b111      	cbz	r1, 800bace <_reclaim_reent+0x22>
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 f8d3 	bl	800bc74 <_free_r>
 800bace:	6961      	ldr	r1, [r4, #20]
 800bad0:	b111      	cbz	r1, 800bad8 <_reclaim_reent+0x2c>
 800bad2:	4620      	mov	r0, r4
 800bad4:	f000 f8ce 	bl	800bc74 <_free_r>
 800bad8:	69e1      	ldr	r1, [r4, #28]
 800bada:	b111      	cbz	r1, 800bae2 <_reclaim_reent+0x36>
 800badc:	4620      	mov	r0, r4
 800bade:	f000 f8c9 	bl	800bc74 <_free_r>
 800bae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bae4:	b111      	cbz	r1, 800baec <_reclaim_reent+0x40>
 800bae6:	4620      	mov	r0, r4
 800bae8:	f000 f8c4 	bl	800bc74 <_free_r>
 800baec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baee:	b111      	cbz	r1, 800baf6 <_reclaim_reent+0x4a>
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 f8bf 	bl	800bc74 <_free_r>
 800baf6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800baf8:	b111      	cbz	r1, 800bb00 <_reclaim_reent+0x54>
 800bafa:	4620      	mov	r0, r4
 800bafc:	f000 f8ba 	bl	800bc74 <_free_r>
 800bb00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bb02:	b111      	cbz	r1, 800bb0a <_reclaim_reent+0x5e>
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 f8b5 	bl	800bc74 <_free_r>
 800bb0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bb0c:	b111      	cbz	r1, 800bb14 <_reclaim_reent+0x68>
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f000 f8b0 	bl	800bc74 <_free_r>
 800bb14:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bb16:	b111      	cbz	r1, 800bb1e <_reclaim_reent+0x72>
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f000 f8ab 	bl	800bc74 <_free_r>
 800bb1e:	6a23      	ldr	r3, [r4, #32]
 800bb20:	b1b3      	cbz	r3, 800bb50 <_reclaim_reent+0xa4>
 800bb22:	4620      	mov	r0, r4
 800bb24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb28:	4718      	bx	r3
 800bb2a:	5949      	ldr	r1, [r1, r5]
 800bb2c:	b941      	cbnz	r1, 800bb40 <_reclaim_reent+0x94>
 800bb2e:	3504      	adds	r5, #4
 800bb30:	69e3      	ldr	r3, [r4, #28]
 800bb32:	2d80      	cmp	r5, #128	; 0x80
 800bb34:	68d9      	ldr	r1, [r3, #12]
 800bb36:	d1f8      	bne.n	800bb2a <_reclaim_reent+0x7e>
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 f89b 	bl	800bc74 <_free_r>
 800bb3e:	e7c0      	b.n	800bac2 <_reclaim_reent+0x16>
 800bb40:	680e      	ldr	r6, [r1, #0]
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f896 	bl	800bc74 <_free_r>
 800bb48:	4631      	mov	r1, r6
 800bb4a:	e7ef      	b.n	800bb2c <_reclaim_reent+0x80>
 800bb4c:	2500      	movs	r5, #0
 800bb4e:	e7ef      	b.n	800bb30 <_reclaim_reent+0x84>
 800bb50:	bd70      	pop	{r4, r5, r6, pc}
 800bb52:	bf00      	nop
 800bb54:	2000005c 	.word	0x2000005c

0800bb58 <_raise_r>:
 800bb58:	291f      	cmp	r1, #31
 800bb5a:	b538      	push	{r3, r4, r5, lr}
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	460d      	mov	r5, r1
 800bb60:	d904      	bls.n	800bb6c <_raise_r+0x14>
 800bb62:	2316      	movs	r3, #22
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bb6e:	b112      	cbz	r2, 800bb76 <_raise_r+0x1e>
 800bb70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb74:	b94b      	cbnz	r3, 800bb8a <_raise_r+0x32>
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 f830 	bl	800bbdc <_getpid_r>
 800bb7c:	462a      	mov	r2, r5
 800bb7e:	4601      	mov	r1, r0
 800bb80:	4620      	mov	r0, r4
 800bb82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb86:	f000 b817 	b.w	800bbb8 <_kill_r>
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d00a      	beq.n	800bba4 <_raise_r+0x4c>
 800bb8e:	1c59      	adds	r1, r3, #1
 800bb90:	d103      	bne.n	800bb9a <_raise_r+0x42>
 800bb92:	2316      	movs	r3, #22
 800bb94:	6003      	str	r3, [r0, #0]
 800bb96:	2001      	movs	r0, #1
 800bb98:	e7e7      	b.n	800bb6a <_raise_r+0x12>
 800bb9a:	2400      	movs	r4, #0
 800bb9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bba0:	4628      	mov	r0, r5
 800bba2:	4798      	blx	r3
 800bba4:	2000      	movs	r0, #0
 800bba6:	e7e0      	b.n	800bb6a <_raise_r+0x12>

0800bba8 <raise>:
 800bba8:	4b02      	ldr	r3, [pc, #8]	; (800bbb4 <raise+0xc>)
 800bbaa:	4601      	mov	r1, r0
 800bbac:	6818      	ldr	r0, [r3, #0]
 800bbae:	f7ff bfd3 	b.w	800bb58 <_raise_r>
 800bbb2:	bf00      	nop
 800bbb4:	2000005c 	.word	0x2000005c

0800bbb8 <_kill_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4d07      	ldr	r5, [pc, #28]	; (800bbd8 <_kill_r+0x20>)
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	602b      	str	r3, [r5, #0]
 800bbc6:	f7f5 f913 	bl	8000df0 <_kill>
 800bbca:	1c43      	adds	r3, r0, #1
 800bbcc:	d102      	bne.n	800bbd4 <_kill_r+0x1c>
 800bbce:	682b      	ldr	r3, [r5, #0]
 800bbd0:	b103      	cbz	r3, 800bbd4 <_kill_r+0x1c>
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	bd38      	pop	{r3, r4, r5, pc}
 800bbd6:	bf00      	nop
 800bbd8:	2001056c 	.word	0x2001056c

0800bbdc <_getpid_r>:
 800bbdc:	f7f5 b900 	b.w	8000de0 <_getpid>

0800bbe0 <_sbrk_r>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4d06      	ldr	r5, [pc, #24]	; (800bbfc <_sbrk_r+0x1c>)
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	4608      	mov	r0, r1
 800bbea:	602b      	str	r3, [r5, #0]
 800bbec:	f7f5 f91a 	bl	8000e24 <_sbrk>
 800bbf0:	1c43      	adds	r3, r0, #1
 800bbf2:	d102      	bne.n	800bbfa <_sbrk_r+0x1a>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	b103      	cbz	r3, 800bbfa <_sbrk_r+0x1a>
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	bd38      	pop	{r3, r4, r5, pc}
 800bbfc:	2001056c 	.word	0x2001056c

0800bc00 <__errno>:
 800bc00:	4b01      	ldr	r3, [pc, #4]	; (800bc08 <__errno+0x8>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	2000005c 	.word	0x2000005c

0800bc0c <__libc_init_array>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4d0d      	ldr	r5, [pc, #52]	; (800bc44 <__libc_init_array+0x38>)
 800bc10:	4c0d      	ldr	r4, [pc, #52]	; (800bc48 <__libc_init_array+0x3c>)
 800bc12:	1b64      	subs	r4, r4, r5
 800bc14:	10a4      	asrs	r4, r4, #2
 800bc16:	2600      	movs	r6, #0
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	d109      	bne.n	800bc30 <__libc_init_array+0x24>
 800bc1c:	4d0b      	ldr	r5, [pc, #44]	; (800bc4c <__libc_init_array+0x40>)
 800bc1e:	4c0c      	ldr	r4, [pc, #48]	; (800bc50 <__libc_init_array+0x44>)
 800bc20:	f000 f874 	bl	800bd0c <_init>
 800bc24:	1b64      	subs	r4, r4, r5
 800bc26:	10a4      	asrs	r4, r4, #2
 800bc28:	2600      	movs	r6, #0
 800bc2a:	42a6      	cmp	r6, r4
 800bc2c:	d105      	bne.n	800bc3a <__libc_init_array+0x2e>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc34:	4798      	blx	r3
 800bc36:	3601      	adds	r6, #1
 800bc38:	e7ee      	b.n	800bc18 <__libc_init_array+0xc>
 800bc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3e:	4798      	blx	r3
 800bc40:	3601      	adds	r6, #1
 800bc42:	e7f2      	b.n	800bc2a <__libc_init_array+0x1e>
 800bc44:	0800bd8c 	.word	0x0800bd8c
 800bc48:	0800bd8c 	.word	0x0800bd8c
 800bc4c:	0800bd8c 	.word	0x0800bd8c
 800bc50:	0800bd90 	.word	0x0800bd90

0800bc54 <__retarget_lock_acquire_recursive>:
 800bc54:	4770      	bx	lr

0800bc56 <__retarget_lock_release_recursive>:
 800bc56:	4770      	bx	lr

0800bc58 <memcpy>:
 800bc58:	440a      	add	r2, r1
 800bc5a:	4291      	cmp	r1, r2
 800bc5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc60:	d100      	bne.n	800bc64 <memcpy+0xc>
 800bc62:	4770      	bx	lr
 800bc64:	b510      	push	{r4, lr}
 800bc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc6e:	4291      	cmp	r1, r2
 800bc70:	d1f9      	bne.n	800bc66 <memcpy+0xe>
 800bc72:	bd10      	pop	{r4, pc}

0800bc74 <_free_r>:
 800bc74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d044      	beq.n	800bd04 <_free_r+0x90>
 800bc7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc7e:	9001      	str	r0, [sp, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f1a1 0404 	sub.w	r4, r1, #4
 800bc86:	bfb8      	it	lt
 800bc88:	18e4      	addlt	r4, r4, r3
 800bc8a:	f7ff fefb 	bl	800ba84 <__malloc_lock>
 800bc8e:	4a1e      	ldr	r2, [pc, #120]	; (800bd08 <_free_r+0x94>)
 800bc90:	9801      	ldr	r0, [sp, #4]
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	b933      	cbnz	r3, 800bca4 <_free_r+0x30>
 800bc96:	6063      	str	r3, [r4, #4]
 800bc98:	6014      	str	r4, [r2, #0]
 800bc9a:	b003      	add	sp, #12
 800bc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bca0:	f7ff bef6 	b.w	800ba90 <__malloc_unlock>
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	d908      	bls.n	800bcba <_free_r+0x46>
 800bca8:	6825      	ldr	r5, [r4, #0]
 800bcaa:	1961      	adds	r1, r4, r5
 800bcac:	428b      	cmp	r3, r1
 800bcae:	bf01      	itttt	eq
 800bcb0:	6819      	ldreq	r1, [r3, #0]
 800bcb2:	685b      	ldreq	r3, [r3, #4]
 800bcb4:	1949      	addeq	r1, r1, r5
 800bcb6:	6021      	streq	r1, [r4, #0]
 800bcb8:	e7ed      	b.n	800bc96 <_free_r+0x22>
 800bcba:	461a      	mov	r2, r3
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	b10b      	cbz	r3, 800bcc4 <_free_r+0x50>
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	d9fa      	bls.n	800bcba <_free_r+0x46>
 800bcc4:	6811      	ldr	r1, [r2, #0]
 800bcc6:	1855      	adds	r5, r2, r1
 800bcc8:	42a5      	cmp	r5, r4
 800bcca:	d10b      	bne.n	800bce4 <_free_r+0x70>
 800bccc:	6824      	ldr	r4, [r4, #0]
 800bcce:	4421      	add	r1, r4
 800bcd0:	1854      	adds	r4, r2, r1
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	6011      	str	r1, [r2, #0]
 800bcd6:	d1e0      	bne.n	800bc9a <_free_r+0x26>
 800bcd8:	681c      	ldr	r4, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	6053      	str	r3, [r2, #4]
 800bcde:	440c      	add	r4, r1
 800bce0:	6014      	str	r4, [r2, #0]
 800bce2:	e7da      	b.n	800bc9a <_free_r+0x26>
 800bce4:	d902      	bls.n	800bcec <_free_r+0x78>
 800bce6:	230c      	movs	r3, #12
 800bce8:	6003      	str	r3, [r0, #0]
 800bcea:	e7d6      	b.n	800bc9a <_free_r+0x26>
 800bcec:	6825      	ldr	r5, [r4, #0]
 800bcee:	1961      	adds	r1, r4, r5
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	bf04      	itt	eq
 800bcf4:	6819      	ldreq	r1, [r3, #0]
 800bcf6:	685b      	ldreq	r3, [r3, #4]
 800bcf8:	6063      	str	r3, [r4, #4]
 800bcfa:	bf04      	itt	eq
 800bcfc:	1949      	addeq	r1, r1, r5
 800bcfe:	6021      	streq	r1, [r4, #0]
 800bd00:	6054      	str	r4, [r2, #4]
 800bd02:	e7ca      	b.n	800bc9a <_free_r+0x26>
 800bd04:	b003      	add	sp, #12
 800bd06:	bd30      	pop	{r4, r5, pc}
 800bd08:	2001042c 	.word	0x2001042c

0800bd0c <_init>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr

0800bd18 <_fini>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	bf00      	nop
 800bd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1e:	bc08      	pop	{r3}
 800bd20:	469e      	mov	lr, r3
 800bd22:	4770      	bx	lr
