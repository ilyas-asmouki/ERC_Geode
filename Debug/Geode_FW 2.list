
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800c3a4  0800c3a4  0001c3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c464  0800c464  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c464  0800c464  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c464  0800c464  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c464  0800c464  0001c464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c468  0800c468  0001c468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c46c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c70  200001d8  0800c644  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e48  0800c644  00022e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023dc8  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e7c  00000000  00000000  00044013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  00049e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001663  00000000  00000000  0004bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001902c  00000000  00000000  0004d2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009f59  00000000  00000000  000662d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007d5c  00000000  00000000  00070230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  00077f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c38c 	.word	0x0800c38c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800c38c 	.word	0x0800c38c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_CRC_Init+0x50>)
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_CRC_Init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_CRC_Init+0x50>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_CRC_Init+0x50>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_CRC_Init+0x50>)
 80002d8:	2207      	movs	r2, #7
 80002da:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_CRC_Init+0x50>)
 80002de:	2208      	movs	r2, #8
 80002e0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_CRC_Init+0x50>)
 80002e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e8:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_CRC_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_CRC_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CRC_Init+0x50>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_CRC_Init+0x50>)
 80002fe:	f000 ffb3 	bl	8001268 <HAL_CRC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 fbe1 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200001f4 	.word	0x200001f4
 8000314:	40023000 	.word	0x40023000

08000318 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <HAL_CRC_MspInit+0x38>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d10b      	bne.n	8000342 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 800032c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 8000330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000334:	6493      	str	r3, [r2, #72]	; 0x48
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 8000338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800033a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023000 	.word	0x40023000
 8000354:	40021000 	.word	0x40021000

08000358 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800035e:	4a20      	ldr	r2, [pc, #128]	; (80003e0 <MX_FDCAN1_Init+0x88>)
 8000360:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000376:	2200      	movs	r2, #0
 8000378:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800037c:	2200      	movs	r2, #0
 800037e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000382:	2200      	movs	r2, #0
 8000384:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000388:	2210      	movs	r2, #16
 800038a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800038e:	2201      	movs	r2, #1
 8000390:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000394:	2202      	movs	r2, #2
 8000396:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800039a:	2202      	movs	r2, #2
 800039c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003be:	2200      	movs	r2, #0
 80003c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003ca:	f001 f83f 	bl	800144c <HAL_FDCAN_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80003d4:	f000 fb7b 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20000218 	.word	0x20000218
 80003e0:	40006400 	.word	0x40006400

080003e4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003ea:	4a20      	ldr	r2, [pc, #128]	; (800046c <MX_FDCAN2_Init+0x88>)
 80003ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000402:	2200      	movs	r2, #0
 8000404:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000406:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000408:	2200      	movs	r2, #0
 800040a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800040e:	2200      	movs	r2, #0
 8000410:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000414:	2210      	movs	r2, #16
 8000416:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800041a:	2201      	movs	r2, #1
 800041c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000420:	2202      	movs	r2, #2
 8000422:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000426:	2202      	movs	r2, #2
 8000428:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800042c:	2201      	movs	r2, #1
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000432:	2201      	movs	r2, #1
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000438:	2201      	movs	r2, #1
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800043e:	2201      	movs	r2, #1
 8000440:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800044a:	2200      	movs	r2, #0
 800044c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000450:	2200      	movs	r2, #0
 8000452:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000456:	f000 fff9 	bl	800144c <HAL_FDCAN_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000460:	f000 fb35 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2000027c 	.word	0x2000027c
 800046c:	40006800 	.word	0x40006800

08000470 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0a0      	sub	sp, #128	; 0x80
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	2254      	movs	r2, #84	; 0x54
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f00b faa1 	bl	800b9d8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a48      	ldr	r2, [pc, #288]	; (80005bc <HAL_FDCAN_MspInit+0x14c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d142      	bne.n	8000526 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004aa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	f107 0318 	add.w	r3, r7, #24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 ff7b 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004bc:	f000 fb07 	bl	8000ace <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004c0:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a3e      	ldr	r2, [pc, #248]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004ca:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d10b      	bne.n	80004ea <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	4a3b      	ldr	r2, [pc, #236]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004dc:	6593      	str	r3, [r2, #88]	; 0x58
 80004de:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a35      	ldr	r2, [pc, #212]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000514:	2309      	movs	r3, #9
 8000516:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051c:	4619      	mov	r1, r3
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <HAL_FDCAN_MspInit+0x158>)
 8000520:	f001 f95a 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000524:	e045      	b.n	80005b2 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a28      	ldr	r2, [pc, #160]	; (80005cc <HAL_FDCAN_MspInit+0x15c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d140      	bne.n	80005b2 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f003 ff33 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 800054c:	f000 fabf 	bl	8000ace <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 8000558:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10b      	bne.n	800057a <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056c:	6593      	str	r3, [r2, #88]	; 0x58
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000592:	2360      	movs	r3, #96	; 0x60
 8000594:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80005a2:	2309      	movs	r3, #9
 80005a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005aa:	4619      	mov	r1, r3
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <HAL_FDCAN_MspInit+0x158>)
 80005ae:	f001 f913 	bl	80017d8 <HAL_GPIO_Init>
}
 80005b2:	bf00      	nop
 80005b4:	3780      	adds	r7, #128	; 0x80
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40006400 	.word	0x40006400
 80005c0:	200002e0 	.word	0x200002e0
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000400 	.word	0x48000400
 80005cc:	40006800 	.word	0x40006800

080005d0 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

extern void MX_FREERTOS_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	System::init();
 80005d4:	f00a fccc 	bl	800af70 <_ZN6System4initEv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <MX_GPIO_Init+0x194>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a5e      	ldr	r2, [pc, #376]	; (8000770 <MX_GPIO_Init+0x194>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b5c      	ldr	r3, [pc, #368]	; (8000770 <MX_GPIO_Init+0x194>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <MX_GPIO_Init+0x194>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a58      	ldr	r2, [pc, #352]	; (8000770 <MX_GPIO_Init+0x194>)
 8000610:	f043 0320 	orr.w	r3, r3, #32
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b56      	ldr	r3, [pc, #344]	; (8000770 <MX_GPIO_Init+0x194>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b53      	ldr	r3, [pc, #332]	; (8000770 <MX_GPIO_Init+0x194>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a52      	ldr	r2, [pc, #328]	; (8000770 <MX_GPIO_Init+0x194>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <MX_GPIO_Init+0x194>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <MX_GPIO_Init+0x194>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <MX_GPIO_Init+0x194>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MX_GPIO_Init+0x194>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <MX_GPIO_Init+0x194>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <MX_GPIO_Init+0x194>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <MX_GPIO_Init+0x194>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 800066a:	2200      	movs	r2, #0
 800066c:	f246 0187 	movw	r1, #24711	; 0x6087
 8000670:	4840      	ldr	r0, [pc, #256]	; (8000774 <MX_GPIO_Init+0x198>)
 8000672:	f001 fa33 	bl	8001adc <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	210a      	movs	r1, #10
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 fa2d 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2187      	movs	r1, #135	; 0x87
 8000686:	483c      	ldr	r0, [pc, #240]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000688:	f001 fa28 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 800068c:	f246 0387 	movw	r3, #24711	; 0x6087
 8000690:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4833      	ldr	r0, [pc, #204]	; (8000774 <MX_GPIO_Init+0x198>)
 80006a6:	f001 f897 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 80006aa:	f248 0378 	movw	r3, #32888	; 0x8078
 80006ae:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <MX_GPIO_Init+0x198>)
 80006c0:	f001 f88a 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 80006c4:	f240 4305 	movw	r3, #1029	; 0x405
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f001 f87c 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 80006e0:	230a      	movs	r3, #10
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f001 f86d 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 80006fe:	2387      	movs	r3, #135	; 0x87
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000716:	f001 f85f 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 800071a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000730:	f001 f852 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8000734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	2303      	movs	r3, #3
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0x19c>)
 800074a:	f001 f845 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 800074e:	2304      	movs	r3, #4
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_GPIO_Init+0x1a0>)
 8000762:	f001 f839 	bl	80017d8 <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800
 8000778:	48000400 	.word	0x48000400
 800077c:	48000c00 	.word	0x48000c00

08000780 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C2_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C2_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007bc:	f001 f9a6 	bl	8001b0c <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 f982 	bl	8000ace <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007ce:	f001 fa38 	bl	8001c42 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 f979 	bl	8000ace <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007e0:	f001 fa7a 	bl	8001cd8 <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f970 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200002e4 	.word	0x200002e4
 80007f8:	40005800 	.word	0x40005800
 80007fc:	00e057fd 	.word	0x00e057fd

08000800 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C3_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C3_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C3_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C3_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <MX_I2C3_Init+0x74>)
 800083c:	f001 f966 	bl	8001b0c <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 f942 	bl	8000ace <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C3_Init+0x74>)
 800084e:	f001 f9f8 	bl	8001c42 <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 f939 	bl	8000ace <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2C3_Init+0x74>)
 8000860:	f001 fa3a 	bl	8001cd8 <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f930 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000338 	.word	0x20000338
 8000878:	40007800 	.word	0x40007800
 800087c:	00e057fd 	.word	0x00e057fd

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a0      	sub	sp, #128	; 0x80
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	2254      	movs	r2, #84	; 0x54
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00b f899 	bl	800b9d8 <memset>
  if(i2cHandle->Instance==I2C2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a3e      	ldr	r2, [pc, #248]	; (80009a4 <HAL_I2C_MspInit+0x124>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d138      	bne.n	8000922 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fd75 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008c8:	f000 f901 	bl	8000ace <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d8:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	2312      	movs	r3, #18
 80008ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 ff68 	bl	80017d8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800090e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000920:	e03c      	b.n	800099c <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d137      	bne.n	800099c <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fd36 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8000946:	f000 f8c2 	bl	8000ace <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000974:	2308      	movs	r3, #8
 8000976:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_I2C_MspInit+0x130>)
 8000980:	f000 ff2a 	bl	80017d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800098a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800098e:	6593      	str	r3, [r2, #88]	; 0x58
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
}
 800099c:	bf00      	nop
 800099e:	3780      	adds	r7, #128	; 0x80
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005800 	.word	0x40005800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40007800 	.word	0x40007800
 80009b0:	48000800 	.word	0x48000800

080009b4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <MX_IWDG_Init+0x38>)
 80009bc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ca:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009d2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009d6:	f001 f9cb 	bl	8001d70 <HAL_IWDG_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80009e0:	f000 f875 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000038c 	.word	0x2000038c
 80009ec:	40003000 	.word	0x40003000

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f000 fab7 	bl	8000f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f81d 	bl	8000a36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff fdee 	bl	80005dc <MX_GPIO_Init>
  MX_CRC_Init();
 8000a00:	f7ff fc5e 	bl	80002c0 <MX_CRC_Init>
  MX_FDCAN1_Init();
 8000a04:	f7ff fca8 	bl	8000358 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a08:	f7ff fcec 	bl	80003e4 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000a0c:	f7ff feb8 	bl	8000780 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000a10:	f7ff fef6 	bl	8000800 <MX_I2C3_Init>
  MX_IWDG_Init();
 8000a14:	f7ff ffce 	bl	80009b4 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000a18:	f000 f85e 	bl	8000ad8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a1c:	f000 f89a 	bl	8000b54 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a20:	f000 f8d6 	bl	8000bd0 <MX_SPI3_Init>
  MX_USB_Device_Init();
 8000a24:	f00a fac0 	bl	800afa8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a28:	f007 ff7e 	bl	8008928 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a2c:	f7ff fdd0 	bl	80005d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a30:	f007 ff9e 	bl	8008970 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <main+0x44>

08000a36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b094      	sub	sp, #80	; 0x50
 8000a3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	2238      	movs	r2, #56	; 0x38
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00a ffc7 	bl	800b9d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5c:	f002 ff0c 	bl	8003878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a60:	2309      	movs	r3, #9
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	2303      	movs	r3, #3
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 8000a76:	2310      	movs	r3, #16
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a7a:	2360      	movs	r3, #96	; 0x60
 8000a7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000a82:	2306      	movs	r3, #6
 8000a84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 ff96 	bl	80039c0 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a9a:	f000 f818 	bl	8000ace <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 fa94 	bl	8003fe4 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ac2:	f000 f804 	bl	8000ace <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad2:	b672      	cpsid	i
}
 8000ad4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <Error_Handler+0x8>

08000ad8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <MX_SPI1_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000af2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000af6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000afa:	2202      	movs	r2, #2
 8000afc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b06:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b0e:	2208      	movs	r2, #8
 8000b10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b26:	2207      	movs	r2, #7
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_SPI1_Init+0x74>)
 8000b38:	f003 fe86 	bl	8004848 <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f7ff ffc4 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000039c 	.word	0x2000039c
 8000b50:	40013000 	.word	0x40013000

08000b54 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_SPI2_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b82:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_SPI2_Init+0x74>)
 8000bb4:	f003 fe48 	bl	8004848 <HAL_SPI_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f7ff ff86 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000400 	.word	0x20000400
 8000bcc:	40003800 	.word	0x40003800

08000bd0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_SPI3_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000bea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000bfe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c06:	2208      	movs	r2, #8
 8000c08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_SPI3_Init+0x74>)
 8000c30:	f003 fe0a 	bl	8004848 <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f7ff ff48 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000464 	.word	0x20000464
 8000c48:	40003c00 	.word	0x40003c00

08000c4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a55      	ldr	r2, [pc, #340]	; (8000dc0 <HAL_SPI_MspInit+0x174>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d129      	bne.n	8000cc2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6e:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c78:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7a:	4b52      	ldr	r3, [pc, #328]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a4e      	ldr	r2, [pc, #312]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	61fb      	str	r3, [r7, #28]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9e:	23f0      	movs	r3, #240	; 0xf0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f000 fd8c 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cc0:	e07a      	b.n	8000db8 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_SPI_MspInit+0x17c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d129      	bne.n	8000d20 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	4a3c      	ldr	r2, [pc, #240]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cfc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	482c      	ldr	r0, [pc, #176]	; (8000dcc <HAL_SPI_MspInit+0x180>)
 8000d1a:	f000 fd5d 	bl	80017d8 <HAL_GPIO_Init>
}
 8000d1e:	e04b      	b.n	8000db8 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <HAL_SPI_MspInit+0x184>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d146      	bne.n	8000db8 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_SPI_MspInit+0x178>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d84:	2306      	movs	r3, #6
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fd21 	bl	80017d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da8:	2306      	movs	r3, #6
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_SPI_MspInit+0x188>)
 8000db4:	f000 fd10 	bl	80017d8 <HAL_GPIO_Init>
}
 8000db8:	bf00      	nop
 8000dba:	3738      	adds	r7, #56	; 0x38
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40013000 	.word	0x40013000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40003800 	.word	0x40003800
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	40003c00 	.word	0x40003c00
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_MspInit+0x4c>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_MspInit+0x4c>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	f06f 0001 	mvn.w	r0, #1
 8000e16:	f000 f9f2 	bl	80011fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8d8 	bl	800100c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e5c:	f009 f952 	bl	800a104 <xTaskGetSchedulerState>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d001      	beq.n	8000e6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e66:	f009 ff37 	bl	800acd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <USB_LP_IRQHandler+0x10>)
 8000e76:	f001 f8ba 	bl	8001fee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20002804 	.word	0x20002804

08000e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e8c:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <_sbrk+0x5c>)
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <_sbrk+0x60>)
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <_sbrk+0x64>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <_sbrk+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d207      	bcs.n	8000ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb4:	f00a fdee 	bl	800ba94 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	220c      	movs	r2, #12
 8000ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec2:	e009      	b.n	8000ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <_sbrk+0x64>)
 8000ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20020000 	.word	0x20020000
 8000ee4:	00000400 	.word	0x00000400
 8000ee8:	200004c8 	.word	0x200004c8
 8000eec:	20002e48 	.word	0x20002e48

08000ef0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	; (8000f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <LoopForever+0xe>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	; (8000f60 <LoopForever+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000f42:	f00a fdad 	bl	800baa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f46:	f7ff fd53 	bl	80009f0 <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   r0, =_estack
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000f58:	0800c46c 	.word	0x0800c46c
  ldr r2, =_sbss
 8000f5c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000f60:	20002e48 	.word	0x20002e48

08000f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_2_IRQHandler>

08000f66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f939 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f80e 	bl	8000f98 <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	e001      	b.n	8000f8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f88:	f7ff ff26 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f8c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_InitTick+0x68>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d022      	beq.n	8000ff2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_InitTick+0x6c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_InitTick+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f944 	bl	800124e <HAL_SYSTICK_Config>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10f      	bne.n	8000fec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d809      	bhi.n	8000fe6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fda:	f000 f910 	bl	80011fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_InitTick+0x70>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e007      	b.n	8000ff6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e004      	b.n	8000ff6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e001      	b.n	8000ff6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000008 	.word	0x20000008
 8001004:	20000000 	.word	0x20000000
 8001008:	20000004 	.word	0x20000004

0800100c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x1c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x20>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4413      	add	r3, r2
 800101a:	4a03      	ldr	r2, [pc, #12]	; (8001028 <HAL_IncTick+0x1c>)
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	200004cc 	.word	0x200004cc
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200004cc 	.word	0x200004cc

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff40 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff90 	bl	800113c <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5f 	bl	80010e8 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff33 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ffa4 	bl	80011a4 <SysTick_Config>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e054      	b.n	8001324 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7f5b      	ldrb	r3, [r3, #29]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff f844 	bl	8000318 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2202      	movs	r2, #2
 8001294:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	791b      	ldrb	r3, [r3, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a22      	ldr	r2, [pc, #136]	; (800132c <HAL_CRC_Init+0xc4>)
 80012a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0218 	bic.w	r2, r2, #24
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	e00c      	b.n	80012d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6899      	ldr	r1, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	461a      	mov	r2, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f834 	bl	8001330 <HAL_CRCEx_Polynomial_Set>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e028      	b.n	8001324 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	795b      	ldrb	r3, [r3, #5]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	e004      	b.n	80012f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6912      	ldr	r2, [r2, #16]
 80012ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	04c11db7 	.word	0x04c11db7

08001330 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001340:	231f      	movs	r3, #31
 8001342:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
 8001352:	e063      	b.n	800141c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001354:	bf00      	nop
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1e5a      	subs	r2, r3, #1
 800135a:	613a      	str	r2, [r7, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <HAL_CRCEx_Polynomial_Set+0x44>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b18      	cmp	r3, #24
 8001378:	d846      	bhi.n	8001408 <HAL_CRCEx_Polynomial_Set+0xd8>
 800137a:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <HAL_CRCEx_Polynomial_Set+0x50>)
 800137c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001380:	0800140f 	.word	0x0800140f
 8001384:	08001409 	.word	0x08001409
 8001388:	08001409 	.word	0x08001409
 800138c:	08001409 	.word	0x08001409
 8001390:	08001409 	.word	0x08001409
 8001394:	08001409 	.word	0x08001409
 8001398:	08001409 	.word	0x08001409
 800139c:	08001409 	.word	0x08001409
 80013a0:	080013fd 	.word	0x080013fd
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001409 	.word	0x08001409
 80013ac:	08001409 	.word	0x08001409
 80013b0:	08001409 	.word	0x08001409
 80013b4:	08001409 	.word	0x08001409
 80013b8:	08001409 	.word	0x08001409
 80013bc:	08001409 	.word	0x08001409
 80013c0:	080013f1 	.word	0x080013f1
 80013c4:	08001409 	.word	0x08001409
 80013c8:	08001409 	.word	0x08001409
 80013cc:	08001409 	.word	0x08001409
 80013d0:	08001409 	.word	0x08001409
 80013d4:	08001409 	.word	0x08001409
 80013d8:	08001409 	.word	0x08001409
 80013dc:	08001409 	.word	0x08001409
 80013e0:	080013e5 	.word	0x080013e5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d913      	bls.n	8001412 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80013ee:	e010      	b.n	8001412 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d90f      	bls.n	8001416 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80013fa:	e00c      	b.n	8001416 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d90b      	bls.n	800141a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001406:	e008      	b.n	800141a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	75fb      	strb	r3, [r7, #23]
        break;
 800140c:	e006      	b.n	800141c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800140e:	bf00      	nop
 8001410:	e004      	b.n	800141c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001412:	bf00      	nop
 8001414:	e002      	b.n	800141c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001416:	bf00      	nop
 8001418:	e000      	b.n	800141c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800141a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 0118 	bic.w	r1, r3, #24
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	430a      	orrs	r2, r1
 800143c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800143e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001440:	4618      	mov	r0, r3
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e147      	b.n	80016ee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7fe fffc 	bl	8000470 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0210 	bic.w	r2, r2, #16
 8001486:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001488:	f7ff fdd2 	bl	8001030 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800148e:	e012      	b.n	80014b6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001490:	f7ff fdce 	bl	8001030 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b0a      	cmp	r3, #10
 800149c:	d90b      	bls.n	80014b6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e11b      	b.n	80016ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d0e5      	beq.n	8001490 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fdac 	bl	8001030 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014da:	e012      	b.n	8001502 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014dc:	f7ff fda8 	bl	8001030 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d90b      	bls.n	8001502 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e0f5      	b.n	80016ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0e5      	beq.n	80014dc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699a      	ldr	r2, [r3, #24]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0202 	orr.w	r2, r2, #2
 800151e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a74      	ldr	r2, [pc, #464]	; (80016f8 <HAL_FDCAN_Init+0x2ac>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d103      	bne.n	8001532 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800152a:	4a74      	ldr	r2, [pc, #464]	; (80016fc <HAL_FDCAN_Init+0x2b0>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7c1b      	ldrb	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699a      	ldr	r2, [r3, #24]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001548:	619a      	str	r2, [r3, #24]
 800154a:	e007      	b.n	800155c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7c5b      	ldrb	r3, [r3, #17]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699a      	ldr	r2, [r3, #24]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001572:	619a      	str	r2, [r3, #24]
 8001574:	e007      	b.n	8001586 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001584:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7c9b      	ldrb	r3, [r3, #18]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800159c:	619a      	str	r2, [r3, #24]
 800159e:	e007      	b.n	80015b0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015ae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80015d4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0210 	bic.w	r2, r2, #16
 80015e4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0204 	orr.w	r2, r2, #4
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	e02c      	b.n	800165a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d028      	beq.n	800165a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d01c      	beq.n	800164a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800161e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0210 	orr.w	r2, r2, #16
 800162e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d110      	bne.n	800165a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699a      	ldr	r2, [r3, #24]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	619a      	str	r2, [r3, #24]
 8001648:	e007      	b.n	800165a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0220 	orr.w	r2, r2, #32
 8001658:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	3b01      	subs	r3, #1
 8001660:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	3b01      	subs	r3, #1
 8001668:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800166a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001672:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	3b01      	subs	r3, #1
 800167c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001682:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001684:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800168e:	d115      	bne.n	80016bc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	3b01      	subs	r3, #1
 800169c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800169e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	3b01      	subs	r3, #1
 80016a6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016a8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	3b01      	subs	r3, #1
 80016b2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016b8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016ba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f814 	bl	8001700 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40006400 	.word	0x40006400
 80016fc:	40006500 	.word	0x40006500

08001700 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800170a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d103      	bne.n	800171e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800171c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2c      	ldr	r2, [pc, #176]	; (80017d4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d103      	bne.n	8001730 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800172e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800173e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	041a      	lsls	r2, r3, #16
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001764:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	061a      	lsls	r2, r3, #24
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e005      	b.n	80017b2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3304      	adds	r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3f3      	bcc.n	80017a6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80017be:	bf00      	nop
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	4000a400 	.word	0x4000a400
 80017d0:	40006800 	.word	0x40006800
 80017d4:	40006c00 	.word	0x40006c00

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e6:	e15a      	b.n	8001a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 814c 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d005      	beq.n	8001818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001814:	2b02      	cmp	r3, #2
 8001816:	d130      	bne.n	800187a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800184e:	2201      	movs	r2, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	f003 0201 	and.w	r2, r3, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b03      	cmp	r3, #3
 8001884:	d017      	beq.n	80018b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d123      	bne.n	800190a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194c:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6613      	str	r3, [r2, #96]	; 0x60
 8001958:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001964:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x1f8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d019      	beq.n	80019cc <HAL_GPIO_Init+0x1f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1e4>
 80019b8:	2305      	movs	r3, #5
 80019ba:	e00a      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019bc:	2306      	movs	r3, #6
 80019be:	e008      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f ae9d 	bne.w	80017e8 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e08d      	b.n	8001c3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe fea4 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	e006      	b.n	8001b94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d108      	bne.n	8001bae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	e007      	b.n	8001bbe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69d9      	ldr	r1, [r3, #28]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d138      	bne.n	8001cca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e032      	b.n	8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2224      	movs	r2, #36	; 0x24
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d139      	bne.n	8001d62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e033      	b.n	8001d64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e041      	b.n	8001e06 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f245 5255 	movw	r2, #21845	; 0x5555
 8001d94:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6852      	ldr	r2, [r2, #4]
 8001d9e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6892      	ldr	r2, [r2, #8]
 8001da8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001daa:	f7ff f941 	bl	8001030 <HAL_GetTick>
 8001dae:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001db0:	e00f      	b.n	8001dd2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001db2:	f7ff f93d 	bl	8001030 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b31      	cmp	r3, #49	; 0x31
 8001dbe:	d908      	bls.n	8001dd2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e019      	b.n	8001e06 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e8      	bne.n	8001db2 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d005      	beq.n	8001dfa <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	e004      	b.n	8001e04 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c0      	b.n	8001fa2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f009 fa97 	bl	800b368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fdc0 	bl	80049cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e03e      	b.n	8001ed0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3311      	adds	r3, #17
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	3310      	adds	r3, #16
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3313      	adds	r3, #19
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3320      	adds	r3, #32
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3324      	adds	r3, #36	; 0x24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3bb      	bcc.n	8001e52 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e044      	b.n	8001f6a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f4e:	7bfa      	ldrb	r2, [r7, #15]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3b5      	bcc.n	8001ee0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f80:	f002 fd3f 	bl	8004a02 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a9b      	ldrb	r3, [r3, #10]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f001 fc41 	bl	8003822 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_PCD_Start+0x16>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e012      	b.n	8001fe6 <HAL_PCD_Start+0x3c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 fce6 	bl	800499e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 ffa7 	bl	8006f2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 ffac 	bl	8006f58 <USB_ReadInterrupts>
 8002000:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fb04 	bl	800261a <PCD_EP_ISR_Handler>

    return;
 8002012:	e110      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d013      	beq.n	8002046 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002030:	b292      	uxth	r2, r2
 8002032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f009 fa27 	bl	800b48a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800203c:	2100      	movs	r1, #0
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8fc 	bl	800223c <HAL_PCD_SetAddress>

    return;
 8002044:	e0f7      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00c      	beq.n	800206a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002068:	e0e5      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00c      	beq.n	800208e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002086:	b292      	uxth	r2, r2
 8002088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800208c:	e0d3      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d034      	beq.n	8002102 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0204 	bic.w	r2, r2, #4
 80020aa:	b292      	uxth	r2, r2
 80020ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0208 	bic.w	r2, r2, #8
 80020c2:	b292      	uxth	r2, r2
 80020c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020da:	2100      	movs	r1, #0
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f009 fbc7 	bl	800b870 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f009 fa0a 	bl	800b4fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020fa:	b292      	uxth	r2, r2
 80020fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002100:	e099      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002108:	2b00      	cmp	r3, #0
 800210a:	d027      	beq.n	800215c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002114:	b29a      	uxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0208 	orr.w	r2, r2, #8
 800211e:	b292      	uxth	r2, r2
 8002120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212c:	b29a      	uxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002136:	b292      	uxth	r2, r2
 8002138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0204 	orr.w	r2, r2, #4
 800214e:	b292      	uxth	r2, r2
 8002150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f009 f9b7 	bl	800b4c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800215a:	e06c      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d040      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d12b      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0204 	orr.w	r2, r2, #4
 800219a:	b292      	uxth	r2, r2
 800219c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0208 	orr.w	r2, r2, #8
 80021b2:	b292      	uxth	r2, r2
 80021b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80021d6:	2101      	movs	r1, #1
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f009 fb49 	bl	800b870 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80021de:	e02a      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f009 f971 	bl	800b4c8 <HAL_PCD_SuspendCallback>
    return;
 80021e6:	e026      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00f      	beq.n	8002212 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002204:	b292      	uxth	r2, r2
 8002206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f009 f92f 	bl	800b46e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002210:	e011      	b.n	8002236 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00c      	beq.n	8002236 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800222e:	b292      	uxth	r2, r2
 8002230:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002234:	bf00      	nop
  }
}
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_PCD_SetAddress+0x1a>
 8002252:	2302      	movs	r3, #2
 8002254:	e012      	b.n	800227c <HAL_PCD_SetAddress+0x40>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	78fa      	ldrb	r2, [r7, #3]
 8002262:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f004 fe48 	bl	8006f02 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	4608      	mov	r0, r1
 800228e:	4611      	mov	r1, r2
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	70fb      	strb	r3, [r7, #3]
 8002296:	460b      	mov	r3, r1
 8002298:	803b      	strh	r3, [r7, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0e      	bge.n	80022c8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0207 	and.w	r2, r3, #7
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	3310      	adds	r3, #16
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	705a      	strb	r2, [r3, #1]
 80022c6:	e00e      	b.n	80022e6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022f2:	883a      	ldrh	r2, [r7, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	78ba      	ldrb	r2, [r7, #2]
 80022fc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022fe:	78bb      	ldrb	r3, [r7, #2]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d102      	bne.n	800230a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_PCD_EP_Open+0x94>
 8002314:	2302      	movs	r3, #2
 8002316:	e00e      	b.n	8002336 <HAL_PCD_EP_Open+0xb2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	4618      	mov	r0, r3
 8002328:	f002 fb8a 	bl	8004a40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002334:	7afb      	ldrb	r3, [r7, #11]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800234a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da0e      	bge.n	8002370 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0207 	and.w	r2, r3, #7
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	3310      	adds	r3, #16
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00e      	b.n	800238e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 0207 	and.w	r2, r3, #7
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_EP_Close+0x6a>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e00e      	b.n	80023c6 <HAL_PCD_EP_Close+0x88>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 ff06 	bl	80051c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	460b      	mov	r3, r1
 80023dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	f003 0207 	and.w	r2, r3, #7
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2200      	movs	r2, #0
 8002406:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2200      	movs	r2, #0
 800240c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	b2da      	uxtb	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6979      	ldr	r1, [r7, #20]
 8002420:	4618      	mov	r0, r3
 8002422:	f003 f8be 	bl	80055a2 <USB_EPStartXfer>

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	460b      	mov	r3, r1
 800246e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002470:	7afb      	ldrb	r3, [r7, #11]
 8002472:	f003 0207 	and.w	r2, r3, #7
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	3310      	adds	r3, #16
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2201      	movs	r2, #1
 80024aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6979      	ldr	r1, [r7, #20]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 f86f 	bl	80055a2 <USB_EPStartXfer>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	7912      	ldrb	r2, [r2, #4]
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e03e      	b.n	800256a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	da0e      	bge.n	8002512 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 0207 	and.w	r2, r3, #7
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	3310      	adds	r3, #16
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	705a      	strb	r2, [r3, #1]
 8002510:	e00c      	b.n	800252c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_PCD_EP_SetStall+0x7e>
 8002548:	2302      	movs	r3, #2
 800254a:	e00e      	b.n	800256a <HAL_PCD_EP_SetStall+0x9c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	4618      	mov	r0, r3
 800255c:	f004 fbd2 	bl	8006d04 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	7912      	ldrb	r2, [r2, #4]
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e040      	b.n	8002612 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002594:	2b00      	cmp	r3, #0
 8002596:	da0e      	bge.n	80025b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 0207 	and.w	r2, r3, #7
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	3310      	adds	r3, #16
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	705a      	strb	r2, [r3, #1]
 80025b4:	e00e      	b.n	80025d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 0207 	and.w	r2, r3, #7
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_EP_ClrStall+0x82>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e00e      	b.n	8002612 <HAL_PCD_EP_ClrStall+0xa0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fbcf 	bl	8006da6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b096      	sub	sp, #88	; 0x58
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002622:	e3ae      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800262c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800263e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 8170 	bne.w	8002928 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002648:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d14d      	bne.n	80026f0 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002664:	81fb      	strh	r3, [r7, #14]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002674:	b29b      	uxth	r3, r3
 8002676:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3310      	adds	r3, #16
 800267c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4413      	add	r3, r2
 8002698:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a8:	695a      	ldr	r2, [r3, #20]
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	441a      	add	r2, r3
 80026b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026b4:	2100      	movs	r1, #0
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f008 febf 	bl	800b43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7b1b      	ldrb	r3, [r3, #12]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 835d 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x768>
 80026c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 8358 	bne.w	8002d82 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	7b1b      	ldrb	r3, [r3, #12]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b292      	uxth	r2, r2
 80026e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	731a      	strb	r2, [r3, #12]
 80026ee:	e348      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002702:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270a:	2b00      	cmp	r3, #0
 800270c:	d032      	beq.n	8002774 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4413      	add	r3, r2
 8002728:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002734:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002742:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002746:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002748:	b29b      	uxth	r3, r3
 800274a:	f004 fc57 	bl	8006ffc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29a      	uxth	r2, r3
 8002756:	f640 738f 	movw	r3, #3983	; 0xf8f
 800275a:	4013      	ands	r3, r2
 800275c:	823b      	strh	r3, [r7, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	8a3a      	ldrh	r2, [r7, #16]
 8002764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002768:	b292      	uxth	r2, r2
 800276a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f008 fe37 	bl	800b3e0 <HAL_PCD_SetupStageCallback>
 8002772:	e306      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002774:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002778:	2b00      	cmp	r3, #0
 800277a:	f280 8302 	bge.w	8002d82 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29a      	uxth	r2, r3
 8002786:	f640 738f 	movw	r3, #3983	; 0xf8f
 800278a:	4013      	ands	r3, r2
 800278c:	83fb      	strh	r3, [r7, #30]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	8bfa      	ldrh	r2, [r7, #30]
 8002794:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002798:	b292      	uxth	r2, r2
 800279a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d019      	beq.n	8002800 <PCD_EP_ISR_Handler+0x1e6>
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027da:	6959      	ldr	r1, [r3, #20]
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f004 fc09 	bl	8006ffc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	441a      	add	r2, r3
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027f8:	2100      	movs	r1, #0
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f008 fe02 	bl	800b404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800280a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800280e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 82b5 	bne.w	8002d82 <PCD_EP_ISR_Handler+0x768>
 8002818:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800281c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002824:	f000 82ad 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	b29a      	uxth	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b3e      	cmp	r3, #62	; 0x3e
 800285e:	d91d      	bls.n	800289c <PCD_EP_ISR_Handler+0x282>
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <PCD_EP_ISR_Handler+0x260>
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	3b01      	subs	r3, #1
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29a      	uxth	r2, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	b29b      	uxth	r3, r3
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	b29b      	uxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002894:	b29a      	uxth	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	e026      	b.n	80028ea <PCD_EP_ISR_Handler+0x2d0>
 800289c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <PCD_EP_ISR_Handler+0x2a0>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	e017      	b.n	80028ea <PCD_EP_ISR_Handler+0x2d0>
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <PCD_EP_ISR_Handler+0x2ba>
 80028ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d0:	3301      	adds	r3, #1
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028dc:	b29b      	uxth	r3, r3
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	827b      	strh	r3, [r7, #18]
 80028fc:	8a7b      	ldrh	r3, [r7, #18]
 80028fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002902:	827b      	strh	r3, [r7, #18]
 8002904:	8a7b      	ldrh	r3, [r7, #18]
 8002906:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800290a:	827b      	strh	r3, [r7, #18]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	8a7b      	ldrh	r3, [r7, #18]
 8002912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]
 8002926:	e22c      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800293c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002940:	2b00      	cmp	r3, #0
 8002942:	f280 80f6 	bge.w	8002b32 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29a      	uxth	r2, r3
 8002958:	f640 738f 	movw	r3, #3983	; 0xf8f
 800295c:	4013      	ands	r3, r2
 800295e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002978:	b292      	uxth	r2, r2
 800297a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800297c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	7b1b      	ldrb	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d123      	bne.n	80029e2 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80029c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 808e 	beq.w	8002ae8 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d6:	88da      	ldrh	r2, [r3, #6]
 80029d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80029dc:	f004 fb0e 	bl	8006ffc <USB_ReadPMA>
 80029e0:	e082      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80029e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d10a      	bne.n	8002a00 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029ee:	461a      	mov	r2, r3
 80029f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9d3 	bl	8002d9e <HAL_PCD_EP_DB_Receive>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80029fe:	e073      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	441a      	add	r2, r3
 8002a2c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d022      	beq.n	8002aa4 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	4413      	add	r3, r2
 8002a78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a82:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002a86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d02c      	beq.n	8002ae8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	6959      	ldr	r1, [r3, #20]
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	891a      	ldrh	r2, [r3, #8]
 8002a9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a9e:	f004 faad 	bl	8006ffc <USB_ReadPMA>
 8002aa2:	e021      	b.n	8002ae8 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ada:	6959      	ldr	r1, [r3, #20]
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	895a      	ldrh	r2, [r3, #10]
 8002ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ae4:	f004 fa8a 	bl	8006ffc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002af0:	441a      	add	r2, r3
 8002af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002afe:	441a      	add	r2, r3
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <PCD_EP_ISR_Handler+0x4fe>
 8002b0c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d206      	bcs.n	8002b26 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f008 fc70 	bl	800b404 <HAL_PCD_DataOutStageCallback>
 8002b24:	e005      	b.n	8002b32 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fd38 	bl	80055a2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b32:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8121 	beq.w	8002d82 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b40:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 80a2 	bne.w	8002cde <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8002b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	7b1b      	ldrb	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8093 	beq.w	8002cd0 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002baa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d046      	beq.n	8002c44 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb8:	785b      	ldrb	r3, [r3, #1]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d126      	bne.n	8002c0c <PCD_EP_ISR_Handler+0x5f2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	4413      	add	r3, r2
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	00da      	lsls	r2, r3, #3
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	4413      	add	r3, r2
 8002be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002be4:	623b      	str	r3, [r7, #32]
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	801a      	strh	r2, [r3, #0]
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e061      	b.n	8002cd0 <PCD_EP_ISR_Handler+0x6b6>
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d15d      	bne.n	8002cd0 <PCD_EP_ISR_Handler+0x6b6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c28:	4413      	add	r3, r2
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	00da      	lsls	r2, r3, #3
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	4413      	add	r3, r2
 8002c36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	2200      	movs	r2, #0
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	e045      	b.n	8002cd0 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d126      	bne.n	8002ca0 <PCD_EP_ISR_Handler+0x686>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	4413      	add	r3, r2
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	00da      	lsls	r2, r3, #3
 8002c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c78:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	e017      	b.n	8002cd0 <PCD_EP_ISR_Handler+0x6b6>
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d113      	bne.n	8002cd0 <PCD_EP_ISR_Handler+0x6b6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb6:	4413      	add	r3, r2
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	00da      	lsls	r2, r3, #3
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ccc:	2200      	movs	r2, #0
 8002cce:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f008 fbaf 	bl	800b43a <HAL_PCD_DataInStageCallback>
 8002cdc:	e051      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002cde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d144      	bne.n	8002d74 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d907      	bls.n	8002d2e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d2a:	619a      	str	r2, [r3, #24]
 8002d2c:	e002      	b.n	8002d34 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f008 fb79 	bl	800b43a <HAL_PCD_DataInStageCallback>
 8002d48:	e01b      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d52:	441a      	add	r2, r3
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d60:	441a      	add	r2, r3
 8002d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d64:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fc18 	bl	80055a2 <USB_EPStartXfer>
 8002d72:	e006      	b.n	8002d82 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f917 	bl	8002fb0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f6ff ac48 	blt.w	8002624 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3758      	adds	r7, #88	; 0x58
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b088      	sub	sp, #32
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07c      	beq.n	8002eb0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	8b7b      	ldrh	r3, [r7, #26]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d306      	bcc.n	8002df4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	1ad2      	subs	r2, r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	619a      	str	r2, [r3, #24]
 8002df2:	e002      	b.n	8002dfa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2200      	movs	r2, #0
 8002df8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d123      	bne.n	8002e4a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	833b      	strh	r3, [r7, #24]
 8002e1e:	8b3b      	ldrh	r3, [r7, #24]
 8002e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e24:	833b      	strh	r3, [r7, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	8b3b      	ldrh	r3, [r7, #24]
 8002e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01f      	beq.n	8002e94 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	82fb      	strh	r3, [r7, #22]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	441a      	add	r2, r3
 8002e7e:	8afb      	ldrh	r3, [r7, #22]
 8002e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e94:	8b7b      	ldrh	r3, [r7, #26]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8085 	beq.w	8002fa6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6959      	ldr	r1, [r3, #20]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	891a      	ldrh	r2, [r3, #8]
 8002ea8:	8b7b      	ldrh	r3, [r7, #26]
 8002eaa:	f004 f8a7 	bl	8006ffc <USB_ReadPMA>
 8002eae:	e07a      	b.n	8002fa6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	8b7b      	ldrh	r3, [r7, #26]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d306      	bcc.n	8002eee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	8b7b      	ldrh	r3, [r7, #26]
 8002ee6:	1ad2      	subs	r2, r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	619a      	str	r2, [r3, #24]
 8002eec:	e002      	b.n	8002ef4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d123      	bne.n	8002f44 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	83fb      	strh	r3, [r7, #30]
 8002f18:	8bfb      	ldrh	r3, [r7, #30]
 8002f1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f1e:	83fb      	strh	r3, [r7, #30]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	441a      	add	r2, r3
 8002f2e:	8bfb      	ldrh	r3, [r7, #30]
 8002f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11f      	bne.n	8002f8e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f68:	83bb      	strh	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	8bbb      	ldrh	r3, [r7, #28]
 8002f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f8e:	8b7b      	ldrh	r3, [r7, #26]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6959      	ldr	r1, [r3, #20]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	895a      	ldrh	r2, [r3, #10]
 8002fa0:	8b7b      	ldrh	r3, [r7, #26]
 8002fa2:	f004 f82b 	bl	8006ffc <USB_ReadPMA>
    }
  }

  return count;
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0a4      	sub	sp, #144	; 0x90
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 81db 	beq.w	8003380 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d907      	bls.n	800300e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003006:	1ad2      	subs	r2, r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	619a      	str	r2, [r3, #24]
 800300c:	e002      	b.n	8003014 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 80b9 	bne.w	8003190 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	785b      	ldrb	r3, [r3, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d126      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	4413      	add	r3, r2
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	00da      	lsls	r2, r3, #3
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	4413      	add	r3, r2
 8003048:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003058:	b29a      	uxth	r2, r3
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306c:	b29a      	uxth	r2, r3
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	801a      	strh	r2, [r3, #0]
 8003072:	e01a      	b.n	80030aa <HAL_PCD_EP_DB_Transmit+0xfa>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d116      	bne.n	80030aa <HAL_PCD_EP_DB_Transmit+0xfa>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308a:	b29b      	uxth	r3, r3
 800308c:	461a      	mov	r2, r3
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	4413      	add	r3, r2
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	00da      	lsls	r2, r3, #3
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309c:	4413      	add	r3, r2
 800309e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	2200      	movs	r2, #0
 80030a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d126      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x156>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	00da      	lsls	r2, r3, #3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	801a      	strh	r2, [r3, #0]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fe:	b29a      	uxth	r2, r3
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	e017      	b.n	8003136 <HAL_PCD_EP_DB_Transmit+0x186>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d113      	bne.n	8003136 <HAL_PCD_EP_DB_Transmit+0x186>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	4413      	add	r3, r2
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00da      	lsls	r2, r3, #3
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	4413      	add	r3, r2
 800312a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2200      	movs	r2, #0
 8003134:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f008 f97c 	bl	800b43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 82fa 	beq.w	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	82fb      	strh	r3, [r7, #22]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	8afb      	ldrh	r3, [r7, #22]
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
 800318e:	e2d8      	b.n	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d021      	beq.n	80031de <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80031ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	f040 82ac 	bne.w	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80031f2:	441a      	add	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003200:	441a      	add	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	429a      	cmp	r2, r3
 8003210:	d30b      	bcc.n	800322a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	6a1a      	ldr	r2, [r3, #32]
 800321e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003222:	1ad2      	subs	r2, r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	e017      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8003232:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003242:	e00a      	b.n	800325a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d165      	bne.n	800332e <HAL_PCD_EP_DB_Transmit+0x37e>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	4413      	add	r3, r2
 8003278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	00da      	lsls	r2, r3, #3
 8003280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003282:	4413      	add	r3, r2
 8003284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003294:	b29a      	uxth	r2, r3
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	801a      	strh	r2, [r3, #0]
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329e:	2b3e      	cmp	r3, #62	; 0x3e
 80032a0:	d91d      	bls.n	80032de <HAL_PCD_EP_DB_Transmit+0x32e>
 80032a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80032aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_PCD_EP_DB_Transmit+0x30c>
 80032b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b8:	3b01      	subs	r3, #1
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032da:	801a      	strh	r2, [r3, #0]
 80032dc:	e044      	b.n	8003368 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <HAL_PCD_EP_DB_Transmit+0x34c>
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e035      	b.n	8003368 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80032fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
 8003304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_PCD_EP_DB_Transmit+0x366>
 8003310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003312:	3301      	adds	r3, #1
 8003314:	64bb      	str	r3, [r7, #72]	; 0x48
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29a      	uxth	r2, r3
 800331c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331e:	b29b      	uxth	r3, r3
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	b29b      	uxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b29a      	uxth	r2, r3
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	e01c      	b.n	8003368 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d118      	bne.n	8003368 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003344:	b29b      	uxth	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334a:	4413      	add	r3, r2
 800334c:	647b      	str	r3, [r7, #68]	; 0x44
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	00da      	lsls	r2, r3, #3
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	4413      	add	r3, r2
 8003358:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800335c:	643b      	str	r3, [r7, #64]	; 0x40
 800335e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003362:	b29a      	uxth	r2, r3
 8003364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003366:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6959      	ldr	r1, [r3, #20]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	891a      	ldrh	r2, [r3, #8]
 8003374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003378:	b29b      	uxth	r3, r3
 800337a:	f003 fdfd 	bl	8006f78 <USB_WritePMA>
 800337e:	e1e0      	b.n	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	4413      	add	r3, r2
 800339a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d307      	bcc.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	619a      	str	r2, [r3, #24]
 80033c2:	e002      	b.n	80033ca <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 80c0 	bne.w	8003554 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	785b      	ldrb	r3, [r3, #1]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d126      	bne.n	800342a <HAL_PCD_EP_DB_Transmit+0x47a>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f0:	4413      	add	r3, r2
 80033f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	00da      	lsls	r2, r3, #3
 80033fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033fc:	4413      	add	r3, r2
 80033fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003402:	67bb      	str	r3, [r7, #120]	; 0x78
 8003404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	b29a      	uxth	r2, r3
 8003410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003412:	801a      	strh	r2, [r3, #0]
 8003414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003422:	b29a      	uxth	r2, r3
 8003424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003426:	801a      	strh	r2, [r3, #0]
 8003428:	e01a      	b.n	8003460 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d116      	bne.n	8003460 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	667b      	str	r3, [r7, #100]	; 0x64
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003446:	4413      	add	r3, r2
 8003448:	667b      	str	r3, [r7, #100]	; 0x64
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	00da      	lsls	r2, r3, #3
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	4413      	add	r3, r2
 8003454:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003458:	663b      	str	r3, [r7, #96]	; 0x60
 800345a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800345c:	2200      	movs	r2, #0
 800345e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d12b      	bne.n	80034c6 <HAL_PCD_EP_DB_Transmit+0x516>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003482:	4413      	add	r3, r2
 8003484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	00da      	lsls	r2, r3, #3
 800348c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348e:	4413      	add	r3, r2
 8003490:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003498:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034aa:	801a      	strh	r2, [r3, #0]
 80034ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034bc:	b29a      	uxth	r2, r3
 80034be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	e017      	b.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x546>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d113      	bne.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x546>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034dc:	4413      	add	r3, r2
 80034de:	677b      	str	r3, [r7, #116]	; 0x74
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00da      	lsls	r2, r3, #3
 80034e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e8:	4413      	add	r3, r2
 80034ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034ee:	673b      	str	r3, [r7, #112]	; 0x70
 80034f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f2:	2200      	movs	r2, #0
 80034f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f007 ff9c 	bl	800b43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 811a 	bne.w	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003528:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800353e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800354a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354e:	b29b      	uxth	r3, r3
 8003550:	8013      	strh	r3, [r2, #0]
 8003552:	e0f6      	b.n	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d121      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003578:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800358e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	f040 80ca 	bne.w	8003742 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035b6:	441a      	add	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035c4:	441a      	add	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d30b      	bcc.n	80035ee <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6a1a      	ldr	r2, [r3, #32]
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e6:	1ad2      	subs	r2, r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	621a      	str	r2, [r3, #32]
 80035ec:	e017      	b.n	800361e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80035f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003606:	e00a      	b.n	800361e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	657b      	str	r3, [r7, #84]	; 0x54
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d165      	bne.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x748>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003640:	4413      	add	r3, r2
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	00da      	lsls	r2, r3, #3
 800364a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364c:	4413      	add	r3, r2
 800364e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003652:	65bb      	str	r3, [r7, #88]	; 0x58
 8003654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365e:	b29a      	uxth	r2, r3
 8003660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003662:	801a      	strh	r2, [r3, #0]
 8003664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003668:	2b3e      	cmp	r3, #62	; 0x3e
 800366a:	d91d      	bls.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800366c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	66bb      	str	r3, [r7, #104]	; 0x68
 8003674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003680:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003682:	3b01      	subs	r3, #1
 8003684:	66bb      	str	r3, [r7, #104]	; 0x68
 8003686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29a      	uxth	r2, r3
 800368c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800368e:	b29b      	uxth	r3, r3
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	b29b      	uxth	r3, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e041      	b.n	800372c <HAL_PCD_EP_DB_Transmit+0x77c>
 80036a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x716>
 80036b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e032      	b.n	800372c <HAL_PCD_EP_DB_Transmit+0x77c>
 80036c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_PCD_EP_DB_Transmit+0x730>
 80036da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036dc:	3301      	adds	r3, #1
 80036de:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4313      	orrs	r3, r2
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	e019      	b.n	800372c <HAL_PCD_EP_DB_Transmit+0x77c>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d115      	bne.n	800372c <HAL_PCD_EP_DB_Transmit+0x77c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370e:	4413      	add	r3, r2
 8003710:	657b      	str	r3, [r7, #84]	; 0x54
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00da      	lsls	r2, r3, #3
 8003718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371a:	4413      	add	r3, r2
 800371c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
 8003722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003726:	b29a      	uxth	r2, r3
 8003728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6959      	ldr	r1, [r3, #20]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	895a      	ldrh	r2, [r3, #10]
 8003738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800373c:	b29b      	uxth	r3, r3
 800373e:	f003 fc1b 	bl	8006f78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375c:	82bb      	strh	r3, [r7, #20]
 800375e:	8abb      	ldrh	r3, [r7, #20]
 8003760:	f083 0310 	eor.w	r3, r3, #16
 8003764:	82bb      	strh	r3, [r7, #20]
 8003766:	8abb      	ldrh	r3, [r7, #20]
 8003768:	f083 0320 	eor.w	r3, r3, #32
 800376c:	82bb      	strh	r3, [r7, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	8abb      	ldrh	r3, [r7, #20]
 800377e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378e:	b29b      	uxth	r3, r3
 8003790:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3790      	adds	r7, #144	; 0x90
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	817b      	strh	r3, [r7, #10]
 80037aa:	4613      	mov	r3, r2
 80037ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	f003 0207 	and.w	r2, r3, #7
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	3310      	adds	r3, #16
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e009      	b.n	80037e6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037d2:	897a      	ldrh	r2, [r7, #10]
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037e6:	893b      	ldrh	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d107      	bne.n	80037fc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	80da      	strh	r2, [r3, #6]
 80037fa:	e00b      	b.n	8003814 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2201      	movs	r2, #1
 8003800:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b29a      	uxth	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b29a      	uxth	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003846:	b29b      	uxth	r3, r3
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800385a:	b29b      	uxth	r3, r3
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d141      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003886:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003892:	d131      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003894:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389a:	4a46      	ldr	r2, [pc, #280]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a4:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038ac:	4a41      	ldr	r2, [pc, #260]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2232      	movs	r2, #50	; 0x32
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	4a3f      	ldr	r2, [pc, #252]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	0c9b      	lsrs	r3, r3, #18
 80038c6:	3301      	adds	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ca:	e002      	b.n	80038d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d2:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d102      	bne.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f2      	bne.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d158      	bne.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e057      	b.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038f8:	4b2e      	ldr	r3, [pc, #184]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fe:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003908:	e04d      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003910:	d141      	bne.n	8003996 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003912:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d131      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003920:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003926:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800393e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2232      	movs	r2, #50	; 0x32
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	4a1c      	ldr	r2, [pc, #112]	; (80039bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	0c9b      	lsrs	r3, r3, #18
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003956:	e002      	b.n	800395e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	3b01      	subs	r3, #1
 800395c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d102      	bne.n	8003972 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f2      	bne.n	8003958 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d112      	bne.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e011      	b.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003994:	e007      	b.n	80039a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40007000 	.word	0x40007000
 80039b8:	20000000 	.word	0x20000000
 80039bc:	431bde83 	.word	0x431bde83

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e2fe      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d075      	beq.n	8003aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039de:	4b97      	ldr	r3, [pc, #604]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e8:	4b94      	ldr	r3, [pc, #592]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b0c      	cmp	r3, #12
 80039f6:	d102      	bne.n	80039fe <HAL_RCC_OscConfig+0x3e>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_OscConfig+0x44>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b8d      	ldr	r3, [pc, #564]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x108>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d157      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2d9      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x74>
 8003a26:	4b85      	ldr	r3, [pc, #532]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a84      	ldr	r2, [pc, #528]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x98>
 8003a3e:	4b7f      	ldr	r3, [pc, #508]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7e      	ldr	r2, [pc, #504]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b7c      	ldr	r3, [pc, #496]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a7b      	ldr	r2, [pc, #492]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a58:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b75      	ldr	r3, [pc, #468]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a74      	ldr	r2, [pc, #464]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fd fada 	bl	8001030 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fd fad6 	bl	8001030 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e29e      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a92:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xc0>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fac6 	bl	8001030 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7fd fac2 	bl	8001030 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	; 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e28a      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aba:	4b60      	ldr	r3, [pc, #384]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xe8>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d075      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d102      	bne.n	8003af6 <HAL_RCC_OscConfig+0x136>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_OscConfig+0x13c>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11f      	bne.n	8003b3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afc:	4b4f      	ldr	r3, [pc, #316]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_OscConfig+0x154>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e25d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	4946      	ldr	r1, [pc, #280]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b28:	4b45      	ldr	r3, [pc, #276]	; (8003c40 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd fa33 	bl	8000f98 <HAL_InitTick>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d043      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e249      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d023      	beq.n	8003b8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3c      	ldr	r2, [pc, #240]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fa6e 	bl	8001030 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fd fa6a 	bl	8001030 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e232      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6a:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b76:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	492d      	ldr	r1, [pc, #180]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
 8003b8a:	e01a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fa4a 	bl	8001030 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fa46 	bl	8001030 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e20e      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb2:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1e0>
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d041      	beq.n	8003c52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01c      	beq.n	8003c10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be6:	f7fd fa23 	bl	8001030 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bee:	f7fd fa1f 	bl	8001030 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1e7      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0ef      	beq.n	8003bee <HAL_RCC_OscConfig+0x22e>
 8003c0e:	e020      	b.n	8003c52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_RCC_OscConfig+0x27c>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fd fa06 	bl	8001030 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c26:	e00d      	b.n	8003c44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7fd fa02 	bl	8001030 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d906      	bls.n	8003c44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1ca      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c44:	4b8c      	ldr	r3, [pc, #560]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ea      	bne.n	8003c28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80a6 	beq.w	8003dac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c64:	4b84      	ldr	r3, [pc, #528]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_OscConfig+0x2b4>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x2b6>
 8003c74:	2300      	movs	r3, #0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	6593      	str	r3, [r2, #88]	; 0x58
 8003c86:	4b7c      	ldr	r3, [pc, #496]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c92:	2301      	movs	r3, #1
 8003c94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c96:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <HAL_RCC_OscConfig+0x4bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d118      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x4bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a75      	ldr	r2, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x4bc>)
 8003ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cae:	f7fd f9bf 	bl	8001030 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb6:	f7fd f9bb 	bl	8001030 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e183      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x4bc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d108      	bne.n	8003cee <HAL_RCC_OscConfig+0x32e>
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cec:	e024      	b.n	8003d38 <HAL_RCC_OscConfig+0x378>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d110      	bne.n	8003d18 <HAL_RCC_OscConfig+0x358>
 8003cf6:	4b60      	ldr	r3, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	4a5e      	ldr	r2, [pc, #376]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d06:	4b5c      	ldr	r3, [pc, #368]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	4a5a      	ldr	r2, [pc, #360]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d16:	e00f      	b.n	8003d38 <HAL_RCC_OscConfig+0x378>
 8003d18:	4b57      	ldr	r3, [pc, #348]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a56      	ldr	r2, [pc, #344]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d28:	4b53      	ldr	r3, [pc, #332]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a52      	ldr	r2, [pc, #328]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d016      	beq.n	8003d6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fd f976 	bl	8001030 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d48:	f7fd f972 	bl	8001030 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e138      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ed      	beq.n	8003d48 <HAL_RCC_OscConfig+0x388>
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fd f95f 	bl	8001030 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd f95b 	bl	8001030 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e121      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ed      	bne.n	8003d76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	4a34      	ldr	r2, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d03c      	beq.n	8003e32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dc0:	4b2d      	ldr	r3, [pc, #180]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd f92e 	bl	8001030 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dd8:	f7fd f92a 	bl	8001030 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0f2      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ef      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x418>
 8003df8:	e01b      	b.n	8003e32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e00:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fd f911 	bl	8001030 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e12:	f7fd f90d 	bl	8001030 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e0d5      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1ef      	bne.n	8003e12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80c9 	beq.w	8003fce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f000 8083 	beq.w	8003f50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d15e      	bne.n	8003f10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a08      	ldr	r2, [pc, #32]	; (8003e78 <HAL_RCC_OscConfig+0x4b8>)
 8003e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fd f8e7 	bl	8001030 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e64:	e00c      	b.n	8003e80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fd f8e3 	bl	8001030 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d905      	bls.n	8003e80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0ab      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e80:	4b55      	ldr	r3, [pc, #340]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ec      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e8c:	4b52      	ldr	r3, [pc, #328]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_RCC_OscConfig+0x61c>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6a11      	ldr	r1, [r2, #32]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e9c:	3a01      	subs	r2, #1
 8003e9e:	0112      	lsls	r2, r2, #4
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ea6:	0212      	lsls	r2, r2, #8
 8003ea8:	4311      	orrs	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eae:	0852      	lsrs	r2, r2, #1
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	0552      	lsls	r2, r2, #21
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003eba:	0852      	lsrs	r2, r2, #1
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	0652      	lsls	r2, r2, #25
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ec6:	06d2      	lsls	r2, r2, #27
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	4943      	ldr	r1, [pc, #268]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed0:	4b41      	ldr	r3, [pc, #260]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a40      	ldr	r2, [pc, #256]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003edc:	4b3e      	ldr	r3, [pc, #248]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a3d      	ldr	r2, [pc, #244]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fd f8a2 	bl	8001030 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fd f89e 	bl	8001030 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e066      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x530>
 8003f0e:	e05e      	b.n	8003fce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fd f888 	bl	8001030 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fd f884 	bl	8001030 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e04c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f36:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	4924      	ldr	r1, [pc, #144]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f48:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <HAL_RCC_OscConfig+0x620>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60cb      	str	r3, [r1, #12]
 8003f4e:	e03e      	b.n	8003fce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e039      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <HAL_RCC_OscConfig+0x618>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f003 0203 	and.w	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d12c      	bne.n	8003fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d123      	bne.n	8003fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d11b      	bne.n	8003fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d113      	bne.n	8003fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3720      	adds	r7, #32
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	019f800c 	.word	0x019f800c
 8003fe0:	feeefffc 	.word	0xfeeefffc

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e11e      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ffc:	4b91      	ldr	r3, [pc, #580]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d910      	bls.n	800402c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400a:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 020f 	bic.w	r2, r3, #15
 8004012:	498c      	ldr	r1, [pc, #560]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b8a      	ldr	r3, [pc, #552]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e106      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d073      	beq.n	8004120 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d129      	bne.n	8004094 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004040:	4b81      	ldr	r3, [pc, #516]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0f4      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004050:	f000 f966 	bl	8004320 <RCC_GetSysClockFreqFromPLLSource>
 8004054:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4a7c      	ldr	r2, [pc, #496]	; (800424c <HAL_RCC_ClockConfig+0x268>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d93f      	bls.n	80040de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800405e:	4b7a      	ldr	r3, [pc, #488]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004072:	2b00      	cmp	r3, #0
 8004074:	d033      	beq.n	80040de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800407a:	2b00      	cmp	r3, #0
 800407c:	d12f      	bne.n	80040de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800407e:	4b72      	ldr	r3, [pc, #456]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004086:	4a70      	ldr	r2, [pc, #448]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e024      	b.n	80040de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d107      	bne.n	80040ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409c:	4b6a      	ldr	r3, [pc, #424]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0c6      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	4b66      	ldr	r3, [pc, #408]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0be      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040bc:	f000 f8ce 	bl	800425c <HAL_RCC_GetSysClockFreq>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4a61      	ldr	r2, [pc, #388]	; (800424c <HAL_RCC_ClockConfig+0x268>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d909      	bls.n	80040de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ca:	4b5f      	ldr	r3, [pc, #380]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	4a5d      	ldr	r2, [pc, #372]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040de:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4957      	ldr	r1, [pc, #348]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f0:	f7fc ff9e 	bl	8001030 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f6:	e00a      	b.n	800410e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f8:	f7fc ff9a 	bl	8001030 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e095      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410e:	4b4e      	ldr	r3, [pc, #312]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 020c 	and.w	r2, r3, #12
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	429a      	cmp	r2, r3
 800411e:	d1eb      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d023      	beq.n	8004174 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800413e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004142:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004150:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004158:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800415a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800415e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b39      	ldr	r3, [pc, #228]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4936      	ldr	r1, [pc, #216]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
 8004172:	e008      	b.n	8004186 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d105      	bne.n	8004186 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800417a:	4b33      	ldr	r3, [pc, #204]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4a32      	ldr	r2, [pc, #200]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004184:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d21d      	bcs.n	80041d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 020f 	bic.w	r2, r3, #15
 800419c:	4929      	ldr	r1, [pc, #164]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041a4:	f7fc ff44 	bl	8001030 <HAL_GetTick>
 80041a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	e00a      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ac:	f7fc ff40 	bl	8001030 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e03b      	b.n	800423a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_ClockConfig+0x260>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d1ed      	bne.n	80041ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4917      	ldr	r1, [pc, #92]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	490f      	ldr	r1, [pc, #60]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800420e:	f000 f825 	bl	800425c <HAL_RCC_GetSysClockFreq>
 8004212:	4602      	mov	r2, r0
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <HAL_RCC_ClockConfig+0x264>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	490c      	ldr	r1, [pc, #48]	; (8004250 <HAL_RCC_ClockConfig+0x26c>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x270>)
 800422c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_RCC_ClockConfig+0x274>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc feb0 	bl	8000f98 <HAL_InitTick>
 8004238:	4603      	mov	r3, r0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40022000 	.word	0x40022000
 8004248:	40021000 	.word	0x40021000
 800424c:	04c4b400 	.word	0x04c4b400
 8004250:	0800c420 	.word	0x0800c420
 8004254:	20000000 	.word	0x20000000
 8004258:	20000004 	.word	0x20000004

0800425c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d102      	bne.n	8004274 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	e047      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b08      	cmp	r3, #8
 800427e:	d102      	bne.n	8004286 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e03e      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004286:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d136      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004292:	4b20      	ldr	r3, [pc, #128]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3301      	adds	r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d10c      	bne.n	80042ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b0:	4a1a      	ldr	r2, [pc, #104]	; (800431c <HAL_RCC_GetSysClockFreq+0xc0>)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	4a16      	ldr	r2, [pc, #88]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ba:	68d2      	ldr	r2, [r2, #12]
 80042bc:	0a12      	lsrs	r2, r2, #8
 80042be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	617b      	str	r3, [r7, #20]
      break;
 80042c8:	e00c      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	4a10      	ldr	r2, [pc, #64]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	0a12      	lsrs	r2, r2, #8
 80042d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
      break;
 80042e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0e5b      	lsrs	r3, r3, #25
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	3301      	adds	r3, #1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e001      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004304:	693b      	ldr	r3, [r7, #16]
}
 8004306:	4618      	mov	r0, r3
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	00f42400 	.word	0x00f42400
 800431c:	02dc6c00 	.word	0x02dc6c00

08004320 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004330:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d10c      	bne.n	800435e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004344:	4a17      	ldr	r2, [pc, #92]	; (80043a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800434e:	68d2      	ldr	r2, [r2, #12]
 8004350:	0a12      	lsrs	r2, r2, #8
 8004352:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	617b      	str	r3, [r7, #20]
    break;
 800435c:	e00c      	b.n	8004378 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	0a12      	lsrs	r2, r2, #8
 800436c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
    break;
 8004376:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	0e5b      	lsrs	r3, r3, #25
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004392:	687b      	ldr	r3, [r7, #4]
}
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	40021000 	.word	0x40021000
 80043a4:	02dc6c00 	.word	0x02dc6c00
 80043a8:	00f42400 	.word	0x00f42400

080043ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043b4:	2300      	movs	r3, #0
 80043b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043b8:	2300      	movs	r3, #0
 80043ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8098 	beq.w	80044fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ca:	2300      	movs	r3, #0
 80043cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ce:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043de:	4a3f      	ldr	r2, [pc, #252]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e4:	6593      	str	r3, [r2, #88]	; 0x58
 80043e6:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f2:	2301      	movs	r3, #1
 80043f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f6:	4b3a      	ldr	r3, [pc, #232]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a39      	ldr	r2, [pc, #228]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004402:	f7fc fe15 	bl	8001030 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004408:	e009      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440a:	f7fc fe11 	bl	8001030 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d902      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	74fb      	strb	r3, [r7, #19]
        break;
 800441c:	e005      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0ef      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d159      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004430:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01e      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	429a      	cmp	r2, r3
 800444a:	d019      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004456:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004468:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004478:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fc fdd1 	bl	8001030 <HAL_GetTick>
 800448e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004490:	e00b      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fc fdcd 	bl	8001030 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d902      	bls.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	74fb      	strb	r3, [r7, #19]
            break;
 80044a8:	e006      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ec      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044d4:	e008      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	74bb      	strb	r3, [r7, #18]
 80044da:	e005      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e8:	7c7b      	ldrb	r3, [r7, #17]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ee:	4ba7      	ldr	r3, [pc, #668]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	4aa6      	ldr	r2, [pc, #664]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004506:	4ba1      	ldr	r3, [pc, #644]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f023 0203 	bic.w	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	499d      	ldr	r1, [pc, #628]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004528:	4b98      	ldr	r3, [pc, #608]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f023 020c 	bic.w	r2, r3, #12
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4995      	ldr	r1, [pc, #596]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800454a:	4b90      	ldr	r3, [pc, #576]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	498c      	ldr	r1, [pc, #560]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800456c:	4b87      	ldr	r3, [pc, #540]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	4984      	ldr	r1, [pc, #528]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800458e:	4b7f      	ldr	r3, [pc, #508]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	497b      	ldr	r1, [pc, #492]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b0:	4b76      	ldr	r3, [pc, #472]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	4973      	ldr	r1, [pc, #460]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d2:	4b6e      	ldr	r3, [pc, #440]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	496a      	ldr	r1, [pc, #424]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045f4:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4962      	ldr	r1, [pc, #392]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004616:	4b5d      	ldr	r3, [pc, #372]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	4959      	ldr	r1, [pc, #356]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004638:	4b54      	ldr	r3, [pc, #336]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	4951      	ldr	r1, [pc, #324]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465a:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	4948      	ldr	r1, [pc, #288]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d015      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467c:	4b43      	ldr	r3, [pc, #268]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4940      	ldr	r1, [pc, #256]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a3a      	ldr	r2, [pc, #232]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	4932      	ldr	r1, [pc, #200]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d2:	d105      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d015      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046ec:	4b27      	ldr	r3, [pc, #156]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	4924      	ldr	r1, [pc, #144]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800470a:	d105      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800470c:	4b1f      	ldr	r3, [pc, #124]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a1e      	ldr	r2, [pc, #120]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004716:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	4916      	ldr	r1, [pc, #88]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004742:	d105      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a10      	ldr	r2, [pc, #64]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d019      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004762:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	4908      	ldr	r1, [pc, #32]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477a:	d109      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a02      	ldr	r2, [pc, #8]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004786:	60d3      	str	r3, [r2, #12]
 8004788:	e002      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d015      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	4926      	ldr	r1, [pc, #152]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	4918      	ldr	r1, [pc, #96]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d105      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a12      	ldr	r2, [pc, #72]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800480c:	4b0d      	ldr	r3, [pc, #52]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800480e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	490a      	ldr	r1, [pc, #40]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800482a:	d105      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004836:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004838:	7cbb      	ldrb	r3, [r7, #18]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000

08004848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e09d      	b.n	8004996 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d009      	beq.n	8004880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
 8004872:	e005      	b.n	8004880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fc f9d6 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c0:	d902      	bls.n	80048c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e002      	b.n	80048ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048d6:	d007      	beq.n	80048e8 <HAL_SPI_Init+0xa0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	ea42 0103 	orr.w	r1, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	f003 0204 	and.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004964:	ea42 0103 	orr.w	r1, r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004984:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049ae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049d4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4013      	ands	r3, r2
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b09d      	sub	sp, #116	; 0x74
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	78db      	ldrb	r3, [r3, #3]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d81f      	bhi.n	8004ab2 <USB_ActivateEndpoint+0x72>
 8004a72:	a201      	add	r2, pc, #4	; (adr r2, 8004a78 <USB_ActivateEndpoint+0x38>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a89 	.word	0x08004a89
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004abb 	.word	0x08004abb
 8004a84:	08004a97 	.word	0x08004a97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004a94:	e012      	b.n	8004abc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004a9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004aa2:	e00b      	b.n	8004abc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004aa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004ab0:	e004      	b.n	8004abc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004ab8:	e000      	b.n	8004abc <USB_ActivateEndpoint+0x7c>
      break;
 8004aba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	b21a      	sxth	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b21b      	sxth	r3, r3
 8004afe:	4313      	orrs	r3, r2
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	7b1b      	ldrb	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 8178 	bne.w	8004e22 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	785b      	ldrb	r3, [r3, #1]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8084 	beq.w	8004c44 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	00da      	lsls	r2, r3, #3
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	88db      	ldrh	r3, [r3, #6]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	827b      	strh	r3, [r7, #18]
 8004b7e:	8a7b      	ldrh	r3, [r7, #18]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <USB_ActivateEndpoint+0x180>
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	823b      	strh	r3, [r7, #16]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	441a      	add	r2, r3
 8004baa:	8a3b      	ldrh	r3, [r7, #16]
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	78db      	ldrb	r3, [r3, #3]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d020      	beq.n	8004c0a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bde:	81bb      	strh	r3, [r7, #12]
 8004be0:	89bb      	ldrh	r3, [r7, #12]
 8004be2:	f083 0320 	eor.w	r3, r3, #32
 8004be6:	81bb      	strh	r3, [r7, #12]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	89bb      	ldrh	r3, [r7, #12]
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]
 8004c08:	e2d5      	b.n	80051b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c20:	81fb      	strh	r3, [r7, #14]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]
 8004c42:	e2b8      	b.n	80051b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	4413      	add	r3, r2
 8004c56:	633b      	str	r3, [r7, #48]	; 0x30
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	00da      	lsls	r2, r3, #3
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	4413      	add	r3, r2
 8004c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	88db      	ldrh	r3, [r3, #6]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	4413      	add	r3, r2
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	00da      	lsls	r2, r3, #3
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb2:	d91d      	bls.n	8004cf0 <USB_ActivateEndpoint+0x2b0>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <USB_ActivateEndpoint+0x28e>
 8004cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	029b      	lsls	r3, r3, #10
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	e026      	b.n	8004d3e <USB_ActivateEndpoint+0x2fe>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <USB_ActivateEndpoint+0x2ce>
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e017      	b.n	8004d3e <USB_ActivateEndpoint+0x2fe>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <USB_ActivateEndpoint+0x2e8>
 8004d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d24:	3301      	adds	r3, #1
 8004d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	029b      	lsls	r3, r3, #10
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4313      	orrs	r3, r2
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01b      	beq.n	8004d8e <USB_ActivateEndpoint+0x34e>
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	843b      	strh	r3, [r7, #32]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	8c3b      	ldrh	r3, [r7, #32]
 8004d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d124      	bne.n	8004de0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	83bb      	strh	r3, [r7, #28]
 8004dae:	8bbb      	ldrh	r3, [r7, #28]
 8004db0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004db4:	83bb      	strh	r3, [r7, #28]
 8004db6:	8bbb      	ldrh	r3, [r7, #28]
 8004db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dbc:	83bb      	strh	r3, [r7, #28]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	8bbb      	ldrh	r3, [r7, #28]
 8004dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8013      	strh	r3, [r2, #0]
 8004dde:	e1ea      	b.n	80051b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	83fb      	strh	r3, [r7, #30]
 8004df8:	8bfb      	ldrh	r3, [r7, #30]
 8004dfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dfe:	83fb      	strh	r3, [r7, #30]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	8013      	strh	r3, [r2, #0]
 8004e20:	e1c9      	b.n	80051b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	78db      	ldrb	r3, [r3, #3]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d11e      	bne.n	8004e68 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e40:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
 8004e66:	e01d      	b.n	8004ea4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	00da      	lsls	r2, r3, #3
 8004ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	891b      	ldrh	r3, [r3, #8]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	657b      	str	r3, [r7, #84]	; 0x54
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee8:	4413      	add	r3, r2
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	00da      	lsls	r2, r3, #3
 8004ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004efa:	653b      	str	r3, [r7, #80]	; 0x50
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	895b      	ldrh	r3, [r3, #10]
 8004f00:	085b      	lsrs	r3, r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 8093 	bne.w	800503c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01b      	beq.n	8004f6a <USB_ActivateEndpoint+0x52a>
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f48:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004f78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01b      	beq.n	8004fba <USB_ActivateEndpoint+0x57a>
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	441a      	add	r2, r3
 8004fa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004fd2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004fd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fd8:	873b      	strh	r3, [r7, #56]	; 0x38
 8004fda:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004fdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fe0:	873b      	strh	r3, [r7, #56]	; 0x38
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005018:	86fb      	strh	r3, [r7, #54]	; 0x36
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
 800503a:	e0bc      	b.n	80051b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800504c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01d      	beq.n	8005094 <USB_ActivateEndpoint+0x654>
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01d      	beq.n	80050ec <USB_ActivateEndpoint+0x6ac>
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	78db      	ldrb	r3, [r3, #3]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d024      	beq.n	800513e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800510e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005112:	f083 0320 	eor.w	r3, r3, #32
 8005116:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	441a      	add	r2, r3
 8005124:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
 800513c:	e01d      	b.n	800517a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005154:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005176:	b29b      	uxth	r3, r3
 8005178:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	441a      	add	r2, r3
 800519e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80051b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3774      	adds	r7, #116	; 0x74
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop

080051c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b08d      	sub	sp, #52	; 0x34
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	7b1b      	ldrb	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 808e 	bne.w	80052f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d044      	beq.n	800526e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	81bb      	strh	r3, [r7, #12]
 80051f2:	89bb      	ldrh	r3, [r7, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <USB_DeactivateEndpoint+0x6c>
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	817b      	strh	r3, [r7, #10]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	897b      	ldrh	r3, [r7, #10]
 8005220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005230:	b29b      	uxth	r3, r3
 8005232:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524a:	813b      	strh	r3, [r7, #8]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	893b      	ldrh	r3, [r7, #8]
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
 800526c:	e192      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	827b      	strh	r3, [r7, #18]
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01b      	beq.n	80052be <USB_DeactivateEndpoint+0xf6>
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	823b      	strh	r3, [r7, #16]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	8a3b      	ldrh	r3, [r7, #16]
 80052aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	81fb      	strh	r3, [r7, #14]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	89fb      	ldrh	r3, [r7, #14]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e14d      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f040 80a5 	bne.w	800544c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	843b      	strh	r3, [r7, #32]
 8005310:	8c3b      	ldrh	r3, [r7, #32]
 8005312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <USB_DeactivateEndpoint+0x18a>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	83fb      	strh	r3, [r7, #30]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8bfb      	ldrh	r3, [r7, #30]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	83bb      	strh	r3, [r7, #28]
 8005360:	8bbb      	ldrh	r3, [r7, #28]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01b      	beq.n	80053a2 <USB_DeactivateEndpoint+0x1da>
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	837b      	strh	r3, [r7, #26]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b8:	833b      	strh	r3, [r7, #24]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	8b3b      	ldrh	r3, [r7, #24]
 80053c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	82fb      	strh	r3, [r7, #22]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	8afb      	ldrh	r3, [r7, #22]
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005428:	82bb      	strh	r3, [r7, #20]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	441a      	add	r2, r3
 8005434:	8abb      	ldrh	r3, [r7, #20]
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
 800544a:	e0a3      	b.n	8005594 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800545a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800545c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01b      	beq.n	800549c <USB_DeactivateEndpoint+0x2d4>
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <USB_DeactivateEndpoint+0x324>
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	847b      	strh	r3, [r7, #34]	; 0x22
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3734      	adds	r7, #52	; 0x34
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b0c2      	sub	sp, #264	; 0x108
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055b0:	6018      	str	r0, [r3, #0]
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f040 86b7 	bne.w	800633c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d908      	bls.n	80055fc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80055ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055fa:	e007      	b.n	800560c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80055fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800560c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	7b1b      	ldrb	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d13a      	bne.n	8005692 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800561c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6959      	ldr	r1, [r3, #20]
 8005628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800562c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	88da      	ldrh	r2, [r3, #6]
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005638:	b29b      	uxth	r3, r3
 800563a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800563e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005642:	6800      	ldr	r0, [r0, #0]
 8005644:	f001 fc98 	bl	8006f78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005662:	b29b      	uxth	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4413      	add	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	00da      	lsls	r2, r3, #3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	f000 be1f 	b.w	80062d0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	78db      	ldrb	r3, [r3, #3]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	f040 8462 	bne.w	8005f68 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80056a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	f240 83df 	bls.w	8005e80 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	441a      	add	r2, r3
 8005706:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800570a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005712:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 81c7 	beq.w	8005af2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	633b      	str	r3, [r7, #48]	; 0x30
 8005770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d177      	bne.n	8005870 <USB_EPStartXfer+0x2ce>
 8005780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
 800578c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	4413      	add	r3, r2
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	00da      	lsls	r2, r3, #3
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d0:	2b3e      	cmp	r3, #62	; 0x3e
 80057d2:	d921      	bls.n	8005818 <USB_EPStartXfer+0x276>
 80057d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USB_EPStartXfer+0x252>
 80057ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057ee:	3b01      	subs	r3, #1
 80057f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057fe:	b29b      	uxth	r3, r3
 8005800:	029b      	lsls	r3, r3, #10
 8005802:	b29b      	uxth	r3, r3
 8005804:	4313      	orrs	r3, r2
 8005806:	b29b      	uxth	r3, r3
 8005808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800580c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005810:	b29a      	uxth	r2, r3
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	e050      	b.n	80058ba <USB_EPStartXfer+0x318>
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <USB_EPStartXfer+0x294>
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582e:	b29a      	uxth	r2, r3
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e041      	b.n	80058ba <USB_EPStartXfer+0x318>
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <USB_EPStartXfer+0x2b4>
 800584c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005850:	3301      	adds	r3, #1
 8005852:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29a      	uxth	r2, r3
 800585c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005860:	b29b      	uxth	r3, r3
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	b29b      	uxth	r3, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	b29a      	uxth	r2, r3
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	801a      	strh	r2, [r3, #0]
 800586e:	e024      	b.n	80058ba <USB_EPStartXfer+0x318>
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d11c      	bne.n	80058ba <USB_EPStartXfer+0x318>
 8005880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588e:	b29b      	uxth	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	4413      	add	r3, r2
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
 8005898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	00da      	lsls	r2, r3, #3
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	895b      	ldrh	r3, [r3, #10]
 80058c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6959      	ldr	r1, [r3, #20]
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058e8:	6800      	ldr	r0, [r0, #0]
 80058ea:	f001 fb45 	bl	8006f78 <USB_WritePMA>
            ep->xfer_buff += len;
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	441a      	add	r2, r3
 8005900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800590c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	d90f      	bls.n	8005948 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	1ad2      	subs	r2, r2, r3
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	621a      	str	r2, [r3, #32]
 8005946:	e00e      	b.n	8005966 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d177      	bne.n	8005a66 <USB_EPStartXfer+0x4c4>
 8005976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	00da      	lsls	r2, r3, #3
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059b0:	617b      	str	r3, [r7, #20]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059bc:	b29a      	uxth	r2, r3
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c6:	2b3e      	cmp	r3, #62	; 0x3e
 80059c8:	d921      	bls.n	8005a0e <USB_EPStartXfer+0x46c>
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ce:	095b      	lsrs	r3, r3, #5
 80059d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <USB_EPStartXfer+0x448>
 80059e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e4:	3b01      	subs	r3, #1
 80059e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	029b      	lsls	r3, r3, #10
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	4313      	orrs	r3, r2
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e056      	b.n	8005abc <USB_EPStartXfer+0x51a>
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <USB_EPStartXfer+0x48a>
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e047      	b.n	8005abc <USB_EPStartXfer+0x51a>
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <USB_EPStartXfer+0x4aa>
 8005a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a46:	3301      	adds	r3, #1
 8005a48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e02a      	b.n	8005abc <USB_EPStartXfer+0x51a>
 8005a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d122      	bne.n	8005abc <USB_EPStartXfer+0x51a>
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	623b      	str	r3, [r7, #32]
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	4413      	add	r3, r2
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	00da      	lsls	r2, r3, #3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	891b      	ldrh	r3, [r3, #8]
 8005ac8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6959      	ldr	r1, [r3, #20]
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ae2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ae6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	f001 fa44 	bl	8006f78 <USB_WritePMA>
 8005af0:	e3ee      	b.n	80062d0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d177      	bne.n	8005bf2 <USB_EPStartXfer+0x650>
 8005b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b22:	4413      	add	r3, r2
 8005b24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	00da      	lsls	r2, r3, #3
 8005b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b52:	2b3e      	cmp	r3, #62	; 0x3e
 8005b54:	d921      	bls.n	8005b9a <USB_EPStartXfer+0x5f8>
 8005b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <USB_EPStartXfer+0x5d4>
 8005b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b70:	3b01      	subs	r3, #1
 8005b72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e056      	b.n	8005c48 <USB_EPStartXfer+0x6a6>
 8005b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <USB_EPStartXfer+0x616>
 8005ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e047      	b.n	8005c48 <USB_EPStartXfer+0x6a6>
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <USB_EPStartXfer+0x636>
 8005bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	029b      	lsls	r3, r3, #10
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e02a      	b.n	8005c48 <USB_EPStartXfer+0x6a6>
 8005bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d122      	bne.n	8005c48 <USB_EPStartXfer+0x6a6>
 8005c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c22:	4413      	add	r3, r2
 8005c24:	653b      	str	r3, [r7, #80]	; 0x50
 8005c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	00da      	lsls	r2, r3, #3
 8005c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	891b      	ldrh	r3, [r3, #8]
 8005c54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6959      	ldr	r1, [r3, #20]
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	f001 f97e 	bl	8006f78 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8c:	441a      	add	r2, r3
 8005c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a1a      	ldr	r2, [r3, #32]
 8005ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d90f      	bls.n	8005cd6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	621a      	str	r2, [r3, #32]
 8005cd4:	e00e      	b.n	8005cf4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d177      	bne.n	8005e00 <USB_EPStartXfer+0x85e>
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	4413      	add	r3, r2
 8005d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	4413      	add	r3, r2
 8005d46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d60:	2b3e      	cmp	r3, #62	; 0x3e
 8005d62:	d921      	bls.n	8005da8 <USB_EPStartXfer+0x806>
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <USB_EPStartXfer+0x7e2>
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	4313      	orrs	r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e050      	b.n	8005e4a <USB_EPStartXfer+0x8a8>
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <USB_EPStartXfer+0x824>
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e041      	b.n	8005e4a <USB_EPStartXfer+0x8a8>
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <USB_EPStartXfer+0x844>
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	3301      	adds	r3, #1
 8005de2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	029b      	lsls	r3, r3, #10
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4313      	orrs	r3, r2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e024      	b.n	8005e4a <USB_EPStartXfer+0x8a8>
 8005e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	785b      	ldrb	r3, [r3, #1]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d11c      	bne.n	8005e4a <USB_EPStartXfer+0x8a8>
 8005e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e24:	4413      	add	r3, r2
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
 8005e28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	00da      	lsls	r2, r3, #3
 8005e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	895b      	ldrh	r3, [r3, #10]
 8005e56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6959      	ldr	r1, [r3, #20]
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e78:	6800      	ldr	r0, [r0, #0]
 8005e7a:	f001 f87d 	bl	8006f78 <USB_WritePMA>
 8005e7e:	e227      	b.n	80062d0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	441a      	add	r2, r3
 8005ed4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0c:	4413      	add	r3, r2
 8005f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	00da      	lsls	r2, r3, #3
 8005f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f26:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	891b      	ldrh	r3, [r3, #8]
 8005f3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6959      	ldr	r1, [r3, #20]
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f60:	6800      	ldr	r0, [r0, #0]
 8005f62:	f001 f809 	bl	8006f78 <USB_WritePMA>
 8005f66:	e1b3      	b.n	80062d0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a1a      	ldr	r2, [r3, #32]
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f78:	1ad2      	subs	r2, r2, r3
 8005f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80c6 	beq.w	800613a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8005fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d177      	bne.n	80060ba <USB_EPStartXfer+0xb18>
 8005fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fea:	4413      	add	r3, r2
 8005fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	00da      	lsls	r2, r3, #3
 8005ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006004:	667b      	str	r3, [r7, #100]	; 0x64
 8006006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006010:	b29a      	uxth	r2, r3
 8006012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601a:	2b3e      	cmp	r3, #62	; 0x3e
 800601c:	d921      	bls.n	8006062 <USB_EPStartXfer+0xac0>
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <USB_EPStartXfer+0xa9c>
 8006034:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006038:	3b01      	subs	r3, #1
 800603a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800603e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006048:	b29b      	uxth	r3, r3
 800604a:	029b      	lsls	r3, r3, #10
 800604c:	b29b      	uxth	r3, r3
 800604e:	4313      	orrs	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e050      	b.n	8006104 <USB_EPStartXfer+0xb62>
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <USB_EPStartXfer+0xade>
 800606a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006078:	b29a      	uxth	r2, r3
 800607a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e041      	b.n	8006104 <USB_EPStartXfer+0xb62>
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <USB_EPStartXfer+0xafe>
 8006096:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800609a:	3301      	adds	r3, #1
 800609c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	029b      	lsls	r3, r3, #10
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e024      	b.n	8006104 <USB_EPStartXfer+0xb62>
 80060ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	785b      	ldrb	r3, [r3, #1]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d11c      	bne.n	8006104 <USB_EPStartXfer+0xb62>
 80060ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060de:	4413      	add	r3, r2
 80060e0:	673b      	str	r3, [r7, #112]	; 0x70
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	00da      	lsls	r2, r3, #3
 80060f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f2:	4413      	add	r3, r2
 80060f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006102:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	895b      	ldrh	r3, [r3, #10]
 8006110:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6959      	ldr	r1, [r3, #20]
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006124:	b29b      	uxth	r3, r3
 8006126:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800612a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800612e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006132:	6800      	ldr	r0, [r0, #0]
 8006134:	f000 ff20 	bl	8006f78 <USB_WritePMA>
 8006138:	e0ca      	b.n	80062d0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800613a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d177      	bne.n	800623a <USB_EPStartXfer+0xc98>
 800614a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800616a:	4413      	add	r3, r2
 800616c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800616e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	00da      	lsls	r2, r3, #3
 800617c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800617e:	4413      	add	r3, r2
 8006180:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006184:	67bb      	str	r3, [r7, #120]	; 0x78
 8006186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006190:	b29a      	uxth	r2, r3
 8006192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	2b3e      	cmp	r3, #62	; 0x3e
 800619c:	d921      	bls.n	80061e2 <USB_EPStartXfer+0xc40>
 800619e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <USB_EPStartXfer+0xc1c>
 80061b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	4313      	orrs	r3, r2
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061da:	b29a      	uxth	r2, r3
 80061dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e05c      	b.n	800629c <USB_EPStartXfer+0xcfa>
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <USB_EPStartXfer+0xc5e>
 80061ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e04d      	b.n	800629c <USB_EPStartXfer+0xcfa>
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <USB_EPStartXfer+0xc7e>
 8006216:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800621a:	3301      	adds	r3, #1
 800621c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29b      	uxth	r3, r3
 8006230:	4313      	orrs	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e030      	b.n	800629c <USB_EPStartXfer+0xcfa>
 800623a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d128      	bne.n	800629c <USB_EPStartXfer+0xcfa>
 800624a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800626e:	4413      	add	r3, r2
 8006270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	00da      	lsls	r2, r3, #3
 8006282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006286:	4413      	add	r3, r2
 8006288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800628c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800629a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	891b      	ldrh	r3, [r3, #8]
 80062a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6959      	ldr	r1, [r3, #20]
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80062c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	f000 fe54 	bl	8006f78 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f6:	817b      	strh	r3, [r7, #10]
 80062f8:	897b      	ldrh	r3, [r7, #10]
 80062fa:	f083 0310 	eor.w	r3, r3, #16
 80062fe:	817b      	strh	r3, [r7, #10]
 8006300:	897b      	ldrh	r3, [r7, #10]
 8006302:	f083 0320 	eor.w	r3, r3, #32
 8006306:	817b      	strh	r3, [r7, #10]
 8006308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	897b      	ldrh	r3, [r7, #10]
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]
 8006338:	f000 bcde 	b.w	8006cf8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	7b1b      	ldrb	r3, [r3, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 80bb 	bne.w	80064c4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d917      	bls.n	800639a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800636a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	619a      	str	r2, [r3, #24]
 8006398:	e00e      	b.n	80063b8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800639a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80063aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2200      	movs	r2, #0
 80063b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063dc:	4413      	add	r3, r2
 80063de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	00da      	lsls	r2, r3, #3
 80063f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80063fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800640a:	b29a      	uxth	r2, r3
 800640c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	2b3e      	cmp	r3, #62	; 0x3e
 8006418:	d924      	bls.n	8006464 <USB_EPStartXfer+0xec2>
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <USB_EPStartXfer+0xe98>
 8006430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006434:	3b01      	subs	r3, #1
 8006436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800643a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29a      	uxth	r2, r3
 8006442:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006446:	b29b      	uxth	r3, r3
 8006448:	029b      	lsls	r3, r3, #10
 800644a:	b29b      	uxth	r3, r3
 800644c:	4313      	orrs	r3, r2
 800644e:	b29b      	uxth	r3, r3
 8006450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006458:	b29a      	uxth	r2, r3
 800645a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645e:	801a      	strh	r2, [r3, #0]
 8006460:	f000 bc10 	b.w	8006c84 <USB_EPStartXfer+0x16e2>
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10c      	bne.n	8006486 <USB_EPStartXfer+0xee4>
 800646c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647c:	b29a      	uxth	r2, r3
 800647e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006482:	801a      	strh	r2, [r3, #0]
 8006484:	e3fe      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d004      	beq.n	80064a6 <USB_EPStartXfer+0xf04>
 800649c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a0:	3301      	adds	r3, #1
 80064a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	e3df      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	78db      	ldrb	r3, [r3, #3]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	f040 8218 	bne.w	8006906 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80064d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	785b      	ldrb	r3, [r3, #1]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 809d 	bne.w	8006622 <USB_EPStartXfer+0x1080>
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006504:	b29b      	uxth	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800650c:	4413      	add	r3, r2
 800650e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	00da      	lsls	r2, r3, #3
 8006520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006524:	4413      	add	r3, r2
 8006526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800652a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800652e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653a:	b29a      	uxth	r2, r3
 800653c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b3e      	cmp	r3, #62	; 0x3e
 8006550:	d92b      	bls.n	80065aa <USB_EPStartXfer+0x1008>
 8006552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <USB_EPStartXfer+0xfe0>
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	3b01      	subs	r3, #1
 800657e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29a      	uxth	r2, r3
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	b29b      	uxth	r3, r3
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	b29b      	uxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e070      	b.n	800668c <USB_EPStartXfer+0x10ea>
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10c      	bne.n	80065d4 <USB_EPStartXfer+0x1032>
 80065ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e05b      	b.n	800668c <USB_EPStartXfer+0x10ea>
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <USB_EPStartXfer+0x1062>
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fe:	3301      	adds	r3, #1
 8006600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e034      	b.n	800668c <USB_EPStartXfer+0x10ea>
 8006622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d12c      	bne.n	800668c <USB_EPStartXfer+0x10ea>
 8006632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664e:	b29b      	uxth	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006656:	4413      	add	r3, r2
 8006658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00da      	lsls	r2, r3, #3
 800666a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800666e:	4413      	add	r3, r2
 8006670:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	b29a      	uxth	r2, r3
 8006686:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800669a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f040 809d 	bne.w	80067e6 <USB_EPStartXfer+0x1244>
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d0:	4413      	add	r3, r2
 80066d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	00da      	lsls	r2, r3, #3
 80066e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b3e      	cmp	r3, #62	; 0x3e
 8006714:	d92b      	bls.n	800676e <USB_EPStartXfer+0x11cc>
 8006716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <USB_EPStartXfer+0x11a4>
 800673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006740:	3b01      	subs	r3, #1
 8006742:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006752:	b29b      	uxth	r3, r3
 8006754:	029b      	lsls	r3, r3, #10
 8006756:	b29b      	uxth	r3, r3
 8006758:	4313      	orrs	r3, r2
 800675a:	b29b      	uxth	r3, r3
 800675c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e069      	b.n	8006842 <USB_EPStartXfer+0x12a0>
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10c      	bne.n	8006798 <USB_EPStartXfer+0x11f6>
 800677e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678e:	b29a      	uxth	r2, r3
 8006790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	e054      	b.n	8006842 <USB_EPStartXfer+0x12a0>
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <USB_EPStartXfer+0x1226>
 80067be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c2:	3301      	adds	r3, #1
 80067c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	029b      	lsls	r3, r3, #10
 80067d8:	b29b      	uxth	r3, r3
 80067da:	4313      	orrs	r3, r2
 80067dc:	b29a      	uxth	r2, r3
 80067de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e02d      	b.n	8006842 <USB_EPStartXfer+0x12a0>
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d125      	bne.n	8006842 <USB_EPStartXfer+0x12a0>
 80067f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800680c:	4413      	add	r3, r2
 800680e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	00da      	lsls	r2, r3, #3
 8006820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006824:	4413      	add	r3, r2
 8006826:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800682a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800682e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	b29a      	uxth	r2, r3
 800683c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006840:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8218 	beq.w	8006c84 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006858:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006874:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <USB_EPStartXfer+0x12ea>
 8006880:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800688c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 81f5 	bne.w	8006c84 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800689a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 81ee 	bne.w	8006c84 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
 8006904:	e1be      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	78db      	ldrb	r3, [r3, #3]
 8006912:	2b01      	cmp	r3, #1
 8006914:	f040 81b4 	bne.w	8006c80 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	429a      	cmp	r2, r3
 8006932:	d917      	bls.n	8006964 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699a      	ldr	r2, [r3, #24]
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006954:	1ad2      	subs	r2, r2, r3
 8006956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	619a      	str	r2, [r3, #24]
 8006962:	e00e      	b.n	8006982 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2200      	movs	r2, #0
 8006980:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 8085 	bne.w	8006a9e <USB_EPStartXfer+0x14fc>
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069b8:	4413      	add	r3, r2
 80069ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	00da      	lsls	r2, r3, #3
 80069cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069d0:	4413      	add	r3, r2
 80069d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f2:	2b3e      	cmp	r3, #62	; 0x3e
 80069f4:	d923      	bls.n	8006a3e <USB_EPStartXfer+0x149c>
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <USB_EPStartXfer+0x1474>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	3b01      	subs	r3, #1
 8006a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	029b      	lsls	r3, r3, #10
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	e060      	b.n	8006b00 <USB_EPStartXfer+0x155e>
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10c      	bne.n	8006a60 <USB_EPStartXfer+0x14be>
 8006a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e04f      	b.n	8006b00 <USB_EPStartXfer+0x155e>
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <USB_EPStartXfer+0x14de>
 8006a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	029b      	lsls	r3, r3, #10
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	4313      	orrs	r3, r2
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	e030      	b.n	8006b00 <USB_EPStartXfer+0x155e>
 8006a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d128      	bne.n	8006b00 <USB_EPStartXfer+0x155e>
 8006aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	785b      	ldrb	r3, [r3, #1]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 8085 	bne.w	8006c2a <USB_EPStartXfer+0x1688>
 8006b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b44:	4413      	add	r3, r2
 8006b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	00da      	lsls	r2, r3, #3
 8006b58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b80:	d923      	bls.n	8006bca <USB_EPStartXfer+0x1628>
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <USB_EPStartXfer+0x1600>
 8006b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bc6:	801a      	strh	r2, [r3, #0]
 8006bc8:	e05c      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <USB_EPStartXfer+0x164a>
 8006bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e04b      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <USB_EPStartXfer+0x166a>
 8006c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c06:	3301      	adds	r3, #1
 8006c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	029b      	lsls	r3, r3, #10
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e02c      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
 8006c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d124      	bne.n	8006c84 <USB_EPStartXfer+0x16e2>
 8006c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c50:	4413      	add	r3, r2
 8006c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	00da      	lsls	r2, r3, #3
 8006c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c68:	4413      	add	r3, r2
 8006c6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e001      	b.n	8006c84 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e03a      	b.n	8006cfa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006cae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006cba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006cc2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d020      	beq.n	8006d58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2c:	81bb      	strh	r3, [r7, #12]
 8006d2e:	89bb      	ldrh	r3, [r7, #12]
 8006d30:	f083 0310 	eor.w	r3, r3, #16
 8006d34:	81bb      	strh	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	441a      	add	r2, r3
 8006d40:	89bb      	ldrh	r3, [r7, #12]
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]
 8006d56:	e01f      	b.n	8006d98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d6e:	81fb      	strh	r3, [r7, #14]
 8006d70:	89fb      	ldrh	r3, [r7, #14]
 8006d72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d76:	81fb      	strh	r3, [r7, #14]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	89fb      	ldrh	r3, [r7, #14]
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	7b1b      	ldrb	r3, [r3, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 809d 	bne.w	8006ef4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04c      	beq.n	8006e5c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	823b      	strh	r3, [r7, #16]
 8006dd0:	8a3b      	ldrh	r3, [r7, #16]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01b      	beq.n	8006e12 <USB_EPClearStall+0x6c>
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df0:	81fb      	strh	r3, [r7, #14]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	89fb      	ldrh	r3, [r7, #14]
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	78db      	ldrb	r3, [r3, #3]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d06c      	beq.n	8006ef4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	81bb      	strh	r3, [r7, #12]
 8006e32:	89bb      	ldrh	r3, [r7, #12]
 8006e34:	f083 0320 	eor.w	r3, r3, #32
 8006e38:	81bb      	strh	r3, [r7, #12]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	441a      	add	r2, r3
 8006e44:	89bb      	ldrh	r3, [r7, #12]
 8006e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	8013      	strh	r3, [r2, #0]
 8006e5a:	e04b      	b.n	8006ef4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	82fb      	strh	r3, [r7, #22]
 8006e6a:	8afb      	ldrh	r3, [r7, #22]
 8006e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01b      	beq.n	8006eac <USB_EPClearStall+0x106>
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	82bb      	strh	r3, [r7, #20]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	441a      	add	r2, r3
 8006e96:	8abb      	ldrh	r3, [r7, #20]
 8006e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	827b      	strh	r3, [r7, #18]
 8006ec4:	8a7b      	ldrh	r3, [r7, #18]
 8006ec6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eca:	827b      	strh	r3, [r7, #18]
 8006ecc:	8a7b      	ldrh	r3, [r7, #18]
 8006ece:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ed2:	827b      	strh	r3, [r7, #18]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	8a7b      	ldrh	r3, [r7, #18]
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d103      	bne.n	8006f1c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2280      	movs	r2, #128	; 0x80
 8006f18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b08b      	sub	sp, #44	; 0x2c
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	460b      	mov	r3, r1
 8006f88:	80fb      	strh	r3, [r7, #6]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f8e:	88bb      	ldrh	r3, [r7, #4]
 8006f90:	3301      	adds	r3, #1
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fa8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
 8006fae:	e01b      	b.n	8006fe8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	b21a      	sxth	r2, r3
 8006fc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b21b      	sxth	r3, r3
 8006fc8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	8a7a      	ldrh	r2, [r7, #18]
 8006fce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	3302      	adds	r3, #2
 8006fd4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e0      	bne.n	8006fb0 <USB_WritePMA+0x38>
  }
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	372c      	adds	r7, #44	; 0x2c
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b08b      	sub	sp, #44	; 0x2c
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4611      	mov	r1, r2
 8007008:	461a      	mov	r2, r3
 800700a:	460b      	mov	r3, r1
 800700c:	80fb      	strh	r3, [r7, #6]
 800700e:	4613      	mov	r3, r2
 8007010:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007012:	88bb      	ldrh	r3, [r7, #4]
 8007014:	085b      	lsrs	r3, r3, #1
 8007016:	b29b      	uxth	r3, r3
 8007018:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007022:	88fa      	ldrh	r2, [r7, #6]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
 8007032:	e018      	b.n	8007066 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	3302      	adds	r3, #2
 8007040:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3301      	adds	r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	b2da      	uxtb	r2, r3
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	3b01      	subs	r3, #1
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e3      	bne.n	8007034 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800706c:	88bb      	ldrh	r3, [r7, #4]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	b2da      	uxtb	r2, r3
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	701a      	strb	r2, [r3, #0]
  }
}
 8007088:	bf00      	nop
 800708a:	372c      	adds	r7, #44	; 0x2c
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070a4:	f004 fc1a 	bl	800b8dc <USBD_static_malloc>
 80070a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d105      	bne.n	80070bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80070b8:	2302      	movs	r3, #2
 80070ba:	e066      	b.n	800718a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	7c1b      	ldrb	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d119      	bne.n	8007100 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d0:	2202      	movs	r2, #2
 80070d2:	2181      	movs	r1, #129	; 0x81
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f004 faa8 	bl	800b62a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e4:	2202      	movs	r2, #2
 80070e6:	2101      	movs	r1, #1
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f004 fa9e 	bl	800b62a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2210      	movs	r2, #16
 80070fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80070fe:	e016      	b.n	800712e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	2202      	movs	r2, #2
 8007104:	2181      	movs	r1, #129	; 0x81
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f004 fa8f 	bl	800b62a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	2202      	movs	r2, #2
 8007116:	2101      	movs	r1, #1
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f004 fa86 	bl	800b62a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2210      	movs	r2, #16
 800712a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800712e:	2308      	movs	r3, #8
 8007130:	2203      	movs	r2, #3
 8007132:	2182      	movs	r1, #130	; 0x82
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f004 fa78 	bl	800b62a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	7c1b      	ldrb	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800716a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800716e:	2101      	movs	r1, #1
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f004 fb49 	bl	800b808 <USBD_LL_PrepareReceive>
 8007176:	e007      	b.n	8007188 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800717e:	2340      	movs	r3, #64	; 0x40
 8007180:	2101      	movs	r1, #1
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f004 fb40 	bl	800b808 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	460b      	mov	r3, r1
 800719c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800719e:	2181      	movs	r1, #129	; 0x81
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f004 fa68 	bl	800b676 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80071ac:	2101      	movs	r1, #1
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f004 fa61 	bl	800b676 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80071bc:	2182      	movs	r1, #130	; 0x82
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f004 fa59 	bl	800b676 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00e      	beq.n	80071fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ee:	4618      	mov	r0, r3
 80071f0:	f004 fb82 	bl	800b8f8 <USBD_static_free>
    pdev->pClassData = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007218:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	e0af      	b.n	8007390 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007238:	2b00      	cmp	r3, #0
 800723a:	d03f      	beq.n	80072bc <USBD_CDC_Setup+0xb4>
 800723c:	2b20      	cmp	r3, #32
 800723e:	f040 809f 	bne.w	8007380 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d02e      	beq.n	80072a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	b25b      	sxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	da16      	bge.n	8007282 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007260:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	88d2      	ldrh	r2, [r2, #6]
 8007266:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	88db      	ldrh	r3, [r3, #6]
 800726c:	2b07      	cmp	r3, #7
 800726e:	bf28      	it	cs
 8007270:	2307      	movcs	r3, #7
 8007272:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	89fa      	ldrh	r2, [r7, #14]
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fa9f 	bl	80087be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007280:	e085      	b.n	800738e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	785a      	ldrb	r2, [r3, #1]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	88db      	ldrh	r3, [r3, #6]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007298:	6939      	ldr	r1, [r7, #16]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	461a      	mov	r2, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 fab8 	bl	8008816 <USBD_CtlPrepareRx>
      break;
 80072a6:	e072      	b.n	800738e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	7850      	ldrb	r0, [r2, #1]
 80072b4:	2200      	movs	r2, #0
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	4798      	blx	r3
      break;
 80072ba:	e068      	b.n	800738e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b0b      	cmp	r3, #11
 80072c2:	d852      	bhi.n	800736a <USBD_CDC_Setup+0x162>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <USBD_CDC_Setup+0xc4>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072fd 	.word	0x080072fd
 80072d0:	08007379 	.word	0x08007379
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	0800736b 	.word	0x0800736b
 80072dc:	0800736b 	.word	0x0800736b
 80072e0:	0800736b 	.word	0x0800736b
 80072e4:	0800736b 	.word	0x0800736b
 80072e8:	0800736b 	.word	0x0800736b
 80072ec:	0800736b 	.word	0x0800736b
 80072f0:	0800736b 	.word	0x0800736b
 80072f4:	08007327 	.word	0x08007327
 80072f8:	08007351 	.word	0x08007351
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b03      	cmp	r3, #3
 8007306:	d107      	bne.n	8007318 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007308:	f107 030a 	add.w	r3, r7, #10
 800730c:	2202      	movs	r2, #2
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fa54 	bl	80087be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007316:	e032      	b.n	800737e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f9de 	bl	80086dc <USBD_CtlError>
            ret = USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	75fb      	strb	r3, [r7, #23]
          break;
 8007324:	e02b      	b.n	800737e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b03      	cmp	r3, #3
 8007330:	d107      	bne.n	8007342 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007332:	f107 030d 	add.w	r3, r7, #13
 8007336:	2201      	movs	r2, #1
 8007338:	4619      	mov	r1, r3
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fa3f 	bl	80087be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007340:	e01d      	b.n	800737e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 f9c9 	bl	80086dc <USBD_CtlError>
            ret = USBD_FAIL;
 800734a:	2303      	movs	r3, #3
 800734c:	75fb      	strb	r3, [r7, #23]
          break;
 800734e:	e016      	b.n	800737e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b03      	cmp	r3, #3
 800735a:	d00f      	beq.n	800737c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f9bc 	bl	80086dc <USBD_CtlError>
            ret = USBD_FAIL;
 8007364:	2303      	movs	r3, #3
 8007366:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007368:	e008      	b.n	800737c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f9b5 	bl	80086dc <USBD_CtlError>
          ret = USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	75fb      	strb	r3, [r7, #23]
          break;
 8007376:	e002      	b.n	800737e <USBD_CDC_Setup+0x176>
          break;
 8007378:	bf00      	nop
 800737a:	e008      	b.n	800738e <USBD_CDC_Setup+0x186>
          break;
 800737c:	bf00      	nop
      }
      break;
 800737e:	e006      	b.n	800738e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 f9aa 	bl	80086dc <USBD_CtlError>
      ret = USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	75fb      	strb	r3, [r7, #23]
      break;
 800738c:	bf00      	nop
  }

  return (uint8_t)ret;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e04f      	b.n	800745a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	3318      	adds	r3, #24
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d029      	beq.n	800742c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	3318      	adds	r3, #24
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	78f9      	ldrb	r1, [r7, #3]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	460b      	mov	r3, r1
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4403      	add	r3, r0
 80073f8:	3320      	adds	r3, #32
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007400:	fb01 f303 	mul.w	r3, r1, r3
 8007404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007406:	2b00      	cmp	r3, #0
 8007408:	d110      	bne.n	800742c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	440b      	add	r3, r1
 8007418:	3318      	adds	r3, #24
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800741e:	78f9      	ldrb	r1, [r7, #3]
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f004 f9ce 	bl	800b7c6 <USBD_LL_Transmit>
 800742a:	e015      	b.n	8007458 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007454:	78fa      	ldrb	r2, [r7, #3]
 8007456:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007474:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	e015      	b.n	80074b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f004 f9de 	bl	800b84a <USBD_LL_GetRxDataSize>
 800748e:	4602      	mov	r2, r0
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80074aa:	4611      	mov	r1, r2
 80074ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e01b      	b.n	800750a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d015      	beq.n	8007508 <USBD_CDC_EP0_RxReady+0x50>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	d010      	beq.n	8007508 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80074f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074fc:	b292      	uxth	r2, r2
 80074fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	22ff      	movs	r2, #255	; 0xff
 8007504:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2243      	movs	r2, #67	; 0x43
 8007520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007522:	4b03      	ldr	r3, [pc, #12]	; (8007530 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	20000094 	.word	0x20000094

08007534 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2243      	movs	r2, #67	; 0x43
 8007540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007542:	4b03      	ldr	r3, [pc, #12]	; (8007550 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000050 	.word	0x20000050

08007554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2243      	movs	r2, #67	; 0x43
 8007560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007562:	4b03      	ldr	r3, [pc, #12]	; (8007570 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	200000d8 	.word	0x200000d8

08007574 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	220a      	movs	r2, #10
 8007580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007582:	4b03      	ldr	r3, [pc, #12]	; (8007590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	2000000c 	.word	0x2000000c

08007594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e004      	b.n	80075b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e008      	b.n	80075ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b085      	sub	sp, #20
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800760a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	e004      	b.n	8007620 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	e016      	b.n	8007678 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7c1b      	ldrb	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765c:	2101      	movs	r1, #1
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f004 f8d2 	bl	800b808 <USBD_LL_PrepareReceive>
 8007664:	e007      	b.n	8007676 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f004 f8c9 	bl	800b808 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007694:	2303      	movs	r3, #3
 8007696:	e01f      	b.n	80076d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	79fa      	ldrb	r2, [r7, #7]
 80076ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f003 ff31 	bl	800b534 <USBD_LL_Init>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e016      	b.n	8007726 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f107 020e 	add.w	r2, r7, #14
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	4602      	mov	r2, r0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f003 ff5c 	bl	800b5f4 <USBD_LL_Start>
 800773c:	4603      	mov	r3, r0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	4611      	mov	r1, r2
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d007      	beq.n	80077ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
  }

  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 ff46 	bl	8008668 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d01a      	beq.n	8007836 <USBD_LL_SetupStage+0x72>
 8007800:	2b02      	cmp	r3, #2
 8007802:	d822      	bhi.n	800784a <USBD_LL_SetupStage+0x86>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <USBD_LL_SetupStage+0x4a>
 8007808:	2b01      	cmp	r3, #1
 800780a:	d00a      	beq.n	8007822 <USBD_LL_SetupStage+0x5e>
 800780c:	e01d      	b.n	800784a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f9ee 	bl	8007bf8 <USBD_StdDevReq>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
      break;
 8007820:	e020      	b.n	8007864 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa52 	bl	8007cd4 <USBD_StdItfReq>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]
      break;
 8007834:	e016      	b.n	8007864 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa91 	bl	8007d66 <USBD_StdEPReq>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	e00c      	b.n	8007864 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007854:	b2db      	uxtb	r3, r3
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f003 ff2b 	bl	800b6b4 <USBD_LL_StallEP>
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
      break;
 8007862:	bf00      	nop
  }

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	460b      	mov	r3, r1
 8007878:	607a      	str	r2, [r7, #4]
 800787a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800787c:	7afb      	ldrb	r3, [r7, #11]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d138      	bne.n	80078f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007888:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007890:	2b03      	cmp	r3, #3
 8007892:	d14a      	bne.n	800792a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d913      	bls.n	80078c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	1ad2      	subs	r2, r2, r3
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	4293      	cmp	r3, r2
 80078b8:	bf28      	it	cs
 80078ba:	4613      	movcs	r3, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 ffc5 	bl	8008850 <USBD_CtlContinueRx>
 80078c6:	e030      	b.n	800792a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d10b      	bne.n	80078ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 ffc0 	bl	8008872 <USBD_CtlSendStatus>
 80078f2:	e01a      	b.n	800792a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d114      	bne.n	800792a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00e      	beq.n	800792a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	7afa      	ldrb	r2, [r7, #11]
 8007916:	4611      	mov	r1, r2
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	4798      	blx	r3
 800791c:	4603      	mov	r3, r0
 800791e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	e000      	b.n	800792c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	460b      	mov	r3, r1
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007942:	7afb      	ldrb	r3, [r7, #11]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d16b      	bne.n	8007a20 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3314      	adds	r3, #20
 800794c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007954:	2b02      	cmp	r3, #2
 8007956:	d156      	bne.n	8007a06 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	429a      	cmp	r2, r3
 8007962:	d914      	bls.n	800798e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	461a      	mov	r2, r3
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 ff3a 	bl	80087f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007980:	2300      	movs	r3, #0
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f003 ff3e 	bl	800b808 <USBD_LL_PrepareReceive>
 800798c:	e03b      	b.n	8007a06 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d11c      	bne.n	80079d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d316      	bcc.n	80079d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d20f      	bcs.n	80079d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079b4:	2200      	movs	r2, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 ff1b 	bl	80087f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079c6:	2300      	movs	r3, #0
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f003 ff1b 	bl	800b808 <USBD_LL_PrepareReceive>
 80079d2:	e018      	b.n	8007a06 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d10b      	bne.n	80079f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079f8:	2180      	movs	r1, #128	; 0x80
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f003 fe5a 	bl	800b6b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 ff49 	bl	8008898 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d122      	bne.n	8007a56 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff fe98 	bl	8007746 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a1e:	e01a      	b.n	8007a56 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d114      	bne.n	8007a56 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00e      	beq.n	8007a56 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	7afa      	ldrb	r2, [r7, #11]
 8007a42:	4611      	mov	r1, r2
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	4798      	blx	r3
 8007a48:	4603      	mov	r3, r0
 8007a4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a4c:	7dfb      	ldrb	r3, [r7, #23]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	e000      	b.n	8007a58 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e02f      	b.n	8007af4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00f      	beq.n	8007abe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6852      	ldr	r2, [r2, #4]
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	4611      	mov	r1, r2
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007abe:	2340      	movs	r3, #64	; 0x40
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f003 fdb0 	bl	800b62a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ada:	2340      	movs	r3, #64	; 0x40
 8007adc:	2200      	movs	r2, #0
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f003 fda2 	bl	800b62a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2240      	movs	r2, #64	; 0x40
 8007af0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2204      	movs	r2, #4
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d106      	bne.n	8007b6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e012      	b.n	8007bb4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d10b      	bne.n	8007bb2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007bda:	8a3b      	ldrh	r3, [r7, #16]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	b21a      	sxth	r2, r3
 8007be0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	b21b      	sxth	r3, r3
 8007be8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007bea:	89fb      	ldrh	r3, [r7, #14]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d005      	beq.n	8007c1e <USBD_StdDevReq+0x26>
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d853      	bhi.n	8007cbe <USBD_StdDevReq+0xc6>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <USBD_StdDevReq+0x3a>
 8007c1a:	2b20      	cmp	r3, #32
 8007c1c:	d14f      	bne.n	8007cbe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c30:	e04a      	b.n	8007cc8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	d83b      	bhi.n	8007cb2 <USBD_StdDevReq+0xba>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <USBD_StdDevReq+0x48>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007ca9 	.word	0x08007ca9
 8007c48:	08007cb3 	.word	0x08007cb3
 8007c4c:	08007c9f 	.word	0x08007c9f
 8007c50:	08007cb3 	.word	0x08007cb3
 8007c54:	08007c73 	.word	0x08007c73
 8007c58:	08007c69 	.word	0x08007c69
 8007c5c:	08007cb3 	.word	0x08007cb3
 8007c60:	08007c8b 	.word	0x08007c8b
 8007c64:	08007c7d 	.word	0x08007c7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9de 	bl	800802c <USBD_GetDescriptor>
          break;
 8007c70:	e024      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb6d 	bl	8008354 <USBD_SetAddress>
          break;
 8007c7a:	e01f      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fbac 	bl	80083dc <USBD_SetConfig>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
          break;
 8007c88:	e018      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fc4b 	bl	8008528 <USBD_GetConfig>
          break;
 8007c92:	e013      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fc7c 	bl	8008594 <USBD_GetStatus>
          break;
 8007c9c:	e00e      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fcab 	bl	80085fc <USBD_SetFeature>
          break;
 8007ca6:	e009      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fcba 	bl	8008624 <USBD_ClrFeature>
          break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fd11 	bl	80086dc <USBD_CtlError>
          break;
 8007cba:	bf00      	nop
      }
      break;
 8007cbc:	e004      	b.n	8007cc8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fd0b 	bl	80086dc <USBD_CtlError>
      break;
 8007cc6:	bf00      	nop
  }

  return ret;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop

08007cd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d005      	beq.n	8007cfa <USBD_StdItfReq+0x26>
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d82f      	bhi.n	8007d52 <USBD_StdItfReq+0x7e>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <USBD_StdItfReq+0x26>
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d12b      	bne.n	8007d52 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	3b01      	subs	r3, #1
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d81d      	bhi.n	8007d44 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	889b      	ldrh	r3, [r3, #4]
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d813      	bhi.n	8007d3a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	88db      	ldrh	r3, [r3, #6]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d110      	bne.n	8007d4e <USBD_StdItfReq+0x7a>
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fd9d 	bl	8008872 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d38:	e009      	b.n	8007d4e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fccd 	bl	80086dc <USBD_CtlError>
          break;
 8007d42:	e004      	b.n	8007d4e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fcc8 	bl	80086dc <USBD_CtlError>
          break;
 8007d4c:	e000      	b.n	8007d50 <USBD_StdItfReq+0x7c>
          break;
 8007d4e:	bf00      	nop
      }
      break;
 8007d50:	e004      	b.n	8007d5c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fcc1 	bl	80086dc <USBD_CtlError>
      break;
 8007d5a:	bf00      	nop
  }

  return ret;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	889b      	ldrh	r3, [r3, #4]
 8007d78:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d007      	beq.n	8007d96 <USBD_StdEPReq+0x30>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	f200 8145 	bhi.w	8008016 <USBD_StdEPReq+0x2b0>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00c      	beq.n	8007daa <USBD_StdEPReq+0x44>
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	f040 8140 	bne.w	8008016 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
      break;
 8007da8:	e13a      	b.n	8008020 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d007      	beq.n	8007dc2 <USBD_StdEPReq+0x5c>
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	f300 8129 	bgt.w	800800a <USBD_StdEPReq+0x2a4>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d07f      	beq.n	8007ebc <USBD_StdEPReq+0x156>
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d03c      	beq.n	8007e3a <USBD_StdEPReq+0xd4>
 8007dc0:	e123      	b.n	800800a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d002      	beq.n	8007dd4 <USBD_StdEPReq+0x6e>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d016      	beq.n	8007e00 <USBD_StdEPReq+0x9a>
 8007dd2:	e02c      	b.n	8007e2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00d      	beq.n	8007df6 <USBD_StdEPReq+0x90>
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d00a      	beq.n	8007df6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f003 fc65 	bl	800b6b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dea:	2180      	movs	r1, #128	; 0x80
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f003 fc61 	bl	800b6b4 <USBD_LL_StallEP>
 8007df2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007df4:	e020      	b.n	8007e38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fc6f 	bl	80086dc <USBD_CtlError>
              break;
 8007dfe:	e01b      	b.n	8007e38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	885b      	ldrh	r3, [r3, #2]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10e      	bne.n	8007e26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <USBD_StdEPReq+0xc0>
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b80      	cmp	r3, #128	; 0x80
 8007e12:	d008      	beq.n	8007e26 <USBD_StdEPReq+0xc0>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d104      	bne.n	8007e26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f003 fc47 	bl	800b6b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fd23 	bl	8008872 <USBD_CtlSendStatus>

              break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc53 	bl	80086dc <USBD_CtlError>
              break;
 8007e36:	bf00      	nop
          }
          break;
 8007e38:	e0ec      	b.n	8008014 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d002      	beq.n	8007e4c <USBD_StdEPReq+0xe6>
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d016      	beq.n	8007e78 <USBD_StdEPReq+0x112>
 8007e4a:	e030      	b.n	8007eae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <USBD_StdEPReq+0x108>
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b80      	cmp	r3, #128	; 0x80
 8007e56:	d00a      	beq.n	8007e6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f003 fc29 	bl	800b6b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e62:	2180      	movs	r1, #128	; 0x80
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f003 fc25 	bl	800b6b4 <USBD_LL_StallEP>
 8007e6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e6c:	e025      	b.n	8007eba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc33 	bl	80086dc <USBD_CtlError>
              break;
 8007e76:	e020      	b.n	8007eba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	885b      	ldrh	r3, [r3, #2]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11b      	bne.n	8007eb8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d004      	beq.n	8007e94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f003 fc2f 	bl	800b6f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fcec 	bl	8008872 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007eac:	e004      	b.n	8007eb8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fc13 	bl	80086dc <USBD_CtlError>
              break;
 8007eb6:	e000      	b.n	8007eba <USBD_StdEPReq+0x154>
              break;
 8007eb8:	bf00      	nop
          }
          break;
 8007eba:	e0ab      	b.n	8008014 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d002      	beq.n	8007ece <USBD_StdEPReq+0x168>
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d032      	beq.n	8007f32 <USBD_StdEPReq+0x1cc>
 8007ecc:	e097      	b.n	8007ffe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <USBD_StdEPReq+0x17e>
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b80      	cmp	r3, #128	; 0x80
 8007ed8:	d004      	beq.n	8007ee4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fbfd 	bl	80086dc <USBD_CtlError>
                break;
 8007ee2:	e091      	b.n	8008008 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da0b      	bge.n	8007f04 <USBD_StdEPReq+0x19e>
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
 8007eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	3310      	adds	r3, #16
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	3304      	adds	r3, #4
 8007f02:	e00b      	b.n	8007f1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2202      	movs	r2, #2
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fc47 	bl	80087be <USBD_CtlSendData>
              break;
 8007f30:	e06a      	b.n	8008008 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da11      	bge.n	8007f5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3324      	adds	r3, #36	; 0x24
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d117      	bne.n	8007f84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fbc0 	bl	80086dc <USBD_CtlError>
                  break;
 8007f5c:	e054      	b.n	8008008 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	440b      	add	r3, r1
 8007f70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fbad 	bl	80086dc <USBD_CtlError>
                  break;
 8007f82:	e041      	b.n	8008008 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	da0b      	bge.n	8007fa4 <USBD_StdEPReq+0x23e>
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	3310      	adds	r3, #16
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	e00b      	b.n	8007fbc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4413      	add	r3, r2
 8007fba:	3304      	adds	r3, #4
 8007fbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <USBD_StdEPReq+0x264>
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b80      	cmp	r3, #128	; 0x80
 8007fc8:	d103      	bne.n	8007fd2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e00e      	b.n	8007ff0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f003 fbaa 	bl	800b730 <USBD_LL_IsStallEP>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	e002      	b.n	8007ff0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fbe1 	bl	80087be <USBD_CtlSendData>
              break;
 8007ffc:	e004      	b.n	8008008 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fb6b 	bl	80086dc <USBD_CtlError>
              break;
 8008006:	bf00      	nop
          }
          break;
 8008008:	e004      	b.n	8008014 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb65 	bl	80086dc <USBD_CtlError>
          break;
 8008012:	bf00      	nop
      }
      break;
 8008014:	e004      	b.n	8008020 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fb5f 	bl	80086dc <USBD_CtlError>
      break;
 800801e:	bf00      	nop
  }

  return ret;
 8008020:	7bfb      	ldrb	r3, [r7, #15]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	2b0e      	cmp	r3, #14
 800804e:	f200 8152 	bhi.w	80082f6 <USBD_GetDescriptor+0x2ca>
 8008052:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <USBD_GetDescriptor+0x2c>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	080080c9 	.word	0x080080c9
 800805c:	080080e1 	.word	0x080080e1
 8008060:	08008121 	.word	0x08008121
 8008064:	080082f7 	.word	0x080082f7
 8008068:	080082f7 	.word	0x080082f7
 800806c:	08008297 	.word	0x08008297
 8008070:	080082c3 	.word	0x080082c3
 8008074:	080082f7 	.word	0x080082f7
 8008078:	080082f7 	.word	0x080082f7
 800807c:	080082f7 	.word	0x080082f7
 8008080:	080082f7 	.word	0x080082f7
 8008084:	080082f7 	.word	0x080082f7
 8008088:	080082f7 	.word	0x080082f7
 800808c:	080082f7 	.word	0x080082f7
 8008090:	08008095 	.word	0x08008095
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	7c12      	ldrb	r2, [r2, #16]
 80080ac:	f107 0108 	add.w	r1, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080b6:	e126      	b.n	8008306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fb0e 	bl	80086dc <USBD_CtlError>
        err++;
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	3301      	adds	r3, #1
 80080c4:	72fb      	strb	r3, [r7, #11]
      break;
 80080c6:	e11e      	b.n	8008306 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	7c12      	ldrb	r2, [r2, #16]
 80080d4:	f107 0108 	add.w	r1, r7, #8
 80080d8:	4610      	mov	r0, r2
 80080da:	4798      	blx	r3
 80080dc:	60f8      	str	r0, [r7, #12]
      break;
 80080de:	e112      	b.n	8008306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	7c1b      	ldrb	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10d      	bne.n	8008104 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	f107 0208 	add.w	r2, r7, #8
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	3301      	adds	r3, #1
 80080fe:	2202      	movs	r2, #2
 8008100:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008102:	e100      	b.n	8008306 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	f107 0208 	add.w	r2, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	2202      	movs	r2, #2
 800811c:	701a      	strb	r2, [r3, #0]
      break;
 800811e:	e0f2      	b.n	8008306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	885b      	ldrh	r3, [r3, #2]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b05      	cmp	r3, #5
 8008128:	f200 80ac 	bhi.w	8008284 <USBD_GetDescriptor+0x258>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_GetDescriptor+0x108>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	0800814d 	.word	0x0800814d
 8008138:	08008181 	.word	0x08008181
 800813c:	080081b5 	.word	0x080081b5
 8008140:	080081e9 	.word	0x080081e9
 8008144:	0800821d 	.word	0x0800821d
 8008148:	08008251 	.word	0x08008251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7c12      	ldrb	r2, [r2, #16]
 8008164:	f107 0108 	add.w	r1, r7, #8
 8008168:	4610      	mov	r0, r2
 800816a:	4798      	blx	r3
 800816c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816e:	e091      	b.n	8008294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fab2 	bl	80086dc <USBD_CtlError>
            err++;
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	3301      	adds	r3, #1
 800817c:	72fb      	strb	r3, [r7, #11]
          break;
 800817e:	e089      	b.n	8008294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	7c12      	ldrb	r2, [r2, #16]
 8008198:	f107 0108 	add.w	r1, r7, #8
 800819c:	4610      	mov	r0, r2
 800819e:	4798      	blx	r3
 80081a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081a2:	e077      	b.n	8008294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa98 	bl	80086dc <USBD_CtlError>
            err++;
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	3301      	adds	r3, #1
 80081b0:	72fb      	strb	r3, [r7, #11]
          break;
 80081b2:	e06f      	b.n	8008294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	7c12      	ldrb	r2, [r2, #16]
 80081cc:	f107 0108 	add.w	r1, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d6:	e05d      	b.n	8008294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa7e 	bl	80086dc <USBD_CtlError>
            err++;
 80081e0:	7afb      	ldrb	r3, [r7, #11]
 80081e2:	3301      	adds	r3, #1
 80081e4:	72fb      	strb	r3, [r7, #11]
          break;
 80081e6:	e055      	b.n	8008294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	7c12      	ldrb	r2, [r2, #16]
 8008200:	f107 0108 	add.w	r1, r7, #8
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
 8008208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820a:	e043      	b.n	8008294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa64 	bl	80086dc <USBD_CtlError>
            err++;
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	3301      	adds	r3, #1
 8008218:	72fb      	strb	r3, [r7, #11]
          break;
 800821a:	e03b      	b.n	8008294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	7c12      	ldrb	r2, [r2, #16]
 8008234:	f107 0108 	add.w	r1, r7, #8
 8008238:	4610      	mov	r0, r2
 800823a:	4798      	blx	r3
 800823c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823e:	e029      	b.n	8008294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa4a 	bl	80086dc <USBD_CtlError>
            err++;
 8008248:	7afb      	ldrb	r3, [r7, #11]
 800824a:	3301      	adds	r3, #1
 800824c:	72fb      	strb	r3, [r7, #11]
          break;
 800824e:	e021      	b.n	8008294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7c12      	ldrb	r2, [r2, #16]
 8008268:	f107 0108 	add.w	r1, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008272:	e00f      	b.n	8008294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa30 	bl	80086dc <USBD_CtlError>
            err++;
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	3301      	adds	r3, #1
 8008280:	72fb      	strb	r3, [r7, #11]
          break;
 8008282:	e007      	b.n	8008294 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa28 	bl	80086dc <USBD_CtlError>
          err++;
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	3301      	adds	r3, #1
 8008290:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008292:	bf00      	nop
      }
      break;
 8008294:	e037      	b.n	8008306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7c1b      	ldrb	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a6:	f107 0208 	add.w	r2, r7, #8
 80082aa:	4610      	mov	r0, r2
 80082ac:	4798      	blx	r3
 80082ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082b0:	e029      	b.n	8008306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fa11 	bl	80086dc <USBD_CtlError>
        err++;
 80082ba:	7afb      	ldrb	r3, [r7, #11]
 80082bc:	3301      	adds	r3, #1
 80082be:	72fb      	strb	r3, [r7, #11]
      break;
 80082c0:	e021      	b.n	8008306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	7c1b      	ldrb	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10d      	bne.n	80082e6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	f107 0208 	add.w	r2, r7, #8
 80082d6:	4610      	mov	r0, r2
 80082d8:	4798      	blx	r3
 80082da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3301      	adds	r3, #1
 80082e0:	2207      	movs	r2, #7
 80082e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082e4:	e00f      	b.n	8008306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9f7 	bl	80086dc <USBD_CtlError>
        err++;
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	3301      	adds	r3, #1
 80082f2:	72fb      	strb	r3, [r7, #11]
      break;
 80082f4:	e007      	b.n	8008306 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f9ef 	bl	80086dc <USBD_CtlError>
      err++;
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	3301      	adds	r3, #1
 8008302:	72fb      	strb	r3, [r7, #11]
      break;
 8008304:	bf00      	nop
  }

  if (err != 0U)
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d11e      	bne.n	800834a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	88db      	ldrh	r3, [r3, #6]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d016      	beq.n	8008342 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008314:	893b      	ldrh	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00e      	beq.n	8008338 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	88da      	ldrh	r2, [r3, #6]
 800831e:	893b      	ldrh	r3, [r7, #8]
 8008320:	4293      	cmp	r3, r2
 8008322:	bf28      	it	cs
 8008324:	4613      	movcs	r3, r2
 8008326:	b29b      	uxth	r3, r3
 8008328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800832a:	893b      	ldrh	r3, [r7, #8]
 800832c:	461a      	mov	r2, r3
 800832e:	68f9      	ldr	r1, [r7, #12]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fa44 	bl	80087be <USBD_CtlSendData>
 8008336:	e009      	b.n	800834c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9ce 	bl	80086dc <USBD_CtlError>
 8008340:	e004      	b.n	800834c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa95 	bl	8008872 <USBD_CtlSendStatus>
 8008348:	e000      	b.n	800834c <USBD_GetDescriptor+0x320>
    return;
 800834a:	bf00      	nop
  }
}
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop

08008354 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	889b      	ldrh	r3, [r3, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d131      	bne.n	80083ca <USBD_SetAddress+0x76>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	88db      	ldrh	r3, [r3, #6]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d12d      	bne.n	80083ca <USBD_SetAddress+0x76>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	885b      	ldrh	r3, [r3, #2]
 8008372:	2b7f      	cmp	r3, #127	; 0x7f
 8008374:	d829      	bhi.n	80083ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b03      	cmp	r3, #3
 800838c:	d104      	bne.n	8008398 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f9a3 	bl	80086dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008396:	e01d      	b.n	80083d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7bfa      	ldrb	r2, [r7, #15]
 800839c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f003 f9ef 	bl	800b788 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa61 	bl	8008872 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d004      	beq.n	80083c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083be:	e009      	b.n	80083d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c8:	e004      	b.n	80083d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f985 	bl	80086dc <USBD_CtlError>
  }
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	885b      	ldrh	r3, [r3, #2]
 80083ee:	b2da      	uxtb	r2, r3
 80083f0:	4b4c      	ldr	r3, [pc, #304]	; (8008524 <USBD_SetConfig+0x148>)
 80083f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f4:	4b4b      	ldr	r3, [pc, #300]	; (8008524 <USBD_SetConfig+0x148>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d905      	bls.n	8008408 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f96c 	bl	80086dc <USBD_CtlError>
    return USBD_FAIL;
 8008404:	2303      	movs	r3, #3
 8008406:	e088      	b.n	800851a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d002      	beq.n	800841a <USBD_SetConfig+0x3e>
 8008414:	2b03      	cmp	r3, #3
 8008416:	d025      	beq.n	8008464 <USBD_SetConfig+0x88>
 8008418:	e071      	b.n	80084fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800841a:	4b42      	ldr	r3, [pc, #264]	; (8008524 <USBD_SetConfig+0x148>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d01c      	beq.n	800845c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008422:	4b40      	ldr	r3, [pc, #256]	; (8008524 <USBD_SetConfig+0x148>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800842c:	4b3d      	ldr	r3, [pc, #244]	; (8008524 <USBD_SetConfig+0x148>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff f992 	bl	800775c <USBD_SetClassConfig>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f949 	bl	80086dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800844a:	e065      	b.n	8008518 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fa10 	bl	8008872 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800845a:	e05d      	b.n	8008518 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fa08 	bl	8008872 <USBD_CtlSendStatus>
      break;
 8008462:	e059      	b.n	8008518 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008464:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <USBD_SetConfig+0x148>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d112      	bne.n	8008492 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008474:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <USBD_SetConfig+0x148>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800847e:	4b29      	ldr	r3, [pc, #164]	; (8008524 <USBD_SetConfig+0x148>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff f985 	bl	8007794 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f9f1 	bl	8008872 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008490:	e042      	b.n	8008518 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <USBD_SetConfig+0x148>)
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d02a      	beq.n	80084f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff f973 	bl	8007794 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80084ae:	4b1d      	ldr	r3, [pc, #116]	; (8008524 <USBD_SetConfig+0x148>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <USBD_SetConfig+0x148>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff f94c 	bl	800775c <USBD_SetClassConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00f      	beq.n	80084ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f903 	bl	80086dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff f958 	bl	8007794 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ec:	e014      	b.n	8008518 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9bf 	bl	8008872 <USBD_CtlSendStatus>
      break;
 80084f4:	e010      	b.n	8008518 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9bb 	bl	8008872 <USBD_CtlSendStatus>
      break;
 80084fc:	e00c      	b.n	8008518 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8eb 	bl	80086dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <USBD_SetConfig+0x148>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff f941 	bl	8007794 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008512:	2303      	movs	r3, #3
 8008514:	73fb      	strb	r3, [r7, #15]
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	200004d0 	.word	0x200004d0

08008528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d004      	beq.n	8008544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8cd 	bl	80086dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008542:	e023      	b.n	800858c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	dc02      	bgt.n	8008556 <USBD_GetConfig+0x2e>
 8008550:	2b00      	cmp	r3, #0
 8008552:	dc03      	bgt.n	800855c <USBD_GetConfig+0x34>
 8008554:	e015      	b.n	8008582 <USBD_GetConfig+0x5a>
 8008556:	2b03      	cmp	r3, #3
 8008558:	d00b      	beq.n	8008572 <USBD_GetConfig+0x4a>
 800855a:	e012      	b.n	8008582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3308      	adds	r3, #8
 8008566:	2201      	movs	r2, #1
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f927 	bl	80087be <USBD_CtlSendData>
        break;
 8008570:	e00c      	b.n	800858c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	2201      	movs	r2, #1
 8008578:	4619      	mov	r1, r3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f91f 	bl	80087be <USBD_CtlSendData>
        break;
 8008580:	e004      	b.n	800858c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8a9 	bl	80086dc <USBD_CtlError>
        break;
 800858a:	bf00      	nop
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d81e      	bhi.n	80085ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d004      	beq.n	80085be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f890 	bl	80086dc <USBD_CtlError>
        break;
 80085bc:	e01a      	b.n	80085f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f043 0202 	orr.w	r2, r3, #2
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	330c      	adds	r3, #12
 80085de:	2202      	movs	r2, #2
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f8eb 	bl	80087be <USBD_CtlSendData>
      break;
 80085e8:	e004      	b.n	80085f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f875 	bl	80086dc <USBD_CtlError>
      break;
 80085f2:	bf00      	nop
  }
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d106      	bne.n	800861c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f92b 	bl	8008872 <USBD_CtlSendStatus>
  }
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008634:	b2db      	uxtb	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	2b02      	cmp	r3, #2
 800863a:	d80b      	bhi.n	8008654 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d10c      	bne.n	800865e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f910 	bl	8008872 <USBD_CtlSendStatus>
      }
      break;
 8008652:	e004      	b.n	800865e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f840 	bl	80086dc <USBD_CtlError>
      break;
 800865c:	e000      	b.n	8008660 <USBD_ClrFeature+0x3c>
      break;
 800865e:	bf00      	nop
  }
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fa92 	bl	8007bbc <SWAPBYTE>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
 80086a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3301      	adds	r3, #1
 80086aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fa85 	bl	8007bbc <SWAPBYTE>
 80086b2:	4603      	mov	r3, r0
 80086b4:	461a      	mov	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3301      	adds	r3, #1
 80086be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fa78 	bl	8007bbc <SWAPBYTE>
 80086cc:	4603      	mov	r3, r0
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	80da      	strh	r2, [r3, #6]
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086e6:	2180      	movs	r1, #128	; 0x80
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f002 ffe3 	bl	800b6b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086ee:	2100      	movs	r1, #0
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f002 ffdf 	bl	800b6b4 <USBD_LL_StallEP>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b086      	sub	sp, #24
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d036      	beq.n	8008782 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008718:	6938      	ldr	r0, [r7, #16]
 800871a:	f000 f836 	bl	800878a <USBD_GetLen>
 800871e:	4603      	mov	r3, r0
 8008720:	3301      	adds	r3, #1
 8008722:	b29b      	uxth	r3, r3
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	7812      	ldrb	r2, [r2, #0]
 8008736:	701a      	strb	r2, [r3, #0]
  idx++;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
 800873a:	3301      	adds	r3, #1
 800873c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	4413      	add	r3, r2
 8008744:	2203      	movs	r2, #3
 8008746:	701a      	strb	r2, [r3, #0]
  idx++;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	3301      	adds	r3, #1
 800874c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800874e:	e013      	b.n	8008778 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	4413      	add	r3, r2
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	7812      	ldrb	r2, [r2, #0]
 800875a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	3301      	adds	r3, #1
 8008760:	613b      	str	r3, [r7, #16]
    idx++;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	3301      	adds	r3, #1
 8008766:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	4413      	add	r3, r2
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
    idx++;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e7      	bne.n	8008750 <USBD_GetString+0x52>
 8008780:	e000      	b.n	8008784 <USBD_GetString+0x86>
    return;
 8008782:	bf00      	nop
  }
}
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800879a:	e005      	b.n	80087a8 <USBD_GetLen+0x1e>
  {
    len++;
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	3301      	adds	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1f5      	bne.n	800879c <USBD_GetLen+0x12>
  }

  return len;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2202      	movs	r2, #2
 80087ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	2100      	movs	r1, #0
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f002 ffee 	bl	800b7c6 <USBD_LL_Transmit>

  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	2100      	movs	r1, #0
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f002 ffdd 	bl	800b7c6 <USBD_LL_Transmit>

  return USBD_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2203      	movs	r2, #3
 8008826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	2100      	movs	r1, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f002 ffe1 	bl	800b808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	2100      	movs	r1, #0
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f002 ffd0 	bl	800b808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008882:	2300      	movs	r3, #0
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f002 ff9c 	bl	800b7c6 <USBD_LL_Transmit>

  return USBD_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2205      	movs	r2, #5
 80088a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f002 ffaa 	bl	800b808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <__NVIC_SetPriority>:
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	6039      	str	r1, [r7, #0]
 80088ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db0a      	blt.n	80088ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	490c      	ldr	r1, [pc, #48]	; (800890c <__NVIC_SetPriority+0x4c>)
 80088da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088de:	0112      	lsls	r2, r2, #4
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	440b      	add	r3, r1
 80088e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80088e8:	e00a      	b.n	8008900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	4908      	ldr	r1, [pc, #32]	; (8008910 <__NVIC_SetPriority+0x50>)
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	3b04      	subs	r3, #4
 80088f8:	0112      	lsls	r2, r2, #4
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	440b      	add	r3, r1
 80088fe:	761a      	strb	r2, [r3, #24]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	e000e100 	.word	0xe000e100
 8008910:	e000ed00 	.word	0xe000ed00

08008914 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008914:	b580      	push	{r7, lr}
 8008916:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008918:	2100      	movs	r1, #0
 800891a:	f06f 0004 	mvn.w	r0, #4
 800891e:	f7ff ffcf 	bl	80088c0 <__NVIC_SetPriority>
#endif
}
 8008922:	bf00      	nop
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800892e:	f3ef 8305 	mrs	r3, IPSR
 8008932:	603b      	str	r3, [r7, #0]
  return(result);
 8008934:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800893a:	f06f 0305 	mvn.w	r3, #5
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	e00c      	b.n	800895c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <osKernelInitialize+0x44>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d105      	bne.n	8008956 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800894a:	4b08      	ldr	r3, [pc, #32]	; (800896c <osKernelInitialize+0x44>)
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008950:	2300      	movs	r3, #0
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	e002      	b.n	800895c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800895a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800895c:	687b      	ldr	r3, [r7, #4]
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	200004d4 	.word	0x200004d4

08008970 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008976:	f3ef 8305 	mrs	r3, IPSR
 800897a:	603b      	str	r3, [r7, #0]
  return(result);
 800897c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008982:	f06f 0305 	mvn.w	r3, #5
 8008986:	607b      	str	r3, [r7, #4]
 8008988:	e010      	b.n	80089ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800898a:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <osKernelStart+0x48>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d109      	bne.n	80089a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008992:	f7ff ffbf 	bl	8008914 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008996:	4b08      	ldr	r3, [pc, #32]	; (80089b8 <osKernelStart+0x48>)
 8008998:	2202      	movs	r2, #2
 800899a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800899c:	f000 ff56 	bl	800984c <vTaskStartScheduler>
      stat = osOK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	607b      	str	r3, [r7, #4]
 80089a4:	e002      	b.n	80089ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089ac:	687b      	ldr	r3, [r7, #4]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	200004d4 	.word	0x200004d4

080089bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80089cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	4a06      	ldr	r2, [pc, #24]	; (80089ec <vApplicationGetIdleTaskMemory+0x30>)
 80089d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2280      	movs	r2, #128	; 0x80
 80089d8:	601a      	str	r2, [r3, #0]
}
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	200004d8 	.word	0x200004d8
 80089ec:	20000580 	.word	0x20000580

080089f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a07      	ldr	r2, [pc, #28]	; (8008a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8008a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4a06      	ldr	r2, [pc, #24]	; (8008a20 <vApplicationGetTimerTaskMemory+0x30>)
 8008a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a0e:	601a      	str	r2, [r3, #0]
}
 8008a10:	bf00      	nop
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	20000780 	.word	0x20000780
 8008a20:	20000828 	.word	0x20000828

08008a24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f103 0208 	add.w	r2, r3, #8
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f103 0208 	add.w	r2, r3, #8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f103 0208 	add.w	r2, r3, #8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	1c5a      	adds	r2, r3, #1
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	601a      	str	r2, [r3, #0]
}
 8008aba:	bf00      	nop
 8008abc:	3714      	adds	r7, #20
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr

08008ac6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008adc:	d103      	bne.n	8008ae6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	e00c      	b.n	8008b00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e002      	b.n	8008af4 <vListInsert+0x2e>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d2f6      	bcs.n	8008aee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	601a      	str	r2, [r3, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6892      	ldr	r2, [r2, #8]
 8008b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6852      	ldr	r2, [r2, #4]
 8008b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d103      	bne.n	8008b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	1e5a      	subs	r2, r3, #1
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008bb6:	f001 fffd 	bl	800abb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	441a      	add	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be6:	3b01      	subs	r3, #1
 8008be8:	68f9      	ldr	r1, [r7, #12]
 8008bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bec:	fb01 f303 	mul.w	r3, r1, r3
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	22ff      	movs	r2, #255	; 0xff
 8008bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	22ff      	movs	r2, #255	; 0xff
 8008c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d114      	bne.n	8008c36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d01a      	beq.n	8008c4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3310      	adds	r3, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f001 f8b1 	bl	8009d80 <xTaskRemoveFromEventList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d012      	beq.n	8008c4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <xQueueGenericReset+0xcc>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	e009      	b.n	8008c4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3310      	adds	r3, #16
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fef2 	bl	8008a24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3324      	adds	r3, #36	; 0x24
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff feed 	bl	8008a24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c4a:	f001 ffe3 	bl	800ac14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c4e:	2301      	movs	r3, #1
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08e      	sub	sp, #56	; 0x38
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10a      	bne.n	8008c86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10a      	bne.n	8008ca2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <xQueueGenericCreateStatic+0x52>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <xQueueGenericCreateStatic+0x56>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <xQueueGenericCreateStatic+0x58>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	623b      	str	r3, [r7, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <xQueueGenericCreateStatic+0x7e>
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <xQueueGenericCreateStatic+0x82>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <xQueueGenericCreateStatic+0x84>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	61fb      	str	r3, [r7, #28]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cfa:	2350      	movs	r3, #80	; 0x50
 8008cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b50      	cmp	r3, #80	; 0x50
 8008d02:	d00a      	beq.n	8008d1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	61bb      	str	r3, [r7, #24]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00d      	beq.n	8008d42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	4613      	mov	r3, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 f805 	bl	8008d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3730      	adds	r7, #48	; 0x30
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d103      	bne.n	8008d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	69b8      	ldr	r0, [r7, #24]
 8008d7e:	f7ff ff05 	bl	8008b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08e      	sub	sp, #56	; 0x38
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <xQueueGenericSend+0x32>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <xQueueGenericSend+0x40>
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <xQueueGenericSend+0x44>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <xQueueGenericSend+0x46>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <xQueueGenericSend+0x60>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008df0:	bf00      	nop
 8008df2:	e7fe      	b.n	8008df2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d103      	bne.n	8008e02 <xQueueGenericSend+0x6e>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <xQueueGenericSend+0x72>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e000      	b.n	8008e08 <xQueueGenericSend+0x74>
 8008e06:	2300      	movs	r3, #0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10a      	bne.n	8008e22 <xQueueGenericSend+0x8e>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	623b      	str	r3, [r7, #32]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e22:	f001 f96f 	bl	800a104 <xTaskGetSchedulerState>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <xQueueGenericSend+0x9e>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSend+0xa2>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSend+0xa4>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10a      	bne.n	8008e52 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	61fb      	str	r3, [r7, #28]
}
 8008e4e:	bf00      	nop
 8008e50:	e7fe      	b.n	8008e50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e52:	f001 feaf 	bl	800abb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d302      	bcc.n	8008e68 <xQueueGenericSend+0xd4>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d129      	bne.n	8008ebc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e6e:	f000 fa0b 	bl	8009288 <prvCopyDataToQueue>
 8008e72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7e:	3324      	adds	r3, #36	; 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 ff7d 	bl	8009d80 <xTaskRemoveFromEventList>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d013      	beq.n	8008eb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e8c:	4b3f      	ldr	r3, [pc, #252]	; (8008f8c <xQueueGenericSend+0x1f8>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	e00a      	b.n	8008eb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ea4:	4b39      	ldr	r3, [pc, #228]	; (8008f8c <xQueueGenericSend+0x1f8>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008eb4:	f001 feae 	bl	800ac14 <vPortExitCritical>
				return pdPASS;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e063      	b.n	8008f84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ec2:	f001 fea7 	bl	800ac14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e05c      	b.n	8008f84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 ffb7 	bl	8009e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ede:	f001 fe99 	bl	800ac14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ee2:	f000 fd23 	bl	800992c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee6:	f001 fe65 	bl	800abb4 <vPortEnterCritical>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef6:	d103      	bne.n	8008f00 <xQueueGenericSend+0x16c>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f0c:	d103      	bne.n	8008f16 <xQueueGenericSend+0x182>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f16:	f001 fe7d 	bl	800ac14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f1a:	1d3a      	adds	r2, r7, #4
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 ffa6 	bl	8009e74 <xTaskCheckForTimeOut>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d124      	bne.n	8008f78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f30:	f000 faa2 	bl	8009478 <prvIsQueueFull>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d018      	beq.n	8008f6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fecc 	bl	8009ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4a:	f000 fa2d 	bl	80093a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f4e:	f000 fcfb 	bl	8009948 <xTaskResumeAll>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f47f af7c 	bne.w	8008e52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <xQueueGenericSend+0x1f8>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	e772      	b.n	8008e52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f6e:	f000 fa1b 	bl	80093a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f72:	f000 fce9 	bl	8009948 <xTaskResumeAll>
 8008f76:	e76c      	b.n	8008e52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7a:	f000 fa15 	bl	80093a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f7e:	f000 fce3 	bl	8009948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3738      	adds	r7, #56	; 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b090      	sub	sp, #64	; 0x40
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <xQueueGenericSendFromISR+0x3c>
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <xQueueGenericSendFromISR+0x40>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <xQueueGenericSendFromISR+0x42>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d103      	bne.n	8008ffa <xQueueGenericSendFromISR+0x6a>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <xQueueGenericSendFromISR+0x6e>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e000      	b.n	8009000 <xQueueGenericSendFromISR+0x70>
 8008ffe:	2300      	movs	r3, #0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	623b      	str	r3, [r7, #32]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800901a:	f001 fead 	bl	800ad78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800901e:	f3ef 8211 	mrs	r2, BASEPRI
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	61fa      	str	r2, [r7, #28]
 8009034:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009036:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <xQueueGenericSendFromISR+0xbc>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b02      	cmp	r3, #2
 800904a:	d12f      	bne.n	80090ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009062:	f000 f911 	bl	8009288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009066:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800906e:	d112      	bne.n	8009096 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	d016      	beq.n	80090a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fe7f 	bl	8009d80 <xTaskRemoveFromEventList>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00e      	beq.n	80090a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00b      	beq.n	80090a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	e007      	b.n	80090a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800909a:	3301      	adds	r3, #1
 800909c:	b2db      	uxtb	r3, r3
 800909e:	b25a      	sxtb	r2, r3
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090a6:	2301      	movs	r3, #1
 80090a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80090aa:	e001      	b.n	80090b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090ac:	2300      	movs	r3, #0
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3740      	adds	r7, #64	; 0x40
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08c      	sub	sp, #48	; 0x30
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <xQueueReceive+0x30>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	623b      	str	r3, [r7, #32]
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <xQueueReceive+0x3e>
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <xQueueReceive+0x42>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueReceive+0x44>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueReceive+0x5e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	61fb      	str	r3, [r7, #28]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009126:	f000 ffed 	bl	800a104 <xTaskGetSchedulerState>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d102      	bne.n	8009136 <xQueueReceive+0x6e>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <xQueueReceive+0x72>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <xQueueReceive+0x74>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueReceive+0x8e>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	61bb      	str	r3, [r7, #24]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009156:	f001 fd2d 	bl	800abb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01f      	beq.n	80091a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916a:	f000 f8f7 	bl	800935c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	1e5a      	subs	r2, r3, #1
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800917e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009180:	3310      	adds	r3, #16
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fdfc 	bl	8009d80 <xTaskRemoveFromEventList>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800918e:	4b3d      	ldr	r3, [pc, #244]	; (8009284 <xQueueReceive+0x1bc>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800919e:	f001 fd39 	bl	800ac14 <vPortExitCritical>
				return pdPASS;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e069      	b.n	800927a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ac:	f001 fd32 	bl	800ac14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e062      	b.n	800927a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ba:	f107 0310 	add.w	r3, r7, #16
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fe42 	bl	8009e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091c8:	f001 fd24 	bl	800ac14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091cc:	f000 fbae 	bl	800992c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091d0:	f001 fcf0 	bl	800abb4 <vPortEnterCritical>
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091da:	b25b      	sxtb	r3, r3
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091e0:	d103      	bne.n	80091ea <xQueueReceive+0x122>
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f6:	d103      	bne.n	8009200 <xQueueReceive+0x138>
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009200:	f001 fd08 	bl	800ac14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009204:	1d3a      	adds	r2, r7, #4
 8009206:	f107 0310 	add.w	r3, r7, #16
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fe31 	bl	8009e74 <xTaskCheckForTimeOut>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d123      	bne.n	8009260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800921a:	f000 f917 	bl	800944c <prvIsQueueEmpty>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d017      	beq.n	8009254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	3324      	adds	r3, #36	; 0x24
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fd57 	bl	8009ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009234:	f000 f8b8 	bl	80093a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009238:	f000 fb86 	bl	8009948 <xTaskResumeAll>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d189      	bne.n	8009156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <xQueueReceive+0x1bc>)
 8009244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	e780      	b.n	8009156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009256:	f000 f8a7 	bl	80093a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800925a:	f000 fb75 	bl	8009948 <xTaskResumeAll>
 800925e:	e77a      	b.n	8009156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009262:	f000 f8a1 	bl	80093a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009266:	f000 fb6f 	bl	8009948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800926a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800926c:	f000 f8ee 	bl	800944c <prvIsQueueEmpty>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	f43f af6f 	beq.w	8009156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800927a:	4618      	mov	r0, r3
 800927c:	3730      	adds	r7, #48	; 0x30
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	e000ed04 	.word	0xe000ed04

08009288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10d      	bne.n	80092c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d14d      	bne.n	800934a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 ff44 	bl	800a140 <xTaskPriorityDisinherit>
 80092b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	609a      	str	r2, [r3, #8]
 80092c0:	e043      	b.n	800934a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d119      	bne.n	80092fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6858      	ldr	r0, [r3, #4]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d0:	461a      	mov	r2, r3
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	f002 fc0a 	bl	800baec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	441a      	add	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d32b      	bcc.n	800934a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	605a      	str	r2, [r3, #4]
 80092fa:	e026      	b.n	800934a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	68d8      	ldr	r0, [r3, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	461a      	mov	r2, r3
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	f002 fbf0 	bl	800baec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	425b      	negs	r3, r3
 8009316:	441a      	add	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	429a      	cmp	r2, r3
 8009326:	d207      	bcs.n	8009338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009330:	425b      	negs	r3, r3
 8009332:	441a      	add	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b02      	cmp	r3, #2
 800933c:	d105      	bne.n	800934a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3b01      	subs	r3, #1
 8009348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009352:	697b      	ldr	r3, [r7, #20]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d018      	beq.n	80093a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	441a      	add	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68da      	ldr	r2, [r3, #12]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	429a      	cmp	r2, r3
 8009386:	d303      	bcc.n	8009390 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68d9      	ldr	r1, [r3, #12]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	461a      	mov	r2, r3
 800939a:	6838      	ldr	r0, [r7, #0]
 800939c:	f002 fba6 	bl	800baec <memcpy>
	}
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093b0:	f001 fc00 	bl	800abb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093bc:	e011      	b.n	80093e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d012      	beq.n	80093ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3324      	adds	r3, #36	; 0x24
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fcd8 	bl	8009d80 <xTaskRemoveFromEventList>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093d6:	f000 fdaf 	bl	8009f38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	3b01      	subs	r3, #1
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dce9      	bgt.n	80093be <prvUnlockQueue+0x16>
 80093ea:	e000      	b.n	80093ee <prvUnlockQueue+0x46>
					break;
 80093ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	22ff      	movs	r2, #255	; 0xff
 80093f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093f6:	f001 fc0d 	bl	800ac14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093fa:	f001 fbdb 	bl	800abb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009406:	e011      	b.n	800942c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d012      	beq.n	8009436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3310      	adds	r3, #16
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fcb3 	bl	8009d80 <xTaskRemoveFromEventList>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009420:	f000 fd8a 	bl	8009f38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	3b01      	subs	r3, #1
 8009428:	b2db      	uxtb	r3, r3
 800942a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800942c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009430:	2b00      	cmp	r3, #0
 8009432:	dce9      	bgt.n	8009408 <prvUnlockQueue+0x60>
 8009434:	e000      	b.n	8009438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	22ff      	movs	r2, #255	; 0xff
 800943c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009440:	f001 fbe8 	bl	800ac14 <vPortExitCritical>
}
 8009444:	bf00      	nop
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009454:	f001 fbae 	bl	800abb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d102      	bne.n	8009466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e001      	b.n	800946a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800946a:	f001 fbd3 	bl	800ac14 <vPortExitCritical>

	return xReturn;
 800946e:	68fb      	ldr	r3, [r7, #12]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009480:	f001 fb98 	bl	800abb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	429a      	cmp	r2, r3
 800948e:	d102      	bne.n	8009496 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009490:	2301      	movs	r3, #1
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	e001      	b.n	800949a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800949a:	f001 fbbb 	bl	800ac14 <vPortExitCritical>

	return xReturn;
 800949e:	68fb      	ldr	r3, [r7, #12]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e014      	b.n	80094e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094b8:	4a0f      	ldr	r2, [pc, #60]	; (80094f8 <vQueueAddToRegistry+0x50>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10b      	bne.n	80094dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094c4:	490c      	ldr	r1, [pc, #48]	; (80094f8 <vQueueAddToRegistry+0x50>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094ce:	4a0a      	ldr	r2, [pc, #40]	; (80094f8 <vQueueAddToRegistry+0x50>)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	4413      	add	r3, r2
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094da:	e006      	b.n	80094ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3301      	adds	r3, #1
 80094e0:	60fb      	str	r3, [r7, #12]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b07      	cmp	r3, #7
 80094e6:	d9e7      	bls.n	80094b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000c28 	.word	0x20000c28

080094fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800950c:	f001 fb52 	bl	800abb4 <vPortEnterCritical>
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009516:	b25b      	sxtb	r3, r3
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800951c:	d103      	bne.n	8009526 <vQueueWaitForMessageRestricted+0x2a>
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800952c:	b25b      	sxtb	r3, r3
 800952e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009532:	d103      	bne.n	800953c <vQueueWaitForMessageRestricted+0x40>
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800953c:	f001 fb6a 	bl	800ac14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	d106      	bne.n	8009556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	3324      	adds	r3, #36	; 0x24
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fbe9 	bl	8009d28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009556:	6978      	ldr	r0, [r7, #20]
 8009558:	f7ff ff26 	bl	80093a8 <prvUnlockQueue>
	}
 800955c:	bf00      	nop
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08e      	sub	sp, #56	; 0x38
 8009568:	af04      	add	r7, sp, #16
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10a      	bne.n	800958e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	623b      	str	r3, [r7, #32]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xTaskCreateStatic+0x46>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	61fb      	str	r3, [r7, #28]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095aa:	23a8      	movs	r3, #168	; 0xa8
 80095ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2ba8      	cmp	r3, #168	; 0xa8
 80095b2:	d00a      	beq.n	80095ca <xTaskCreateStatic+0x66>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61bb      	str	r3, [r7, #24]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01e      	beq.n	8009610 <xTaskCreateStatic+0xac>
 80095d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01b      	beq.n	8009610 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	2202      	movs	r2, #2
 80095e6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095ea:	2300      	movs	r3, #0
 80095ec:	9303      	str	r3, [sp, #12]
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	f107 0314 	add.w	r3, r7, #20
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	68b9      	ldr	r1, [r7, #8]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 f80c 	bl	8009620 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800960a:	f000 f8af 	bl	800976c <prvAddNewTaskToReadyList>
 800960e:	e001      	b.n	8009614 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009614:	697b      	ldr	r3, [r7, #20]
	}
 8009616:	4618      	mov	r0, r3
 8009618:	3728      	adds	r7, #40	; 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	461a      	mov	r2, r3
 8009638:	21a5      	movs	r1, #165	; 0xa5
 800963a:	f002 f9cd 	bl	800b9d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009648:	3b01      	subs	r3, #1
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	617b      	str	r3, [r7, #20]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d01f      	beq.n	80096be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	e012      	b.n	80096aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	4413      	add	r3, r2
 800968a:	7819      	ldrb	r1, [r3, #0]
 800968c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	3334      	adds	r3, #52	; 0x34
 8009694:	460a      	mov	r2, r1
 8009696:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d006      	beq.n	80096b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	3301      	adds	r3, #1
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2b0f      	cmp	r3, #15
 80096ae:	d9e9      	bls.n	8009684 <prvInitialiseNewTask+0x64>
 80096b0:	e000      	b.n	80096b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80096b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096bc:	e003      	b.n	80096c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	2b37      	cmp	r3, #55	; 0x37
 80096ca:	d901      	bls.n	80096d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096cc:	2337      	movs	r3, #55	; 0x37
 80096ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	2200      	movs	r2, #0
 80096e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	3304      	adds	r3, #4
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff f9bc 	bl	8008a64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	3318      	adds	r3, #24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff f9b7 	bl	8008a64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	2200      	movs	r2, #0
 8009718:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	3354      	adds	r3, #84	; 0x54
 8009720:	224c      	movs	r2, #76	; 0x4c
 8009722:	2100      	movs	r1, #0
 8009724:	4618      	mov	r0, r3
 8009726:	f002 f957 	bl	800b9d8 <memset>
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	4a0c      	ldr	r2, [pc, #48]	; (8009760 <prvInitialiseNewTask+0x140>)
 800972e:	659a      	str	r2, [r3, #88]	; 0x58
 8009730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009732:	4a0c      	ldr	r2, [pc, #48]	; (8009764 <prvInitialiseNewTask+0x144>)
 8009734:	65da      	str	r2, [r3, #92]	; 0x5c
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	4a0b      	ldr	r2, [pc, #44]	; (8009768 <prvInitialiseNewTask+0x148>)
 800973a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	68f9      	ldr	r1, [r7, #12]
 8009740:	69b8      	ldr	r0, [r7, #24]
 8009742:	f001 f90d 	bl	800a960 <pxPortInitialiseStack>
 8009746:	4602      	mov	r2, r0
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009756:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009758:	bf00      	nop
 800975a:	3720      	adds	r7, #32
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20002d00 	.word	0x20002d00
 8009764:	20002d68 	.word	0x20002d68
 8009768:	20002dd0 	.word	0x20002dd0

0800976c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009774:	f001 fa1e 	bl	800abb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009778:	4b2d      	ldr	r3, [pc, #180]	; (8009830 <prvAddNewTaskToReadyList+0xc4>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	4a2c      	ldr	r2, [pc, #176]	; (8009830 <prvAddNewTaskToReadyList+0xc4>)
 8009780:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009782:	4b2c      	ldr	r3, [pc, #176]	; (8009834 <prvAddNewTaskToReadyList+0xc8>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d109      	bne.n	800979e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800978a:	4a2a      	ldr	r2, [pc, #168]	; (8009834 <prvAddNewTaskToReadyList+0xc8>)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009790:	4b27      	ldr	r3, [pc, #156]	; (8009830 <prvAddNewTaskToReadyList+0xc4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d110      	bne.n	80097ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009798:	f000 fbf2 	bl	8009f80 <prvInitialiseTaskLists>
 800979c:	e00d      	b.n	80097ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800979e:	4b26      	ldr	r3, [pc, #152]	; (8009838 <prvAddNewTaskToReadyList+0xcc>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d109      	bne.n	80097ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097a6:	4b23      	ldr	r3, [pc, #140]	; (8009834 <prvAddNewTaskToReadyList+0xc8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d802      	bhi.n	80097ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097b4:	4a1f      	ldr	r2, [pc, #124]	; (8009834 <prvAddNewTaskToReadyList+0xc8>)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097ba:	4b20      	ldr	r3, [pc, #128]	; (800983c <prvAddNewTaskToReadyList+0xd0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3301      	adds	r3, #1
 80097c0:	4a1e      	ldr	r2, [pc, #120]	; (800983c <prvAddNewTaskToReadyList+0xd0>)
 80097c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097c4:	4b1d      	ldr	r3, [pc, #116]	; (800983c <prvAddNewTaskToReadyList+0xd0>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d0:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <prvAddNewTaskToReadyList+0xd4>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d903      	bls.n	80097e0 <prvAddNewTaskToReadyList+0x74>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	4a18      	ldr	r2, [pc, #96]	; (8009840 <prvAddNewTaskToReadyList+0xd4>)
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <prvAddNewTaskToReadyList+0xd8>)
 80097ee:	441a      	add	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f7ff f941 	bl	8008a7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097fc:	f001 fa0a 	bl	800ac14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009800:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <prvAddNewTaskToReadyList+0xcc>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00e      	beq.n	8009826 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <prvAddNewTaskToReadyList+0xc8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	429a      	cmp	r2, r3
 8009814:	d207      	bcs.n	8009826 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <prvAddNewTaskToReadyList+0xdc>)
 8009818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009826:	bf00      	nop
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	2000113c 	.word	0x2000113c
 8009834:	20000c68 	.word	0x20000c68
 8009838:	20001148 	.word	0x20001148
 800983c:	20001158 	.word	0x20001158
 8009840:	20001144 	.word	0x20001144
 8009844:	20000c6c 	.word	0x20000c6c
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	; 0x28
 8009850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800985a:	463a      	mov	r2, r7
 800985c:	1d39      	adds	r1, r7, #4
 800985e:	f107 0308 	add.w	r3, r7, #8
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff f8aa 	bl	80089bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	9202      	str	r2, [sp, #8]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	2300      	movs	r3, #0
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	2300      	movs	r3, #0
 8009878:	460a      	mov	r2, r1
 800987a:	4924      	ldr	r1, [pc, #144]	; (800990c <vTaskStartScheduler+0xc0>)
 800987c:	4824      	ldr	r0, [pc, #144]	; (8009910 <vTaskStartScheduler+0xc4>)
 800987e:	f7ff fe71 	bl	8009564 <xTaskCreateStatic>
 8009882:	4603      	mov	r3, r0
 8009884:	4a23      	ldr	r2, [pc, #140]	; (8009914 <vTaskStartScheduler+0xc8>)
 8009886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009888:	4b22      	ldr	r3, [pc, #136]	; (8009914 <vTaskStartScheduler+0xc8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009890:	2301      	movs	r3, #1
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	e001      	b.n	800989a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009896:	2300      	movs	r3, #0
 8009898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d102      	bne.n	80098a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098a0:	f000 fd10 	bl	800a2c4 <xTimerCreateTimerTask>
 80098a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d11b      	bne.n	80098e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	613b      	str	r3, [r7, #16]
}
 80098be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098c0:	4b15      	ldr	r3, [pc, #84]	; (8009918 <vTaskStartScheduler+0xcc>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3354      	adds	r3, #84	; 0x54
 80098c6:	4a15      	ldr	r2, [pc, #84]	; (800991c <vTaskStartScheduler+0xd0>)
 80098c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098ca:	4b15      	ldr	r3, [pc, #84]	; (8009920 <vTaskStartScheduler+0xd4>)
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80098d2:	4b14      	ldr	r3, [pc, #80]	; (8009924 <vTaskStartScheduler+0xd8>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098d8:	4b13      	ldr	r3, [pc, #76]	; (8009928 <vTaskStartScheduler+0xdc>)
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098de:	f001 f8c7 	bl	800aa70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098e2:	e00e      	b.n	8009902 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ea:	d10a      	bne.n	8009902 <vTaskStartScheduler+0xb6>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	60fb      	str	r3, [r7, #12]
}
 80098fe:	bf00      	nop
 8009900:	e7fe      	b.n	8009900 <vTaskStartScheduler+0xb4>
}
 8009902:	bf00      	nop
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	0800c3a4 	.word	0x0800c3a4
 8009910:	08009f51 	.word	0x08009f51
 8009914:	20001160 	.word	0x20001160
 8009918:	20000c68 	.word	0x20000c68
 800991c:	200001d4 	.word	0x200001d4
 8009920:	2000115c 	.word	0x2000115c
 8009924:	20001148 	.word	0x20001148
 8009928:	20001140 	.word	0x20001140

0800992c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009930:	4b04      	ldr	r3, [pc, #16]	; (8009944 <vTaskSuspendAll+0x18>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3301      	adds	r3, #1
 8009936:	4a03      	ldr	r2, [pc, #12]	; (8009944 <vTaskSuspendAll+0x18>)
 8009938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800993a:	bf00      	nop
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	20001164 	.word	0x20001164

08009948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009956:	4b42      	ldr	r3, [pc, #264]	; (8009a60 <xTaskResumeAll+0x118>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <xTaskResumeAll+0x2c>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	603b      	str	r3, [r7, #0]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009974:	f001 f91e 	bl	800abb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009978:	4b39      	ldr	r3, [pc, #228]	; (8009a60 <xTaskResumeAll+0x118>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3b01      	subs	r3, #1
 800997e:	4a38      	ldr	r2, [pc, #224]	; (8009a60 <xTaskResumeAll+0x118>)
 8009980:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009982:	4b37      	ldr	r3, [pc, #220]	; (8009a60 <xTaskResumeAll+0x118>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d162      	bne.n	8009a50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800998a:	4b36      	ldr	r3, [pc, #216]	; (8009a64 <xTaskResumeAll+0x11c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d05e      	beq.n	8009a50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009992:	e02f      	b.n	80099f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009994:	4b34      	ldr	r3, [pc, #208]	; (8009a68 <xTaskResumeAll+0x120>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3318      	adds	r3, #24
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff f8c9 	bl	8008b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff f8c4 	bl	8008b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b4:	4b2d      	ldr	r3, [pc, #180]	; (8009a6c <xTaskResumeAll+0x124>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d903      	bls.n	80099c4 <xTaskResumeAll+0x7c>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4a2a      	ldr	r2, [pc, #168]	; (8009a6c <xTaskResumeAll+0x124>)
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	4613      	mov	r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4a27      	ldr	r2, [pc, #156]	; (8009a70 <xTaskResumeAll+0x128>)
 80099d2:	441a      	add	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4619      	mov	r1, r3
 80099da:	4610      	mov	r0, r2
 80099dc:	f7ff f84f 	bl	8008a7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4b23      	ldr	r3, [pc, #140]	; (8009a74 <xTaskResumeAll+0x12c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d302      	bcc.n	80099f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80099ee:	4b22      	ldr	r3, [pc, #136]	; (8009a78 <xTaskResumeAll+0x130>)
 80099f0:	2201      	movs	r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099f4:	4b1c      	ldr	r3, [pc, #112]	; (8009a68 <xTaskResumeAll+0x120>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1cb      	bne.n	8009994 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a02:	f000 fb5f 	bl	800a0c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a06:	4b1d      	ldr	r3, [pc, #116]	; (8009a7c <xTaskResumeAll+0x134>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d010      	beq.n	8009a34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a12:	f000 f847 	bl	8009aa4 <xTaskIncrementTick>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009a1c:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <xTaskResumeAll+0x130>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1f1      	bne.n	8009a12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009a2e:	4b13      	ldr	r3, [pc, #76]	; (8009a7c <xTaskResumeAll+0x134>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a34:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <xTaskResumeAll+0x130>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <xTaskResumeAll+0x138>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a50:	f001 f8e0 	bl	800ac14 <vPortExitCritical>

	return xAlreadyYielded;
 8009a54:	68bb      	ldr	r3, [r7, #8]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20001164 	.word	0x20001164
 8009a64:	2000113c 	.word	0x2000113c
 8009a68:	200010fc 	.word	0x200010fc
 8009a6c:	20001144 	.word	0x20001144
 8009a70:	20000c6c 	.word	0x20000c6c
 8009a74:	20000c68 	.word	0x20000c68
 8009a78:	20001150 	.word	0x20001150
 8009a7c:	2000114c 	.word	0x2000114c
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a8a:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <xTaskGetTickCount+0x1c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a90:	687b      	ldr	r3, [r7, #4]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	20001140 	.word	0x20001140

08009aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aae:	4b4f      	ldr	r3, [pc, #316]	; (8009bec <xTaskIncrementTick+0x148>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f040 808f 	bne.w	8009bd6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ab8:	4b4d      	ldr	r3, [pc, #308]	; (8009bf0 <xTaskIncrementTick+0x14c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ac0:	4a4b      	ldr	r2, [pc, #300]	; (8009bf0 <xTaskIncrementTick+0x14c>)
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d120      	bne.n	8009b0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009acc:	4b49      	ldr	r3, [pc, #292]	; (8009bf4 <xTaskIncrementTick+0x150>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <xTaskIncrementTick+0x48>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	603b      	str	r3, [r7, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	e7fe      	b.n	8009aea <xTaskIncrementTick+0x46>
 8009aec:	4b41      	ldr	r3, [pc, #260]	; (8009bf4 <xTaskIncrementTick+0x150>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	4b41      	ldr	r3, [pc, #260]	; (8009bf8 <xTaskIncrementTick+0x154>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a3f      	ldr	r2, [pc, #252]	; (8009bf4 <xTaskIncrementTick+0x150>)
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	4a3f      	ldr	r2, [pc, #252]	; (8009bf8 <xTaskIncrementTick+0x154>)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	4b3e      	ldr	r3, [pc, #248]	; (8009bfc <xTaskIncrementTick+0x158>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3301      	adds	r3, #1
 8009b06:	4a3d      	ldr	r2, [pc, #244]	; (8009bfc <xTaskIncrementTick+0x158>)
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	f000 fadb 	bl	800a0c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b0e:	4b3c      	ldr	r3, [pc, #240]	; (8009c00 <xTaskIncrementTick+0x15c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d349      	bcc.n	8009bac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b18:	4b36      	ldr	r3, [pc, #216]	; (8009bf4 <xTaskIncrementTick+0x150>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d104      	bne.n	8009b2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b22:	4b37      	ldr	r3, [pc, #220]	; (8009c00 <xTaskIncrementTick+0x15c>)
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b28:	601a      	str	r2, [r3, #0]
					break;
 8009b2a:	e03f      	b.n	8009bac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b2c:	4b31      	ldr	r3, [pc, #196]	; (8009bf4 <xTaskIncrementTick+0x150>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d203      	bcs.n	8009b4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b44:	4a2e      	ldr	r2, [pc, #184]	; (8009c00 <xTaskIncrementTick+0x15c>)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b4a:	e02f      	b.n	8009bac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	3304      	adds	r3, #4
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe fff1 	bl	8008b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	3318      	adds	r3, #24
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe ffe8 	bl	8008b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <xTaskIncrementTick+0x160>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d903      	bls.n	8009b7c <xTaskIncrementTick+0xd8>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	4a22      	ldr	r2, [pc, #136]	; (8009c04 <xTaskIncrementTick+0x160>)
 8009b7a:	6013      	str	r3, [r2, #0]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4a1f      	ldr	r2, [pc, #124]	; (8009c08 <xTaskIncrementTick+0x164>)
 8009b8a:	441a      	add	r2, r3
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f7fe ff73 	bl	8008a7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <xTaskIncrementTick+0x168>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d3b8      	bcc.n	8009b18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009baa:	e7b5      	b.n	8009b18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bac:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <xTaskIncrementTick+0x168>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb2:	4915      	ldr	r1, [pc, #84]	; (8009c08 <xTaskIncrementTick+0x164>)
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d901      	bls.n	8009bc8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009bc8:	4b11      	ldr	r3, [pc, #68]	; (8009c10 <xTaskIncrementTick+0x16c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d007      	beq.n	8009be0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	e004      	b.n	8009be0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <xTaskIncrementTick+0x170>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	4a0d      	ldr	r2, [pc, #52]	; (8009c14 <xTaskIncrementTick+0x170>)
 8009bde:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009be0:	697b      	ldr	r3, [r7, #20]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20001164 	.word	0x20001164
 8009bf0:	20001140 	.word	0x20001140
 8009bf4:	200010f4 	.word	0x200010f4
 8009bf8:	200010f8 	.word	0x200010f8
 8009bfc:	20001154 	.word	0x20001154
 8009c00:	2000115c 	.word	0x2000115c
 8009c04:	20001144 	.word	0x20001144
 8009c08:	20000c6c 	.word	0x20000c6c
 8009c0c:	20000c68 	.word	0x20000c68
 8009c10:	20001150 	.word	0x20001150
 8009c14:	2000114c 	.word	0x2000114c

08009c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c1e:	4b2a      	ldr	r3, [pc, #168]	; (8009cc8 <vTaskSwitchContext+0xb0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c26:	4b29      	ldr	r3, [pc, #164]	; (8009ccc <vTaskSwitchContext+0xb4>)
 8009c28:	2201      	movs	r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c2c:	e046      	b.n	8009cbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009c2e:	4b27      	ldr	r3, [pc, #156]	; (8009ccc <vTaskSwitchContext+0xb4>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c34:	4b26      	ldr	r3, [pc, #152]	; (8009cd0 <vTaskSwitchContext+0xb8>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e010      	b.n	8009c5e <vTaskSwitchContext+0x46>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10a      	bne.n	8009c58 <vTaskSwitchContext+0x40>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	607b      	str	r3, [r7, #4]
}
 8009c54:	bf00      	nop
 8009c56:	e7fe      	b.n	8009c56 <vTaskSwitchContext+0x3e>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	491d      	ldr	r1, [pc, #116]	; (8009cd4 <vTaskSwitchContext+0xbc>)
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	440b      	add	r3, r1
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0e4      	beq.n	8009c3c <vTaskSwitchContext+0x24>
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4a15      	ldr	r2, [pc, #84]	; (8009cd4 <vTaskSwitchContext+0xbc>)
 8009c7e:	4413      	add	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	605a      	str	r2, [r3, #4]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	3308      	adds	r3, #8
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d104      	bne.n	8009ca2 <vTaskSwitchContext+0x8a>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	605a      	str	r2, [r3, #4]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	4a0b      	ldr	r2, [pc, #44]	; (8009cd8 <vTaskSwitchContext+0xc0>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	4a08      	ldr	r2, [pc, #32]	; (8009cd0 <vTaskSwitchContext+0xb8>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <vTaskSwitchContext+0xc0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3354      	adds	r3, #84	; 0x54
 8009cb8:	4a08      	ldr	r2, [pc, #32]	; (8009cdc <vTaskSwitchContext+0xc4>)
 8009cba:	6013      	str	r3, [r2, #0]
}
 8009cbc:	bf00      	nop
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20001164 	.word	0x20001164
 8009ccc:	20001150 	.word	0x20001150
 8009cd0:	20001144 	.word	0x20001144
 8009cd4:	20000c6c 	.word	0x20000c6c
 8009cd8:	20000c68 	.word	0x20000c68
 8009cdc:	200001d4 	.word	0x200001d4

08009ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	60fb      	str	r3, [r7, #12]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d06:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <vTaskPlaceOnEventList+0x44>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3318      	adds	r3, #24
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7fe fed9 	bl	8008ac6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d14:	2101      	movs	r1, #1
 8009d16:	6838      	ldr	r0, [r7, #0]
 8009d18:	f000 fa80 	bl	800a21c <prvAddCurrentTaskToDelayedList>
}
 8009d1c:	bf00      	nop
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20000c68 	.word	0x20000c68

08009d28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	617b      	str	r3, [r7, #20]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d50:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3318      	adds	r3, #24
 8009d56:	4619      	mov	r1, r3
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7fe fe90 	bl	8008a7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	68b8      	ldr	r0, [r7, #8]
 8009d6e:	f000 fa55 	bl	800a21c <prvAddCurrentTaskToDelayedList>
	}
 8009d72:	bf00      	nop
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000c68 	.word	0x20000c68

08009d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	60fb      	str	r3, [r7, #12]
}
 8009da8:	bf00      	nop
 8009daa:	e7fe      	b.n	8009daa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3318      	adds	r3, #24
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fec1 	bl	8008b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009db6:	4b1e      	ldr	r3, [pc, #120]	; (8009e30 <xTaskRemoveFromEventList+0xb0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d11d      	bne.n	8009dfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe feb8 	bl	8008b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dcc:	4b19      	ldr	r3, [pc, #100]	; (8009e34 <xTaskRemoveFromEventList+0xb4>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d903      	bls.n	8009ddc <xTaskRemoveFromEventList+0x5c>
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <xTaskRemoveFromEventList+0xb4>)
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4a13      	ldr	r2, [pc, #76]	; (8009e38 <xTaskRemoveFromEventList+0xb8>)
 8009dea:	441a      	add	r2, r3
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	3304      	adds	r3, #4
 8009df0:	4619      	mov	r1, r3
 8009df2:	4610      	mov	r0, r2
 8009df4:	f7fe fe43 	bl	8008a7e <vListInsertEnd>
 8009df8:	e005      	b.n	8009e06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3318      	adds	r3, #24
 8009dfe:	4619      	mov	r1, r3
 8009e00:	480e      	ldr	r0, [pc, #56]	; (8009e3c <xTaskRemoveFromEventList+0xbc>)
 8009e02:	f7fe fe3c 	bl	8008a7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <xTaskRemoveFromEventList+0xc0>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d905      	bls.n	8009e20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e14:	2301      	movs	r3, #1
 8009e16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e18:	4b0a      	ldr	r3, [pc, #40]	; (8009e44 <xTaskRemoveFromEventList+0xc4>)
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	e001      	b.n	8009e24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e24:	697b      	ldr	r3, [r7, #20]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20001164 	.word	0x20001164
 8009e34:	20001144 	.word	0x20001144
 8009e38:	20000c6c 	.word	0x20000c6c
 8009e3c:	200010fc 	.word	0x200010fc
 8009e40:	20000c68 	.word	0x20000c68
 8009e44:	20001150 	.word	0x20001150

08009e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e50:	4b06      	ldr	r3, [pc, #24]	; (8009e6c <vTaskInternalSetTimeOutState+0x24>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <vTaskInternalSetTimeOutState+0x28>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	605a      	str	r2, [r3, #4]
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20001154 	.word	0x20001154
 8009e70:	20001140 	.word	0x20001140

08009e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b088      	sub	sp, #32
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	613b      	str	r3, [r7, #16]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009eb6:	f000 fe7d 	bl	800abb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009eba:	4b1d      	ldr	r3, [pc, #116]	; (8009f30 <xTaskCheckForTimeOut+0xbc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed2:	d102      	bne.n	8009eda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	61fb      	str	r3, [r7, #28]
 8009ed8:	e023      	b.n	8009f22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4b15      	ldr	r3, [pc, #84]	; (8009f34 <xTaskCheckForTimeOut+0xc0>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d007      	beq.n	8009ef6 <xTaskCheckForTimeOut+0x82>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d302      	bcc.n	8009ef6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	61fb      	str	r3, [r7, #28]
 8009ef4:	e015      	b.n	8009f22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d20b      	bcs.n	8009f18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	1ad2      	subs	r2, r2, r3
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff ff9b 	bl	8009e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e004      	b.n	8009f22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f22:	f000 fe77 	bl	800ac14 <vPortExitCritical>

	return xReturn;
 8009f26:	69fb      	ldr	r3, [r7, #28]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3720      	adds	r7, #32
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20001140 	.word	0x20001140
 8009f34:	20001154 	.word	0x20001154

08009f38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f3c:	4b03      	ldr	r3, [pc, #12]	; (8009f4c <vTaskMissedYield+0x14>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	601a      	str	r2, [r3, #0]
}
 8009f42:	bf00      	nop
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20001150 	.word	0x20001150

08009f50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f58:	f000 f852 	bl	800a000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f5c:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <prvIdleTask+0x28>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d9f9      	bls.n	8009f58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <prvIdleTask+0x2c>)
 8009f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f74:	e7f0      	b.n	8009f58 <prvIdleTask+0x8>
 8009f76:	bf00      	nop
 8009f78:	20000c6c 	.word	0x20000c6c
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f86:	2300      	movs	r3, #0
 8009f88:	607b      	str	r3, [r7, #4]
 8009f8a:	e00c      	b.n	8009fa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4a12      	ldr	r2, [pc, #72]	; (8009fe0 <prvInitialiseTaskLists+0x60>)
 8009f98:	4413      	add	r3, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fd42 	bl	8008a24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b37      	cmp	r3, #55	; 0x37
 8009faa:	d9ef      	bls.n	8009f8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fac:	480d      	ldr	r0, [pc, #52]	; (8009fe4 <prvInitialiseTaskLists+0x64>)
 8009fae:	f7fe fd39 	bl	8008a24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fb2:	480d      	ldr	r0, [pc, #52]	; (8009fe8 <prvInitialiseTaskLists+0x68>)
 8009fb4:	f7fe fd36 	bl	8008a24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fb8:	480c      	ldr	r0, [pc, #48]	; (8009fec <prvInitialiseTaskLists+0x6c>)
 8009fba:	f7fe fd33 	bl	8008a24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fbe:	480c      	ldr	r0, [pc, #48]	; (8009ff0 <prvInitialiseTaskLists+0x70>)
 8009fc0:	f7fe fd30 	bl	8008a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fc4:	480b      	ldr	r0, [pc, #44]	; (8009ff4 <prvInitialiseTaskLists+0x74>)
 8009fc6:	f7fe fd2d 	bl	8008a24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fca:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <prvInitialiseTaskLists+0x78>)
 8009fcc:	4a05      	ldr	r2, [pc, #20]	; (8009fe4 <prvInitialiseTaskLists+0x64>)
 8009fce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <prvInitialiseTaskLists+0x7c>)
 8009fd2:	4a05      	ldr	r2, [pc, #20]	; (8009fe8 <prvInitialiseTaskLists+0x68>)
 8009fd4:	601a      	str	r2, [r3, #0]
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20000c6c 	.word	0x20000c6c
 8009fe4:	200010cc 	.word	0x200010cc
 8009fe8:	200010e0 	.word	0x200010e0
 8009fec:	200010fc 	.word	0x200010fc
 8009ff0:	20001110 	.word	0x20001110
 8009ff4:	20001128 	.word	0x20001128
 8009ff8:	200010f4 	.word	0x200010f4
 8009ffc:	200010f8 	.word	0x200010f8

0800a000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a006:	e019      	b.n	800a03c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a008:	f000 fdd4 	bl	800abb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a00c:	4b10      	ldr	r3, [pc, #64]	; (800a050 <prvCheckTasksWaitingTermination+0x50>)
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3304      	adds	r3, #4
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fd8d 	bl	8008b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a01e:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <prvCheckTasksWaitingTermination+0x54>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3b01      	subs	r3, #1
 800a024:	4a0b      	ldr	r2, [pc, #44]	; (800a054 <prvCheckTasksWaitingTermination+0x54>)
 800a026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a028:	4b0b      	ldr	r3, [pc, #44]	; (800a058 <prvCheckTasksWaitingTermination+0x58>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	4a0a      	ldr	r2, [pc, #40]	; (800a058 <prvCheckTasksWaitingTermination+0x58>)
 800a030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a032:	f000 fdef 	bl	800ac14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f810 	bl	800a05c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <prvCheckTasksWaitingTermination+0x58>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e1      	bne.n	800a008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20001110 	.word	0x20001110
 800a054:	2000113c 	.word	0x2000113c
 800a058:	20001124 	.word	0x20001124

0800a05c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3354      	adds	r3, #84	; 0x54
 800a068:	4618      	mov	r0, r3
 800a06a:	f001 fcbd 	bl	800b9e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a074:	2b00      	cmp	r3, #0
 800a076:	d108      	bne.n	800a08a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 febb 	bl	800adf8 <vPortFree>
				vPortFree( pxTCB );
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 feb8 	bl	800adf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a088:	e018      	b.n	800a0bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a090:	2b01      	cmp	r3, #1
 800a092:	d103      	bne.n	800a09c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 feaf 	bl	800adf8 <vPortFree>
	}
 800a09a:	e00f      	b.n	800a0bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d00a      	beq.n	800a0bc <prvDeleteTCB+0x60>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	60fb      	str	r3, [r7, #12]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <prvDeleteTCB+0x5e>
	}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ca:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <prvResetNextTaskUnblockTime+0x38>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0d4:	4b0a      	ldr	r3, [pc, #40]	; (800a100 <prvResetNextTaskUnblockTime+0x3c>)
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0dc:	e008      	b.n	800a0f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0de:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <prvResetNextTaskUnblockTime+0x38>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	4a04      	ldr	r2, [pc, #16]	; (800a100 <prvResetNextTaskUnblockTime+0x3c>)
 800a0ee:	6013      	str	r3, [r2, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	200010f4 	.word	0x200010f4
 800a100:	2000115c 	.word	0x2000115c

0800a104 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <xTaskGetSchedulerState+0x34>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d102      	bne.n	800a118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a112:	2301      	movs	r3, #1
 800a114:	607b      	str	r3, [r7, #4]
 800a116:	e008      	b.n	800a12a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a118:	4b08      	ldr	r3, [pc, #32]	; (800a13c <xTaskGetSchedulerState+0x38>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d102      	bne.n	800a126 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a120:	2302      	movs	r3, #2
 800a122:	607b      	str	r3, [r7, #4]
 800a124:	e001      	b.n	800a12a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a126:	2300      	movs	r3, #0
 800a128:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a12a:	687b      	ldr	r3, [r7, #4]
	}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	20001148 	.word	0x20001148
 800a13c:	20001164 	.word	0x20001164

0800a140 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d056      	beq.n	800a204 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a156:	4b2e      	ldr	r3, [pc, #184]	; (800a210 <xTaskPriorityDisinherit+0xd0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d00a      	beq.n	800a176 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	60fb      	str	r3, [r7, #12]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	60bb      	str	r3, [r7, #8]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a198:	1e5a      	subs	r2, r3, #1
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d02c      	beq.n	800a204 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d128      	bne.n	800a204 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe fcbe 	bl	8008b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d4:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <xTaskPriorityDisinherit+0xd4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d903      	bls.n	800a1e4 <xTaskPriorityDisinherit+0xa4>
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	4a0c      	ldr	r2, [pc, #48]	; (800a214 <xTaskPriorityDisinherit+0xd4>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4a09      	ldr	r2, [pc, #36]	; (800a218 <xTaskPriorityDisinherit+0xd8>)
 800a1f2:	441a      	add	r2, r3
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fe fc3f 	bl	8008a7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a200:	2301      	movs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a204:	697b      	ldr	r3, [r7, #20]
	}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20000c68 	.word	0x20000c68
 800a214:	20001144 	.word	0x20001144
 800a218:	20000c6c 	.word	0x20000c6c

0800a21c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a226:	4b21      	ldr	r3, [pc, #132]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x90>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a22c:	4b20      	ldr	r3, [pc, #128]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3304      	adds	r3, #4
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fc80 	bl	8008b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a23e:	d10a      	bne.n	800a256 <prvAddCurrentTaskToDelayedList+0x3a>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3304      	adds	r3, #4
 800a24c:	4619      	mov	r1, r3
 800a24e:	4819      	ldr	r0, [pc, #100]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a250:	f7fe fc15 	bl	8008a7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a254:	e026      	b.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4413      	add	r3, r2
 800a25c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d209      	bcs.n	800a282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a26e:	4b12      	ldr	r3, [pc, #72]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3304      	adds	r3, #4
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f7fe fc23 	bl	8008ac6 <vListInsert>
}
 800a280:	e010      	b.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a282:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4619      	mov	r1, r3
 800a28e:	4610      	mov	r0, r2
 800a290:	f7fe fc19 	bl	8008ac6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a294:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68ba      	ldr	r2, [r7, #8]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d202      	bcs.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a29e:	4a08      	ldr	r2, [pc, #32]	; (800a2c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6013      	str	r3, [r2, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20001140 	.word	0x20001140
 800a2b0:	20000c68 	.word	0x20000c68
 800a2b4:	20001128 	.word	0x20001128
 800a2b8:	200010f8 	.word	0x200010f8
 800a2bc:	200010f4 	.word	0x200010f4
 800a2c0:	2000115c 	.word	0x2000115c

0800a2c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08a      	sub	sp, #40	; 0x28
 800a2c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2ce:	f000 fb07 	bl	800a8e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2d2:	4b1c      	ldr	r3, [pc, #112]	; (800a344 <xTimerCreateTimerTask+0x80>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d021      	beq.n	800a31e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2e2:	1d3a      	adds	r2, r7, #4
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	f107 030c 	add.w	r3, r7, #12
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe fb7f 	bl	80089f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	9202      	str	r2, [sp, #8]
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	2300      	movs	r3, #0
 800a302:	460a      	mov	r2, r1
 800a304:	4910      	ldr	r1, [pc, #64]	; (800a348 <xTimerCreateTimerTask+0x84>)
 800a306:	4811      	ldr	r0, [pc, #68]	; (800a34c <xTimerCreateTimerTask+0x88>)
 800a308:	f7ff f92c 	bl	8009564 <xTaskCreateStatic>
 800a30c:	4603      	mov	r3, r0
 800a30e:	4a10      	ldr	r2, [pc, #64]	; (800a350 <xTimerCreateTimerTask+0x8c>)
 800a310:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <xTimerCreateTimerTask+0x8c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a31a:	2301      	movs	r3, #1
 800a31c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	613b      	str	r3, [r7, #16]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a33a:	697b      	ldr	r3, [r7, #20]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20001198 	.word	0x20001198
 800a348:	0800c3ac 	.word	0x0800c3ac
 800a34c:	0800a489 	.word	0x0800a489
 800a350:	2000119c 	.word	0x2000119c

0800a354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08a      	sub	sp, #40	; 0x28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a362:	2300      	movs	r3, #0
 800a364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	623b      	str	r3, [r7, #32]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a382:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <xTimerGenericCommand+0x98>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02a      	beq.n	800a3e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2b05      	cmp	r3, #5
 800a39a:	dc18      	bgt.n	800a3ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a39c:	f7ff feb2 	bl	800a104 <xTaskGetSchedulerState>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d109      	bne.n	800a3ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <xTimerGenericCommand+0x98>)
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	f107 0110 	add.w	r1, r7, #16
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b2:	f7fe fcef 	bl	8008d94 <xQueueGenericSend>
 800a3b6:	6278      	str	r0, [r7, #36]	; 0x24
 800a3b8:	e012      	b.n	800a3e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3ba:	4b0c      	ldr	r3, [pc, #48]	; (800a3ec <xTimerGenericCommand+0x98>)
 800a3bc:	6818      	ldr	r0, [r3, #0]
 800a3be:	f107 0110 	add.w	r1, r7, #16
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f7fe fce5 	bl	8008d94 <xQueueGenericSend>
 800a3ca:	6278      	str	r0, [r7, #36]	; 0x24
 800a3cc:	e008      	b.n	800a3e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3ce:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <xTimerGenericCommand+0x98>)
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	f107 0110 	add.w	r1, r7, #16
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	f7fe fdd9 	bl	8008f90 <xQueueGenericSendFromISR>
 800a3de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3728      	adds	r7, #40	; 0x28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	20001198 	.word	0x20001198

0800a3f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3fa:	4b22      	ldr	r3, [pc, #136]	; (800a484 <prvProcessExpiredTimer+0x94>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fb95 	bl	8008b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d022      	beq.n	800a462 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	699a      	ldr	r2, [r3, #24]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	18d1      	adds	r1, r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	6978      	ldr	r0, [r7, #20]
 800a42a:	f000 f8d1 	bl	800a5d0 <prvInsertTimerInActiveList>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d01f      	beq.n	800a474 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a434:	2300      	movs	r3, #0
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	2300      	movs	r3, #0
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	2100      	movs	r1, #0
 800a43e:	6978      	ldr	r0, [r7, #20]
 800a440:	f7ff ff88 	bl	800a354 <xTimerGenericCommand>
 800a444:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d113      	bne.n	800a474 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60fb      	str	r3, [r7, #12]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	6978      	ldr	r0, [r7, #20]
 800a47a:	4798      	blx	r3
}
 800a47c:	bf00      	nop
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	20001190 	.word	0x20001190

0800a488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a490:	f107 0308 	add.w	r3, r7, #8
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f857 	bl	800a548 <prvGetNextExpireTime>
 800a49a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f803 	bl	800a4ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4a6:	f000 f8d5 	bl	800a654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4aa:	e7f1      	b.n	800a490 <prvTimerTask+0x8>

0800a4ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4b6:	f7ff fa39 	bl	800992c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f866 	bl	800a590 <prvSampleTimeNow>
 800a4c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d130      	bne.n	800a52e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <prvProcessTimerOrBlockTask+0x3c>
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d806      	bhi.n	800a4e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4da:	f7ff fa35 	bl	8009948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff ff85 	bl	800a3f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4e6:	e024      	b.n	800a532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d008      	beq.n	800a500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <prvProcessTimerOrBlockTask+0x90>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <prvProcessTimerOrBlockTask+0x50>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e000      	b.n	800a4fe <prvProcessTimerOrBlockTask+0x52>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a500:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <prvProcessTimerOrBlockTask+0x94>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4619      	mov	r1, r3
 800a50e:	f7fe fff5 	bl	80094fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a512:	f7ff fa19 	bl	8009948 <xTaskResumeAll>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a51c:	4b09      	ldr	r3, [pc, #36]	; (800a544 <prvProcessTimerOrBlockTask+0x98>)
 800a51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	f3bf 8f6f 	isb	sy
}
 800a52c:	e001      	b.n	800a532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a52e:	f7ff fa0b 	bl	8009948 <xTaskResumeAll>
}
 800a532:	bf00      	nop
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20001194 	.word	0x20001194
 800a540:	20001198 	.word	0x20001198
 800a544:	e000ed04 	.word	0xe000ed04

0800a548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a550:	4b0e      	ldr	r3, [pc, #56]	; (800a58c <prvGetNextExpireTime+0x44>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <prvGetNextExpireTime+0x16>
 800a55a:	2201      	movs	r2, #1
 800a55c:	e000      	b.n	800a560 <prvGetNextExpireTime+0x18>
 800a55e:	2200      	movs	r2, #0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a56c:	4b07      	ldr	r3, [pc, #28]	; (800a58c <prvGetNextExpireTime+0x44>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	e001      	b.n	800a57c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a57c:	68fb      	ldr	r3, [r7, #12]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	20001190 	.word	0x20001190

0800a590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a598:	f7ff fa74 	bl	8009a84 <xTaskGetTickCount>
 800a59c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a59e:	4b0b      	ldr	r3, [pc, #44]	; (800a5cc <prvSampleTimeNow+0x3c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d205      	bcs.n	800a5b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5a8:	f000 f936 	bl	800a818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	e002      	b.n	800a5ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5ba:	4a04      	ldr	r2, [pc, #16]	; (800a5cc <prvSampleTimeNow+0x3c>)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	200011a0 	.word	0x200011a0

0800a5d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d812      	bhi.n	800a61c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	429a      	cmp	r2, r3
 800a602:	d302      	bcc.n	800a60a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a604:	2301      	movs	r3, #1
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e01b      	b.n	800a642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a60a:	4b10      	ldr	r3, [pc, #64]	; (800a64c <prvInsertTimerInActiveList+0x7c>)
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3304      	adds	r3, #4
 800a612:	4619      	mov	r1, r3
 800a614:	4610      	mov	r0, r2
 800a616:	f7fe fa56 	bl	8008ac6 <vListInsert>
 800a61a:	e012      	b.n	800a642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d206      	bcs.n	800a632 <prvInsertTimerInActiveList+0x62>
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d302      	bcc.n	800a632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a62c:	2301      	movs	r3, #1
 800a62e:	617b      	str	r3, [r7, #20]
 800a630:	e007      	b.n	800a642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a632:	4b07      	ldr	r3, [pc, #28]	; (800a650 <prvInsertTimerInActiveList+0x80>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3304      	adds	r3, #4
 800a63a:	4619      	mov	r1, r3
 800a63c:	4610      	mov	r0, r2
 800a63e:	f7fe fa42 	bl	8008ac6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a642:	697b      	ldr	r3, [r7, #20]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20001194 	.word	0x20001194
 800a650:	20001190 	.word	0x20001190

0800a654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08e      	sub	sp, #56	; 0x38
 800a658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a65a:	e0ca      	b.n	800a7f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da18      	bge.n	800a694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a662:	1d3b      	adds	r3, r7, #4
 800a664:	3304      	adds	r3, #4
 800a666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	61fb      	str	r3, [r7, #28]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a68a:	6850      	ldr	r0, [r2, #4]
 800a68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a68e:	6892      	ldr	r2, [r2, #8]
 800a690:	4611      	mov	r1, r2
 800a692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f2c0 80ab 	blt.w	800a7f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	695b      	ldr	r3, [r3, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d004      	beq.n	800a6b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fe fa43 	bl	8008b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6b2:	463b      	mov	r3, r7
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7ff ff6b 	bl	800a590 <prvSampleTimeNow>
 800a6ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b09      	cmp	r3, #9
 800a6c0:	f200 8096 	bhi.w	800a7f0 <prvProcessReceivedCommands+0x19c>
 800a6c4:	a201      	add	r2, pc, #4	; (adr r2, 800a6cc <prvProcessReceivedCommands+0x78>)
 800a6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ca:	bf00      	nop
 800a6cc:	0800a6f5 	.word	0x0800a6f5
 800a6d0:	0800a6f5 	.word	0x0800a6f5
 800a6d4:	0800a6f5 	.word	0x0800a6f5
 800a6d8:	0800a769 	.word	0x0800a769
 800a6dc:	0800a77d 	.word	0x0800a77d
 800a6e0:	0800a7c7 	.word	0x0800a7c7
 800a6e4:	0800a6f5 	.word	0x0800a6f5
 800a6e8:	0800a6f5 	.word	0x0800a6f5
 800a6ec:	0800a769 	.word	0x0800a769
 800a6f0:	0800a77d 	.word	0x0800a77d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6fa:	f043 0301 	orr.w	r3, r3, #1
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	18d1      	adds	r1, r2, r3
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a714:	f7ff ff5c 	bl	800a5d0 <prvInsertTimerInActiveList>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d069      	beq.n	800a7f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b00      	cmp	r3, #0
 800a732:	d05e      	beq.n	800a7f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	441a      	add	r2, r3
 800a73c:	2300      	movs	r3, #0
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	2300      	movs	r3, #0
 800a742:	2100      	movs	r1, #0
 800a744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a746:	f7ff fe05 	bl	800a354 <xTimerGenericCommand>
 800a74a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d14f      	bne.n	800a7f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	61bb      	str	r3, [r7, #24]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76e:	f023 0301 	bic.w	r3, r3, #1
 800a772:	b2da      	uxtb	r2, r3
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a77a:	e03a      	b.n	800a7f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a782:	f043 0301 	orr.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10a      	bne.n	800a7b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	617b      	str	r3, [r7, #20]
}
 800a7ae:	bf00      	nop
 800a7b0:	e7fe      	b.n	800a7b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b4:	699a      	ldr	r2, [r3, #24]
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	18d1      	adds	r1, r2, r3
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c0:	f7ff ff06 	bl	800a5d0 <prvInsertTimerInActiveList>
					break;
 800a7c4:	e015      	b.n	800a7f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d103      	bne.n	800a7dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d6:	f000 fb0f 	bl	800adf8 <vPortFree>
 800a7da:	e00a      	b.n	800a7f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7e2:	f023 0301 	bic.w	r3, r3, #1
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7ee:	e000      	b.n	800a7f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a7f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7f2:	4b08      	ldr	r3, [pc, #32]	; (800a814 <prvProcessReceivedCommands+0x1c0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	1d39      	adds	r1, r7, #4
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fc64 	bl	80090c8 <xQueueReceive>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	f47f af2a 	bne.w	800a65c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	3730      	adds	r7, #48	; 0x30
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20001198 	.word	0x20001198

0800a818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b088      	sub	sp, #32
 800a81c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a81e:	e048      	b.n	800a8b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a820:	4b2d      	ldr	r3, [pc, #180]	; (800a8d8 <prvSwitchTimerLists+0xc0>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a82a:	4b2b      	ldr	r3, [pc, #172]	; (800a8d8 <prvSwitchTimerLists+0xc0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3304      	adds	r3, #4
 800a838:	4618      	mov	r0, r3
 800a83a:	f7fe f97d 	bl	8008b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a84c:	f003 0304 	and.w	r3, r3, #4
 800a850:	2b00      	cmp	r3, #0
 800a852:	d02e      	beq.n	800a8b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4413      	add	r3, r2
 800a85c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	429a      	cmp	r2, r3
 800a864:	d90e      	bls.n	800a884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a872:	4b19      	ldr	r3, [pc, #100]	; (800a8d8 <prvSwitchTimerLists+0xc0>)
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3304      	adds	r3, #4
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f7fe f922 	bl	8008ac6 <vListInsert>
 800a882:	e016      	b.n	800a8b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a884:	2300      	movs	r3, #0
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	2300      	movs	r3, #0
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	2100      	movs	r1, #0
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff fd60 	bl	800a354 <xTimerGenericCommand>
 800a894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10a      	bne.n	800a8b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	603b      	str	r3, [r7, #0]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <prvSwitchTimerLists+0xc0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1b1      	bne.n	800a820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8bc:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <prvSwitchTimerLists+0xc0>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8c2:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <prvSwitchTimerLists+0xc4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a04      	ldr	r2, [pc, #16]	; (800a8d8 <prvSwitchTimerLists+0xc0>)
 800a8c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8ca:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <prvSwitchTimerLists+0xc4>)
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	6013      	str	r3, [r2, #0]
}
 800a8d0:	bf00      	nop
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20001190 	.word	0x20001190
 800a8dc:	20001194 	.word	0x20001194

0800a8e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8e6:	f000 f965 	bl	800abb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8ea:	4b15      	ldr	r3, [pc, #84]	; (800a940 <prvCheckForValidListAndQueue+0x60>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d120      	bne.n	800a934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8f2:	4814      	ldr	r0, [pc, #80]	; (800a944 <prvCheckForValidListAndQueue+0x64>)
 800a8f4:	f7fe f896 	bl	8008a24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8f8:	4813      	ldr	r0, [pc, #76]	; (800a948 <prvCheckForValidListAndQueue+0x68>)
 800a8fa:	f7fe f893 	bl	8008a24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8fe:	4b13      	ldr	r3, [pc, #76]	; (800a94c <prvCheckForValidListAndQueue+0x6c>)
 800a900:	4a10      	ldr	r2, [pc, #64]	; (800a944 <prvCheckForValidListAndQueue+0x64>)
 800a902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a904:	4b12      	ldr	r3, [pc, #72]	; (800a950 <prvCheckForValidListAndQueue+0x70>)
 800a906:	4a10      	ldr	r2, [pc, #64]	; (800a948 <prvCheckForValidListAndQueue+0x68>)
 800a908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a90a:	2300      	movs	r3, #0
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	4b11      	ldr	r3, [pc, #68]	; (800a954 <prvCheckForValidListAndQueue+0x74>)
 800a910:	4a11      	ldr	r2, [pc, #68]	; (800a958 <prvCheckForValidListAndQueue+0x78>)
 800a912:	2110      	movs	r1, #16
 800a914:	200a      	movs	r0, #10
 800a916:	f7fe f9a1 	bl	8008c5c <xQueueGenericCreateStatic>
 800a91a:	4603      	mov	r3, r0
 800a91c:	4a08      	ldr	r2, [pc, #32]	; (800a940 <prvCheckForValidListAndQueue+0x60>)
 800a91e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <prvCheckForValidListAndQueue+0x60>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d005      	beq.n	800a934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a928:	4b05      	ldr	r3, [pc, #20]	; (800a940 <prvCheckForValidListAndQueue+0x60>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	490b      	ldr	r1, [pc, #44]	; (800a95c <prvCheckForValidListAndQueue+0x7c>)
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe fdba 	bl	80094a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a934:	f000 f96e 	bl	800ac14 <vPortExitCritical>
}
 800a938:	bf00      	nop
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20001198 	.word	0x20001198
 800a944:	20001168 	.word	0x20001168
 800a948:	2000117c 	.word	0x2000117c
 800a94c:	20001190 	.word	0x20001190
 800a950:	20001194 	.word	0x20001194
 800a954:	20001244 	.word	0x20001244
 800a958:	200011a4 	.word	0x200011a4
 800a95c:	0800c3b4 	.word	0x0800c3b4

0800a960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3b04      	subs	r3, #4
 800a970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3b04      	subs	r3, #4
 800a97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f023 0201 	bic.w	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3b04      	subs	r3, #4
 800a98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a990:	4a0c      	ldr	r2, [pc, #48]	; (800a9c4 <pxPortInitialiseStack+0x64>)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3b14      	subs	r3, #20
 800a99a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3b04      	subs	r3, #4
 800a9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f06f 0202 	mvn.w	r2, #2
 800a9ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3b20      	subs	r3, #32
 800a9b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	0800a9c9 	.word	0x0800a9c9

0800a9c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9d2:	4b12      	ldr	r3, [pc, #72]	; (800aa1c <prvTaskExitError+0x54>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9da:	d00a      	beq.n	800a9f2 <prvTaskExitError+0x2a>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	60fb      	str	r3, [r7, #12]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <prvTaskExitError+0x28>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	60bb      	str	r3, [r7, #8]
}
 800aa04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa06:	bf00      	nop
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0fc      	beq.n	800aa08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa0e:	bf00      	nop
 800aa10:	bf00      	nop
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	2000011c 	.word	0x2000011c

0800aa20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <pxCurrentTCBConst2>)
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	f380 8809 	msr	PSP, r0
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8811 	msr	BASEPRI, r0
 800aa3a:	4770      	bx	lr
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst2>:
 800aa40:	20000c68 	.word	0x20000c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa48:	4808      	ldr	r0, [pc, #32]	; (800aa6c <prvPortStartFirstTask+0x24>)
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f380 8808 	msr	MSP, r0
 800aa52:	f04f 0000 	mov.w	r0, #0
 800aa56:	f380 8814 	msr	CONTROL, r0
 800aa5a:	b662      	cpsie	i
 800aa5c:	b661      	cpsie	f
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	df00      	svc	0
 800aa68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa6a:	bf00      	nop
 800aa6c:	e000ed08 	.word	0xe000ed08

0800aa70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa76:	4b46      	ldr	r3, [pc, #280]	; (800ab90 <xPortStartScheduler+0x120>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a46      	ldr	r2, [pc, #280]	; (800ab94 <xPortStartScheduler+0x124>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d10a      	bne.n	800aa96 <xPortStartScheduler+0x26>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa96:	4b3e      	ldr	r3, [pc, #248]	; (800ab90 <xPortStartScheduler+0x120>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a3f      	ldr	r2, [pc, #252]	; (800ab98 <xPortStartScheduler+0x128>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d10a      	bne.n	800aab6 <xPortStartScheduler+0x46>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aab6:	4b39      	ldr	r3, [pc, #228]	; (800ab9c <xPortStartScheduler+0x12c>)
 800aab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	22ff      	movs	r2, #255	; 0xff
 800aac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aad0:	78fb      	ldrb	r3, [r7, #3]
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	4b31      	ldr	r3, [pc, #196]	; (800aba0 <xPortStartScheduler+0x130>)
 800aadc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aade:	4b31      	ldr	r3, [pc, #196]	; (800aba4 <xPortStartScheduler+0x134>)
 800aae0:	2207      	movs	r2, #7
 800aae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aae4:	e009      	b.n	800aafa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aae6:	4b2f      	ldr	r3, [pc, #188]	; (800aba4 <xPortStartScheduler+0x134>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	4a2d      	ldr	r2, [pc, #180]	; (800aba4 <xPortStartScheduler+0x134>)
 800aaee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab02:	2b80      	cmp	r3, #128	; 0x80
 800ab04:	d0ef      	beq.n	800aae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab06:	4b27      	ldr	r3, [pc, #156]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f1c3 0307 	rsb	r3, r3, #7
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d00a      	beq.n	800ab28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	60bb      	str	r3, [r7, #8]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab28:	4b1e      	ldr	r3, [pc, #120]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	4a1d      	ldr	r2, [pc, #116]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab32:	4b1c      	ldr	r3, [pc, #112]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab3a:	4a1a      	ldr	r2, [pc, #104]	; (800aba4 <xPortStartScheduler+0x134>)
 800ab3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab46:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a14      	ldr	r2, [pc, #80]	; (800aba8 <xPortStartScheduler+0x138>)
 800ab58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab5e:	f000 f8dd 	bl	800ad1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab62:	4b12      	ldr	r3, [pc, #72]	; (800abac <xPortStartScheduler+0x13c>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab68:	f000 f8fc 	bl	800ad64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab6c:	4b10      	ldr	r3, [pc, #64]	; (800abb0 <xPortStartScheduler+0x140>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a0f      	ldr	r2, [pc, #60]	; (800abb0 <xPortStartScheduler+0x140>)
 800ab72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab78:	f7ff ff66 	bl	800aa48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab7c:	f7ff f84c 	bl	8009c18 <vTaskSwitchContext>
	prvTaskExitError();
 800ab80:	f7ff ff22 	bl	800a9c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	e000ed00 	.word	0xe000ed00
 800ab94:	410fc271 	.word	0x410fc271
 800ab98:	410fc270 	.word	0x410fc270
 800ab9c:	e000e400 	.word	0xe000e400
 800aba0:	20001294 	.word	0x20001294
 800aba4:	20001298 	.word	0x20001298
 800aba8:	e000ed20 	.word	0xe000ed20
 800abac:	2000011c 	.word	0x2000011c
 800abb0:	e000ef34 	.word	0xe000ef34

0800abb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	607b      	str	r3, [r7, #4]
}
 800abcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abce:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <vPortEnterCritical+0x58>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3301      	adds	r3, #1
 800abd4:	4a0d      	ldr	r2, [pc, #52]	; (800ac0c <vPortEnterCritical+0x58>)
 800abd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abd8:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <vPortEnterCritical+0x58>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d10f      	bne.n	800ac00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abe0:	4b0b      	ldr	r3, [pc, #44]	; (800ac10 <vPortEnterCritical+0x5c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <vPortEnterCritical+0x4c>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	603b      	str	r3, [r7, #0]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <vPortEnterCritical+0x4a>
	}
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	2000011c 	.word	0x2000011c
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac1a:	4b12      	ldr	r3, [pc, #72]	; (800ac64 <vPortExitCritical+0x50>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <vPortExitCritical+0x24>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	607b      	str	r3, [r7, #4]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <vPortExitCritical+0x50>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <vPortExitCritical+0x50>)
 800ac40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac42:	4b08      	ldr	r3, [pc, #32]	; (800ac64 <vPortExitCritical+0x50>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d105      	bne.n	800ac56 <vPortExitCritical+0x42>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f383 8811 	msr	BASEPRI, r3
}
 800ac54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	2000011c 	.word	0x2000011c
	...

0800ac70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac70:	f3ef 8009 	mrs	r0, PSP
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <pxCurrentTCBConst>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	f01e 0f10 	tst.w	lr, #16
 800ac80:	bf08      	it	eq
 800ac82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	6010      	str	r0, [r2, #0]
 800ac8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac94:	f380 8811 	msr	BASEPRI, r0
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f7fe ffba 	bl	8009c18 <vTaskSwitchContext>
 800aca4:	f04f 0000 	mov.w	r0, #0
 800aca8:	f380 8811 	msr	BASEPRI, r0
 800acac:	bc09      	pop	{r0, r3}
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	6808      	ldr	r0, [r1, #0]
 800acb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb6:	f01e 0f10 	tst.w	lr, #16
 800acba:	bf08      	it	eq
 800acbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acc0:	f380 8809 	msr	PSP, r0
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	f3af 8000 	nop.w

0800acd0 <pxCurrentTCBConst>:
 800acd0:	20000c68 	.word	0x20000c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop

0800acd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	607b      	str	r3, [r7, #4]
}
 800acf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acf2:	f7fe fed7 	bl	8009aa4 <xTaskIncrementTick>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acfc:	4b06      	ldr	r3, [pc, #24]	; (800ad18 <xPortSysTickHandler+0x40>)
 800acfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	2300      	movs	r3, #0
 800ad06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	f383 8811 	msr	BASEPRI, r3
}
 800ad0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad20:	4b0b      	ldr	r3, [pc, #44]	; (800ad50 <vPortSetupTimerInterrupt+0x34>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad26:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <vPortSetupTimerInterrupt+0x38>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad2c:	4b0a      	ldr	r3, [pc, #40]	; (800ad58 <vPortSetupTimerInterrupt+0x3c>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a0a      	ldr	r2, [pc, #40]	; (800ad5c <vPortSetupTimerInterrupt+0x40>)
 800ad32:	fba2 2303 	umull	r2, r3, r2, r3
 800ad36:	099b      	lsrs	r3, r3, #6
 800ad38:	4a09      	ldr	r2, [pc, #36]	; (800ad60 <vPortSetupTimerInterrupt+0x44>)
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad3e:	4b04      	ldr	r3, [pc, #16]	; (800ad50 <vPortSetupTimerInterrupt+0x34>)
 800ad40:	2207      	movs	r2, #7
 800ad42:	601a      	str	r2, [r3, #0]
}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	e000e010 	.word	0xe000e010
 800ad54:	e000e018 	.word	0xe000e018
 800ad58:	20000000 	.word	0x20000000
 800ad5c:	10624dd3 	.word	0x10624dd3
 800ad60:	e000e014 	.word	0xe000e014

0800ad64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad74 <vPortEnableVFP+0x10>
 800ad68:	6801      	ldr	r1, [r0, #0]
 800ad6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad6e:	6001      	str	r1, [r0, #0]
 800ad70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad72:	bf00      	nop
 800ad74:	e000ed88 	.word	0xe000ed88

0800ad78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad7e:	f3ef 8305 	mrs	r3, IPSR
 800ad82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b0f      	cmp	r3, #15
 800ad88:	d914      	bls.n	800adb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad8a:	4a17      	ldr	r2, [pc, #92]	; (800ade8 <vPortValidateInterruptPriority+0x70>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad94:	4b15      	ldr	r3, [pc, #84]	; (800adec <vPortValidateInterruptPriority+0x74>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	7afa      	ldrb	r2, [r7, #11]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d20a      	bcs.n	800adb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	607b      	str	r3, [r7, #4]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adb4:	4b0e      	ldr	r3, [pc, #56]	; (800adf0 <vPortValidateInterruptPriority+0x78>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <vPortValidateInterruptPriority+0x7c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d90a      	bls.n	800adda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	603b      	str	r3, [r7, #0]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <vPortValidateInterruptPriority+0x60>
	}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	e000e3f0 	.word	0xe000e3f0
 800adec:	20001294 	.word	0x20001294
 800adf0:	e000ed0c 	.word	0xe000ed0c
 800adf4:	20001298 	.word	0x20001298

0800adf8 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d04d      	beq.n	800aea6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae0a:	2308      	movs	r3, #8
 800ae0c:	425b      	negs	r3, r3
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	4413      	add	r3, r2
 800ae12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <vPortFree+0xb8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4013      	ands	r3, r2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10a      	bne.n	800ae3c <vPortFree+0x44>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	60fb      	str	r3, [r7, #12]
}
 800ae38:	bf00      	nop
 800ae3a:	e7fe      	b.n	800ae3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00a      	beq.n	800ae5a <vPortFree+0x62>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60bb      	str	r3, [r7, #8]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <vPortFree+0xb8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4013      	ands	r3, r2
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01e      	beq.n	800aea6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d11a      	bne.n	800aea6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	4b0e      	ldr	r3, [pc, #56]	; (800aeb0 <vPortFree+0xb8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	43db      	mvns	r3, r3
 800ae7a:	401a      	ands	r2, r3
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae80:	f7fe fd54 	bl	800992c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <vPortFree+0xbc>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	4a09      	ldr	r2, [pc, #36]	; (800aeb4 <vPortFree+0xbc>)
 800ae90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae92:	6938      	ldr	r0, [r7, #16]
 800ae94:	f000 f812 	bl	800aebc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae98:	4b07      	ldr	r3, [pc, #28]	; (800aeb8 <vPortFree+0xc0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	4a06      	ldr	r2, [pc, #24]	; (800aeb8 <vPortFree+0xc0>)
 800aea0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aea2:	f7fe fd51 	bl	8009948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aea6:	bf00      	nop
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	200012b0 	.word	0x200012b0
 800aeb4:	200012a8 	.word	0x200012a8
 800aeb8:	200012ac 	.word	0x200012ac

0800aebc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aec4:	4b28      	ldr	r3, [pc, #160]	; (800af68 <prvInsertBlockIntoFreeList+0xac>)
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	e002      	b.n	800aed0 <prvInsertBlockIntoFreeList+0x14>
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	60fb      	str	r3, [r7, #12]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d8f7      	bhi.n	800aeca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	4413      	add	r3, r2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d108      	bne.n	800aefe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	685a      	ldr	r2, [r3, #4]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	441a      	add	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	441a      	add	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d118      	bne.n	800af44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b15      	ldr	r3, [pc, #84]	; (800af6c <prvInsertBlockIntoFreeList+0xb0>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d00d      	beq.n	800af3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	441a      	add	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	e008      	b.n	800af4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af3a:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <prvInsertBlockIntoFreeList+0xb0>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	e003      	b.n	800af4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d002      	beq.n	800af5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af5a:	bf00      	nop
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	2000129c 	.word	0x2000129c
 800af6c:	200012a4 	.word	0x200012a4

0800af70 <_ZN6System4initEv>:

const uint8_t TEST_BUF_SIZE = 64;
char test_buf_init[TEST_BUF_SIZE];
char test_buf_loop[TEST_BUF_SIZE];

void System::init(void) {
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
    snprintf(test_buf_init, sizeof(test_buf_init), "SYS INIT\n");
 800af76:	4a08      	ldr	r2, [pc, #32]	; (800af98 <_ZN6System4initEv+0x28>)
 800af78:	2140      	movs	r1, #64	; 0x40
 800af7a:	4808      	ldr	r0, [pc, #32]	; (800af9c <_ZN6System4initEv+0x2c>)
 800af7c:	f000 fcf8 	bl	800b970 <sniprintf>
    uint32_t counter = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	607b      	str	r3, [r7, #4]
    while (true) {
    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", (unsigned int)counter++);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	607a      	str	r2, [r7, #4]
 800af8a:	4a05      	ldr	r2, [pc, #20]	; (800afa0 <_ZN6System4initEv+0x30>)
 800af8c:	2140      	movs	r1, #64	; 0x40
 800af8e:	4805      	ldr	r0, [pc, #20]	; (800afa4 <_ZN6System4initEv+0x34>)
 800af90:	f000 fcee 	bl	800b970 <sniprintf>
 800af94:	e7f6      	b.n	800af84 <_ZN6System4initEv+0x14>
 800af96:	bf00      	nop
 800af98:	0800c3bc 	.word	0x0800c3bc
 800af9c:	200012b4 	.word	0x200012b4
 800afa0:	0800c3c8 	.word	0x0800c3c8
 800afa4:	200012f4 	.word	0x200012f4

0800afa8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800afac:	2200      	movs	r2, #0
 800afae:	4912      	ldr	r1, [pc, #72]	; (800aff8 <MX_USB_Device_Init+0x50>)
 800afb0:	4812      	ldr	r0, [pc, #72]	; (800affc <MX_USB_Device_Init+0x54>)
 800afb2:	f7fc fb65 	bl	8007680 <USBD_Init>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800afbc:	f7f5 fd87 	bl	8000ace <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800afc0:	490f      	ldr	r1, [pc, #60]	; (800b000 <MX_USB_Device_Init+0x58>)
 800afc2:	480e      	ldr	r0, [pc, #56]	; (800affc <MX_USB_Device_Init+0x54>)
 800afc4:	f7fc fb8c 	bl	80076e0 <USBD_RegisterClass>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800afce:	f7f5 fd7e 	bl	8000ace <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800afd2:	490c      	ldr	r1, [pc, #48]	; (800b004 <MX_USB_Device_Init+0x5c>)
 800afd4:	4809      	ldr	r0, [pc, #36]	; (800affc <MX_USB_Device_Init+0x54>)
 800afd6:	f7fc fadd 	bl	8007594 <USBD_CDC_RegisterInterface>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800afe0:	f7f5 fd75 	bl	8000ace <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800afe4:	4805      	ldr	r0, [pc, #20]	; (800affc <MX_USB_Device_Init+0x54>)
 800afe6:	f7fc fba2 	bl	800772e <USBD_Start>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800aff0:	f7f5 fd6d 	bl	8000ace <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800aff4:	bf00      	nop
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	20000134 	.word	0x20000134
 800affc:	20001334 	.word	0x20001334
 800b000:	20000018 	.word	0x20000018
 800b004:	20000120 	.word	0x20000120

0800b008 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b00c:	2200      	movs	r2, #0
 800b00e:	4905      	ldr	r1, [pc, #20]	; (800b024 <CDC_Init_FS+0x1c>)
 800b010:	4805      	ldr	r0, [pc, #20]	; (800b028 <CDC_Init_FS+0x20>)
 800b012:	f7fc fad4 	bl	80075be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b016:	4905      	ldr	r1, [pc, #20]	; (800b02c <CDC_Init_FS+0x24>)
 800b018:	4803      	ldr	r0, [pc, #12]	; (800b028 <CDC_Init_FS+0x20>)
 800b01a:	f7fc faee 	bl	80075fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b01e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b020:	4618      	mov	r0, r3
 800b022:	bd80      	pop	{r7, pc}
 800b024:	20001e04 	.word	0x20001e04
 800b028:	20001334 	.word	0x20001334
 800b02c:	20001604 	.word	0x20001604

0800b030 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b034:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b036:	4618      	mov	r0, r3
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	6039      	str	r1, [r7, #0]
 800b04a:	71fb      	strb	r3, [r7, #7]
 800b04c:	4613      	mov	r3, r2
 800b04e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	2b23      	cmp	r3, #35	; 0x23
 800b054:	d84a      	bhi.n	800b0ec <CDC_Control_FS+0xac>
 800b056:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <CDC_Control_FS+0x1c>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b0ed 	.word	0x0800b0ed
 800b060:	0800b0ed 	.word	0x0800b0ed
 800b064:	0800b0ed 	.word	0x0800b0ed
 800b068:	0800b0ed 	.word	0x0800b0ed
 800b06c:	0800b0ed 	.word	0x0800b0ed
 800b070:	0800b0ed 	.word	0x0800b0ed
 800b074:	0800b0ed 	.word	0x0800b0ed
 800b078:	0800b0ed 	.word	0x0800b0ed
 800b07c:	0800b0ed 	.word	0x0800b0ed
 800b080:	0800b0ed 	.word	0x0800b0ed
 800b084:	0800b0ed 	.word	0x0800b0ed
 800b088:	0800b0ed 	.word	0x0800b0ed
 800b08c:	0800b0ed 	.word	0x0800b0ed
 800b090:	0800b0ed 	.word	0x0800b0ed
 800b094:	0800b0ed 	.word	0x0800b0ed
 800b098:	0800b0ed 	.word	0x0800b0ed
 800b09c:	0800b0ed 	.word	0x0800b0ed
 800b0a0:	0800b0ed 	.word	0x0800b0ed
 800b0a4:	0800b0ed 	.word	0x0800b0ed
 800b0a8:	0800b0ed 	.word	0x0800b0ed
 800b0ac:	0800b0ed 	.word	0x0800b0ed
 800b0b0:	0800b0ed 	.word	0x0800b0ed
 800b0b4:	0800b0ed 	.word	0x0800b0ed
 800b0b8:	0800b0ed 	.word	0x0800b0ed
 800b0bc:	0800b0ed 	.word	0x0800b0ed
 800b0c0:	0800b0ed 	.word	0x0800b0ed
 800b0c4:	0800b0ed 	.word	0x0800b0ed
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b0ed 	.word	0x0800b0ed
 800b0d0:	0800b0ed 	.word	0x0800b0ed
 800b0d4:	0800b0ed 	.word	0x0800b0ed
 800b0d8:	0800b0ed 	.word	0x0800b0ed
 800b0dc:	0800b0ed 	.word	0x0800b0ed
 800b0e0:	0800b0ed 	.word	0x0800b0ed
 800b0e4:	0800b0ed 	.word	0x0800b0ed
 800b0e8:	0800b0ed 	.word	0x0800b0ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b0ec:	bf00      	nop
  }

  return (USBD_OK);
 800b0ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4805      	ldr	r0, [pc, #20]	; (800b120 <CDC_Receive_FS+0x24>)
 800b10a:	f7fc fa76 	bl	80075fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b10e:	4804      	ldr	r0, [pc, #16]	; (800b120 <CDC_Receive_FS+0x24>)
 800b110:	f7fc fa8c 	bl	800762c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b114:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20001334 	.word	0x20001334

0800b124 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	4613      	mov	r3, r2
 800b130:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	371c      	adds	r7, #28
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
	...

0800b148 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	6039      	str	r1, [r7, #0]
 800b152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	2212      	movs	r2, #18
 800b158:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b15a:	4b03      	ldr	r3, [pc, #12]	; (800b168 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	20000154 	.word	0x20000154

0800b16c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	4603      	mov	r3, r0
 800b174:	6039      	str	r1, [r7, #0]
 800b176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2204      	movs	r2, #4
 800b17c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b17e:	4b03      	ldr	r3, [pc, #12]	; (800b18c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	20000168 	.word	0x20000168

0800b190 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	6039      	str	r1, [r7, #0]
 800b19a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b19c:	79fb      	ldrb	r3, [r7, #7]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d105      	bne.n	800b1ae <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	4907      	ldr	r1, [pc, #28]	; (800b1c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b1a6:	4808      	ldr	r0, [pc, #32]	; (800b1c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b1a8:	f7fd faa9 	bl	80086fe <USBD_GetString>
 800b1ac:	e004      	b.n	800b1b8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	4904      	ldr	r1, [pc, #16]	; (800b1c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b1b2:	4805      	ldr	r0, [pc, #20]	; (800b1c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b1b4:	f7fd faa3 	bl	80086fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1b8:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20002604 	.word	0x20002604
 800b1c8:	0800c3d8 	.word	0x0800c3d8

0800b1cc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	4904      	ldr	r1, [pc, #16]	; (800b1ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b1dc:	4804      	ldr	r0, [pc, #16]	; (800b1f0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b1de:	f7fd fa8e 	bl	80086fe <USBD_GetString>
  return USBD_StrDesc;
 800b1e2:	4b02      	ldr	r3, [pc, #8]	; (800b1ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20002604 	.word	0x20002604
 800b1f0:	0800c3f0 	.word	0x0800c3f0

0800b1f4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	6039      	str	r1, [r7, #0]
 800b1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	221a      	movs	r2, #26
 800b204:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b206:	f000 f843 	bl	800b290 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b20a:	4b02      	ldr	r3, [pc, #8]	; (800b214 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	2000016c 	.word	0x2000016c

0800b218 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	6039      	str	r1, [r7, #0]
 800b222:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b224:	79fb      	ldrb	r3, [r7, #7]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d105      	bne.n	800b236 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	4907      	ldr	r1, [pc, #28]	; (800b24c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b22e:	4808      	ldr	r0, [pc, #32]	; (800b250 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b230:	f7fd fa65 	bl	80086fe <USBD_GetString>
 800b234:	e004      	b.n	800b240 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	4904      	ldr	r1, [pc, #16]	; (800b24c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b23a:	4805      	ldr	r0, [pc, #20]	; (800b250 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b23c:	f7fd fa5f 	bl	80086fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b242:	4618      	mov	r0, r3
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	20002604 	.word	0x20002604
 800b250:	0800c404 	.word	0x0800c404

0800b254 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	6039      	str	r1, [r7, #0]
 800b25e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d105      	bne.n	800b272 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	4907      	ldr	r1, [pc, #28]	; (800b288 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b26a:	4808      	ldr	r0, [pc, #32]	; (800b28c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b26c:	f7fd fa47 	bl	80086fe <USBD_GetString>
 800b270:	e004      	b.n	800b27c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	4904      	ldr	r1, [pc, #16]	; (800b288 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b276:	4805      	ldr	r0, [pc, #20]	; (800b28c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b278:	f7fd fa41 	bl	80086fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20002604 	.word	0x20002604
 800b28c:	0800c410 	.word	0x0800c410

0800b290 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b296:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <Get_SerialNum+0x44>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b29c:	4b0e      	ldr	r3, [pc, #56]	; (800b2d8 <Get_SerialNum+0x48>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b2a2:	4b0e      	ldr	r3, [pc, #56]	; (800b2dc <Get_SerialNum+0x4c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d009      	beq.n	800b2ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2b6:	2208      	movs	r2, #8
 800b2b8:	4909      	ldr	r1, [pc, #36]	; (800b2e0 <Get_SerialNum+0x50>)
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f814 	bl	800b2e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2c0:	2204      	movs	r2, #4
 800b2c2:	4908      	ldr	r1, [pc, #32]	; (800b2e4 <Get_SerialNum+0x54>)
 800b2c4:	68b8      	ldr	r0, [r7, #8]
 800b2c6:	f000 f80f 	bl	800b2e8 <IntToUnicode>
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	1fff7590 	.word	0x1fff7590
 800b2d8:	1fff7594 	.word	0x1fff7594
 800b2dc:	1fff7598 	.word	0x1fff7598
 800b2e0:	2000016e 	.word	0x2000016e
 800b2e4:	2000017e 	.word	0x2000017e

0800b2e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	75fb      	strb	r3, [r7, #23]
 800b2fe:	e027      	b.n	800b350 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	0f1b      	lsrs	r3, r3, #28
 800b304:	2b09      	cmp	r3, #9
 800b306:	d80b      	bhi.n	800b320 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	0f1b      	lsrs	r3, r3, #28
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	4619      	mov	r1, r3
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	440b      	add	r3, r1
 800b318:	3230      	adds	r2, #48	; 0x30
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	e00a      	b.n	800b336 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	0f1b      	lsrs	r3, r3, #28
 800b324:	b2da      	uxtb	r2, r3
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	4619      	mov	r1, r3
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	440b      	add	r3, r1
 800b330:	3237      	adds	r2, #55	; 0x37
 800b332:	b2d2      	uxtb	r2, r2
 800b334:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	011b      	lsls	r3, r3, #4
 800b33a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	3301      	adds	r3, #1
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	4413      	add	r3, r2
 800b346:	2200      	movs	r2, #0
 800b348:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
 800b34c:	3301      	adds	r3, #1
 800b34e:	75fb      	strb	r3, [r7, #23]
 800b350:	7dfa      	ldrb	r2, [r7, #23]
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	429a      	cmp	r2, r3
 800b356:	d3d3      	bcc.n	800b300 <IntToUnicode+0x18>
  }
}
 800b358:	bf00      	nop
 800b35a:	bf00      	nop
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
	...

0800b368 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b098      	sub	sp, #96	; 0x60
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b370:	f107 030c 	add.w	r3, r7, #12
 800b374:	2254      	movs	r2, #84	; 0x54
 800b376:	2100      	movs	r1, #0
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fb2d 	bl	800b9d8 <memset>
  if(pcdHandle->Instance==USB)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a15      	ldr	r2, [pc, #84]	; (800b3d8 <HAL_PCD_MspInit+0x70>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d123      	bne.n	800b3d0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b38c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b38e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b392:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b394:	f107 030c 	add.w	r3, r7, #12
 800b398:	4618      	mov	r0, r3
 800b39a:	f7f9 f807 	bl	80043ac <HAL_RCCEx_PeriphCLKConfig>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b3a4:	f7f5 fb93 	bl	8000ace <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <HAL_PCD_MspInit+0x74>)
 800b3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ac:	4a0b      	ldr	r2, [pc, #44]	; (800b3dc <HAL_PCD_MspInit+0x74>)
 800b3ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b3b4:	4b09      	ldr	r3, [pc, #36]	; (800b3dc <HAL_PCD_MspInit+0x74>)
 800b3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3bc:	60bb      	str	r3, [r7, #8]
 800b3be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2105      	movs	r1, #5
 800b3c4:	2014      	movs	r0, #20
 800b3c6:	f7f5 ff1a 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b3ca:	2014      	movs	r0, #20
 800b3cc:	f7f5 ff31 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b3d0:	bf00      	nop
 800b3d2:	3760      	adds	r7, #96	; 0x60
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	40005c00 	.word	0x40005c00
 800b3dc:	40021000 	.word	0x40021000

0800b3e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7fc f9e4 	bl	80077c4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b416:	78fa      	ldrb	r2, [r7, #3]
 800b418:	6879      	ldr	r1, [r7, #4]
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	00db      	lsls	r3, r3, #3
 800b422:	440b      	add	r3, r1
 800b424:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	78fb      	ldrb	r3, [r7, #3]
 800b42c:	4619      	mov	r1, r3
 800b42e:	f7fc fa1e 	bl	800786e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b082      	sub	sp, #8
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	460b      	mov	r3, r1
 800b444:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4613      	mov	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	4413      	add	r3, r2
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	440b      	add	r3, r1
 800b45a:	3324      	adds	r3, #36	; 0x24
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	78fb      	ldrb	r3, [r7, #3]
 800b460:	4619      	mov	r1, r3
 800b462:	f7fc fa67 	bl	8007934 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fc fb7b 	bl	8007b78 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b492:	2301      	movs	r3, #1
 800b494:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	795b      	ldrb	r3, [r3, #5]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d001      	beq.n	800b4a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b49e:	f7f5 fb16 	bl	8000ace <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4a8:	7bfa      	ldrb	r2, [r7, #15]
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fc fb25 	bl	8007afc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fc fad1 	bl	8007a60 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b4be:	bf00      	nop
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fc fb20 	bl	8007b1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	7a5b      	ldrb	r3, [r3, #9]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4e4:	4b04      	ldr	r3, [pc, #16]	; (800b4f8 <HAL_PCD_SuspendCallback+0x30>)
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	4a03      	ldr	r2, [pc, #12]	; (800b4f8 <HAL_PCD_SuspendCallback+0x30>)
 800b4ea:	f043 0306 	orr.w	r3, r3, #6
 800b4ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	e000ed00 	.word	0xe000ed00

0800b4fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7a5b      	ldrb	r3, [r3, #9]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d007      	beq.n	800b51c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b50c:	4b08      	ldr	r3, [pc, #32]	; (800b530 <HAL_PCD_ResumeCallback+0x34>)
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	4a07      	ldr	r2, [pc, #28]	; (800b530 <HAL_PCD_ResumeCallback+0x34>)
 800b512:	f023 0306 	bic.w	r3, r3, #6
 800b516:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b518:	f000 f9f8 	bl	800b90c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b522:	4618      	mov	r0, r3
 800b524:	f7fc fb10 	bl	8007b48 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b528:	bf00      	nop
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	e000ed00 	.word	0xe000ed00

0800b534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b53c:	4a2b      	ldr	r2, [pc, #172]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a29      	ldr	r2, [pc, #164]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b548:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b54c:	4b27      	ldr	r3, [pc, #156]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b54e:	4a28      	ldr	r2, [pc, #160]	; (800b5f0 <USBD_LL_Init+0xbc>)
 800b550:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b552:	4b26      	ldr	r3, [pc, #152]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b554:	2208      	movs	r2, #8
 800b556:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b558:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b55a:	2202      	movs	r2, #2
 800b55c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b55e:	4b23      	ldr	r3, [pc, #140]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b560:	2202      	movs	r2, #2
 800b562:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b564:	4b21      	ldr	r3, [pc, #132]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b566:	2200      	movs	r2, #0
 800b568:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b56a:	4b20      	ldr	r3, [pc, #128]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b570:	4b1e      	ldr	r3, [pc, #120]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b572:	2200      	movs	r2, #0
 800b574:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b576:	4b1d      	ldr	r3, [pc, #116]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b578:	2200      	movs	r2, #0
 800b57a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b57c:	481b      	ldr	r0, [pc, #108]	; (800b5ec <USBD_LL_Init+0xb8>)
 800b57e:	f7f6 fc46 	bl	8001e0e <HAL_PCD_Init>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b588:	f7f5 faa1 	bl	8000ace <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b592:	2318      	movs	r3, #24
 800b594:	2200      	movs	r2, #0
 800b596:	2100      	movs	r1, #0
 800b598:	f7f8 f900 	bl	800379c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5a2:	2358      	movs	r3, #88	; 0x58
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2180      	movs	r1, #128	; 0x80
 800b5a8:	f7f8 f8f8 	bl	800379c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5b2:	23c0      	movs	r3, #192	; 0xc0
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2181      	movs	r1, #129	; 0x81
 800b5b8:	f7f8 f8f0 	bl	800379c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	f7f8 f8e7 	bl	800379c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2182      	movs	r1, #130	; 0x82
 800b5dc:	f7f8 f8de 	bl	800379c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20002804 	.word	0x20002804
 800b5f0:	40005c00 	.word	0x40005c00

0800b5f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f6 fccd 	bl	8001faa <HAL_PCD_Start>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	4618      	mov	r0, r3
 800b618:	f000 f97e 	bl	800b918 <USBD_Get_USB_Status>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b620:	7bbb      	ldrb	r3, [r7, #14]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	461a      	mov	r2, r3
 800b638:	4603      	mov	r3, r0
 800b63a:	70fb      	strb	r3, [r7, #3]
 800b63c:	460b      	mov	r3, r1
 800b63e:	70bb      	strb	r3, [r7, #2]
 800b640:	4613      	mov	r3, r2
 800b642:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b652:	78bb      	ldrb	r3, [r7, #2]
 800b654:	883a      	ldrh	r2, [r7, #0]
 800b656:	78f9      	ldrb	r1, [r7, #3]
 800b658:	f7f6 fe14 	bl	8002284 <HAL_PCD_EP_Open>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b660:	7bfb      	ldrb	r3, [r7, #15]
 800b662:	4618      	mov	r0, r3
 800b664:	f000 f958 	bl	800b918 <USBD_Get_USB_Status>
 800b668:	4603      	mov	r3, r0
 800b66a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b66c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b690:	78fa      	ldrb	r2, [r7, #3]
 800b692:	4611      	mov	r1, r2
 800b694:	4618      	mov	r0, r3
 800b696:	f7f6 fe52 	bl	800233e <HAL_PCD_EP_Close>
 800b69a:	4603      	mov	r3, r0
 800b69c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f939 	bl	800b918 <USBD_Get_USB_Status>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6ce:	78fa      	ldrb	r2, [r7, #3]
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7f6 fefb 	bl	80024ce <HAL_PCD_EP_SetStall>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f91a 	bl	800b918 <USBD_Get_USB_Status>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b70c:	78fa      	ldrb	r2, [r7, #3]
 800b70e:	4611      	mov	r1, r2
 800b710:	4618      	mov	r0, r3
 800b712:	f7f6 ff2e 	bl	8002572 <HAL_PCD_EP_ClrStall>
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f000 f8fb 	bl	800b918 <USBD_Get_USB_Status>
 800b722:	4603      	mov	r3, r0
 800b724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b726:	7bbb      	ldrb	r3, [r7, #14]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b742:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	da0b      	bge.n	800b764 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b74c:	78fb      	ldrb	r3, [r7, #3]
 800b74e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b752:	68f9      	ldr	r1, [r7, #12]
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	440b      	add	r3, r1
 800b75e:	3312      	adds	r3, #18
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	e00b      	b.n	800b77c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b764:	78fb      	ldrb	r3, [r7, #3]
 800b766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	440b      	add	r3, r1
 800b776:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800b77a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7a2:	78fa      	ldrb	r2, [r7, #3]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7f6 fd48 	bl	800223c <HAL_PCD_SetAddress>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f8b0 	bl	800b918 <USBD_Get_USB_Status>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b086      	sub	sp, #24
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	60f8      	str	r0, [r7, #12]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b7e4:	7af9      	ldrb	r1, [r7, #11]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	f7f6 fe39 	bl	8002460 <HAL_PCD_EP_Transmit>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 f88f 	bl	800b918 <USBD_Get_USB_Status>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	607a      	str	r2, [r7, #4]
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	460b      	mov	r3, r1
 800b816:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b826:	7af9      	ldrb	r1, [r7, #11]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	f7f6 fdcf 	bl	80023ce <HAL_PCD_EP_Receive>
 800b830:	4603      	mov	r3, r0
 800b832:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b834:	7dfb      	ldrb	r3, [r7, #23]
 800b836:	4618      	mov	r0, r3
 800b838:	f000 f86e 	bl	800b918 <USBD_Get_USB_Status>
 800b83c:	4603      	mov	r3, r0
 800b83e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b840:	7dbb      	ldrb	r3, [r7, #22]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	460b      	mov	r3, r1
 800b854:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b85c:	78fa      	ldrb	r2, [r7, #3]
 800b85e:	4611      	mov	r1, r2
 800b860:	4618      	mov	r0, r3
 800b862:	f7f6 fde5 	bl	8002430 <HAL_PCD_EP_GetRxCount>
 800b866:	4603      	mov	r3, r0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b87c:	78fb      	ldrb	r3, [r7, #3]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <HAL_PCDEx_LPM_Callback+0x18>
 800b882:	2b01      	cmp	r3, #1
 800b884:	d013      	beq.n	800b8ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b886:	e023      	b.n	800b8d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	7a5b      	ldrb	r3, [r3, #9]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d007      	beq.n	800b8a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b890:	f000 f83c 	bl	800b90c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b894:	4b10      	ldr	r3, [pc, #64]	; (800b8d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	4a0f      	ldr	r2, [pc, #60]	; (800b8d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b89a:	f023 0306 	bic.w	r3, r3, #6
 800b89e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fc f94e 	bl	8007b48 <USBD_LL_Resume>
    break;
 800b8ac:	e010      	b.n	800b8d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fc f931 	bl	8007b1c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7a5b      	ldrb	r3, [r3, #9]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d005      	beq.n	800b8ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	4a04      	ldr	r2, [pc, #16]	; (800b8d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800b8c8:	f043 0306 	orr.w	r3, r3, #6
 800b8cc:	6113      	str	r3, [r2, #16]
    break;
 800b8ce:	bf00      	nop
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	e000ed00 	.word	0xe000ed00

0800b8dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b8e4:	4b03      	ldr	r3, [pc, #12]	; (800b8f4 <USBD_static_malloc+0x18>)
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	20002ae0 	.word	0x20002ae0

0800b8f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]

}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b910:	f7f5 f891 	bl	8000a36 <SystemClock_Config>
}
 800b914:	bf00      	nop
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b926:	79fb      	ldrb	r3, [r7, #7]
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d817      	bhi.n	800b95c <USBD_Get_USB_Status+0x44>
 800b92c:	a201      	add	r2, pc, #4	; (adr r2, 800b934 <USBD_Get_USB_Status+0x1c>)
 800b92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b932:	bf00      	nop
 800b934:	0800b945 	.word	0x0800b945
 800b938:	0800b94b 	.word	0x0800b94b
 800b93c:	0800b951 	.word	0x0800b951
 800b940:	0800b957 	.word	0x0800b957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73fb      	strb	r3, [r7, #15]
    break;
 800b948:	e00b      	b.n	800b962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b94a:	2303      	movs	r3, #3
 800b94c:	73fb      	strb	r3, [r7, #15]
    break;
 800b94e:	e008      	b.n	800b962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b950:	2301      	movs	r3, #1
 800b952:	73fb      	strb	r3, [r7, #15]
    break;
 800b954:	e005      	b.n	800b962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b956:	2303      	movs	r3, #3
 800b958:	73fb      	strb	r3, [r7, #15]
    break;
 800b95a:	e002      	b.n	800b962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b95c:	2303      	movs	r3, #3
 800b95e:	73fb      	strb	r3, [r7, #15]
    break;
 800b960:	bf00      	nop
  }
  return usb_status;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <sniprintf>:
 800b970:	b40c      	push	{r2, r3}
 800b972:	b530      	push	{r4, r5, lr}
 800b974:	4b17      	ldr	r3, [pc, #92]	; (800b9d4 <sniprintf+0x64>)
 800b976:	1e0c      	subs	r4, r1, #0
 800b978:	681d      	ldr	r5, [r3, #0]
 800b97a:	b09d      	sub	sp, #116	; 0x74
 800b97c:	da08      	bge.n	800b990 <sniprintf+0x20>
 800b97e:	238b      	movs	r3, #139	; 0x8b
 800b980:	602b      	str	r3, [r5, #0]
 800b982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b986:	b01d      	add	sp, #116	; 0x74
 800b988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b98c:	b002      	add	sp, #8
 800b98e:	4770      	bx	lr
 800b990:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b994:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b998:	bf14      	ite	ne
 800b99a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b99e:	4623      	moveq	r3, r4
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	9307      	str	r3, [sp, #28]
 800b9a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9a8:	9002      	str	r0, [sp, #8]
 800b9aa:	9006      	str	r0, [sp, #24]
 800b9ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b9b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b9b2:	ab21      	add	r3, sp, #132	; 0x84
 800b9b4:	a902      	add	r1, sp, #8
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	f000 f94b 	bl	800bc54 <_svfiprintf_r>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	bfbc      	itt	lt
 800b9c2:	238b      	movlt	r3, #139	; 0x8b
 800b9c4:	602b      	strlt	r3, [r5, #0]
 800b9c6:	2c00      	cmp	r4, #0
 800b9c8:	d0dd      	beq.n	800b986 <sniprintf+0x16>
 800b9ca:	9b02      	ldr	r3, [sp, #8]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	701a      	strb	r2, [r3, #0]
 800b9d0:	e7d9      	b.n	800b986 <sniprintf+0x16>
 800b9d2:	bf00      	nop
 800b9d4:	200001d4 	.word	0x200001d4

0800b9d8 <memset>:
 800b9d8:	4402      	add	r2, r0
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d100      	bne.n	800b9e2 <memset+0xa>
 800b9e0:	4770      	bx	lr
 800b9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e6:	e7f9      	b.n	800b9dc <memset+0x4>

0800b9e8 <_reclaim_reent>:
 800b9e8:	4b29      	ldr	r3, [pc, #164]	; (800ba90 <_reclaim_reent+0xa8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4283      	cmp	r3, r0
 800b9ee:	b570      	push	{r4, r5, r6, lr}
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	d04b      	beq.n	800ba8c <_reclaim_reent+0xa4>
 800b9f4:	69c3      	ldr	r3, [r0, #28]
 800b9f6:	b143      	cbz	r3, 800ba0a <_reclaim_reent+0x22>
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d144      	bne.n	800ba88 <_reclaim_reent+0xa0>
 800b9fe:	69e3      	ldr	r3, [r4, #28]
 800ba00:	6819      	ldr	r1, [r3, #0]
 800ba02:	b111      	cbz	r1, 800ba0a <_reclaim_reent+0x22>
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 f87f 	bl	800bb08 <_free_r>
 800ba0a:	6961      	ldr	r1, [r4, #20]
 800ba0c:	b111      	cbz	r1, 800ba14 <_reclaim_reent+0x2c>
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 f87a 	bl	800bb08 <_free_r>
 800ba14:	69e1      	ldr	r1, [r4, #28]
 800ba16:	b111      	cbz	r1, 800ba1e <_reclaim_reent+0x36>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 f875 	bl	800bb08 <_free_r>
 800ba1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ba20:	b111      	cbz	r1, 800ba28 <_reclaim_reent+0x40>
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 f870 	bl	800bb08 <_free_r>
 800ba28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba2a:	b111      	cbz	r1, 800ba32 <_reclaim_reent+0x4a>
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 f86b 	bl	800bb08 <_free_r>
 800ba32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ba34:	b111      	cbz	r1, 800ba3c <_reclaim_reent+0x54>
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f866 	bl	800bb08 <_free_r>
 800ba3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba3e:	b111      	cbz	r1, 800ba46 <_reclaim_reent+0x5e>
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 f861 	bl	800bb08 <_free_r>
 800ba46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ba48:	b111      	cbz	r1, 800ba50 <_reclaim_reent+0x68>
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 f85c 	bl	800bb08 <_free_r>
 800ba50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ba52:	b111      	cbz	r1, 800ba5a <_reclaim_reent+0x72>
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 f857 	bl	800bb08 <_free_r>
 800ba5a:	6a23      	ldr	r3, [r4, #32]
 800ba5c:	b1b3      	cbz	r3, 800ba8c <_reclaim_reent+0xa4>
 800ba5e:	4620      	mov	r0, r4
 800ba60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba64:	4718      	bx	r3
 800ba66:	5949      	ldr	r1, [r1, r5]
 800ba68:	b941      	cbnz	r1, 800ba7c <_reclaim_reent+0x94>
 800ba6a:	3504      	adds	r5, #4
 800ba6c:	69e3      	ldr	r3, [r4, #28]
 800ba6e:	2d80      	cmp	r5, #128	; 0x80
 800ba70:	68d9      	ldr	r1, [r3, #12]
 800ba72:	d1f8      	bne.n	800ba66 <_reclaim_reent+0x7e>
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 f847 	bl	800bb08 <_free_r>
 800ba7a:	e7c0      	b.n	800b9fe <_reclaim_reent+0x16>
 800ba7c:	680e      	ldr	r6, [r1, #0]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 f842 	bl	800bb08 <_free_r>
 800ba84:	4631      	mov	r1, r6
 800ba86:	e7ef      	b.n	800ba68 <_reclaim_reent+0x80>
 800ba88:	2500      	movs	r5, #0
 800ba8a:	e7ef      	b.n	800ba6c <_reclaim_reent+0x84>
 800ba8c:	bd70      	pop	{r4, r5, r6, pc}
 800ba8e:	bf00      	nop
 800ba90:	200001d4 	.word	0x200001d4

0800ba94 <__errno>:
 800ba94:	4b01      	ldr	r3, [pc, #4]	; (800ba9c <__errno+0x8>)
 800ba96:	6818      	ldr	r0, [r3, #0]
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	200001d4 	.word	0x200001d4

0800baa0 <__libc_init_array>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	4d0d      	ldr	r5, [pc, #52]	; (800bad8 <__libc_init_array+0x38>)
 800baa4:	4c0d      	ldr	r4, [pc, #52]	; (800badc <__libc_init_array+0x3c>)
 800baa6:	1b64      	subs	r4, r4, r5
 800baa8:	10a4      	asrs	r4, r4, #2
 800baaa:	2600      	movs	r6, #0
 800baac:	42a6      	cmp	r6, r4
 800baae:	d109      	bne.n	800bac4 <__libc_init_array+0x24>
 800bab0:	4d0b      	ldr	r5, [pc, #44]	; (800bae0 <__libc_init_array+0x40>)
 800bab2:	4c0c      	ldr	r4, [pc, #48]	; (800bae4 <__libc_init_array+0x44>)
 800bab4:	f000 fc6a 	bl	800c38c <_init>
 800bab8:	1b64      	subs	r4, r4, r5
 800baba:	10a4      	asrs	r4, r4, #2
 800babc:	2600      	movs	r6, #0
 800babe:	42a6      	cmp	r6, r4
 800bac0:	d105      	bne.n	800bace <__libc_init_array+0x2e>
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bac8:	4798      	blx	r3
 800baca:	3601      	adds	r6, #1
 800bacc:	e7ee      	b.n	800baac <__libc_init_array+0xc>
 800bace:	f855 3b04 	ldr.w	r3, [r5], #4
 800bad2:	4798      	blx	r3
 800bad4:	3601      	adds	r6, #1
 800bad6:	e7f2      	b.n	800babe <__libc_init_array+0x1e>
 800bad8:	0800c464 	.word	0x0800c464
 800badc:	0800c464 	.word	0x0800c464
 800bae0:	0800c464 	.word	0x0800c464
 800bae4:	0800c468 	.word	0x0800c468

0800bae8 <__retarget_lock_acquire_recursive>:
 800bae8:	4770      	bx	lr

0800baea <__retarget_lock_release_recursive>:
 800baea:	4770      	bx	lr

0800baec <memcpy>:
 800baec:	440a      	add	r2, r1
 800baee:	4291      	cmp	r1, r2
 800baf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baf4:	d100      	bne.n	800baf8 <memcpy+0xc>
 800baf6:	4770      	bx	lr
 800baf8:	b510      	push	{r4, lr}
 800bafa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bafe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb02:	4291      	cmp	r1, r2
 800bb04:	d1f9      	bne.n	800bafa <memcpy+0xe>
 800bb06:	bd10      	pop	{r4, pc}

0800bb08 <_free_r>:
 800bb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	d044      	beq.n	800bb98 <_free_r+0x90>
 800bb0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb12:	9001      	str	r0, [sp, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f1a1 0404 	sub.w	r4, r1, #4
 800bb1a:	bfb8      	it	lt
 800bb1c:	18e4      	addlt	r4, r4, r3
 800bb1e:	f000 fbc7 	bl	800c2b0 <__malloc_lock>
 800bb22:	4a1e      	ldr	r2, [pc, #120]	; (800bb9c <_free_r+0x94>)
 800bb24:	9801      	ldr	r0, [sp, #4]
 800bb26:	6813      	ldr	r3, [r2, #0]
 800bb28:	b933      	cbnz	r3, 800bb38 <_free_r+0x30>
 800bb2a:	6063      	str	r3, [r4, #4]
 800bb2c:	6014      	str	r4, [r2, #0]
 800bb2e:	b003      	add	sp, #12
 800bb30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb34:	f000 bbc2 	b.w	800c2bc <__malloc_unlock>
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	d908      	bls.n	800bb4e <_free_r+0x46>
 800bb3c:	6825      	ldr	r5, [r4, #0]
 800bb3e:	1961      	adds	r1, r4, r5
 800bb40:	428b      	cmp	r3, r1
 800bb42:	bf01      	itttt	eq
 800bb44:	6819      	ldreq	r1, [r3, #0]
 800bb46:	685b      	ldreq	r3, [r3, #4]
 800bb48:	1949      	addeq	r1, r1, r5
 800bb4a:	6021      	streq	r1, [r4, #0]
 800bb4c:	e7ed      	b.n	800bb2a <_free_r+0x22>
 800bb4e:	461a      	mov	r2, r3
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	b10b      	cbz	r3, 800bb58 <_free_r+0x50>
 800bb54:	42a3      	cmp	r3, r4
 800bb56:	d9fa      	bls.n	800bb4e <_free_r+0x46>
 800bb58:	6811      	ldr	r1, [r2, #0]
 800bb5a:	1855      	adds	r5, r2, r1
 800bb5c:	42a5      	cmp	r5, r4
 800bb5e:	d10b      	bne.n	800bb78 <_free_r+0x70>
 800bb60:	6824      	ldr	r4, [r4, #0]
 800bb62:	4421      	add	r1, r4
 800bb64:	1854      	adds	r4, r2, r1
 800bb66:	42a3      	cmp	r3, r4
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	d1e0      	bne.n	800bb2e <_free_r+0x26>
 800bb6c:	681c      	ldr	r4, [r3, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	6053      	str	r3, [r2, #4]
 800bb72:	440c      	add	r4, r1
 800bb74:	6014      	str	r4, [r2, #0]
 800bb76:	e7da      	b.n	800bb2e <_free_r+0x26>
 800bb78:	d902      	bls.n	800bb80 <_free_r+0x78>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	e7d6      	b.n	800bb2e <_free_r+0x26>
 800bb80:	6825      	ldr	r5, [r4, #0]
 800bb82:	1961      	adds	r1, r4, r5
 800bb84:	428b      	cmp	r3, r1
 800bb86:	bf04      	itt	eq
 800bb88:	6819      	ldreq	r1, [r3, #0]
 800bb8a:	685b      	ldreq	r3, [r3, #4]
 800bb8c:	6063      	str	r3, [r4, #4]
 800bb8e:	bf04      	itt	eq
 800bb90:	1949      	addeq	r1, r1, r5
 800bb92:	6021      	streq	r1, [r4, #0]
 800bb94:	6054      	str	r4, [r2, #4]
 800bb96:	e7ca      	b.n	800bb2e <_free_r+0x26>
 800bb98:	b003      	add	sp, #12
 800bb9a:	bd30      	pop	{r4, r5, pc}
 800bb9c:	20002e40 	.word	0x20002e40

0800bba0 <__ssputs_r>:
 800bba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba4:	688e      	ldr	r6, [r1, #8]
 800bba6:	461f      	mov	r7, r3
 800bba8:	42be      	cmp	r6, r7
 800bbaa:	680b      	ldr	r3, [r1, #0]
 800bbac:	4682      	mov	sl, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	4690      	mov	r8, r2
 800bbb2:	d82c      	bhi.n	800bc0e <__ssputs_r+0x6e>
 800bbb4:	898a      	ldrh	r2, [r1, #12]
 800bbb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbba:	d026      	beq.n	800bc0a <__ssputs_r+0x6a>
 800bbbc:	6965      	ldr	r5, [r4, #20]
 800bbbe:	6909      	ldr	r1, [r1, #16]
 800bbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc4:	eba3 0901 	sub.w	r9, r3, r1
 800bbc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbcc:	1c7b      	adds	r3, r7, #1
 800bbce:	444b      	add	r3, r9
 800bbd0:	106d      	asrs	r5, r5, #1
 800bbd2:	429d      	cmp	r5, r3
 800bbd4:	bf38      	it	cc
 800bbd6:	461d      	movcc	r5, r3
 800bbd8:	0553      	lsls	r3, r2, #21
 800bbda:	d527      	bpl.n	800bc2c <__ssputs_r+0x8c>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	f000 f957 	bl	800be90 <_malloc_r>
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	b360      	cbz	r0, 800bc40 <__ssputs_r+0xa0>
 800bbe6:	6921      	ldr	r1, [r4, #16]
 800bbe8:	464a      	mov	r2, r9
 800bbea:	f7ff ff7f 	bl	800baec <memcpy>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	6126      	str	r6, [r4, #16]
 800bbfc:	6165      	str	r5, [r4, #20]
 800bbfe:	444e      	add	r6, r9
 800bc00:	eba5 0509 	sub.w	r5, r5, r9
 800bc04:	6026      	str	r6, [r4, #0]
 800bc06:	60a5      	str	r5, [r4, #8]
 800bc08:	463e      	mov	r6, r7
 800bc0a:	42be      	cmp	r6, r7
 800bc0c:	d900      	bls.n	800bc10 <__ssputs_r+0x70>
 800bc0e:	463e      	mov	r6, r7
 800bc10:	6820      	ldr	r0, [r4, #0]
 800bc12:	4632      	mov	r2, r6
 800bc14:	4641      	mov	r1, r8
 800bc16:	f000 fb86 	bl	800c326 <memmove>
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	1b9b      	subs	r3, r3, r6
 800bc1e:	60a3      	str	r3, [r4, #8]
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	4433      	add	r3, r6
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	2000      	movs	r0, #0
 800bc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	f000 fb4b 	bl	800c2c8 <_realloc_r>
 800bc32:	4606      	mov	r6, r0
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d1e0      	bne.n	800bbfa <__ssputs_r+0x5a>
 800bc38:	6921      	ldr	r1, [r4, #16]
 800bc3a:	4650      	mov	r0, sl
 800bc3c:	f7ff ff64 	bl	800bb08 <_free_r>
 800bc40:	230c      	movs	r3, #12
 800bc42:	f8ca 3000 	str.w	r3, [sl]
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc52:	e7e9      	b.n	800bc28 <__ssputs_r+0x88>

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d50e      	bpl.n	800bc86 <_svfiprintf_r+0x32>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b963      	cbnz	r3, 800bc86 <_svfiprintf_r+0x32>
 800bc6c:	2140      	movs	r1, #64	; 0x40
 800bc6e:	f000 f90f 	bl	800be90 <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b920      	cbnz	r0, 800bc82 <_svfiprintf_r+0x2e>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc80:	e0d0      	b.n	800be24 <_svfiprintf_r+0x1d0>
 800bc82:	2340      	movs	r3, #64	; 0x40
 800bc84:	616b      	str	r3, [r5, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc94:	2330      	movs	r3, #48	; 0x30
 800bc96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be3c <_svfiprintf_r+0x1e8>
 800bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc9e:	f04f 0901 	mov.w	r9, #1
 800bca2:	4623      	mov	r3, r4
 800bca4:	469a      	mov	sl, r3
 800bca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcaa:	b10a      	cbz	r2, 800bcb0 <_svfiprintf_r+0x5c>
 800bcac:	2a25      	cmp	r2, #37	; 0x25
 800bcae:	d1f9      	bne.n	800bca4 <_svfiprintf_r+0x50>
 800bcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb4:	d00b      	beq.n	800bcce <_svfiprintf_r+0x7a>
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ff6f 	bl	800bba0 <__ssputs_r>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f000 80a9 	beq.w	800be1a <_svfiprintf_r+0x1c6>
 800bcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcca:	445a      	add	r2, fp
 800bccc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcce:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80a1 	beq.w	800be1a <_svfiprintf_r+0x1c6>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce2:	f10a 0a01 	add.w	sl, sl, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	9307      	str	r3, [sp, #28]
 800bcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcee:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf0:	4654      	mov	r4, sl
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf8:	4850      	ldr	r0, [pc, #320]	; (800be3c <_svfiprintf_r+0x1e8>)
 800bcfa:	f7f4 fa91 	bl	8000220 <memchr>
 800bcfe:	9a04      	ldr	r2, [sp, #16]
 800bd00:	b9d8      	cbnz	r0, 800bd3a <_svfiprintf_r+0xe6>
 800bd02:	06d0      	lsls	r0, r2, #27
 800bd04:	bf44      	itt	mi
 800bd06:	2320      	movmi	r3, #32
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	0711      	lsls	r1, r2, #28
 800bd0e:	bf44      	itt	mi
 800bd10:	232b      	movmi	r3, #43	; 0x2b
 800bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd16:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1c:	d015      	beq.n	800bd4a <_svfiprintf_r+0xf6>
 800bd1e:	9a07      	ldr	r2, [sp, #28]
 800bd20:	4654      	mov	r4, sl
 800bd22:	2000      	movs	r0, #0
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4621      	mov	r1, r4
 800bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2e:	3b30      	subs	r3, #48	; 0x30
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d94d      	bls.n	800bdd0 <_svfiprintf_r+0x17c>
 800bd34:	b1b0      	cbz	r0, 800bd64 <_svfiprintf_r+0x110>
 800bd36:	9207      	str	r2, [sp, #28]
 800bd38:	e014      	b.n	800bd64 <_svfiprintf_r+0x110>
 800bd3a:	eba0 0308 	sub.w	r3, r0, r8
 800bd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	46a2      	mov	sl, r4
 800bd48:	e7d2      	b.n	800bcf0 <_svfiprintf_r+0x9c>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	1d19      	adds	r1, r3, #4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	9103      	str	r1, [sp, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bfbb      	ittet	lt
 800bd56:	425b      	neglt	r3, r3
 800bd58:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5c:	9307      	strge	r3, [sp, #28]
 800bd5e:	9307      	strlt	r3, [sp, #28]
 800bd60:	bfb8      	it	lt
 800bd62:	9204      	strlt	r2, [sp, #16]
 800bd64:	7823      	ldrb	r3, [r4, #0]
 800bd66:	2b2e      	cmp	r3, #46	; 0x2e
 800bd68:	d10c      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6a:	7863      	ldrb	r3, [r4, #1]
 800bd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6e:	d134      	bne.n	800bdda <_svfiprintf_r+0x186>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9203      	str	r2, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfb8      	it	lt
 800bd7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800be4c <_svfiprintf_r+0x1f8>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa47 	bl	8000220 <memchr>
 800bd92:	b138      	cbz	r0, 800bda4 <_svfiprintf_r+0x150>
 800bd94:	9b04      	ldr	r3, [sp, #16]
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	2240      	movs	r2, #64	; 0x40
 800bd9c:	4082      	lsls	r2, r0
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	3401      	adds	r4, #1
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda8:	4825      	ldr	r0, [pc, #148]	; (800be40 <_svfiprintf_r+0x1ec>)
 800bdaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdae:	2206      	movs	r2, #6
 800bdb0:	f7f4 fa36 	bl	8000220 <memchr>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d038      	beq.n	800be2a <_svfiprintf_r+0x1d6>
 800bdb8:	4b22      	ldr	r3, [pc, #136]	; (800be44 <_svfiprintf_r+0x1f0>)
 800bdba:	bb1b      	cbnz	r3, 800be04 <_svfiprintf_r+0x1b0>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	3307      	adds	r3, #7
 800bdc0:	f023 0307 	bic.w	r3, r3, #7
 800bdc4:	3308      	adds	r3, #8
 800bdc6:	9303      	str	r3, [sp, #12]
 800bdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdca:	4433      	add	r3, r6
 800bdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdce:	e768      	b.n	800bca2 <_svfiprintf_r+0x4e>
 800bdd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd4:	460c      	mov	r4, r1
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7a6      	b.n	800bd28 <_svfiprintf_r+0xd4>
 800bdda:	2300      	movs	r3, #0
 800bddc:	3401      	adds	r4, #1
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	4619      	mov	r1, r3
 800bde2:	f04f 0c0a 	mov.w	ip, #10
 800bde6:	4620      	mov	r0, r4
 800bde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdec:	3a30      	subs	r2, #48	; 0x30
 800bdee:	2a09      	cmp	r2, #9
 800bdf0:	d903      	bls.n	800bdfa <_svfiprintf_r+0x1a6>
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d0c6      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf6:	9105      	str	r1, [sp, #20]
 800bdf8:	e7c4      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfe:	4604      	mov	r4, r0
 800be00:	2301      	movs	r3, #1
 800be02:	e7f0      	b.n	800bde6 <_svfiprintf_r+0x192>
 800be04:	ab03      	add	r3, sp, #12
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	462a      	mov	r2, r5
 800be0a:	4b0f      	ldr	r3, [pc, #60]	; (800be48 <_svfiprintf_r+0x1f4>)
 800be0c:	a904      	add	r1, sp, #16
 800be0e:	4638      	mov	r0, r7
 800be10:	f3af 8000 	nop.w
 800be14:	1c42      	adds	r2, r0, #1
 800be16:	4606      	mov	r6, r0
 800be18:	d1d6      	bne.n	800bdc8 <_svfiprintf_r+0x174>
 800be1a:	89ab      	ldrh	r3, [r5, #12]
 800be1c:	065b      	lsls	r3, r3, #25
 800be1e:	f53f af2d 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be24:	b01d      	add	sp, #116	; 0x74
 800be26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2a:	ab03      	add	r3, sp, #12
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	462a      	mov	r2, r5
 800be30:	4b05      	ldr	r3, [pc, #20]	; (800be48 <_svfiprintf_r+0x1f4>)
 800be32:	a904      	add	r1, sp, #16
 800be34:	4638      	mov	r0, r7
 800be36:	f000 f919 	bl	800c06c <_printf_i>
 800be3a:	e7eb      	b.n	800be14 <_svfiprintf_r+0x1c0>
 800be3c:	0800c430 	.word	0x0800c430
 800be40:	0800c43a 	.word	0x0800c43a
 800be44:	00000000 	.word	0x00000000
 800be48:	0800bba1 	.word	0x0800bba1
 800be4c:	0800c436 	.word	0x0800c436

0800be50 <sbrk_aligned>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	4e0e      	ldr	r6, [pc, #56]	; (800be8c <sbrk_aligned+0x3c>)
 800be54:	460c      	mov	r4, r1
 800be56:	6831      	ldr	r1, [r6, #0]
 800be58:	4605      	mov	r5, r0
 800be5a:	b911      	cbnz	r1, 800be62 <sbrk_aligned+0x12>
 800be5c:	f000 fa7e 	bl	800c35c <_sbrk_r>
 800be60:	6030      	str	r0, [r6, #0]
 800be62:	4621      	mov	r1, r4
 800be64:	4628      	mov	r0, r5
 800be66:	f000 fa79 	bl	800c35c <_sbrk_r>
 800be6a:	1c43      	adds	r3, r0, #1
 800be6c:	d00a      	beq.n	800be84 <sbrk_aligned+0x34>
 800be6e:	1cc4      	adds	r4, r0, #3
 800be70:	f024 0403 	bic.w	r4, r4, #3
 800be74:	42a0      	cmp	r0, r4
 800be76:	d007      	beq.n	800be88 <sbrk_aligned+0x38>
 800be78:	1a21      	subs	r1, r4, r0
 800be7a:	4628      	mov	r0, r5
 800be7c:	f000 fa6e 	bl	800c35c <_sbrk_r>
 800be80:	3001      	adds	r0, #1
 800be82:	d101      	bne.n	800be88 <sbrk_aligned+0x38>
 800be84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800be88:	4620      	mov	r0, r4
 800be8a:	bd70      	pop	{r4, r5, r6, pc}
 800be8c:	20002e44 	.word	0x20002e44

0800be90 <_malloc_r>:
 800be90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be94:	1ccd      	adds	r5, r1, #3
 800be96:	f025 0503 	bic.w	r5, r5, #3
 800be9a:	3508      	adds	r5, #8
 800be9c:	2d0c      	cmp	r5, #12
 800be9e:	bf38      	it	cc
 800bea0:	250c      	movcc	r5, #12
 800bea2:	2d00      	cmp	r5, #0
 800bea4:	4607      	mov	r7, r0
 800bea6:	db01      	blt.n	800beac <_malloc_r+0x1c>
 800bea8:	42a9      	cmp	r1, r5
 800beaa:	d905      	bls.n	800beb8 <_malloc_r+0x28>
 800beac:	230c      	movs	r3, #12
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	2600      	movs	r6, #0
 800beb2:	4630      	mov	r0, r6
 800beb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bf8c <_malloc_r+0xfc>
 800bebc:	f000 f9f8 	bl	800c2b0 <__malloc_lock>
 800bec0:	f8d8 3000 	ldr.w	r3, [r8]
 800bec4:	461c      	mov	r4, r3
 800bec6:	bb5c      	cbnz	r4, 800bf20 <_malloc_r+0x90>
 800bec8:	4629      	mov	r1, r5
 800beca:	4638      	mov	r0, r7
 800becc:	f7ff ffc0 	bl	800be50 <sbrk_aligned>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	4604      	mov	r4, r0
 800bed4:	d155      	bne.n	800bf82 <_malloc_r+0xf2>
 800bed6:	f8d8 4000 	ldr.w	r4, [r8]
 800beda:	4626      	mov	r6, r4
 800bedc:	2e00      	cmp	r6, #0
 800bede:	d145      	bne.n	800bf6c <_malloc_r+0xdc>
 800bee0:	2c00      	cmp	r4, #0
 800bee2:	d048      	beq.n	800bf76 <_malloc_r+0xe6>
 800bee4:	6823      	ldr	r3, [r4, #0]
 800bee6:	4631      	mov	r1, r6
 800bee8:	4638      	mov	r0, r7
 800beea:	eb04 0903 	add.w	r9, r4, r3
 800beee:	f000 fa35 	bl	800c35c <_sbrk_r>
 800bef2:	4581      	cmp	r9, r0
 800bef4:	d13f      	bne.n	800bf76 <_malloc_r+0xe6>
 800bef6:	6821      	ldr	r1, [r4, #0]
 800bef8:	1a6d      	subs	r5, r5, r1
 800befa:	4629      	mov	r1, r5
 800befc:	4638      	mov	r0, r7
 800befe:	f7ff ffa7 	bl	800be50 <sbrk_aligned>
 800bf02:	3001      	adds	r0, #1
 800bf04:	d037      	beq.n	800bf76 <_malloc_r+0xe6>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	442b      	add	r3, r5
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d038      	beq.n	800bf86 <_malloc_r+0xf6>
 800bf14:	685a      	ldr	r2, [r3, #4]
 800bf16:	42a2      	cmp	r2, r4
 800bf18:	d12b      	bne.n	800bf72 <_malloc_r+0xe2>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	605a      	str	r2, [r3, #4]
 800bf1e:	e00f      	b.n	800bf40 <_malloc_r+0xb0>
 800bf20:	6822      	ldr	r2, [r4, #0]
 800bf22:	1b52      	subs	r2, r2, r5
 800bf24:	d41f      	bmi.n	800bf66 <_malloc_r+0xd6>
 800bf26:	2a0b      	cmp	r2, #11
 800bf28:	d917      	bls.n	800bf5a <_malloc_r+0xca>
 800bf2a:	1961      	adds	r1, r4, r5
 800bf2c:	42a3      	cmp	r3, r4
 800bf2e:	6025      	str	r5, [r4, #0]
 800bf30:	bf18      	it	ne
 800bf32:	6059      	strne	r1, [r3, #4]
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	bf08      	it	eq
 800bf38:	f8c8 1000 	streq.w	r1, [r8]
 800bf3c:	5162      	str	r2, [r4, r5]
 800bf3e:	604b      	str	r3, [r1, #4]
 800bf40:	4638      	mov	r0, r7
 800bf42:	f104 060b 	add.w	r6, r4, #11
 800bf46:	f000 f9b9 	bl	800c2bc <__malloc_unlock>
 800bf4a:	f026 0607 	bic.w	r6, r6, #7
 800bf4e:	1d23      	adds	r3, r4, #4
 800bf50:	1af2      	subs	r2, r6, r3
 800bf52:	d0ae      	beq.n	800beb2 <_malloc_r+0x22>
 800bf54:	1b9b      	subs	r3, r3, r6
 800bf56:	50a3      	str	r3, [r4, r2]
 800bf58:	e7ab      	b.n	800beb2 <_malloc_r+0x22>
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	6862      	ldr	r2, [r4, #4]
 800bf5e:	d1dd      	bne.n	800bf1c <_malloc_r+0x8c>
 800bf60:	f8c8 2000 	str.w	r2, [r8]
 800bf64:	e7ec      	b.n	800bf40 <_malloc_r+0xb0>
 800bf66:	4623      	mov	r3, r4
 800bf68:	6864      	ldr	r4, [r4, #4]
 800bf6a:	e7ac      	b.n	800bec6 <_malloc_r+0x36>
 800bf6c:	4634      	mov	r4, r6
 800bf6e:	6876      	ldr	r6, [r6, #4]
 800bf70:	e7b4      	b.n	800bedc <_malloc_r+0x4c>
 800bf72:	4613      	mov	r3, r2
 800bf74:	e7cc      	b.n	800bf10 <_malloc_r+0x80>
 800bf76:	230c      	movs	r3, #12
 800bf78:	603b      	str	r3, [r7, #0]
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f000 f99e 	bl	800c2bc <__malloc_unlock>
 800bf80:	e797      	b.n	800beb2 <_malloc_r+0x22>
 800bf82:	6025      	str	r5, [r4, #0]
 800bf84:	e7dc      	b.n	800bf40 <_malloc_r+0xb0>
 800bf86:	605b      	str	r3, [r3, #4]
 800bf88:	deff      	udf	#255	; 0xff
 800bf8a:	bf00      	nop
 800bf8c:	20002e40 	.word	0x20002e40

0800bf90 <_printf_common>:
 800bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	4616      	mov	r6, r2
 800bf96:	4699      	mov	r9, r3
 800bf98:	688a      	ldr	r2, [r1, #8]
 800bf9a:	690b      	ldr	r3, [r1, #16]
 800bf9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	bfb8      	it	lt
 800bfa4:	4613      	movlt	r3, r2
 800bfa6:	6033      	str	r3, [r6, #0]
 800bfa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfac:	4607      	mov	r7, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	b10a      	cbz	r2, 800bfb6 <_printf_common+0x26>
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	6033      	str	r3, [r6, #0]
 800bfb6:	6823      	ldr	r3, [r4, #0]
 800bfb8:	0699      	lsls	r1, r3, #26
 800bfba:	bf42      	ittt	mi
 800bfbc:	6833      	ldrmi	r3, [r6, #0]
 800bfbe:	3302      	addmi	r3, #2
 800bfc0:	6033      	strmi	r3, [r6, #0]
 800bfc2:	6825      	ldr	r5, [r4, #0]
 800bfc4:	f015 0506 	ands.w	r5, r5, #6
 800bfc8:	d106      	bne.n	800bfd8 <_printf_common+0x48>
 800bfca:	f104 0a19 	add.w	sl, r4, #25
 800bfce:	68e3      	ldr	r3, [r4, #12]
 800bfd0:	6832      	ldr	r2, [r6, #0]
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	42ab      	cmp	r3, r5
 800bfd6:	dc26      	bgt.n	800c026 <_printf_common+0x96>
 800bfd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfdc:	1e13      	subs	r3, r2, #0
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	bf18      	it	ne
 800bfe2:	2301      	movne	r3, #1
 800bfe4:	0692      	lsls	r2, r2, #26
 800bfe6:	d42b      	bmi.n	800c040 <_printf_common+0xb0>
 800bfe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfec:	4649      	mov	r1, r9
 800bfee:	4638      	mov	r0, r7
 800bff0:	47c0      	blx	r8
 800bff2:	3001      	adds	r0, #1
 800bff4:	d01e      	beq.n	800c034 <_printf_common+0xa4>
 800bff6:	6823      	ldr	r3, [r4, #0]
 800bff8:	6922      	ldr	r2, [r4, #16]
 800bffa:	f003 0306 	and.w	r3, r3, #6
 800bffe:	2b04      	cmp	r3, #4
 800c000:	bf02      	ittt	eq
 800c002:	68e5      	ldreq	r5, [r4, #12]
 800c004:	6833      	ldreq	r3, [r6, #0]
 800c006:	1aed      	subeq	r5, r5, r3
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	bf0c      	ite	eq
 800c00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c010:	2500      	movne	r5, #0
 800c012:	4293      	cmp	r3, r2
 800c014:	bfc4      	itt	gt
 800c016:	1a9b      	subgt	r3, r3, r2
 800c018:	18ed      	addgt	r5, r5, r3
 800c01a:	2600      	movs	r6, #0
 800c01c:	341a      	adds	r4, #26
 800c01e:	42b5      	cmp	r5, r6
 800c020:	d11a      	bne.n	800c058 <_printf_common+0xc8>
 800c022:	2000      	movs	r0, #0
 800c024:	e008      	b.n	800c038 <_printf_common+0xa8>
 800c026:	2301      	movs	r3, #1
 800c028:	4652      	mov	r2, sl
 800c02a:	4649      	mov	r1, r9
 800c02c:	4638      	mov	r0, r7
 800c02e:	47c0      	blx	r8
 800c030:	3001      	adds	r0, #1
 800c032:	d103      	bne.n	800c03c <_printf_common+0xac>
 800c034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c03c:	3501      	adds	r5, #1
 800c03e:	e7c6      	b.n	800bfce <_printf_common+0x3e>
 800c040:	18e1      	adds	r1, r4, r3
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	2030      	movs	r0, #48	; 0x30
 800c046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c04a:	4422      	add	r2, r4
 800c04c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c054:	3302      	adds	r3, #2
 800c056:	e7c7      	b.n	800bfe8 <_printf_common+0x58>
 800c058:	2301      	movs	r3, #1
 800c05a:	4622      	mov	r2, r4
 800c05c:	4649      	mov	r1, r9
 800c05e:	4638      	mov	r0, r7
 800c060:	47c0      	blx	r8
 800c062:	3001      	adds	r0, #1
 800c064:	d0e6      	beq.n	800c034 <_printf_common+0xa4>
 800c066:	3601      	adds	r6, #1
 800c068:	e7d9      	b.n	800c01e <_printf_common+0x8e>
	...

0800c06c <_printf_i>:
 800c06c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	7e0f      	ldrb	r7, [r1, #24]
 800c072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c074:	2f78      	cmp	r7, #120	; 0x78
 800c076:	4691      	mov	r9, r2
 800c078:	4680      	mov	r8, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	469a      	mov	sl, r3
 800c07e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c082:	d807      	bhi.n	800c094 <_printf_i+0x28>
 800c084:	2f62      	cmp	r7, #98	; 0x62
 800c086:	d80a      	bhi.n	800c09e <_printf_i+0x32>
 800c088:	2f00      	cmp	r7, #0
 800c08a:	f000 80d4 	beq.w	800c236 <_printf_i+0x1ca>
 800c08e:	2f58      	cmp	r7, #88	; 0x58
 800c090:	f000 80c0 	beq.w	800c214 <_printf_i+0x1a8>
 800c094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c09c:	e03a      	b.n	800c114 <_printf_i+0xa8>
 800c09e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0a2:	2b15      	cmp	r3, #21
 800c0a4:	d8f6      	bhi.n	800c094 <_printf_i+0x28>
 800c0a6:	a101      	add	r1, pc, #4	; (adr r1, 800c0ac <_printf_i+0x40>)
 800c0a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0ac:	0800c105 	.word	0x0800c105
 800c0b0:	0800c119 	.word	0x0800c119
 800c0b4:	0800c095 	.word	0x0800c095
 800c0b8:	0800c095 	.word	0x0800c095
 800c0bc:	0800c095 	.word	0x0800c095
 800c0c0:	0800c095 	.word	0x0800c095
 800c0c4:	0800c119 	.word	0x0800c119
 800c0c8:	0800c095 	.word	0x0800c095
 800c0cc:	0800c095 	.word	0x0800c095
 800c0d0:	0800c095 	.word	0x0800c095
 800c0d4:	0800c095 	.word	0x0800c095
 800c0d8:	0800c21d 	.word	0x0800c21d
 800c0dc:	0800c145 	.word	0x0800c145
 800c0e0:	0800c1d7 	.word	0x0800c1d7
 800c0e4:	0800c095 	.word	0x0800c095
 800c0e8:	0800c095 	.word	0x0800c095
 800c0ec:	0800c23f 	.word	0x0800c23f
 800c0f0:	0800c095 	.word	0x0800c095
 800c0f4:	0800c145 	.word	0x0800c145
 800c0f8:	0800c095 	.word	0x0800c095
 800c0fc:	0800c095 	.word	0x0800c095
 800c100:	0800c1df 	.word	0x0800c1df
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	1d1a      	adds	r2, r3, #4
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	602a      	str	r2, [r5, #0]
 800c10c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c114:	2301      	movs	r3, #1
 800c116:	e09f      	b.n	800c258 <_printf_i+0x1ec>
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	682b      	ldr	r3, [r5, #0]
 800c11c:	0607      	lsls	r7, r0, #24
 800c11e:	f103 0104 	add.w	r1, r3, #4
 800c122:	6029      	str	r1, [r5, #0]
 800c124:	d501      	bpl.n	800c12a <_printf_i+0xbe>
 800c126:	681e      	ldr	r6, [r3, #0]
 800c128:	e003      	b.n	800c132 <_printf_i+0xc6>
 800c12a:	0646      	lsls	r6, r0, #25
 800c12c:	d5fb      	bpl.n	800c126 <_printf_i+0xba>
 800c12e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c132:	2e00      	cmp	r6, #0
 800c134:	da03      	bge.n	800c13e <_printf_i+0xd2>
 800c136:	232d      	movs	r3, #45	; 0x2d
 800c138:	4276      	negs	r6, r6
 800c13a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c13e:	485a      	ldr	r0, [pc, #360]	; (800c2a8 <_printf_i+0x23c>)
 800c140:	230a      	movs	r3, #10
 800c142:	e012      	b.n	800c16a <_printf_i+0xfe>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	6820      	ldr	r0, [r4, #0]
 800c148:	1d19      	adds	r1, r3, #4
 800c14a:	6029      	str	r1, [r5, #0]
 800c14c:	0605      	lsls	r5, r0, #24
 800c14e:	d501      	bpl.n	800c154 <_printf_i+0xe8>
 800c150:	681e      	ldr	r6, [r3, #0]
 800c152:	e002      	b.n	800c15a <_printf_i+0xee>
 800c154:	0641      	lsls	r1, r0, #25
 800c156:	d5fb      	bpl.n	800c150 <_printf_i+0xe4>
 800c158:	881e      	ldrh	r6, [r3, #0]
 800c15a:	4853      	ldr	r0, [pc, #332]	; (800c2a8 <_printf_i+0x23c>)
 800c15c:	2f6f      	cmp	r7, #111	; 0x6f
 800c15e:	bf0c      	ite	eq
 800c160:	2308      	moveq	r3, #8
 800c162:	230a      	movne	r3, #10
 800c164:	2100      	movs	r1, #0
 800c166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c16a:	6865      	ldr	r5, [r4, #4]
 800c16c:	60a5      	str	r5, [r4, #8]
 800c16e:	2d00      	cmp	r5, #0
 800c170:	bfa2      	ittt	ge
 800c172:	6821      	ldrge	r1, [r4, #0]
 800c174:	f021 0104 	bicge.w	r1, r1, #4
 800c178:	6021      	strge	r1, [r4, #0]
 800c17a:	b90e      	cbnz	r6, 800c180 <_printf_i+0x114>
 800c17c:	2d00      	cmp	r5, #0
 800c17e:	d04b      	beq.n	800c218 <_printf_i+0x1ac>
 800c180:	4615      	mov	r5, r2
 800c182:	fbb6 f1f3 	udiv	r1, r6, r3
 800c186:	fb03 6711 	mls	r7, r3, r1, r6
 800c18a:	5dc7      	ldrb	r7, [r0, r7]
 800c18c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c190:	4637      	mov	r7, r6
 800c192:	42bb      	cmp	r3, r7
 800c194:	460e      	mov	r6, r1
 800c196:	d9f4      	bls.n	800c182 <_printf_i+0x116>
 800c198:	2b08      	cmp	r3, #8
 800c19a:	d10b      	bne.n	800c1b4 <_printf_i+0x148>
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	07de      	lsls	r6, r3, #31
 800c1a0:	d508      	bpl.n	800c1b4 <_printf_i+0x148>
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	6861      	ldr	r1, [r4, #4]
 800c1a6:	4299      	cmp	r1, r3
 800c1a8:	bfde      	ittt	le
 800c1aa:	2330      	movle	r3, #48	; 0x30
 800c1ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c1b4:	1b52      	subs	r2, r2, r5
 800c1b6:	6122      	str	r2, [r4, #16]
 800c1b8:	f8cd a000 	str.w	sl, [sp]
 800c1bc:	464b      	mov	r3, r9
 800c1be:	aa03      	add	r2, sp, #12
 800c1c0:	4621      	mov	r1, r4
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	f7ff fee4 	bl	800bf90 <_printf_common>
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	d14a      	bne.n	800c262 <_printf_i+0x1f6>
 800c1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1d0:	b004      	add	sp, #16
 800c1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	f043 0320 	orr.w	r3, r3, #32
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	4833      	ldr	r0, [pc, #204]	; (800c2ac <_printf_i+0x240>)
 800c1e0:	2778      	movs	r7, #120	; 0x78
 800c1e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	6829      	ldr	r1, [r5, #0]
 800c1ea:	061f      	lsls	r7, r3, #24
 800c1ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800c1f0:	d402      	bmi.n	800c1f8 <_printf_i+0x18c>
 800c1f2:	065f      	lsls	r7, r3, #25
 800c1f4:	bf48      	it	mi
 800c1f6:	b2b6      	uxthmi	r6, r6
 800c1f8:	07df      	lsls	r7, r3, #31
 800c1fa:	bf48      	it	mi
 800c1fc:	f043 0320 	orrmi.w	r3, r3, #32
 800c200:	6029      	str	r1, [r5, #0]
 800c202:	bf48      	it	mi
 800c204:	6023      	strmi	r3, [r4, #0]
 800c206:	b91e      	cbnz	r6, 800c210 <_printf_i+0x1a4>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	f023 0320 	bic.w	r3, r3, #32
 800c20e:	6023      	str	r3, [r4, #0]
 800c210:	2310      	movs	r3, #16
 800c212:	e7a7      	b.n	800c164 <_printf_i+0xf8>
 800c214:	4824      	ldr	r0, [pc, #144]	; (800c2a8 <_printf_i+0x23c>)
 800c216:	e7e4      	b.n	800c1e2 <_printf_i+0x176>
 800c218:	4615      	mov	r5, r2
 800c21a:	e7bd      	b.n	800c198 <_printf_i+0x12c>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	6826      	ldr	r6, [r4, #0]
 800c220:	6961      	ldr	r1, [r4, #20]
 800c222:	1d18      	adds	r0, r3, #4
 800c224:	6028      	str	r0, [r5, #0]
 800c226:	0635      	lsls	r5, r6, #24
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	d501      	bpl.n	800c230 <_printf_i+0x1c4>
 800c22c:	6019      	str	r1, [r3, #0]
 800c22e:	e002      	b.n	800c236 <_printf_i+0x1ca>
 800c230:	0670      	lsls	r0, r6, #25
 800c232:	d5fb      	bpl.n	800c22c <_printf_i+0x1c0>
 800c234:	8019      	strh	r1, [r3, #0]
 800c236:	2300      	movs	r3, #0
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	4615      	mov	r5, r2
 800c23c:	e7bc      	b.n	800c1b8 <_printf_i+0x14c>
 800c23e:	682b      	ldr	r3, [r5, #0]
 800c240:	1d1a      	adds	r2, r3, #4
 800c242:	602a      	str	r2, [r5, #0]
 800c244:	681d      	ldr	r5, [r3, #0]
 800c246:	6862      	ldr	r2, [r4, #4]
 800c248:	2100      	movs	r1, #0
 800c24a:	4628      	mov	r0, r5
 800c24c:	f7f3 ffe8 	bl	8000220 <memchr>
 800c250:	b108      	cbz	r0, 800c256 <_printf_i+0x1ea>
 800c252:	1b40      	subs	r0, r0, r5
 800c254:	6060      	str	r0, [r4, #4]
 800c256:	6863      	ldr	r3, [r4, #4]
 800c258:	6123      	str	r3, [r4, #16]
 800c25a:	2300      	movs	r3, #0
 800c25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c260:	e7aa      	b.n	800c1b8 <_printf_i+0x14c>
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	462a      	mov	r2, r5
 800c266:	4649      	mov	r1, r9
 800c268:	4640      	mov	r0, r8
 800c26a:	47d0      	blx	sl
 800c26c:	3001      	adds	r0, #1
 800c26e:	d0ad      	beq.n	800c1cc <_printf_i+0x160>
 800c270:	6823      	ldr	r3, [r4, #0]
 800c272:	079b      	lsls	r3, r3, #30
 800c274:	d413      	bmi.n	800c29e <_printf_i+0x232>
 800c276:	68e0      	ldr	r0, [r4, #12]
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	4298      	cmp	r0, r3
 800c27c:	bfb8      	it	lt
 800c27e:	4618      	movlt	r0, r3
 800c280:	e7a6      	b.n	800c1d0 <_printf_i+0x164>
 800c282:	2301      	movs	r3, #1
 800c284:	4632      	mov	r2, r6
 800c286:	4649      	mov	r1, r9
 800c288:	4640      	mov	r0, r8
 800c28a:	47d0      	blx	sl
 800c28c:	3001      	adds	r0, #1
 800c28e:	d09d      	beq.n	800c1cc <_printf_i+0x160>
 800c290:	3501      	adds	r5, #1
 800c292:	68e3      	ldr	r3, [r4, #12]
 800c294:	9903      	ldr	r1, [sp, #12]
 800c296:	1a5b      	subs	r3, r3, r1
 800c298:	42ab      	cmp	r3, r5
 800c29a:	dcf2      	bgt.n	800c282 <_printf_i+0x216>
 800c29c:	e7eb      	b.n	800c276 <_printf_i+0x20a>
 800c29e:	2500      	movs	r5, #0
 800c2a0:	f104 0619 	add.w	r6, r4, #25
 800c2a4:	e7f5      	b.n	800c292 <_printf_i+0x226>
 800c2a6:	bf00      	nop
 800c2a8:	0800c441 	.word	0x0800c441
 800c2ac:	0800c452 	.word	0x0800c452

0800c2b0 <__malloc_lock>:
 800c2b0:	4801      	ldr	r0, [pc, #4]	; (800c2b8 <__malloc_lock+0x8>)
 800c2b2:	f7ff bc19 	b.w	800bae8 <__retarget_lock_acquire_recursive>
 800c2b6:	bf00      	nop
 800c2b8:	20002e3c 	.word	0x20002e3c

0800c2bc <__malloc_unlock>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__malloc_unlock+0x8>)
 800c2be:	f7ff bc14 	b.w	800baea <__retarget_lock_release_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	20002e3c 	.word	0x20002e3c

0800c2c8 <_realloc_r>:
 800c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	4614      	mov	r4, r2
 800c2d0:	460e      	mov	r6, r1
 800c2d2:	b921      	cbnz	r1, 800c2de <_realloc_r+0x16>
 800c2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d8:	4611      	mov	r1, r2
 800c2da:	f7ff bdd9 	b.w	800be90 <_malloc_r>
 800c2de:	b92a      	cbnz	r2, 800c2ec <_realloc_r+0x24>
 800c2e0:	f7ff fc12 	bl	800bb08 <_free_r>
 800c2e4:	4625      	mov	r5, r4
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ec:	f000 f846 	bl	800c37c <_malloc_usable_size_r>
 800c2f0:	4284      	cmp	r4, r0
 800c2f2:	4607      	mov	r7, r0
 800c2f4:	d802      	bhi.n	800c2fc <_realloc_r+0x34>
 800c2f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2fa:	d812      	bhi.n	800c322 <_realloc_r+0x5a>
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	4640      	mov	r0, r8
 800c300:	f7ff fdc6 	bl	800be90 <_malloc_r>
 800c304:	4605      	mov	r5, r0
 800c306:	2800      	cmp	r0, #0
 800c308:	d0ed      	beq.n	800c2e6 <_realloc_r+0x1e>
 800c30a:	42bc      	cmp	r4, r7
 800c30c:	4622      	mov	r2, r4
 800c30e:	4631      	mov	r1, r6
 800c310:	bf28      	it	cs
 800c312:	463a      	movcs	r2, r7
 800c314:	f7ff fbea 	bl	800baec <memcpy>
 800c318:	4631      	mov	r1, r6
 800c31a:	4640      	mov	r0, r8
 800c31c:	f7ff fbf4 	bl	800bb08 <_free_r>
 800c320:	e7e1      	b.n	800c2e6 <_realloc_r+0x1e>
 800c322:	4635      	mov	r5, r6
 800c324:	e7df      	b.n	800c2e6 <_realloc_r+0x1e>

0800c326 <memmove>:
 800c326:	4288      	cmp	r0, r1
 800c328:	b510      	push	{r4, lr}
 800c32a:	eb01 0402 	add.w	r4, r1, r2
 800c32e:	d902      	bls.n	800c336 <memmove+0x10>
 800c330:	4284      	cmp	r4, r0
 800c332:	4623      	mov	r3, r4
 800c334:	d807      	bhi.n	800c346 <memmove+0x20>
 800c336:	1e43      	subs	r3, r0, #1
 800c338:	42a1      	cmp	r1, r4
 800c33a:	d008      	beq.n	800c34e <memmove+0x28>
 800c33c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c340:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c344:	e7f8      	b.n	800c338 <memmove+0x12>
 800c346:	4402      	add	r2, r0
 800c348:	4601      	mov	r1, r0
 800c34a:	428a      	cmp	r2, r1
 800c34c:	d100      	bne.n	800c350 <memmove+0x2a>
 800c34e:	bd10      	pop	{r4, pc}
 800c350:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c354:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c358:	e7f7      	b.n	800c34a <memmove+0x24>
	...

0800c35c <_sbrk_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4d06      	ldr	r5, [pc, #24]	; (800c378 <_sbrk_r+0x1c>)
 800c360:	2300      	movs	r3, #0
 800c362:	4604      	mov	r4, r0
 800c364:	4608      	mov	r0, r1
 800c366:	602b      	str	r3, [r5, #0]
 800c368:	f7f4 fd8c 	bl	8000e84 <_sbrk>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_sbrk_r+0x1a>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_sbrk_r+0x1a>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	20002e38 	.word	0x20002e38

0800c37c <_malloc_usable_size_r>:
 800c37c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c380:	1f18      	subs	r0, r3, #4
 800c382:	2b00      	cmp	r3, #0
 800c384:	bfbc      	itt	lt
 800c386:	580b      	ldrlt	r3, [r1, r0]
 800c388:	18c0      	addlt	r0, r0, r3
 800c38a:	4770      	bx	lr

0800c38c <_init>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	bf00      	nop
 800c390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c392:	bc08      	pop	{r3}
 800c394:	469e      	mov	lr, r3
 800c396:	4770      	bx	lr

0800c398 <_fini>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	bf00      	nop
 800c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39e:	bc08      	pop	{r3}
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	4770      	bx	lr
