
Geode_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800adcc  0800adcc  0001adcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae44  0800ae44  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae44  0800ae44  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae44  0800ae44  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae48  0800ae48  0001ae48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800ae4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  20000060  0800aeac  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  0800aeac  000215e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000210a9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005343  00000000  00000000  0004117c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  000464c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001532  00000000  00000000  000480c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b38  00000000  00000000  000495fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009936  00000000  00000000  00061132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00007758  00000000  00000000  0006aa68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  000721c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800adb4 	.word	0x0800adb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	0800adb4 	.word	0x0800adb4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_CRC_Init+0x50>)
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_CRC_Init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_CRC_Init+0x50>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_CRC_Init+0x50>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_CRC_Init+0x50>)
 80002d8:	2207      	movs	r2, #7
 80002da:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_CRC_Init+0x50>)
 80002de:	2208      	movs	r2, #8
 80002e0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_CRC_Init+0x50>)
 80002e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e8:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_CRC_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_CRC_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CRC_Init+0x50>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_CRC_Init+0x50>)
 80002fe:	f000 ff85 	bl	800120c <HAL_CRC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 fbdf 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000007c 	.word	0x2000007c
 8000314:	40023000 	.word	0x40023000

08000318 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <HAL_CRC_MspInit+0x38>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d10b      	bne.n	8000342 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800032a:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 800032c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800032e:	4a09      	ldr	r2, [pc, #36]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 8000330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000334:	6493      	str	r3, [r2, #72]	; 0x48
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <HAL_CRC_MspInit+0x3c>)
 8000338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800033a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023000 	.word	0x40023000
 8000354:	40021000 	.word	0x40021000

08000358 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800035e:	4a20      	ldr	r2, [pc, #128]	; (80003e0 <MX_FDCAN1_Init+0x88>)
 8000360:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000376:	2200      	movs	r2, #0
 8000378:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800037c:	2200      	movs	r2, #0
 800037e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000380:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000382:	2200      	movs	r2, #0
 8000384:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000386:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000388:	2210      	movs	r2, #16
 800038a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800038e:	2201      	movs	r2, #1
 8000390:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_FDCAN1_Init+0x84>)
 8000394:	2202      	movs	r2, #2
 8000396:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <MX_FDCAN1_Init+0x84>)
 800039a:	2202      	movs	r2, #2
 800039c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003be:	2200      	movs	r2, #0
 80003c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_FDCAN1_Init+0x84>)
 80003ca:	f001 f811 	bl	80013f0 <HAL_FDCAN_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80003d4:	f000 fb79 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000a0 	.word	0x200000a0
 80003e0:	40006400 	.word	0x40006400

080003e4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003ea:	4a20      	ldr	r2, [pc, #128]	; (800046c <MX_FDCAN2_Init+0x88>)
 80003ec:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80003fa:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_FDCAN2_Init+0x84>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000402:	2200      	movs	r2, #0
 8000404:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000406:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000408:	2200      	movs	r2, #0
 800040a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800040e:	2200      	movs	r2, #0
 8000410:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000414:	2210      	movs	r2, #16
 8000416:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800041a:	2201      	movs	r2, #1
 800041c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000420:	2202      	movs	r2, #2
 8000422:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000426:	2202      	movs	r2, #2
 8000428:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800042c:	2201      	movs	r2, #1
 800042e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000432:	2201      	movs	r2, #1
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000438:	2201      	movs	r2, #1
 800043a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800043e:	2201      	movs	r2, #1
 8000440:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_FDCAN2_Init+0x84>)
 800044a:	2200      	movs	r2, #0
 800044c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000450:	2200      	movs	r2, #0
 8000452:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_FDCAN2_Init+0x84>)
 8000456:	f000 ffcb 	bl	80013f0 <HAL_FDCAN_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000460:	f000 fb33 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000104 	.word	0x20000104
 800046c:	40006800 	.word	0x40006800

08000470 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0a0      	sub	sp, #128	; 0x80
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	2254      	movs	r2, #84	; 0x54
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f009 ffb5 	bl	800a400 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a48      	ldr	r2, [pc, #288]	; (80005bc <HAL_FDCAN_MspInit+0x14c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d142      	bne.n	8000526 <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80004a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004aa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ac:	f107 0318 	add.w	r3, r7, #24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 fd8f 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004bc:	f000 fb05 	bl	8000aca <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80004c0:	4b3f      	ldr	r3, [pc, #252]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a3e      	ldr	r2, [pc, #248]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80004ca:	4b3d      	ldr	r3, [pc, #244]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d10b      	bne.n	80004ea <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80004d2:	4b3c      	ldr	r3, [pc, #240]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	4a3b      	ldr	r2, [pc, #236]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004dc:	6593      	str	r3, [r2, #88]	; 0x58
 80004de:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a35      	ldr	r2, [pc, #212]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000506:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000510:	2300      	movs	r3, #0
 8000512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000514:	2309      	movs	r3, #9
 8000516:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051c:	4619      	mov	r1, r3
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <HAL_FDCAN_MspInit+0x158>)
 8000520:	f001 f92c 	bl	800177c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000524:	e045      	b.n	80005b2 <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a28      	ldr	r2, [pc, #160]	; (80005cc <HAL_FDCAN_MspInit+0x15c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d140      	bne.n	80005b2 <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f003 fd47 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 800054c:	f000 fabd 	bl	8000aca <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 8000558:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <HAL_FDCAN_MspInit+0x150>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10b      	bne.n	800057a <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056c:	6593      	str	r3, [r2, #88]	; 0x58
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_FDCAN_MspInit+0x154>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000592:	2360      	movs	r3, #96	; 0x60
 8000594:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80005a2:	2309      	movs	r3, #9
 80005a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005aa:	4619      	mov	r1, r3
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <HAL_FDCAN_MspInit+0x158>)
 80005ae:	f001 f8e5 	bl	800177c <HAL_GPIO_Init>
}
 80005b2:	bf00      	nop
 80005b4:	3780      	adds	r7, #128	; 0x80
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40006400 	.word	0x40006400
 80005c0:	20000168 	.word	0x20000168
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000400 	.word	0x48000400
 80005cc:	40006800 	.word	0x40006800

080005d0 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

extern void MX_FREERTOS_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	System::init();
 80005d4:	f009 fcbc 	bl	8009f50 <_ZN6System4initEv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <MX_GPIO_Init+0x194>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a5e      	ldr	r2, [pc, #376]	; (8000770 <MX_GPIO_Init+0x194>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b5c      	ldr	r3, [pc, #368]	; (8000770 <MX_GPIO_Init+0x194>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b59      	ldr	r3, [pc, #356]	; (8000770 <MX_GPIO_Init+0x194>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a58      	ldr	r2, [pc, #352]	; (8000770 <MX_GPIO_Init+0x194>)
 8000610:	f043 0320 	orr.w	r3, r3, #32
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b56      	ldr	r3, [pc, #344]	; (8000770 <MX_GPIO_Init+0x194>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b53      	ldr	r3, [pc, #332]	; (8000770 <MX_GPIO_Init+0x194>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	4a52      	ldr	r2, [pc, #328]	; (8000770 <MX_GPIO_Init+0x194>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062e:	4b50      	ldr	r3, [pc, #320]	; (8000770 <MX_GPIO_Init+0x194>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b4d      	ldr	r3, [pc, #308]	; (8000770 <MX_GPIO_Init+0x194>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a4c      	ldr	r2, [pc, #304]	; (8000770 <MX_GPIO_Init+0x194>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <MX_GPIO_Init+0x194>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000652:	4b47      	ldr	r3, [pc, #284]	; (8000770 <MX_GPIO_Init+0x194>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a46      	ldr	r2, [pc, #280]	; (8000770 <MX_GPIO_Init+0x194>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b44      	ldr	r3, [pc, #272]	; (8000770 <MX_GPIO_Init+0x194>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 800066a:	2200      	movs	r2, #0
 800066c:	f246 0187 	movw	r1, #24711	; 0x6087
 8000670:	4840      	ldr	r0, [pc, #256]	; (8000774 <MX_GPIO_Init+0x198>)
 8000672:	f001 fa05 	bl	8001a80 <HAL_GPIO_WritePin>
                          |SYNC1_Pin|INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_SHDN_VA_Pin|MB_SHDN_VB_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	210a      	movs	r1, #10
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 f9ff 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2187      	movs	r1, #135	; 0x87
 8000686:	483c      	ldr	r0, [pc, #240]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000688:	f001 f9fa 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CAT1_Pin|LED_CAT2_Pin|IRQ_Pin|SYNC0_Pin
 800068c:	f246 0387 	movw	r3, #24711	; 0x6087
 8000690:	617b      	str	r3, [r7, #20]
                          |SYNC1_Pin|INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4833      	ldr	r0, [pc, #204]	; (8000774 <MX_GPIO_Init+0x198>)
 80006a6:	f001 f869 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = RUN1_B_Pin|RUN0_B_Pin|FAULT0_B_Pin|PRE_FLT_Pin
 80006aa:	f248 0378 	movw	r3, #32888	; 0x8078
 80006ae:	617b      	str	r3, [r7, #20]
                          |RUN0_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <MX_GPIO_Init+0x198>)
 80006c0:	f001 f85c 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = FAULT1_B_Pin|ALERT_B_Pin|RUN1_A_Pin;
 80006c4:	f240 4305 	movw	r3, #1029	; 0x405
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f001 f84e 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB_SHDN_VA_Pin|MB_SHDN_VB_Pin;
 80006e0:	230a      	movs	r3, #10
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f001 f83f 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PRE_EN_Pin|FAN_CTRL_Pin|MA_SHDN_VA_Pin|FAULT1_AB7_Pin;
 80006fe:	2387      	movs	r3, #135	; 0x87
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4818      	ldr	r0, [pc, #96]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000716:	f001 f831 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = FAULT1_A_Pin|FAULT0_A_Pin;
 800071a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0x19c>)
 8000730:	f001 f824 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8000734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073a:	2303      	movs	r3, #3
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0x19c>)
 800074a:	f001 f817 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ALERT_A_Pin;
 800074e:	2304      	movs	r3, #4
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_A_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_GPIO_Init+0x1a0>)
 8000762:	f001 f80b 	bl	800177c <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	48000800 	.word	0x48000800
 8000778:	48000400 	.word	0x48000400
 800077c:	48000c00 	.word	0x48000c00

08000780 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00E057FD;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C2_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C2_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007bc:	f001 f978 	bl	8001ab0 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 f980 	bl	8000aca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007ce:	f001 fa0a 	bl	8001be6 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 f977 	bl	8000aca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007e0:	f001 fa4c 	bl	8001c7c <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f96e 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000016c 	.word	0x2000016c
 80007f8:	40005800 	.word	0x40005800
 80007fc:	00e057fd 	.word	0x00e057fd

08000800 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C3_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C3_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00E057FD;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C3_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C3_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C3_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C3_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C3_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C3_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C3_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <MX_I2C3_Init+0x74>)
 800083c:	f001 f938 	bl	8001ab0 <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 f940 	bl	8000aca <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C3_Init+0x74>)
 800084e:	f001 f9ca 	bl	8001be6 <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 f937 	bl	8000aca <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2C3_Init+0x74>)
 8000860:	f001 fa0c 	bl	8001c7c <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f92e 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001c0 	.word	0x200001c0
 8000878:	40007800 	.word	0x40007800
 800087c:	00e057fd 	.word	0x00e057fd

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a0      	sub	sp, #128	; 0x80
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	2254      	movs	r2, #84	; 0x54
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f009 fdad 	bl	800a400 <memset>
  if(i2cHandle->Instance==I2C2)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a3e      	ldr	r2, [pc, #248]	; (80009a4 <HAL_I2C_MspInit+0x124>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d138      	bne.n	8000922 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0318 	add.w	r3, r7, #24
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fb89 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008c8:	f000 f8ff 	bl	8000aca <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d8:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	2312      	movs	r3, #18
 80008ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008f6:	2304      	movs	r3, #4
 80008f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 ff3a 	bl	800177c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800090e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000920:	e03c      	b.n	800099c <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a21      	ldr	r2, [pc, #132]	; (80009ac <HAL_I2C_MspInit+0x12c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d137      	bne.n	800099c <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000932:	2300      	movs	r3, #0
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fb4a 	bl	8003fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8000946:	f000 f8c0 	bl	8000aca <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000966:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000968:	2312      	movs	r3, #18
 800096a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000974:	2308      	movs	r3, #8
 8000976:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_I2C_MspInit+0x130>)
 8000980:	f000 fefc 	bl	800177c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 800098a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800098e:	6593      	str	r3, [r2, #88]	; 0x58
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2C_MspInit+0x128>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
}
 800099c:	bf00      	nop
 800099e:	3780      	adds	r7, #128	; 0x80
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005800 	.word	0x40005800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40007800 	.word	0x40007800
 80009b0:	48000800 	.word	0x48000800

080009b4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <MX_IWDG_Init+0x38>)
 80009bc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009ca:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80009d2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_IWDG_Init+0x34>)
 80009d6:	f001 f99d 	bl	8001d14 <HAL_IWDG_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80009e0:	f000 f873 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000214 	.word	0x20000214
 80009ec:	40003000 	.word	0x40003000

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f4:	f000 fab5 	bl	8000f62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f8:	f000 f81b 	bl	8000a32 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fc:	f7ff fdee 	bl	80005dc <MX_GPIO_Init>
  MX_CRC_Init();
 8000a00:	f7ff fc5e 	bl	80002c0 <MX_CRC_Init>
  MX_FDCAN1_Init();
 8000a04:	f7ff fca8 	bl	8000358 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a08:	f7ff fcec 	bl	80003e4 <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8000a0c:	f7ff feb8 	bl	8000780 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000a10:	f7ff fef6 	bl	8000800 <MX_I2C3_Init>
  MX_IWDG_Init();
 8000a14:	f7ff ffce 	bl	80009b4 <MX_IWDG_Init>
  MX_SPI1_Init();
 8000a18:	f000 f85c 	bl	8000ad4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a1c:	f000 f898 	bl	8000b50 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000a20:	f000 f8d4 	bl	8000bcc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a24:	f006 ff6a 	bl	80078fc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a28:	f7ff fdd2 	bl	80005d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a2c:	f006 ff8a 	bl	8007944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x40>

08000a32 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b094      	sub	sp, #80	; 0x50
 8000a36:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	2238      	movs	r2, #56	; 0x38
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f009 fcdd 	bl	800a400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a58:	f002 fd22 	bl	80034a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a66:	2301      	movs	r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV16;
 8000a72:	2310      	movs	r3, #16
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a76:	2360      	movs	r3, #96	; 0x60
 8000a78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fdac 	bl	80035e8 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a96:	f000 f818 	bl	8000aca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 f8aa 	bl	8003c0c <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000abe:	f000 f804 	bl	8000aca <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	; 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ace:	b672      	cpsid	i
}
 8000ad0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <Error_Handler+0x8>

08000ad4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <MX_SPI1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000aee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000af2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b22:	2207      	movs	r2, #7
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_SPI1_Init+0x74>)
 8000b34:	f003 fc9c 	bl	8004470 <HAL_SPI_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f7ff ffc4 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000224 	.word	0x20000224
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b56:	4a1c      	ldr	r2, [pc, #112]	; (8000bc8 <MX_SPI2_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_SPI2_Init+0x74>)
 8000bb0:	f003 fc5e 	bl	8004470 <HAL_SPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f7ff ff86 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000288 	.word	0x20000288
 8000bc8:	40003800 	.word	0x40003800

08000bcc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_SPI3_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000be6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bfa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bfe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c2c:	f003 fc20 	bl	8004470 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f7ff ff48 	bl	8000aca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200002ec 	.word	0x200002ec
 8000c44:	40003c00 	.word	0x40003c00

08000c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a55      	ldr	r2, [pc, #340]	; (8000dbc <HAL_SPI_MspInit+0x174>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d129      	bne.n	8000cbe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c74:	6613      	str	r3, [r2, #96]	; 0x60
 8000c76:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c9a:	23f0      	movs	r3, #240	; 0xf0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fd60 	bl	800177c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cbc:	e07a      	b.n	8000db4 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <HAL_SPI_MspInit+0x17c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d129      	bne.n	8000d1c <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cf8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	482c      	ldr	r0, [pc, #176]	; (8000dc8 <HAL_SPI_MspInit+0x180>)
 8000d16:	f000 fd31 	bl	800177c <HAL_GPIO_Init>
}
 8000d1a:	e04b      	b.n	8000db4 <HAL_SPI_MspInit+0x16c>
  else if(spiHandle->Instance==SPI3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <HAL_SPI_MspInit+0x184>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d146      	bne.n	8000db4 <HAL_SPI_MspInit+0x16c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d30:	6593      	str	r3, [r2, #88]	; 0x58
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_SPI_MspInit+0x178>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d80:	2306      	movs	r3, #6
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f000 fcf5 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da4:	2306      	movs	r3, #6
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_SPI_MspInit+0x188>)
 8000db0:	f000 fce4 	bl	800177c <HAL_GPIO_Init>
}
 8000db4:	bf00      	nop
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40003800 	.word	0x40003800
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	40003c00 	.word	0x40003c00
 8000dd0:	48000800 	.word	0x48000800

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_MspInit+0x4c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_MspInit+0x4c>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_MspInit+0x4c>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	f06f 0001 	mvn.w	r0, #1
 8000e12:	f000 f9d4 	bl	80011be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f8d8 	bl	8001008 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e58:	f008 f93e 	bl	80090d8 <xTaskGetSchedulerState>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d001      	beq.n	8000e66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e62:	f008 ff29 	bl	8009cb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USB_LP_IRQHandler+0x10>)
 8000e72:	f000 ff9e 	bl	8001db2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200011bc 	.word	0x200011bc

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	; (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f009 fb04 	bl	800a4bc <__errno>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <_sbrk+0x64>)
 8000ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20020000 	.word	0x20020000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000350 	.word	0x20000350
 8000ee8:	200015e0 	.word	0x200015e0

08000eec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f14:	f7ff ffea 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopForever+0xe>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopForever+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f009 fac3 	bl	800a4c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f42:	f7ff fd55 	bl	80009f0 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
  ldr   r0, =_estack
 8000f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f54:	0800ae4c 	.word	0x0800ae4c
  ldr r2, =_sbss
 8000f58:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f5c:	200015e0 	.word	0x200015e0

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>

08000f62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f91b 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	200f      	movs	r0, #15
 8000f74:	f000 f80e 	bl	8000f94 <HAL_InitTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	e001      	b.n	8000f88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f84:	f7ff ff26 	bl	8000dd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f88:	79fb      	ldrb	r3, [r7, #7]

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_InitTick+0x68>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d022      	beq.n	8000fee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_InitTick+0x6c>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f918 	bl	80011f2 <HAL_SYSTICK_Config>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10f      	bne.n	8000fe8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d809      	bhi.n	8000fe2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd6:	f000 f8f2 	bl	80011be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_InitTick+0x70>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	e007      	b.n	8000ff2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e004      	b.n	8000ff2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e001      	b.n	8000ff2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x1c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x20>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4413      	add	r3, r2
 8001016:	4a03      	ldr	r2, [pc, #12]	; (8001024 <HAL_IncTick+0x1c>)
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000354 	.word	0x20000354
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000354 	.word	0x20000354

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff47 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff5e 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff90 	bl	80010fc <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5f 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffb2 	bl	8001164 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e054      	b.n	80012c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7f5b      	ldrb	r3, [r3, #29]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff f872 	bl	8000318 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <HAL_CRC_Init+0xc4>)
 8001248:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0218 	bic.w	r2, r2, #24
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	e00c      	b.n	8001276 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6899      	ldr	r1, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	461a      	mov	r2, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f834 	bl	80012d4 <HAL_CRCEx_Polynomial_Set>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e028      	b.n	80012c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	795b      	ldrb	r3, [r3, #5]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	e004      	b.n	8001294 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6912      	ldr	r2, [r2, #16]
 8001292:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	04c11db7 	.word	0x04c11db7

080012d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80012e4:	231f      	movs	r3, #31
 80012e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d102      	bne.n	80012f8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
 80012f6:	e063      	b.n	80013c0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80012f8:	bf00      	nop
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	613a      	str	r2, [r7, #16]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <HAL_CRCEx_Polynomial_Set+0x44>
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f003 031f 	and.w	r3, r3, #31
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b18      	cmp	r3, #24
 800131c:	d846      	bhi.n	80013ac <HAL_CRCEx_Polynomial_Set+0xd8>
 800131e:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	080013b3 	.word	0x080013b3
 8001328:	080013ad 	.word	0x080013ad
 800132c:	080013ad 	.word	0x080013ad
 8001330:	080013ad 	.word	0x080013ad
 8001334:	080013ad 	.word	0x080013ad
 8001338:	080013ad 	.word	0x080013ad
 800133c:	080013ad 	.word	0x080013ad
 8001340:	080013ad 	.word	0x080013ad
 8001344:	080013a1 	.word	0x080013a1
 8001348:	080013ad 	.word	0x080013ad
 800134c:	080013ad 	.word	0x080013ad
 8001350:	080013ad 	.word	0x080013ad
 8001354:	080013ad 	.word	0x080013ad
 8001358:	080013ad 	.word	0x080013ad
 800135c:	080013ad 	.word	0x080013ad
 8001360:	080013ad 	.word	0x080013ad
 8001364:	08001395 	.word	0x08001395
 8001368:	080013ad 	.word	0x080013ad
 800136c:	080013ad 	.word	0x080013ad
 8001370:	080013ad 	.word	0x080013ad
 8001374:	080013ad 	.word	0x080013ad
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013ad 	.word	0x080013ad
 8001380:	080013ad 	.word	0x080013ad
 8001384:	08001389 	.word	0x08001389
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	2b06      	cmp	r3, #6
 800138c:	d913      	bls.n	80013b6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001392:	e010      	b.n	80013b6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b07      	cmp	r3, #7
 8001398:	d90f      	bls.n	80013ba <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800139e:	e00c      	b.n	80013ba <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d90b      	bls.n	80013be <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80013aa:	e008      	b.n	80013be <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	75fb      	strb	r3, [r7, #23]
        break;
 80013b0:	e006      	b.n	80013c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013b2:	bf00      	nop
 80013b4:	e004      	b.n	80013c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013b6:	bf00      	nop
 80013b8:	e002      	b.n	80013c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013ba:	bf00      	nop
 80013bc:	e000      	b.n	80013c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80013be:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f023 0118 	bic.w	r1, r3, #24
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e147      	b.n	8001692 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff f82a 	bl	8000470 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0210 	bic.w	r2, r2, #16
 800142a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800142c:	f7ff fdfe 	bl	800102c <HAL_GetTick>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001432:	e012      	b.n	800145a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001434:	f7ff fdfa 	bl	800102c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b0a      	cmp	r3, #10
 8001440:	d90b      	bls.n	800145a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e11b      	b.n	8001692 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b08      	cmp	r3, #8
 8001466:	d0e5      	beq.n	8001434 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001478:	f7ff fdd8 	bl	800102c <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800147e:	e012      	b.n	80014a6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001480:	f7ff fdd4 	bl	800102c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d90b      	bls.n	80014a6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0f5      	b.n	8001692 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0e5      	beq.n	8001480 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0202 	orr.w	r2, r2, #2
 80014c2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a74      	ldr	r2, [pc, #464]	; (800169c <HAL_FDCAN_Init+0x2ac>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d103      	bne.n	80014d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80014ce:	4a74      	ldr	r2, [pc, #464]	; (80016a0 <HAL_FDCAN_Init+0x2b0>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7c1b      	ldrb	r3, [r3, #16]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d108      	bne.n	80014f0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699a      	ldr	r2, [r3, #24]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ec:	619a      	str	r2, [r3, #24]
 80014ee:	e007      	b.n	8001500 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7c5b      	ldrb	r3, [r3, #17]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d108      	bne.n	800151a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001516:	619a      	str	r2, [r3, #24]
 8001518:	e007      	b.n	800152a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001528:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7c9b      	ldrb	r3, [r3, #18]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d108      	bne.n	8001544 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	e007      	b.n	8001554 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001552:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001578:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0210 	bic.w	r2, r2, #16
 8001588:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0204 	orr.w	r2, r2, #4
 80015a0:	619a      	str	r2, [r3, #24]
 80015a2:	e02c      	b.n	80015fe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d028      	beq.n	80015fe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d01c      	beq.n	80015ee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0210 	orr.w	r2, r2, #16
 80015d2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d110      	bne.n	80015fe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0220 	orr.w	r2, r2, #32
 80015ea:	619a      	str	r2, [r3, #24]
 80015ec:	e007      	b.n	80015fe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0220 	orr.w	r2, r2, #32
 80015fc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	3b01      	subs	r3, #1
 8001604:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	3b01      	subs	r3, #1
 800160c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800160e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001616:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	3b01      	subs	r3, #1
 8001620:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001626:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001628:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001632:	d115      	bne.n	8001660 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	3b01      	subs	r3, #1
 8001640:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001642:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	3b01      	subs	r3, #1
 800164a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800164c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	3b01      	subs	r3, #1
 8001656:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800165c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800165e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f814 	bl	80016a4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40006400 	.word	0x40006400
 80016a0:	40006500 	.word	0x40006500

080016a4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80016ae:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d103      	bne.n	80016c2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80016c0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2c      	ldr	r2, [pc, #176]	; (8001778 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d103      	bne.n	80016d4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80016d2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001708:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e005      	b.n	8001756 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3304      	adds	r3, #4
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	429a      	cmp	r2, r3
 8001760:	d3f3      	bcc.n	800174a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	4000a400 	.word	0x4000a400
 8001774:	40006800 	.word	0x40006800
 8001778:	40006c00 	.word	0x40006c00

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800178a:	e15a      	b.n	8001a42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 814c 	beq.w	8001a3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d005      	beq.n	80017bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b03      	cmp	r3, #3
 8001828:	d017      	beq.n	800185a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d123      	bne.n	80018ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	08da      	lsrs	r2, r3, #3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3208      	adds	r2, #8
 80018a8:	6939      	ldr	r1, [r7, #16]
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0203 	and.w	r2, r3, #3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a6 	beq.w	8001a3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f0:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <HAL_GPIO_Init+0x2e4>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f4:	4a5a      	ldr	r2, [pc, #360]	; (8001a60 <HAL_GPIO_Init+0x2e4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6613      	str	r3, [r2, #96]	; 0x60
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_GPIO_Init+0x2e4>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001908:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001932:	d01f      	beq.n	8001974 <HAL_GPIO_Init+0x1f8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <HAL_GPIO_Init+0x2ec>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d019      	beq.n	8001970 <HAL_GPIO_Init+0x1f4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_GPIO_Init+0x1f0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x2f4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00d      	beq.n	8001968 <HAL_GPIO_Init+0x1ec>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <HAL_GPIO_Init+0x2f8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x1e8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2fc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_GPIO_Init+0x1e4>
 800195c:	2305      	movs	r3, #5
 800195e:	e00a      	b.n	8001976 <HAL_GPIO_Init+0x1fa>
 8001960:	2306      	movs	r3, #6
 8001962:	e008      	b.n	8001976 <HAL_GPIO_Init+0x1fa>
 8001964:	2304      	movs	r3, #4
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1fa>
 8001968:	2303      	movs	r3, #3
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1fa>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1fa>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1fa>
 8001974:	2300      	movs	r3, #0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001986:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b8:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <HAL_GPIO_Init+0x300>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x300>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x300>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_GPIO_Init+0x300>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a0c:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a36:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_GPIO_Init+0x300>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f ae9d 	bne.w	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	48000800 	.word	0x48000800
 8001a70:	48000c00 	.word	0x48000c00
 8001a74:	48001000 	.word	0x48001000
 8001a78:	48001400 	.word	0x48001400
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e08d      	b.n	8001bde <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe fed2 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e006      	b.n	8001b38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d108      	bne.n	8001b52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	e007      	b.n	8001b62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69d9      	ldr	r1, [r3, #28]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d138      	bne.n	8001c6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e032      	b.n	8001c70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2224      	movs	r2, #36	; 0x24
 8001c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d139      	bne.n	8001d06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e033      	b.n	8001d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f245 5255 	movw	r2, #21845	; 0x5555
 8001d38:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6852      	ldr	r2, [r2, #4]
 8001d42:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6892      	ldr	r2, [r2, #8]
 8001d4c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d4e:	f7ff f96d 	bl	800102c <HAL_GetTick>
 8001d52:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d54:	e00f      	b.n	8001d76 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d56:	f7ff f969 	bl	800102c <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b31      	cmp	r3, #49	; 0x31
 8001d62:	d908      	bls.n	8001d76 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e019      	b.n	8001daa <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e8      	bne.n	8001d56 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d005      	beq.n	8001d9e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	e004      	b.n	8001da8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b084      	sub	sp, #16
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 fc8a 	bl	80066d8 <USB_ReadInterrupts>
 8001dc4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 faa4 	bl	800231e <PCD_EP_ISR_Handler>

    return;
 8001dd6:	e110      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df4:	b292      	uxth	r2, r2
 8001df6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f008 f91d 	bl	800a03a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e00:	2100      	movs	r1, #0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8fc 	bl	8002000 <HAL_PCD_SetAddress>

    return;
 8001e08:	e0f7      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e26:	b292      	uxth	r2, r2
 8001e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e2c:	e0e5      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001e50:	e0d3      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d034      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0208 	bic.w	r2, r2, #8
 8001e86:	b292      	uxth	r2, r2
 8001e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f008 fa11 	bl	800a2c8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f008 f900 	bl	800a0ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ec4:	e099      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d027      	beq.n	8001f20 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0208 	orr.w	r2, r2, #8
 8001ee2:	b292      	uxth	r2, r2
 8001ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	b292      	uxth	r2, r2
 8001efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0204 	orr.w	r2, r2, #4
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f008 f8ad 	bl	800a078 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f1e:	e06c      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d040      	beq.n	8001fac <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3c:	b292      	uxth	r2, r2
 8001f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d12b      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0204 	orr.w	r2, r2, #4
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0208 	orr.w	r2, r2, #8
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f008 f993 	bl	800a2c8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001fa2:	e02a      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f008 f867 	bl	800a078 <HAL_PCD_SuspendCallback>
    return;
 8001faa:	e026      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00f      	beq.n	8001fd6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f008 f825 	bl	800a01e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001fd4:	e011      	b.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ff8:	bf00      	nop
  }
}
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_PCD_SetAddress+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e012      	b.n	8002040 <HAL_PCD_SetAddress+0x40>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fb3d 	bl	80066b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4603      	mov	r3, r0
 8002058:	70fb      	strb	r3, [r7, #3]
 800205a:	460b      	mov	r3, r1
 800205c:	803b      	strh	r3, [r7, #0]
 800205e:	4613      	mov	r3, r2
 8002060:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	da0e      	bge.n	800208c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 0207 	and.w	r2, r3, #7
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	3310      	adds	r3, #16
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	705a      	strb	r2, [r3, #1]
 800208a:	e00e      	b.n	80020aa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020b6:	883a      	ldrh	r2, [r7, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	78ba      	ldrb	r2, [r7, #2]
 80020c0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020c2:	78bb      	ldrb	r3, [r7, #2]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d102      	bne.n	80020ce <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_PCD_EP_Open+0x94>
 80020d8:	2302      	movs	r3, #2
 80020da:	e00e      	b.n	80020fa <HAL_PCD_EP_Open+0xb2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68f9      	ldr	r1, [r7, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fa6c 	bl	80045c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80020f8:	7afb      	ldrb	r3, [r7, #11]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	460b      	mov	r3, r1
 8002110:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	f003 0207 	and.w	r2, r3, #7
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	b2da      	uxtb	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6979      	ldr	r1, [r7, #20]
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fdfb 	bl	8004d50 <USB_EPStartXfer>

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	460b      	mov	r3, r1
 8002172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	f003 0207 	and.w	r2, r3, #7
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	3310      	adds	r3, #16
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2201      	movs	r2, #1
 80021ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6979      	ldr	r1, [r7, #20]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fdc4 	bl	8004d50 <USB_EPStartXfer>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	7912      	ldrb	r2, [r2, #4]
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e03e      	b.n	800226e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da0e      	bge.n	8002216 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 0207 	and.w	r2, r3, #7
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	3310      	adds	r3, #16
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	4413      	add	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2201      	movs	r2, #1
 8002212:	705a      	strb	r2, [r3, #1]
 8002214:	e00c      	b.n	8002230 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	b2da      	uxtb	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_PCD_EP_SetStall+0x7e>
 800224c:	2302      	movs	r3, #2
 800224e:	e00e      	b.n	800226e <HAL_PCD_EP_SetStall+0x9c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f004 f927 	bl	80064b2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	7912      	ldrb	r2, [r2, #4]
 800228c:	4293      	cmp	r3, r2
 800228e:	d901      	bls.n	8002294 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e040      	b.n	8002316 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002298:	2b00      	cmp	r3, #0
 800229a:	da0e      	bge.n	80022ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	f003 0207 	and.w	r2, r3, #7
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	3310      	adds	r3, #16
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	705a      	strb	r2, [r3, #1]
 80022b8:	e00e      	b.n	80022d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 0207 	and.w	r2, r3, #7
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_PCD_EP_ClrStall+0x82>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e00e      	b.n	8002316 <HAL_PCD_EP_ClrStall+0xa0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	4618      	mov	r0, r3
 8002308:	f004 f924 	bl	8006554 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b096      	sub	sp, #88	; 0x58
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002326:	e3ae      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002334:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002342:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8170 	bne.w	800262c <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800234c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d14d      	bne.n	80023f4 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002368:	81fb      	strh	r3, [r7, #14]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002378:	b29b      	uxth	r3, r3
 800237a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3310      	adds	r3, #16
 8002380:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	4413      	add	r3, r2
 800239c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	441a      	add	r2, r3
 80023b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f007 fe15 	bl	8009fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7b1b      	ldrb	r3, [r3, #12]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 835d 	beq.w	8002a86 <PCD_EP_ISR_Handler+0x768>
 80023cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 8358 	bne.w	8002a86 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7b1b      	ldrb	r3, [r3, #12]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b292      	uxth	r2, r2
 80023e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	731a      	strb	r2, [r3, #12]
 80023f2:	e348      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80023fa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002406:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800240a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240e:	2b00      	cmp	r3, #0
 8002410:	d032      	beq.n	8002478 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4413      	add	r3, r2
 800242c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002438:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002446:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800244c:	b29b      	uxth	r3, r3
 800244e:	f004 f995 	bl	800677c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29a      	uxth	r2, r3
 800245a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800245e:	4013      	ands	r3, r2
 8002460:	823b      	strh	r3, [r7, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	8a3a      	ldrh	r2, [r7, #16]
 8002468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246c:	b292      	uxth	r2, r2
 800246e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f007 fd8d 	bl	8009f90 <HAL_PCD_SetupStageCallback>
 8002476:	e306      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002478:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800247c:	2b00      	cmp	r3, #0
 800247e:	f280 8302 	bge.w	8002a86 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800248e:	4013      	ands	r3, r2
 8002490:	83fb      	strh	r3, [r7, #30]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	8bfa      	ldrh	r2, [r7, #30]
 8002498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800249c:	b292      	uxth	r2, r2
 800249e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	4413      	add	r3, r2
 80024ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d019      	beq.n	8002504 <PCD_EP_ISR_Handler+0x1e6>
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d015      	beq.n	8002504 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024de:	6959      	ldr	r1, [r3, #20]
 80024e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f004 f947 	bl	800677c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	441a      	add	r2, r3
 80024f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024fc:	2100      	movs	r1, #0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f007 fd58 	bl	8009fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800250e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 82b5 	bne.w	8002a86 <PCD_EP_ISR_Handler+0x768>
 800251c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002520:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002528:	f000 82ad 	beq.w	8002a86 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253a:	b29b      	uxth	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002556:	b29a      	uxth	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b3e      	cmp	r3, #62	; 0x3e
 8002562:	d91d      	bls.n	80025a0 <PCD_EP_ISR_Handler+0x282>
 8002564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	647b      	str	r3, [r7, #68]	; 0x44
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <PCD_EP_ISR_Handler+0x260>
 8002578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257a:	3b01      	subs	r3, #1
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29a      	uxth	r2, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	b29b      	uxth	r3, r3
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	b29b      	uxth	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002598:	b29a      	uxth	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	801a      	strh	r2, [r3, #0]
 800259e:	e026      	b.n	80025ee <PCD_EP_ISR_Handler+0x2d0>
 80025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <PCD_EP_ISR_Handler+0x2a0>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	e017      	b.n	80025ee <PCD_EP_ISR_Handler+0x2d0>
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
 80025c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <PCD_EP_ISR_Handler+0x2ba>
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d4:	3301      	adds	r3, #1
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	029b      	lsls	r3, r3, #10
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	827b      	strh	r3, [r7, #18]
 8002600:	8a7b      	ldrh	r3, [r7, #18]
 8002602:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002606:	827b      	strh	r3, [r7, #18]
 8002608:	8a7b      	ldrh	r3, [r7, #18]
 800260a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800260e:	827b      	strh	r3, [r7, #18]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	8a7b      	ldrh	r3, [r7, #18]
 8002616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002626:	b29b      	uxth	r3, r3
 8002628:	8013      	strh	r3, [r2, #0]
 800262a:	e22c      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002640:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002644:	2b00      	cmp	r3, #0
 8002646:	f280 80f6 	bge.w	8002836 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29a      	uxth	r2, r3
 800265c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002660:	4013      	ands	r3, r2
 8002662:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002678:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800267c:	b292      	uxth	r2, r2
 800267e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002680:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002698:	7b1b      	ldrb	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d123      	bne.n	80026e6 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80026c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 808e 	beq.w	80027ec <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	88da      	ldrh	r2, [r3, #6]
 80026dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80026e0:	f004 f84c 	bl	800677c <USB_ReadPMA>
 80026e4:	e082      	b.n	80027ec <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d10a      	bne.n	8002704 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026f2:	461a      	mov	r2, r3
 80026f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f9d3 	bl	8002aa2 <HAL_PCD_EP_DB_Receive>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002702:	e073      	b.n	80027ec <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	441a      	add	r2, r3
 8002730:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800273c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002740:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002744:	b29b      	uxth	r3, r3
 8002746:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d022      	beq.n	80027a8 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	4413      	add	r3, r2
 800277c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002786:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800278a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02c      	beq.n	80027ec <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002798:	6959      	ldr	r1, [r3, #20]
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	891a      	ldrh	r2, [r3, #8]
 800279e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027a2:	f003 ffeb 	bl	800677c <USB_ReadPMA>
 80027a6:	e021      	b.n	80027ec <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80027d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	6959      	ldr	r1, [r3, #20]
 80027e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e2:	895a      	ldrh	r2, [r3, #10]
 80027e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027e8:	f003 ffc8 	bl	800677c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80027f4:	441a      	add	r2, r3
 80027f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002802:	441a      	add	r2, r3
 8002804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002806:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <PCD_EP_ISR_Handler+0x4fe>
 8002810:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	429a      	cmp	r2, r3
 800281a:	d206      	bcs.n	800282a <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800281c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f007 fbc6 	bl	8009fb4 <HAL_PCD_DataOutStageCallback>
 8002828:	e005      	b.n	8002836 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002830:	4618      	mov	r0, r3
 8002832:	f002 fa8d 	bl	8004d50 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002836:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8121 	beq.w	8002a86 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002844:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	3310      	adds	r3, #16
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	441a      	add	r2, r3
 8002884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002890:	b29b      	uxth	r3, r3
 8002892:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002896:	78db      	ldrb	r3, [r3, #3]
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 80a2 	bne.w	80029e2 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80028a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a6:	7b1b      	ldrb	r3, [r3, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8093 	beq.w	80029d4 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d046      	beq.n	8002948 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d126      	bne.n	8002910 <PCD_EP_ISR_Handler+0x5f2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	4413      	add	r3, r2
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	4413      	add	r3, r2
 80028e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002908:	b29a      	uxth	r2, r3
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	e061      	b.n	80029d4 <PCD_EP_ISR_Handler+0x6b6>
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d15d      	bne.n	80029d4 <PCD_EP_ISR_Handler+0x6b6>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	4413      	add	r3, r2
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	00da      	lsls	r2, r3, #3
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	4413      	add	r3, r2
 800293a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2200      	movs	r2, #0
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e045      	b.n	80029d4 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d126      	bne.n	80029a4 <PCD_EP_ISR_Handler+0x686>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002964:	b29b      	uxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	4413      	add	r3, r2
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00da      	lsls	r2, r3, #3
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	4413      	add	r3, r2
 8002978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002988:	b29a      	uxth	r2, r3
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299c:	b29a      	uxth	r2, r3
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	e017      	b.n	80029d4 <PCD_EP_ISR_Handler+0x6b6>
 80029a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a6:	785b      	ldrb	r3, [r3, #1]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d113      	bne.n	80029d4 <PCD_EP_ISR_Handler+0x6b6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ba:	4413      	add	r3, r2
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	00da      	lsls	r2, r3, #3
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	4413      	add	r3, r2
 80029c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	2200      	movs	r2, #0
 80029d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f007 fb05 	bl	8009fea <HAL_PCD_DataInStageCallback>
 80029e0:	e051      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80029e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d144      	bne.n	8002a78 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d907      	bls.n	8002a32 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8002a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a2a:	1ad2      	subs	r2, r2, r3
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	e002      	b.n	8002a38 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d106      	bne.n	8002a4e <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f007 facf 	bl	8009fea <HAL_PCD_DataInStageCallback>
 8002a4c:	e01b      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a56:	441a      	add	r2, r3
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a64:	441a      	add	r2, r3
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 f96d 	bl	8004d50 <USB_EPStartXfer>
 8002a76:	e006      	b.n	8002a86 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f917 	bl	8002cb4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f6ff ac48 	blt.w	8002328 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3758      	adds	r7, #88	; 0x58
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b088      	sub	sp, #32
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d07c      	beq.n	8002bb4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ade:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	8b7b      	ldrh	r3, [r7, #26]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d306      	bcc.n	8002af8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	8b7b      	ldrh	r3, [r7, #26]
 8002af0:	1ad2      	subs	r2, r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	619a      	str	r2, [r3, #24]
 8002af6:	e002      	b.n	8002afe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d123      	bne.n	8002b4e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b20:	833b      	strh	r3, [r7, #24]
 8002b22:	8b3b      	ldrh	r3, [r7, #24]
 8002b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b28:	833b      	strh	r3, [r7, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	441a      	add	r2, r3
 8002b38:	8b3b      	ldrh	r3, [r7, #24]
 8002b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01f      	beq.n	8002b98 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	82fb      	strh	r3, [r7, #22]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	8afb      	ldrh	r3, [r7, #22]
 8002b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b98:	8b7b      	ldrh	r3, [r7, #26]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8085 	beq.w	8002caa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6959      	ldr	r1, [r3, #20]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	891a      	ldrh	r2, [r3, #8]
 8002bac:	8b7b      	ldrh	r3, [r7, #26]
 8002bae:	f003 fde5 	bl	800677c <USB_ReadPMA>
 8002bb2:	e07a      	b.n	8002caa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	8b7b      	ldrh	r3, [r7, #26]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d306      	bcc.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
 8002bea:	1ad2      	subs	r2, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	619a      	str	r2, [r3, #24]
 8002bf0:	e002      	b.n	8002bf8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d123      	bne.n	8002c48 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	83fb      	strh	r3, [r7, #30]
 8002c1c:	8bfb      	ldrh	r3, [r7, #30]
 8002c1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c22:	83fb      	strh	r3, [r7, #30]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	8bfb      	ldrh	r3, [r7, #30]
 8002c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11f      	bne.n	8002c92 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	83bb      	strh	r3, [r7, #28]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	8bbb      	ldrh	r3, [r7, #28]
 8002c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c92:	8b7b      	ldrh	r3, [r7, #26]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6959      	ldr	r1, [r3, #20]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	895a      	ldrh	r2, [r3, #10]
 8002ca4:	8b7b      	ldrh	r3, [r7, #26]
 8002ca6:	f003 fd69 	bl	800677c <USB_ReadPMA>
    }
  }

  return count;
 8002caa:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b0a4      	sub	sp, #144	; 0x90
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 81db 	beq.w	8003084 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d907      	bls.n	8002d12 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d0a:	1ad2      	subs	r2, r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	619a      	str	r2, [r3, #24]
 8002d10:	e002      	b.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 80b9 	bne.w	8002e94 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d126      	bne.n	8002d78 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	4413      	add	r3, r2
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00da      	lsls	r2, r3, #3
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	801a      	strh	r2, [r3, #0]
 8002d76:	e01a      	b.n	8002dae <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	785b      	ldrb	r3, [r3, #1]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d116      	bne.n	8002dae <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	4413      	add	r3, r2
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	00da      	lsls	r2, r3, #3
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	4413      	add	r3, r2
 8002da2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	2200      	movs	r2, #0
 8002dac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d126      	bne.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x156>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00da      	lsls	r2, r3, #3
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	801a      	strh	r2, [r3, #0]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e017      	b.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x186>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d113      	bne.n	8002e3a <HAL_PCD_EP_DB_Transmit+0x186>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	4413      	add	r3, r2
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00da      	lsls	r2, r3, #3
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2200      	movs	r2, #0
 8002e38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f007 f8d2 	bl	8009fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 82fa 	beq.w	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6c:	82fb      	strh	r3, [r7, #22]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	8afb      	ldrh	r3, [r7, #22]
 8002e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8013      	strh	r3, [r2, #0]
 8002e92:	e2d8      	b.n	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d021      	beq.n	8002ee2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	f040 82ac 	bne.w	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f04:	441a      	add	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d30b      	bcc.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6a1a      	ldr	r2, [r3, #32]
 8002f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	621a      	str	r2, [r3, #32]
 8002f2c:	e017      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8002f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002f3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f46:	e00a      	b.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	785b      	ldrb	r3, [r3, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d165      	bne.n	8003032 <HAL_PCD_EP_DB_Transmit+0x37e>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7a:	4413      	add	r3, r2
 8002f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	00da      	lsls	r2, r3, #3
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	4413      	add	r3, r2
 8002f88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	801a      	strh	r2, [r3, #0]
 8002f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8002fa4:	d91d      	bls.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	801a      	strh	r2, [r3, #0]
 8002fe0:	e044      	b.n	800306c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10a      	bne.n	8003000 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	e035      	b.n	800306c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
 8003008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_PCD_EP_DB_Transmit+0x366>
 8003014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003016:	3301      	adds	r3, #1
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29a      	uxth	r2, r3
 8003020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003022:	b29b      	uxth	r3, r3
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	b29b      	uxth	r3, r3
 8003028:	4313      	orrs	r3, r2
 800302a:	b29a      	uxth	r2, r3
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	801a      	strh	r2, [r3, #0]
 8003030:	e01c      	b.n	800306c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d118      	bne.n	800306c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	4413      	add	r3, r2
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	00da      	lsls	r2, r3, #3
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	4413      	add	r3, r2
 800305c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003060:	643b      	str	r3, [r7, #64]	; 0x40
 8003062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003066:	b29a      	uxth	r2, r3
 8003068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800306a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6959      	ldr	r1, [r3, #20]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	891a      	ldrh	r2, [r3, #8]
 8003078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307c:	b29b      	uxth	r3, r3
 800307e:	f003 fb3b 	bl	80066f8 <USB_WritePMA>
 8003082:	e1e0      	b.n	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	4413      	add	r3, r2
 800309e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d307      	bcc.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	619a      	str	r2, [r3, #24]
 80030c6:	e002      	b.n	80030ce <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80c0 	bne.w	8003258 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d126      	bne.n	800312e <HAL_PCD_EP_DB_Transmit+0x47a>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030f4:	4413      	add	r3, r2
 80030f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	00da      	lsls	r2, r3, #3
 80030fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003100:	4413      	add	r3, r2
 8003102:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003106:	67bb      	str	r3, [r7, #120]	; 0x78
 8003108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003112:	b29a      	uxth	r2, r3
 8003114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003126:	b29a      	uxth	r2, r3
 8003128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800312a:	801a      	strh	r2, [r3, #0]
 800312c:	e01a      	b.n	8003164 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d116      	bne.n	8003164 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	667b      	str	r3, [r7, #100]	; 0x64
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800314a:	4413      	add	r3, r2
 800314c:	667b      	str	r3, [r7, #100]	; 0x64
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003156:	4413      	add	r3, r2
 8003158:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800315c:	663b      	str	r3, [r7, #96]	; 0x60
 800315e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003160:	2200      	movs	r2, #0
 8003162:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	677b      	str	r3, [r7, #116]	; 0x74
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d12b      	bne.n	80031ca <HAL_PCD_EP_DB_Transmit+0x516>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003186:	4413      	add	r3, r2
 8003188:	66fb      	str	r3, [r7, #108]	; 0x6c
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	00da      	lsls	r2, r3, #3
 8003190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003192:	4413      	add	r3, r2
 8003194:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800319c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031c6:	801a      	strh	r2, [r3, #0]
 80031c8:	e017      	b.n	80031fa <HAL_PCD_EP_DB_Transmit+0x546>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d113      	bne.n	80031fa <HAL_PCD_EP_DB_Transmit+0x546>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031da:	b29b      	uxth	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e0:	4413      	add	r3, r2
 80031e2:	677b      	str	r3, [r7, #116]	; 0x74
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	00da      	lsls	r2, r3, #3
 80031ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ec:	4413      	add	r3, r2
 80031ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031f2:	673b      	str	r3, [r7, #112]	; 0x70
 80031f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031f6:	2200      	movs	r2, #0
 80031f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4619      	mov	r1, r3
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f006 fef2 	bl	8009fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320c:	2b00      	cmp	r3, #0
 800320e:	f040 811a 	bne.w	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800324e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003252:	b29b      	uxth	r3, r3
 8003254:	8013      	strh	r3, [r2, #0]
 8003256:	e0f6      	b.n	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d121      	bne.n	80032a6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800329a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 80ca 	bne.w	8003446 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032ba:	441a      	add	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032c8:	441a      	add	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d30b      	bcc.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ea:	1ad2      	subs	r2, r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	621a      	str	r2, [r3, #32]
 80032f0:	e017      	b.n	8003322 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80032fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800330a:	e00a      	b.n	8003322 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	657b      	str	r3, [r7, #84]	; 0x54
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d165      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x748>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800333e:	b29b      	uxth	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	4413      	add	r3, r2
 8003346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	00da      	lsls	r2, r3, #3
 800334e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003350:	4413      	add	r3, r2
 8003352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003356:	65bb      	str	r3, [r7, #88]	; 0x58
 8003358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003362:	b29a      	uxth	r2, r3
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336c:	2b3e      	cmp	r3, #62	; 0x3e
 800336e:	d91d      	bls.n	80033ac <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
 8003378:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003384:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003386:	3b01      	subs	r3, #1
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
 800338a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29a      	uxth	r2, r3
 8003390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003392:	b29b      	uxth	r3, r3
 8003394:	029b      	lsls	r3, r3, #10
 8003396:	b29b      	uxth	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	b29b      	uxth	r3, r3
 800339c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e041      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_PCD_EP_DB_Transmit+0x716>
 80033b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	e032      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80033d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_PCD_EP_DB_Transmit+0x730>
 80033de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e0:	3301      	adds	r3, #1
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	029b      	lsls	r3, r3, #10
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	e019      	b.n	8003430 <HAL_PCD_EP_DB_Transmit+0x77c>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800340c:	b29b      	uxth	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003412:	4413      	add	r3, r2
 8003414:	657b      	str	r3, [r7, #84]	; 0x54
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	00da      	lsls	r2, r3, #3
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341e:	4413      	add	r3, r2
 8003420:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003424:	653b      	str	r3, [r7, #80]	; 0x50
 8003426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800342a:	b29a      	uxth	r2, r3
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6959      	ldr	r1, [r3, #20]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	895a      	ldrh	r2, [r3, #10]
 800343c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003440:	b29b      	uxth	r3, r3
 8003442:	f003 f959 	bl	80066f8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003460:	82bb      	strh	r3, [r7, #20]
 8003462:	8abb      	ldrh	r3, [r7, #20]
 8003464:	f083 0310 	eor.w	r3, r3, #16
 8003468:	82bb      	strh	r3, [r7, #20]
 800346a:	8abb      	ldrh	r3, [r7, #20]
 800346c:	f083 0320 	eor.w	r3, r3, #32
 8003470:	82bb      	strh	r3, [r7, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	8abb      	ldrh	r3, [r7, #20]
 8003482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003492:	b29b      	uxth	r3, r3
 8003494:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3790      	adds	r7, #144	; 0x90
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d141      	bne.n	8003532 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ae:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d131      	bne.n	8003520 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034bc:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034c2:	4a46      	ldr	r2, [pc, #280]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034cc:	4b43      	ldr	r3, [pc, #268]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034d4:	4a41      	ldr	r2, [pc, #260]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034dc:	4b40      	ldr	r3, [pc, #256]	; (80035e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2232      	movs	r2, #50	; 0x32
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a3f      	ldr	r2, [pc, #252]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	0c9b      	lsrs	r3, r3, #18
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f2:	e002      	b.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003506:	d102      	bne.n	800350e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f2      	bne.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d158      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e057      	b.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003520:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003526:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800352c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003530:	e04d      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003538:	d141      	bne.n	80035be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800353a:	4b28      	ldr	r3, [pc, #160]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d131      	bne.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003548:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800354e:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003558:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003560:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2232      	movs	r2, #50	; 0x32
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	4a1c      	ldr	r2, [pc, #112]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	0c9b      	lsrs	r3, r3, #18
 800357a:	3301      	adds	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800357e:	e002      	b.n	8003586 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d102      	bne.n	800359a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f2      	bne.n	8003580 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d112      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e011      	b.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035bc:	e007      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035be:	4b07      	ldr	r3, [pc, #28]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40007000 	.word	0x40007000
 80035e0:	20000000 	.word	0x20000000
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e2fe      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003606:	4b97      	ldr	r3, [pc, #604]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	4b94      	ldr	r3, [pc, #592]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x3e>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d002      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05b      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d157      	bne.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e2d9      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x74>
 800364e:	4b85      	ldr	r3, [pc, #532]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a84      	ldr	r2, [pc, #528]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b7f      	ldr	r3, [pc, #508]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7e      	ldr	r2, [pc, #504]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7b      	ldr	r2, [pc, #492]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 8003680:	4b78      	ldr	r3, [pc, #480]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a77      	ldr	r2, [pc, #476]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b75      	ldr	r3, [pc, #468]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a74      	ldr	r2, [pc, #464]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fd fcc4 	bl	800102c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd fcc0 	bl	800102c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e29e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ba:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd fcb0 	bl	800102c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fd fcac 	bl	800102c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e28a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d075      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fe:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003708:	4b56      	ldr	r3, [pc, #344]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	d102      	bne.n	800371e <HAL_RCC_OscConfig+0x136>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d002      	beq.n	8003724 <HAL_RCC_OscConfig+0x13c>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11f      	bne.n	8003764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003724:	4b4f      	ldr	r3, [pc, #316]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x154>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e25d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	4946      	ldr	r1, [pc, #280]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003750:	4b45      	ldr	r3, [pc, #276]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fc1d 	bl	8000f94 <HAL_InitTick>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d043      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e249      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376c:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3c      	ldr	r2, [pc, #240]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fc58 	bl	800102c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fd fc54 	bl	800102c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e232      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	061b      	lsls	r3, r3, #24
 80037ac:	492d      	ldr	r1, [pc, #180]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e01a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fc34 	bl	800102c <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c8:	f7fd fc30 	bl	800102c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e20e      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1e0>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d041      	beq.n	800387a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01c      	beq.n	8003838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fd fc0d 	bl	800102c <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fd fc09 	bl	800102c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1e7      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ef      	beq.n	8003816 <HAL_RCC_OscConfig+0x22e>
 8003836:	e020      	b.n	800387a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_OscConfig+0x27c>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fbf0 	bl	800102c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800384e:	e00d      	b.n	800386c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003850:	f7fd fbec 	bl	800102c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d906      	bls.n	800386c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1ca      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800386c:	4b8c      	ldr	r3, [pc, #560]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ea      	bne.n	8003850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80a6 	beq.w	80039d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388c:	4b84      	ldr	r3, [pc, #528]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x2b4>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x2b6>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	4b7f      	ldr	r3, [pc, #508]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a7e      	ldr	r2, [pc, #504]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80038a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
 80038ae:	4b7c      	ldr	r3, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038ba:	2301      	movs	r3, #1
 80038bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038be:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d118      	bne.n	80038fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ca:	4b76      	ldr	r3, [pc, #472]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a75      	ldr	r2, [pc, #468]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d6:	f7fd fba9 	bl	800102c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fd fba5 	bl	800102c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e183      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	4b6c      	ldr	r3, [pc, #432]	; (8003aa4 <HAL_RCC_OscConfig+0x4bc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_RCC_OscConfig+0x32e>
 8003904:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	4a65      	ldr	r2, [pc, #404]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003914:	e024      	b.n	8003960 <HAL_RCC_OscConfig+0x378>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d110      	bne.n	8003940 <HAL_RCC_OscConfig+0x358>
 800391e:	4b60      	ldr	r3, [pc, #384]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003924:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	4a5a      	ldr	r2, [pc, #360]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393e:	e00f      	b.n	8003960 <HAL_RCC_OscConfig+0x378>
 8003940:	4b57      	ldr	r3, [pc, #348]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a56      	ldr	r2, [pc, #344]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d016      	beq.n	8003996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fd fb60 	bl	800102c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd fb5c 	bl	800102c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e138      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003986:	4b46      	ldr	r3, [pc, #280]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ed      	beq.n	8003970 <HAL_RCC_OscConfig+0x388>
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fd fb49 	bl	800102c <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd fb45 	bl	800102c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e121      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b4:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ed      	bne.n	800399e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0320 	and.w	r3, r3, #32
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d03c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ee:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fd fb18 	bl	800102c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a00:	f7fd fb14 	bl	800102c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e0f2      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <HAL_RCC_OscConfig+0x418>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a32:	f7fd fafb 	bl	800102c <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3a:	f7fd faf7 	bl	800102c <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0d5      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ef      	bne.n	8003a3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 80c9 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a64:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	f000 8083 	beq.w	8003b78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d15e      	bne.n	8003b38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fd fad1 	bl	800102c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	e00c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd facd 	bl	800102c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d905      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e0ab      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ec      	bne.n	8003a8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <HAL_RCC_OscConfig+0x61c>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6a11      	ldr	r1, [r2, #32]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ace:	0212      	lsls	r2, r2, #8
 8003ad0:	4311      	orrs	r1, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ad6:	0852      	lsrs	r2, r2, #1
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0552      	lsls	r2, r2, #21
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ae2:	0852      	lsrs	r2, r2, #1
 8003ae4:	3a01      	subs	r2, #1
 8003ae6:	0652      	lsls	r2, r2, #25
 8003ae8:	4311      	orrs	r1, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aee:	06d2      	lsls	r2, r2, #27
 8003af0:	430a      	orrs	r2, r1
 8003af2:	4943      	ldr	r1, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af8:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a40      	ldr	r2, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fa8c 	bl	800102c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd fa88 	bl	800102c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e066      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x530>
 8003b36:	e05e      	b.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd fa72 	bl	800102c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd fa6e 	bl	800102c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e04c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b6a:	4b25      	ldr	r3, [pc, #148]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	4924      	ldr	r1, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_OscConfig+0x620>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60cb      	str	r3, [r1, #12]
 8003b76:	e03e      	b.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e039      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_OscConfig+0x618>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d12c      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d123      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d11b      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d113      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	019f800c 	.word	0x019f800c
 8003c08:	feeefffc 	.word	0xfeeefffc

08003c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e11e      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d910      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 020f 	bic.w	r2, r3, #15
 8003c3a:	498c      	ldr	r1, [pc, #560]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b8a      	ldr	r3, [pc, #552]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e106      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d073      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d129      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c68:	4b81      	ldr	r3, [pc, #516]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0f4      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c78:	f000 f966 	bl	8003f48 <RCC_GetSysClockFreqFromPLLSource>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4a7c      	ldr	r2, [pc, #496]	; (8003e74 <HAL_RCC_ClockConfig+0x268>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d93f      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c86:	4b7a      	ldr	r3, [pc, #488]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d033      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d12f      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ca6:	4b72      	ldr	r3, [pc, #456]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cae:	4a70      	ldr	r2, [pc, #448]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e024      	b.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0c6      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0be      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ce4:	f000 f8ce 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003ce8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4a61      	ldr	r2, [pc, #388]	; (8003e74 <HAL_RCC_ClockConfig+0x268>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d909      	bls.n	8003d06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cf2:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cfa:	4a5d      	ldr	r2, [pc, #372]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b5a      	ldr	r3, [pc, #360]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4957      	ldr	r1, [pc, #348]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d18:	f7fd f988 	bl	800102c <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fd f984 	bl	800102c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e095      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d60:	4b43      	ldr	r3, [pc, #268]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d78:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d80:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d88:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4936      	ldr	r1, [pc, #216]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d105      	bne.n	8003dae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003da2:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	4a32      	ldr	r2, [pc, #200]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d21d      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 020f 	bic.w	r2, r3, #15
 8003dc4:	4929      	ldr	r1, [pc, #164]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dcc:	f7fd f92e 	bl	800102c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fd f92a 	bl	800102c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e03b      	b.n	8003e62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_RCC_ClockConfig+0x260>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d1ed      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4917      	ldr	r1, [pc, #92]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490f      	ldr	r1, [pc, #60]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e36:	f000 f825 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	490c      	ldr	r1, [pc, #48]	; (8003e78 <HAL_RCC_ClockConfig+0x26c>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <HAL_RCC_ClockConfig+0x270>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_RCC_ClockConfig+0x274>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd f89a 	bl	8000f94 <HAL_InitTick>
 8003e60:	4603      	mov	r3, r0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	40021000 	.word	0x40021000
 8003e74:	04c4b400 	.word	0x04c4b400
 8003e78:	0800ae00 	.word	0x0800ae00
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	20000004 	.word	0x20000004

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d102      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e96:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	e047      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d102      	bne.n	8003eae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	e03e      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003eae:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d136      	bne.n	8003f28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	3301      	adds	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed8:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee2:	68d2      	ldr	r2, [r2, #12]
 8003ee4:	0a12      	lsrs	r2, r2, #8
 8003ee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	617b      	str	r3, [r7, #20]
      break;
 8003ef0:	e00c      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efc:	68d2      	ldr	r2, [r2, #12]
 8003efe:	0a12      	lsrs	r2, r2, #8
 8003f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
      break;
 8003f0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	0e5b      	lsrs	r3, r3, #25
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	3301      	adds	r3, #1
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e001      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f2c:	693b      	ldr	r3, [r7, #16]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	02dc6c00 	.word	0x02dc6c00

08003f48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d10c      	bne.n	8003f86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f76:	68d2      	ldr	r2, [r2, #12]
 8003f78:	0a12      	lsrs	r2, r2, #8
 8003f7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
    break;
 8003f84:	e00c      	b.n	8003fa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f86:	4a12      	ldr	r2, [pc, #72]	; (8003fd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	0a12      	lsrs	r2, r2, #8
 8003f94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    break;
 8003f9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	0e5b      	lsrs	r3, r3, #25
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	3301      	adds	r3, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fba:	687b      	ldr	r3, [r7, #4]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	02dc6c00 	.word	0x02dc6c00
 8003fd0:	00f42400 	.word	0x00f42400

08003fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fdc:	2300      	movs	r3, #0
 8003fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 8098 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff6:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10d      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	4b40      	ldr	r3, [pc, #256]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	4a3f      	ldr	r2, [pc, #252]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400c:	6593      	str	r3, [r2, #88]	; 0x58
 800400e:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401a:	2301      	movs	r3, #1
 800401c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a39      	ldr	r2, [pc, #228]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800402a:	f7fc ffff 	bl	800102c <HAL_GetTick>
 800402e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004030:	e009      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fc fffb 	bl	800102c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d902      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	74fb      	strb	r3, [r7, #19]
        break;
 8004044:	e005      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004046:	4b30      	ldr	r3, [pc, #192]	; (8004108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ef      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d159      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004058:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004062:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01e      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d019      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004074:	4b23      	ldr	r3, [pc, #140]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004090:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fc ffbb 	bl	800102c <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b8:	e00b      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fc ffb7 	bl	800102c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d902      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	74fb      	strb	r3, [r7, #19]
            break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ec      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040fc:	e008      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	74bb      	strb	r3, [r7, #18]
 8004102:	e005      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004110:	7c7b      	ldrb	r3, [r7, #17]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004116:	4ba7      	ldr	r3, [pc, #668]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	4aa6      	ldr	r2, [pc, #664]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800412e:	4ba1      	ldr	r3, [pc, #644]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f023 0203 	bic.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	499d      	ldr	r1, [pc, #628]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004150:	4b98      	ldr	r3, [pc, #608]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 020c 	bic.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4995      	ldr	r1, [pc, #596]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004172:	4b90      	ldr	r3, [pc, #576]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	498c      	ldr	r1, [pc, #560]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004194:	4b87      	ldr	r3, [pc, #540]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	4984      	ldr	r1, [pc, #528]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041b6:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	497b      	ldr	r1, [pc, #492]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d8:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	4973      	ldr	r1, [pc, #460]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fa:	4b6e      	ldr	r3, [pc, #440]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	496a      	ldr	r1, [pc, #424]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800421c:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4962      	ldr	r1, [pc, #392]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423e:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	4959      	ldr	r1, [pc, #356]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004260:	4b54      	ldr	r3, [pc, #336]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004262:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	4951      	ldr	r1, [pc, #324]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	4948      	ldr	r1, [pc, #288]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4940      	ldr	r1, [pc, #256]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a3a      	ldr	r2, [pc, #232]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	4932      	ldr	r1, [pc, #200]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fc:	4b2d      	ldr	r3, [pc, #180]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004306:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4924      	ldr	r1, [pc, #144]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004334:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d019      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4908      	ldr	r1, [pc, #32]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a2:	d109      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a02      	ldr	r2, [pc, #8]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ae:	60d3      	str	r3, [r2, #12]
 80043b0:	e002      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d015      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043c4:	4b29      	ldr	r3, [pc, #164]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	4926      	ldr	r1, [pc, #152]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e2:	d105      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043e4:	4b21      	ldr	r3, [pc, #132]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a20      	ldr	r2, [pc, #128]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d015      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	4918      	ldr	r1, [pc, #96]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d105      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004426:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800443a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	490a      	ldr	r1, [pc, #40]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004452:	d105      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800445a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004460:	7cbb      	ldrb	r3, [r7, #18]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000

08004470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e09d      	b.n	80045be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d108      	bne.n	800449c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004492:	d009      	beq.n	80044a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	61da      	str	r2, [r3, #28]
 800449a:	e005      	b.n	80044a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fbc0 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044e8:	d902      	bls.n	80044f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e002      	b.n	80044f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044fe:	d007      	beq.n	8004510 <HAL_SPI_Init+0xa0>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004508:	d002      	beq.n	8004510 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	ea42 0103 	orr.w	r1, r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	0c1b      	lsrs	r3, r3, #16
 800456c:	f003 0204 	and.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800458c:	ea42 0103 	orr.w	r1, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b09d      	sub	sp, #116	; 0x74
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	78db      	ldrb	r3, [r3, #3]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d81f      	bhi.n	800463a <USB_ActivateEndpoint+0x72>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <USB_ActivateEndpoint+0x38>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004611 	.word	0x08004611
 8004604:	0800462d 	.word	0x0800462d
 8004608:	08004643 	.word	0x08004643
 800460c:	0800461f 	.word	0x0800461f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004610:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004618:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800461c:	e012      	b.n	8004644 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800461e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004622:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004626:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800462a:	e00b      	b.n	8004644 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800462c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004634:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004638:	e004      	b.n	8004644 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004640:	e000      	b.n	8004644 <USB_ActivateEndpoint+0x7c>
      break;
 8004642:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	b21b      	sxth	r3, r3
 8004676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	b21a      	sxth	r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b21b      	sxth	r3, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	b21b      	sxth	r3, r3
 800468a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	441a      	add	r2, r3
 8004698:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	7b1b      	ldrb	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8178 	bne.w	80049aa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8084 	beq.w	80047cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4413      	add	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	00da      	lsls	r2, r3, #3
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	88db      	ldrh	r3, [r3, #6]
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	827b      	strh	r3, [r7, #18]
 8004706:	8a7b      	ldrh	r3, [r7, #18]
 8004708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <USB_ActivateEndpoint+0x180>
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	823b      	strh	r3, [r7, #16]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	8a3b      	ldrh	r3, [r7, #16]
 8004734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800473c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004740:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004744:	b29b      	uxth	r3, r3
 8004746:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	78db      	ldrb	r3, [r3, #3]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d020      	beq.n	8004792 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004766:	81bb      	strh	r3, [r7, #12]
 8004768:	89bb      	ldrh	r3, [r7, #12]
 800476a:	f083 0320 	eor.w	r3, r3, #32
 800476e:	81bb      	strh	r3, [r7, #12]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	441a      	add	r2, r3
 800477a:	89bb      	ldrh	r3, [r7, #12]
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
 8004790:	e2d5      	b.n	8004d3e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a8:	81fb      	strh	r3, [r7, #14]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	89fb      	ldrh	r3, [r7, #14]
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]
 80047ca:	e2b8      	b.n	8004d3e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	4413      	add	r3, r2
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	00da      	lsls	r2, r3, #3
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	88db      	ldrh	r3, [r3, #6]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	4413      	add	r3, r2
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	00da      	lsls	r2, r3, #3
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	4413      	add	r3, r2
 800481e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482e:	b29a      	uxth	r2, r3
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b3e      	cmp	r3, #62	; 0x3e
 800483a:	d91d      	bls.n	8004878 <USB_ActivateEndpoint+0x2b0>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	66bb      	str	r3, [r7, #104]	; 0x68
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <USB_ActivateEndpoint+0x28e>
 8004850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004852:	3b01      	subs	r3, #1
 8004854:	66bb      	str	r3, [r7, #104]	; 0x68
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004870:	b29a      	uxth	r2, r3
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e026      	b.n	80048c6 <USB_ActivateEndpoint+0x2fe>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <USB_ActivateEndpoint+0x2ce>
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488e:	b29a      	uxth	r2, r3
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	e017      	b.n	80048c6 <USB_ActivateEndpoint+0x2fe>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	66bb      	str	r3, [r7, #104]	; 0x68
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <USB_ActivateEndpoint+0x2e8>
 80048aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ac:	3301      	adds	r3, #1
 80048ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4313      	orrs	r3, r2
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80048d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01b      	beq.n	8004916 <USB_ActivateEndpoint+0x34e>
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	843b      	strh	r3, [r7, #32]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	8c3b      	ldrh	r3, [r7, #32]
 8004902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	b29b      	uxth	r3, r3
 8004914:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d124      	bne.n	8004968 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	83bb      	strh	r3, [r7, #28]
 8004936:	8bbb      	ldrh	r3, [r7, #28]
 8004938:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800493c:	83bb      	strh	r3, [r7, #28]
 800493e:	8bbb      	ldrh	r3, [r7, #28]
 8004940:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004944:	83bb      	strh	r3, [r7, #28]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	8bbb      	ldrh	r3, [r7, #28]
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
 8004966:	e1ea      	b.n	8004d3e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	83fb      	strh	r3, [r7, #30]
 8004980:	8bfb      	ldrh	r3, [r7, #30]
 8004982:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004986:	83fb      	strh	r3, [r7, #30]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	8bfb      	ldrh	r3, [r7, #30]
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
 80049a8:	e1c9      	b.n	8004d3e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	78db      	ldrb	r3, [r3, #3]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d11e      	bne.n	80049f0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
 80049ee:	e01d      	b.n	8004a2c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	441a      	add	r2, r3
 8004a14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3c:	4413      	add	r3, r2
 8004a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	00da      	lsls	r2, r3, #3
 8004a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	891b      	ldrh	r3, [r3, #8]
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	657b      	str	r3, [r7, #84]	; 0x54
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a70:	4413      	add	r3, r2
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	00da      	lsls	r2, r3, #3
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a82:	653b      	str	r3, [r7, #80]	; 0x50
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	895b      	ldrh	r3, [r3, #10]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f040 8093 	bne.w	8004bc4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004aae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d01b      	beq.n	8004af2 <USB_ActivateEndpoint+0x52a>
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	441a      	add	r2, r3
 8004adc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01b      	beq.n	8004b42 <USB_ActivateEndpoint+0x57a>
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b60:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b68:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	441a      	add	r2, r3
 8004bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	8013      	strh	r3, [r2, #0]
 8004bc2:	e0bc      	b.n	8004d3e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004bd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01d      	beq.n	8004c1c <USB_ActivateEndpoint+0x654>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	441a      	add	r2, r3
 8004c04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01d      	beq.n	8004c74 <USB_ActivateEndpoint+0x6ac>
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d024      	beq.n	8004cc6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c9a:	f083 0320 	eor.w	r3, r3, #32
 8004c9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]
 8004cc4:	e01d      	b.n	8004d02 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	441a      	add	r2, r3
 8004d26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3774      	adds	r7, #116	; 0x74
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop

08004d50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b0c2      	sub	sp, #264	; 0x108
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d5e:	6018      	str	r0, [r3, #0]
 8004d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d68:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	f040 86b7 	bne.w	8005aea <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004da8:	e007      	b.n	8004dba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	7b1b      	ldrb	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d13a      	bne.n	8004e40 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6959      	ldr	r1, [r3, #20]
 8004dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	88da      	ldrh	r2, [r3, #6]
 8004de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004dec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004df0:	6800      	ldr	r0, [r0, #0]
 8004df2:	f001 fc81 	bl	80066f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	00da      	lsls	r2, r3, #3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	f000 be1f 	b.w	8005a7e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	f040 8462 	bne.w	8005716 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	f240 83df 	bls.w	800562e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004edc:	1ad2      	subs	r2, r2, r3
 8004ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 81c7 	beq.w	80052a0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d177      	bne.n	800501e <USB_EPStartXfer+0x2ce>
 8004f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	4413      	add	r3, r2
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	00da      	lsls	r2, r3, #3
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	4413      	add	r3, r2
 8004f64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f80:	d921      	bls.n	8004fc6 <USB_EPStartXfer+0x276>
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <USB_EPStartXfer+0x252>
 8004f98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e050      	b.n	8005068 <USB_EPStartXfer+0x318>
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <USB_EPStartXfer+0x294>
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	e041      	b.n	8005068 <USB_EPStartXfer+0x318>
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <USB_EPStartXfer+0x2b4>
 8004ffa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ffe:	3301      	adds	r3, #1
 8005000:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
 800500a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800500e:	b29b      	uxth	r3, r3
 8005010:	029b      	lsls	r3, r3, #10
 8005012:	b29b      	uxth	r3, r3
 8005014:	4313      	orrs	r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e024      	b.n	8005068 <USB_EPStartXfer+0x318>
 800501e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d11c      	bne.n	8005068 <USB_EPStartXfer+0x318>
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503c:	b29b      	uxth	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	4413      	add	r3, r2
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
 8005046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800504a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	00da      	lsls	r2, r3, #3
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	4413      	add	r3, r2
 8005058:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005062:	b29a      	uxth	r2, r3
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	895b      	ldrh	r3, [r3, #10]
 8005074:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6959      	ldr	r1, [r3, #20]
 8005084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005088:	b29b      	uxth	r3, r3
 800508a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800508e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005092:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005096:	6800      	ldr	r0, [r0, #0]
 8005098:	f001 fb2e 	bl	80066f8 <USB_WritePMA>
            ep->xfer_buff += len;
 800509c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ac:	441a      	add	r2, r3
 80050ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90f      	bls.n	80050f6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80050d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	621a      	str	r2, [r3, #32]
 80050f4:	e00e      	b.n	8005114 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2200      	movs	r2, #0
 8005112:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	785b      	ldrb	r3, [r3, #1]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d177      	bne.n	8005214 <USB_EPStartXfer+0x4c4>
 8005124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005134:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800513e:	b29b      	uxth	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	4413      	add	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	00da      	lsls	r2, r3, #3
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516a:	b29a      	uxth	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005174:	2b3e      	cmp	r3, #62	; 0x3e
 8005176:	d921      	bls.n	80051bc <USB_EPStartXfer+0x46c>
 8005178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <USB_EPStartXfer+0x448>
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005192:	3b01      	subs	r3, #1
 8005194:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	029b      	lsls	r3, r3, #10
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4313      	orrs	r3, r2
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e056      	b.n	800526a <USB_EPStartXfer+0x51a>
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <USB_EPStartXfer+0x48a>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e047      	b.n	800526a <USB_EPStartXfer+0x51a>
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <USB_EPStartXfer+0x4aa>
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f4:	3301      	adds	r3, #1
 80051f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005204:	b29b      	uxth	r3, r3
 8005206:	029b      	lsls	r3, r3, #10
 8005208:	b29b      	uxth	r3, r3
 800520a:	4313      	orrs	r3, r2
 800520c:	b29a      	uxth	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e02a      	b.n	800526a <USB_EPStartXfer+0x51a>
 8005214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d122      	bne.n	800526a <USB_EPStartXfer+0x51a>
 8005224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	4413      	add	r3, r2
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	00da      	lsls	r2, r3, #3
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	4413      	add	r3, r2
 800525a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	b29a      	uxth	r2, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	891b      	ldrh	r3, [r3, #8]
 8005276:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800527a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6959      	ldr	r1, [r3, #20]
 8005286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528a:	b29b      	uxth	r3, r3
 800528c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005290:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005294:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005298:	6800      	ldr	r0, [r0, #0]
 800529a:	f001 fa2d 	bl	80066f8 <USB_WritePMA>
 800529e:	e3ee      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d177      	bne.n	80053a0 <USB_EPStartXfer+0x650>
 80052b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80052bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d0:	4413      	add	r3, r2
 80052d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00da      	lsls	r2, r3, #3
 80052e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052ea:	647b      	str	r3, [r7, #68]	; 0x44
 80052ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005300:	2b3e      	cmp	r3, #62	; 0x3e
 8005302:	d921      	bls.n	8005348 <USB_EPStartXfer+0x5f8>
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800530e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <USB_EPStartXfer+0x5d4>
 800531a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800531e:	3b01      	subs	r3, #1
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29a      	uxth	r2, r3
 800532a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800532e:	b29b      	uxth	r3, r3
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	b29b      	uxth	r3, r3
 8005334:	4313      	orrs	r3, r2
 8005336:	b29b      	uxth	r3, r3
 8005338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005340:	b29a      	uxth	r2, r3
 8005342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e056      	b.n	80053f6 <USB_EPStartXfer+0x6a6>
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <USB_EPStartXfer+0x616>
 8005350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535e:	b29a      	uxth	r2, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e047      	b.n	80053f6 <USB_EPStartXfer+0x6a6>
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <USB_EPStartXfer+0x636>
 800537c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005380:	3301      	adds	r3, #1
 8005382:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29a      	uxth	r2, r3
 800538c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005390:	b29b      	uxth	r3, r3
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	b29b      	uxth	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b29a      	uxth	r2, r3
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e02a      	b.n	80053f6 <USB_EPStartXfer+0x6a6>
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d122      	bne.n	80053f6 <USB_EPStartXfer+0x6a6>
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	653b      	str	r3, [r7, #80]	; 0x50
 80053bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d0:	4413      	add	r3, r2
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
 80053d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00da      	lsls	r2, r3, #3
 80053e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	891b      	ldrh	r3, [r3, #8]
 8005402:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6959      	ldr	r1, [r3, #20]
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005416:	b29b      	uxth	r3, r3
 8005418:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800541c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005420:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005424:	6800      	ldr	r0, [r0, #0]
 8005426:	f001 f967 	bl	80066f8 <USB_WritePMA>
            ep->xfer_buff += len;
 800542a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	441a      	add	r2, r3
 800543c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	429a      	cmp	r2, r3
 8005462:	d90f      	bls.n	8005484 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005474:	1ad2      	subs	r2, r2, r3
 8005476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	621a      	str	r2, [r3, #32]
 8005482:	e00e      	b.n	80054a2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	643b      	str	r3, [r7, #64]	; 0x40
 80054ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d177      	bne.n	80055ae <USB_EPStartXfer+0x85e>
 80054be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	4413      	add	r3, r2
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	00da      	lsls	r2, r3, #3
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005504:	b29a      	uxth	r2, r3
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550e:	2b3e      	cmp	r3, #62	; 0x3e
 8005510:	d921      	bls.n	8005556 <USB_EPStartXfer+0x806>
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800551c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <USB_EPStartXfer+0x7e2>
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552c:	3b01      	subs	r3, #1
 800552e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29b      	uxth	r3, r3
 8005542:	4313      	orrs	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e050      	b.n	80055f8 <USB_EPStartXfer+0x8a8>
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <USB_EPStartXfer+0x824>
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29b      	uxth	r3, r3
 8005564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800556c:	b29a      	uxth	r2, r3
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e041      	b.n	80055f8 <USB_EPStartXfer+0x8a8>
 8005574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800557e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <USB_EPStartXfer+0x844>
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	3301      	adds	r3, #1
 8005590:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29a      	uxth	r2, r3
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559e:	b29b      	uxth	r3, r3
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4313      	orrs	r3, r2
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e024      	b.n	80055f8 <USB_EPStartXfer+0x8a8>
 80055ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d11c      	bne.n	80055f8 <USB_EPStartXfer+0x8a8>
 80055be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d2:	4413      	add	r3, r2
 80055d4:	643b      	str	r3, [r7, #64]	; 0x40
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	00da      	lsls	r2, r3, #3
 80055e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	895b      	ldrh	r3, [r3, #10]
 8005604:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6959      	ldr	r1, [r3, #20]
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005618:	b29b      	uxth	r3, r3
 800561a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800561e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005622:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005626:	6800      	ldr	r0, [r0, #0]
 8005628:	f001 f866 	bl	80066f8 <USB_WritePMA>
 800562c:	e227      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800562e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800569a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ba:	4413      	add	r3, r2
 80056bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	00da      	lsls	r2, r3, #3
 80056cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	891b      	ldrh	r3, [r3, #8]
 80056ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6959      	ldr	r1, [r3, #20]
 80056fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005700:	b29b      	uxth	r3, r3
 8005702:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005706:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800570a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800570e:	6800      	ldr	r0, [r0, #0]
 8005710:	f000 fff2 	bl	80066f8 <USB_WritePMA>
 8005714:	e1b3      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005726:	1ad2      	subs	r2, r2, r3
 8005728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80c6 	beq.w	80058e8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800575c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	673b      	str	r3, [r7, #112]	; 0x70
 8005768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d177      	bne.n	8005868 <USB_EPStartXfer+0xb18>
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	66bb      	str	r3, [r7, #104]	; 0x68
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005798:	4413      	add	r3, r2
 800579a:	66bb      	str	r3, [r7, #104]	; 0x68
 800579c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	00da      	lsls	r2, r3, #3
 80057aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057b2:	667b      	str	r3, [r7, #100]	; 0x64
 80057b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c8:	2b3e      	cmp	r3, #62	; 0x3e
 80057ca:	d921      	bls.n	8005810 <USB_EPStartXfer+0xac0>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_EPStartXfer+0xa9c>
 80057e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e050      	b.n	80058b2 <USB_EPStartXfer+0xb62>
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <USB_EPStartXfer+0xade>
 8005818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e041      	b.n	80058b2 <USB_EPStartXfer+0xb62>
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <USB_EPStartXfer+0xafe>
 8005844:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800584e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	b29a      	uxth	r2, r3
 8005862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e024      	b.n	80058b2 <USB_EPStartXfer+0xb62>
 8005868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d11c      	bne.n	80058b2 <USB_EPStartXfer+0xb62>
 8005878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800588c:	4413      	add	r3, r2
 800588e:	673b      	str	r3, [r7, #112]	; 0x70
 8005890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	00da      	lsls	r2, r3, #3
 800589e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	895b      	ldrh	r3, [r3, #10]
 80058be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6959      	ldr	r1, [r3, #20]
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058e0:	6800      	ldr	r0, [r0, #0]
 80058e2:	f000 ff09 	bl	80066f8 <USB_WritePMA>
 80058e6:	e0ca      	b.n	8005a7e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d177      	bne.n	80059e8 <USB_EPStartXfer+0xc98>
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005918:	4413      	add	r3, r2
 800591a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800591c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	00da      	lsls	r2, r3, #3
 800592a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800592c:	4413      	add	r3, r2
 800592e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005932:	67bb      	str	r3, [r7, #120]	; 0x78
 8005934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800593e:	b29a      	uxth	r2, r3
 8005940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005948:	2b3e      	cmp	r3, #62	; 0x3e
 800594a:	d921      	bls.n	8005990 <USB_EPStartXfer+0xc40>
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USB_EPStartXfer+0xc1c>
 8005962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005966:	3b01      	subs	r3, #1
 8005968:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800596c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29b      	uxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005988:	b29a      	uxth	r2, r3
 800598a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	e05c      	b.n	8005a4a <USB_EPStartXfer+0xcfa>
 8005990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <USB_EPStartXfer+0xc5e>
 8005998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e04d      	b.n	8005a4a <USB_EPStartXfer+0xcfa>
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USB_EPStartXfer+0xc7e>
 80059c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059c8:	3301      	adds	r3, #1
 80059ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059d8:	b29b      	uxth	r3, r3
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	b29b      	uxth	r3, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e030      	b.n	8005a4a <USB_EPStartXfer+0xcfa>
 80059e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d128      	bne.n	8005a4a <USB_EPStartXfer+0xcfa>
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	891b      	ldrh	r3, [r3, #8]
 8005a56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6959      	ldr	r1, [r3, #20]
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a78:	6800      	ldr	r0, [r0, #0]
 8005a7a:	f000 fe3d 	bl	80066f8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	897b      	ldrh	r3, [r7, #10]
 8005aa8:	f083 0310 	eor.w	r3, r3, #16
 8005aac:	817b      	strh	r3, [r7, #10]
 8005aae:	897b      	ldrh	r3, [r7, #10]
 8005ab0:	f083 0320 	eor.w	r3, r3, #32
 8005ab4:	817b      	strh	r3, [r7, #10]
 8005ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	441a      	add	r2, r3
 8005ad0:	897b      	ldrh	r3, [r7, #10]
 8005ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]
 8005ae6:	f000 bcde 	b.w	80064a6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	7b1b      	ldrb	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f040 80bb 	bne.w	8005c72 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d917      	bls.n	8005b48 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b38:	1ad2      	subs	r2, r2, r3
 8005b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	619a      	str	r2, [r3, #24]
 8005b46:	e00e      	b.n	8005b66 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	00da      	lsls	r2, r3, #3
 8005b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bc6:	d924      	bls.n	8005c12 <USB_EPStartXfer+0xec2>
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <USB_EPStartXfer+0xe98>
 8005bde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005be2:	3b01      	subs	r3, #1
 8005be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	f000 bc10 	b.w	8006432 <USB_EPStartXfer+0x16e2>
 8005c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10c      	bne.n	8005c34 <USB_EPStartXfer+0xee4>
 8005c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e3fe      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d004      	beq.n	8005c54 <USB_EPStartXfer+0xf04>
 8005c4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4313      	orrs	r3, r2
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e3df      	b.n	8006432 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	78db      	ldrb	r3, [r3, #3]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	f040 8218 	bne.w	80060b4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 809d 	bne.w	8005dd0 <USB_EPStartXfer+0x1080>
 8005c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cba:	4413      	add	r3, r2
 8005cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	00da      	lsls	r2, r3, #3
 8005cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfe:	d92b      	bls.n	8005d58 <USB_EPStartXfer+0x1008>
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <USB_EPStartXfer+0xfe0>
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	029b      	lsls	r3, r3, #10
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e070      	b.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10c      	bne.n	8005d82 <USB_EPStartXfer+0x1032>
 8005d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e05b      	b.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <USB_EPStartXfer+0x1062>
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	3301      	adds	r3, #1
 8005dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005db2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e034      	b.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d12c      	bne.n	8005e3a <USB_EPStartXfer+0x10ea>
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e04:	4413      	add	r3, r2
 8005e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	00da      	lsls	r2, r3, #3
 8005e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f040 809d 	bne.w	8005f94 <USB_EPStartXfer+0x1244>
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e7e:	4413      	add	r3, r2
 8005e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e96:	4413      	add	r3, r2
 8005e98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ec2:	d92b      	bls.n	8005f1c <USB_EPStartXfer+0x11cc>
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <USB_EPStartXfer+0x11a4>
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	e069      	b.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10c      	bne.n	8005f46 <USB_EPStartXfer+0x11f6>
 8005f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e054      	b.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <USB_EPStartXfer+0x1226>
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e02d      	b.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d125      	bne.n	8005ff0 <USB_EPStartXfer+0x12a0>
 8005fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fba:	4413      	add	r3, r2
 8005fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	00da      	lsls	r2, r3, #3
 8005fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fee:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8218 	beq.w	8006432 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006022:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <USB_EPStartXfer+0x12ea>
 800602e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10d      	bne.n	8006056 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800603a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800603e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 81f5 	bne.w	8006432 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006048:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 81ee 	bne.w	8006432 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800605a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800609e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	8013      	strh	r3, [r2, #0]
 80060b2:	e1be      	b.n	8006432 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	78db      	ldrb	r3, [r3, #3]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 81b4 	bne.w	800642e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d917      	bls.n	8006112 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80060e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006102:	1ad2      	subs	r2, r2, r3
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	619a      	str	r2, [r3, #24]
 8006110:	e00e      	b.n	8006130 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2200      	movs	r2, #0
 800612e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8085 	bne.w	800624c <USB_EPStartXfer+0x14fc>
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615e:	b29b      	uxth	r3, r3
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006166:	4413      	add	r3, r2
 8006168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	00da      	lsls	r2, r3, #3
 800617a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800617e:	4413      	add	r3, r2
 8006180:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800619a:	801a      	strh	r2, [r3, #0]
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a0:	2b3e      	cmp	r3, #62	; 0x3e
 80061a2:	d923      	bls.n	80061ec <USB_EPStartXfer+0x149c>
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <USB_EPStartXfer+0x1474>
 80061ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061be:	3b01      	subs	r3, #1
 80061c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	029b      	lsls	r3, r3, #10
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4313      	orrs	r3, r2
 80061d8:	b29b      	uxth	r3, r3
 80061da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	e060      	b.n	80062ae <USB_EPStartXfer+0x155e>
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10c      	bne.n	800620e <USB_EPStartXfer+0x14be>
 80061f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006204:	b29a      	uxth	r2, r3
 8006206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	e04f      	b.n	80062ae <USB_EPStartXfer+0x155e>
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <USB_EPStartXfer+0x14de>
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800622e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29b      	uxth	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e030      	b.n	80062ae <USB_EPStartXfer+0x155e>
 800624c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d128      	bne.n	80062ae <USB_EPStartXfer+0x155e>
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800626a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006280:	4413      	add	r3, r2
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	00da      	lsls	r2, r3, #3
 8006294:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006298:	4413      	add	r3, r2
 800629a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800629e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ac:	801a      	strh	r2, [r3, #0]
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f040 8085 	bne.w	80063d8 <USB_EPStartXfer+0x1688>
 80062ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062f2:	4413      	add	r3, r2
 80062f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00da      	lsls	r2, r3, #3
 8006306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800630a:	4413      	add	r3, r2
 800630c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006320:	b29a      	uxth	r2, r3
 8006322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006326:	801a      	strh	r2, [r3, #0]
 8006328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632c:	2b3e      	cmp	r3, #62	; 0x3e
 800632e:	d923      	bls.n	8006378 <USB_EPStartXfer+0x1628>
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <USB_EPStartXfer+0x1600>
 8006346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800634a:	3b01      	subs	r3, #1
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29a      	uxth	r2, r3
 8006358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800635c:	b29b      	uxth	r3, r3
 800635e:	029b      	lsls	r3, r3, #10
 8006360:	b29b      	uxth	r3, r3
 8006362:	4313      	orrs	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636e:	b29a      	uxth	r2, r3
 8006370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006374:	801a      	strh	r2, [r3, #0]
 8006376:	e05c      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10c      	bne.n	800639a <USB_EPStartXfer+0x164a>
 8006380:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006390:	b29a      	uxth	r2, r3
 8006392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	e04b      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <USB_EPStartXfer+0x166a>
 80063b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b4:	3301      	adds	r3, #1
 80063b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	029b      	lsls	r3, r3, #10
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	e02c      	b.n	8006432 <USB_EPStartXfer+0x16e2>
 80063d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d124      	bne.n	8006432 <USB_EPStartXfer+0x16e2>
 80063e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063fe:	4413      	add	r3, r2
 8006400:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	00da      	lsls	r2, r3, #3
 8006412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006416:	4413      	add	r3, r2
 8006418:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800641c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e001      	b.n	8006432 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e03a      	b.n	80064a8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800645c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006460:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006464:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006468:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800646c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006470:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	441a      	add	r2, r3
 800648e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d020      	beq.n	8006506 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064da:	81bb      	strh	r3, [r7, #12]
 80064dc:	89bb      	ldrh	r3, [r7, #12]
 80064de:	f083 0310 	eor.w	r3, r3, #16
 80064e2:	81bb      	strh	r3, [r7, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	89bb      	ldrh	r3, [r7, #12]
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
 8006504:	e01f      	b.n	8006546 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	81fb      	strh	r3, [r7, #14]
 800651e:	89fb      	ldrh	r3, [r7, #14]
 8006520:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006524:	81fb      	strh	r3, [r7, #14]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	441a      	add	r2, r3
 8006530:	89fb      	ldrh	r3, [r7, #14]
 8006532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800653a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	b29b      	uxth	r3, r3
 8006544:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	7b1b      	ldrb	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 809d 	bne.w	80066a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d04c      	beq.n	800660a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	823b      	strh	r3, [r7, #16]
 800657e:	8a3b      	ldrh	r3, [r7, #16]
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01b      	beq.n	80065c0 <USB_EPClearStall+0x6c>
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	81fb      	strh	r3, [r7, #14]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	441a      	add	r2, r3
 80065aa:	89fb      	ldrh	r3, [r7, #14]
 80065ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d06c      	beq.n	80066a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065de:	81bb      	strh	r3, [r7, #12]
 80065e0:	89bb      	ldrh	r3, [r7, #12]
 80065e2:	f083 0320 	eor.w	r3, r3, #32
 80065e6:	81bb      	strh	r3, [r7, #12]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	89bb      	ldrh	r3, [r7, #12]
 80065f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006604:	b29b      	uxth	r3, r3
 8006606:	8013      	strh	r3, [r2, #0]
 8006608:	e04b      	b.n	80066a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	82fb      	strh	r3, [r7, #22]
 8006618:	8afb      	ldrh	r3, [r7, #22]
 800661a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01b      	beq.n	800665a <USB_EPClearStall+0x106>
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006638:	82bb      	strh	r3, [r7, #20]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	441a      	add	r2, r3
 8006644:	8abb      	ldrh	r3, [r7, #20]
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	827b      	strh	r3, [r7, #18]
 8006672:	8a7b      	ldrh	r3, [r7, #18]
 8006674:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006678:	827b      	strh	r3, [r7, #18]
 800667a:	8a7b      	ldrh	r3, [r7, #18]
 800667c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006680:	827b      	strh	r3, [r7, #18]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	8a7b      	ldrh	r3, [r7, #18]
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2280      	movs	r2, #128	; 0x80
 80066c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b08b      	sub	sp, #44	; 0x2c
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	4611      	mov	r1, r2
 8006704:	461a      	mov	r2, r3
 8006706:	460b      	mov	r3, r1
 8006708:	80fb      	strh	r3, [r7, #6]
 800670a:	4613      	mov	r3, r2
 800670c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800670e:	88bb      	ldrh	r3, [r7, #4]
 8006710:	3301      	adds	r3, #1
 8006712:	085b      	lsrs	r3, r3, #1
 8006714:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800671e:	88fa      	ldrh	r2, [r7, #6]
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006728:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	e01b      	b.n	8006768 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	b21a      	sxth	r2, r3
 8006740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006744:	4313      	orrs	r3, r2
 8006746:	b21b      	sxth	r3, r3
 8006748:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	8a7a      	ldrh	r2, [r7, #18]
 800674e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	3302      	adds	r3, #2
 8006754:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3301      	adds	r3, #1
 800675a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	3b01      	subs	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e0      	bne.n	8006730 <USB_WritePMA+0x38>
  }
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	372c      	adds	r7, #44	; 0x2c
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800677c:	b480      	push	{r7}
 800677e:	b08b      	sub	sp, #44	; 0x2c
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4611      	mov	r1, r2
 8006788:	461a      	mov	r2, r3
 800678a:	460b      	mov	r3, r1
 800678c:	80fb      	strh	r3, [r7, #6]
 800678e:	4613      	mov	r3, r2
 8006790:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006792:	88bb      	ldrh	r3, [r7, #4]
 8006794:	085b      	lsrs	r3, r3, #1
 8006796:	b29b      	uxth	r3, r3
 8006798:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067a2:	88fa      	ldrh	r2, [r7, #6]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
 80067b2:	e018      	b.n	80067e6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	3302      	adds	r3, #2
 80067c0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3301      	adds	r3, #1
 80067ce:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3301      	adds	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	3b01      	subs	r3, #1
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e3      	bne.n	80067b4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80067ec:	88bb      	ldrh	r3, [r7, #4]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	701a      	strb	r2, [r3, #0]
  }
}
 8006808:	bf00      	nop
 800680a:	372c      	adds	r7, #44	; 0x2c
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006836:	2303      	movs	r3, #3
 8006838:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	4611      	mov	r1, r2
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	4611      	mov	r1, r2
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
  }

  return USBD_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 ff47 	bl	8007738 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d01a      	beq.n	8006904 <USBD_LL_SetupStage+0x72>
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d822      	bhi.n	8006918 <USBD_LL_SetupStage+0x86>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <USBD_LL_SetupStage+0x4a>
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d00a      	beq.n	80068f0 <USBD_LL_SetupStage+0x5e>
 80068da:	e01d      	b.n	8006918 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f9ef 	bl	8006cc8 <USBD_StdDevReq>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
      break;
 80068ee:	e020      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fa53 	bl	8006da4 <USBD_StdItfReq>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
      break;
 8006902:	e016      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa92 	bl	8006e36 <USBD_StdEPReq>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
      break;
 8006916:	e00c      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800691e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f003 fc02 	bl	800a130 <USBD_LL_StallEP>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	bf00      	nop
  }

  return ret;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	460b      	mov	r3, r1
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d138      	bne.n	80069c2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800695e:	2b03      	cmp	r3, #3
 8006960:	d14a      	bne.n	80069f8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	d913      	bls.n	8006996 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	1ad2      	subs	r2, r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4293      	cmp	r3, r2
 8006986:	bf28      	it	cs
 8006988:	4613      	movcs	r3, r2
 800698a:	461a      	mov	r2, r3
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 ff49 	bl	8007826 <USBD_CtlContinueRx>
 8006994:	e030      	b.n	80069f8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d10b      	bne.n	80069ba <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 ff44 	bl	8007848 <USBD_CtlSendStatus>
 80069c0:	e01a      	b.n	80069f8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d114      	bne.n	80069f8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00e      	beq.n	80069f8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	7afa      	ldrb	r2, [r7, #11]
 80069e4:	4611      	mov	r1, r2
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	4798      	blx	r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	e000      	b.n	80069fa <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	607a      	str	r2, [r7, #4]
 8006a0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d16b      	bne.n	8006aee <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d156      	bne.n	8006ad4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d914      	bls.n	8006a5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	461a      	mov	r2, r3
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fedb 	bl	8007804 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2200      	movs	r2, #0
 8006a52:	2100      	movs	r1, #0
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f003 fc15 	bl	800a284 <USBD_LL_PrepareReceive>
 8006a5a:	e03b      	b.n	8006ad4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d11c      	bne.n	8006aa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d316      	bcc.n	8006aa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d20f      	bcs.n	8006aa2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 febc 	bl	8007804 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a94:	2300      	movs	r3, #0
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f003 fbf2 	bl	800a284 <USBD_LL_PrepareReceive>
 8006aa0:	e018      	b.n	8006ad4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d10b      	bne.n	8006ac6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac6:	2180      	movs	r1, #128	; 0x80
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f003 fb31 	bl	800a130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fecd 	bl	800786e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d122      	bne.n	8006b24 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff fe98 	bl	8006814 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006aec:	e01a      	b.n	8006b24 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d114      	bne.n	8006b24 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	7afa      	ldrb	r2, [r7, #11]
 8006b10:	4611      	mov	r1, r2
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	e000      	b.n	8006b26 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e02f      	b.n	8006bc2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00f      	beq.n	8006b8c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6852      	ldr	r2, [r2, #4]
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	4611      	mov	r1, r2
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b8c:	2340      	movs	r3, #64	; 0x40
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f003 faa6 	bl	800a0e4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ba8:	2340      	movs	r3, #64	; 0x40
 8006baa:	2200      	movs	r2, #0
 8006bac:	2180      	movs	r1, #128	; 0x80
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f003 fa98 	bl	800a0e4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2240      	movs	r2, #64	; 0x40
 8006bbe:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2204      	movs	r2, #4
 8006c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d106      	bne.n	8006c38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e012      	b.n	8006c82 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d10b      	bne.n	8006c80 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ca8:	8a3b      	ldrh	r3, [r7, #16]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	b21a      	sxth	r2, r3
 8006cae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	b21b      	sxth	r3, r3
 8006cb6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
	...

08006cc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d005      	beq.n	8006cee <USBD_StdDevReq+0x26>
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	d853      	bhi.n	8006d8e <USBD_StdDevReq+0xc6>
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <USBD_StdDevReq+0x3a>
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d14f      	bne.n	8006d8e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006d00:	e04a      	b.n	8006d98 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d83b      	bhi.n	8006d82 <USBD_StdDevReq+0xba>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <USBD_StdDevReq+0x48>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006d79 	.word	0x08006d79
 8006d18:	08006d83 	.word	0x08006d83
 8006d1c:	08006d6f 	.word	0x08006d6f
 8006d20:	08006d83 	.word	0x08006d83
 8006d24:	08006d43 	.word	0x08006d43
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d83 	.word	0x08006d83
 8006d30:	08006d5b 	.word	0x08006d5b
 8006d34:	08006d4d 	.word	0x08006d4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9de 	bl	80070fc <USBD_GetDescriptor>
          break;
 8006d40:	e024      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fb6d 	bl	8007424 <USBD_SetAddress>
          break;
 8006d4a:	e01f      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fbac 	bl	80074ac <USBD_SetConfig>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
          break;
 8006d58:	e018      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fc4b 	bl	80075f8 <USBD_GetConfig>
          break;
 8006d62:	e013      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fc7c 	bl	8007664 <USBD_GetStatus>
          break;
 8006d6c:	e00e      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fcab 	bl	80076cc <USBD_SetFeature>
          break;
 8006d76:	e009      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fcba 	bl	80076f4 <USBD_ClrFeature>
          break;
 8006d80:	e004      	b.n	8006d8c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fd11 	bl	80077ac <USBD_CtlError>
          break;
 8006d8a:	bf00      	nop
      }
      break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fd0b 	bl	80077ac <USBD_CtlError>
      break;
 8006d96:	bf00      	nop
  }

  return ret;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	d005      	beq.n	8006dca <USBD_StdItfReq+0x26>
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d82f      	bhi.n	8006e22 <USBD_StdItfReq+0x7e>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <USBD_StdItfReq+0x26>
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d12b      	bne.n	8006e22 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d81d      	bhi.n	8006e14 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	889b      	ldrh	r3, [r3, #4]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d813      	bhi.n	8006e0a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4798      	blx	r3
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	88db      	ldrh	r3, [r3, #6]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d110      	bne.n	8006e1e <USBD_StdItfReq+0x7a>
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10d      	bne.n	8006e1e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fd20 	bl	8007848 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e08:	e009      	b.n	8006e1e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fccd 	bl	80077ac <USBD_CtlError>
          break;
 8006e12:	e004      	b.n	8006e1e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fcc8 	bl	80077ac <USBD_CtlError>
          break;
 8006e1c:	e000      	b.n	8006e20 <USBD_StdItfReq+0x7c>
          break;
 8006e1e:	bf00      	nop
      }
      break;
 8006e20:	e004      	b.n	8006e2c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fcc1 	bl	80077ac <USBD_CtlError>
      break;
 8006e2a:	bf00      	nop
  }

  return ret;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	889b      	ldrh	r3, [r3, #4]
 8006e48:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	d007      	beq.n	8006e66 <USBD_StdEPReq+0x30>
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	f200 8145 	bhi.w	80070e6 <USBD_StdEPReq+0x2b0>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00c      	beq.n	8006e7a <USBD_StdEPReq+0x44>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	f040 8140 	bne.w	80070e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
      break;
 8006e78:	e13a      	b.n	80070f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d007      	beq.n	8006e92 <USBD_StdEPReq+0x5c>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	f300 8129 	bgt.w	80070da <USBD_StdEPReq+0x2a4>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d07f      	beq.n	8006f8c <USBD_StdEPReq+0x156>
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d03c      	beq.n	8006f0a <USBD_StdEPReq+0xd4>
 8006e90:	e123      	b.n	80070da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d002      	beq.n	8006ea4 <USBD_StdEPReq+0x6e>
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d016      	beq.n	8006ed0 <USBD_StdEPReq+0x9a>
 8006ea2:	e02c      	b.n	8006efe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00d      	beq.n	8006ec6 <USBD_StdEPReq+0x90>
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	2b80      	cmp	r3, #128	; 0x80
 8006eae:	d00a      	beq.n	8006ec6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f003 f93b 	bl	800a130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f003 f937 	bl	800a130 <USBD_LL_StallEP>
 8006ec2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ec4:	e020      	b.n	8006f08 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fc6f 	bl	80077ac <USBD_CtlError>
              break;
 8006ece:	e01b      	b.n	8006f08 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	885b      	ldrh	r3, [r3, #2]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10e      	bne.n	8006ef6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <USBD_StdEPReq+0xc0>
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b80      	cmp	r3, #128	; 0x80
 8006ee2:	d008      	beq.n	8006ef6 <USBD_StdEPReq+0xc0>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f003 f91d 	bl	800a130 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fca6 	bl	8007848 <USBD_CtlSendStatus>

              break;
 8006efc:	e004      	b.n	8006f08 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc53 	bl	80077ac <USBD_CtlError>
              break;
 8006f06:	bf00      	nop
          }
          break;
 8006f08:	e0ec      	b.n	80070e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d002      	beq.n	8006f1c <USBD_StdEPReq+0xe6>
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d016      	beq.n	8006f48 <USBD_StdEPReq+0x112>
 8006f1a:	e030      	b.n	8006f7e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <USBD_StdEPReq+0x108>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d00a      	beq.n	8006f3e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f003 f8ff 	bl	800a130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f32:	2180      	movs	r1, #128	; 0x80
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f003 f8fb 	bl	800a130 <USBD_LL_StallEP>
 8006f3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f3c:	e025      	b.n	8006f8a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc33 	bl	80077ac <USBD_CtlError>
              break;
 8006f46:	e020      	b.n	8006f8a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11b      	bne.n	8006f88 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f003 f905 	bl	800a16e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fc6f 	bl	8007848 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006f7c:	e004      	b.n	8006f88 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fc13 	bl	80077ac <USBD_CtlError>
              break;
 8006f86:	e000      	b.n	8006f8a <USBD_StdEPReq+0x154>
              break;
 8006f88:	bf00      	nop
          }
          break;
 8006f8a:	e0ab      	b.n	80070e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d002      	beq.n	8006f9e <USBD_StdEPReq+0x168>
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d032      	beq.n	8007002 <USBD_StdEPReq+0x1cc>
 8006f9c:	e097      	b.n	80070ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <USBD_StdEPReq+0x17e>
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b80      	cmp	r3, #128	; 0x80
 8006fa8:	d004      	beq.n	8006fb4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fbfd 	bl	80077ac <USBD_CtlError>
                break;
 8006fb2:	e091      	b.n	80070d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	da0b      	bge.n	8006fd4 <USBD_StdEPReq+0x19e>
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	3310      	adds	r3, #16
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	e00b      	b.n	8006fec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	4413      	add	r3, r2
 8006fea:	3304      	adds	r3, #4
 8006fec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fbe7 	bl	80077ce <USBD_CtlSendData>
              break;
 8007000:	e06a      	b.n	80070d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007006:	2b00      	cmp	r3, #0
 8007008:	da11      	bge.n	800702e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	3324      	adds	r3, #36	; 0x24
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d117      	bne.n	8007054 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fbc0 	bl	80077ac <USBD_CtlError>
                  break;
 800702c:	e054      	b.n	80070d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800702e:	7bbb      	ldrb	r3, [r7, #14]
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbad 	bl	80077ac <USBD_CtlError>
                  break;
 8007052:	e041      	b.n	80070d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	da0b      	bge.n	8007074 <USBD_StdEPReq+0x23e>
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	3310      	adds	r3, #16
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	3304      	adds	r3, #4
 8007072:	e00b      	b.n	800708c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	4413      	add	r3, r2
 800708a:	3304      	adds	r3, #4
 800708c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <USBD_StdEPReq+0x264>
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	2b80      	cmp	r3, #128	; 0x80
 8007098:	d103      	bne.n	80070a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e00e      	b.n	80070c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f003 f880 	bl	800a1ac <USBD_LL_IsStallEP>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2201      	movs	r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e002      	b.n	80070c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2202      	movs	r2, #2
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb81 	bl	80077ce <USBD_CtlSendData>
              break;
 80070cc:	e004      	b.n	80070d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fb6b 	bl	80077ac <USBD_CtlError>
              break;
 80070d6:	bf00      	nop
          }
          break;
 80070d8:	e004      	b.n	80070e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb65 	bl	80077ac <USBD_CtlError>
          break;
 80070e2:	bf00      	nop
      }
      break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fb5f 	bl	80077ac <USBD_CtlError>
      break;
 80070ee:	bf00      	nop
  }

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	0a1b      	lsrs	r3, r3, #8
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	2b0e      	cmp	r3, #14
 800711e:	f200 8152 	bhi.w	80073c6 <USBD_GetDescriptor+0x2ca>
 8007122:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <USBD_GetDescriptor+0x2c>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	08007199 	.word	0x08007199
 800712c:	080071b1 	.word	0x080071b1
 8007130:	080071f1 	.word	0x080071f1
 8007134:	080073c7 	.word	0x080073c7
 8007138:	080073c7 	.word	0x080073c7
 800713c:	08007367 	.word	0x08007367
 8007140:	08007393 	.word	0x08007393
 8007144:	080073c7 	.word	0x080073c7
 8007148:	080073c7 	.word	0x080073c7
 800714c:	080073c7 	.word	0x080073c7
 8007150:	080073c7 	.word	0x080073c7
 8007154:	080073c7 	.word	0x080073c7
 8007158:	080073c7 	.word	0x080073c7
 800715c:	080073c7 	.word	0x080073c7
 8007160:	08007165 	.word	0x08007165
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007186:	e126      	b.n	80073d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fb0e 	bl	80077ac <USBD_CtlError>
        err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
      break;
 8007196:	e11e      	b.n	80073d6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7c12      	ldrb	r2, [r2, #16]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
      break;
 80071ae:	e112      	b.n	80073d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7c1b      	ldrb	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10d      	bne.n	80071d4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f107 0208 	add.w	r2, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3301      	adds	r3, #1
 80071ce:	2202      	movs	r2, #2
 80071d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071d2:	e100      	b.n	80073d6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f107 0208 	add.w	r2, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	2202      	movs	r2, #2
 80071ec:	701a      	strb	r2, [r3, #0]
      break;
 80071ee:	e0f2      	b.n	80073d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	885b      	ldrh	r3, [r3, #2]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	f200 80ac 	bhi.w	8007354 <USBD_GetDescriptor+0x258>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBD_GetDescriptor+0x108>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	0800721d 	.word	0x0800721d
 8007208:	08007251 	.word	0x08007251
 800720c:	08007285 	.word	0x08007285
 8007210:	080072b9 	.word	0x080072b9
 8007214:	080072ed 	.word	0x080072ed
 8007218:	08007321 	.word	0x08007321
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e091      	b.n	8007364 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fab2 	bl	80077ac <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e089      	b.n	8007364 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e077      	b.n	8007364 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa98 	bl	80077ac <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e06f      	b.n	8007364 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e05d      	b.n	8007364 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa7e 	bl	80077ac <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e055      	b.n	8007364 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e043      	b.n	8007364 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa64 	bl	80077ac <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e03b      	b.n	8007364 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e029      	b.n	8007364 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa4a 	bl	80077ac <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e021      	b.n	8007364 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e00f      	b.n	8007364 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa30 	bl	80077ac <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e007      	b.n	8007364 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa28 	bl	80077ac <USBD_CtlError>
          err++;
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	3301      	adds	r3, #1
 8007360:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007362:	bf00      	nop
      }
      break;
 8007364:	e037      	b.n	80073d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7c1b      	ldrb	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	4610      	mov	r0, r2
 800737c:	4798      	blx	r3
 800737e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007380:	e029      	b.n	80073d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fa11 	bl	80077ac <USBD_CtlError>
        err++;
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	3301      	adds	r3, #1
 800738e:	72fb      	strb	r3, [r7, #11]
      break;
 8007390:	e021      	b.n	80073d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7c1b      	ldrb	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10d      	bne.n	80073b6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	f107 0208 	add.w	r2, r7, #8
 80073a6:	4610      	mov	r0, r2
 80073a8:	4798      	blx	r3
 80073aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	2207      	movs	r2, #7
 80073b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073b4:	e00f      	b.n	80073d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f9f7 	bl	80077ac <USBD_CtlError>
        err++;
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	3301      	adds	r3, #1
 80073c2:	72fb      	strb	r3, [r7, #11]
      break;
 80073c4:	e007      	b.n	80073d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f9ef 	bl	80077ac <USBD_CtlError>
      err++;
 80073ce:	7afb      	ldrb	r3, [r7, #11]
 80073d0:	3301      	adds	r3, #1
 80073d2:	72fb      	strb	r3, [r7, #11]
      break;
 80073d4:	bf00      	nop
  }

  if (err != 0U)
 80073d6:	7afb      	ldrb	r3, [r7, #11]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11e      	bne.n	800741a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d016      	beq.n	8007412 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80073e4:	893b      	ldrh	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	88da      	ldrh	r2, [r3, #6]
 80073ee:	893b      	ldrh	r3, [r7, #8]
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bf28      	it	cs
 80073f4:	4613      	movcs	r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073fa:	893b      	ldrh	r3, [r7, #8]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f9e4 	bl	80077ce <USBD_CtlSendData>
 8007406:	e009      	b.n	800741c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9ce 	bl	80077ac <USBD_CtlError>
 8007410:	e004      	b.n	800741c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa18 	bl	8007848 <USBD_CtlSendStatus>
 8007418:	e000      	b.n	800741c <USBD_GetDescriptor+0x320>
    return;
 800741a:	bf00      	nop
  }
}
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop

08007424 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	889b      	ldrh	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d131      	bne.n	800749a <USBD_SetAddress+0x76>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d12d      	bne.n	800749a <USBD_SetAddress+0x76>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	2b7f      	cmp	r3, #127	; 0x7f
 8007444:	d829      	bhi.n	800749a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007450:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b03      	cmp	r3, #3
 800745c:	d104      	bne.n	8007468 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f9a3 	bl	80077ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007466:	e01d      	b.n	80074a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7bfa      	ldrb	r2, [r7, #15]
 800746c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f002 fec5 	bl	800a204 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f9e4 	bl	8007848 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748e:	e009      	b.n	80074a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007498:	e004      	b.n	80074a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f985 	bl	80077ac <USBD_CtlError>
  }
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	4b4c      	ldr	r3, [pc, #304]	; (80075f4 <USBD_SetConfig+0x148>)
 80074c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074c4:	4b4b      	ldr	r3, [pc, #300]	; (80075f4 <USBD_SetConfig+0x148>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d905      	bls.n	80074d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f96c 	bl	80077ac <USBD_CtlError>
    return USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e088      	b.n	80075ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d002      	beq.n	80074ea <USBD_SetConfig+0x3e>
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d025      	beq.n	8007534 <USBD_SetConfig+0x88>
 80074e8:	e071      	b.n	80075ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80074ea:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <USBD_SetConfig+0x148>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d01c      	beq.n	800752c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80074f2:	4b40      	ldr	r3, [pc, #256]	; (80075f4 <USBD_SetConfig+0x148>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80074fc:	4b3d      	ldr	r3, [pc, #244]	; (80075f4 <USBD_SetConfig+0x148>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff f991 	bl	800682a <USBD_SetClassConfig>
 8007508:	4603      	mov	r3, r0
 800750a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f949 	bl	80077ac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800751a:	e065      	b.n	80075e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f993 	bl	8007848 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2203      	movs	r2, #3
 8007526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800752a:	e05d      	b.n	80075e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f98b 	bl	8007848 <USBD_CtlSendStatus>
      break;
 8007532:	e059      	b.n	80075e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007534:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <USBD_SetConfig+0x148>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d112      	bne.n	8007562 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007544:	4b2b      	ldr	r3, [pc, #172]	; (80075f4 <USBD_SetConfig+0x148>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800754e:	4b29      	ldr	r3, [pc, #164]	; (80075f4 <USBD_SetConfig+0x148>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff f984 	bl	8006862 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f974 	bl	8007848 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007560:	e042      	b.n	80075e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007562:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <USBD_SetConfig+0x148>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d02a      	beq.n	80075c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f972 	bl	8006862 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800757e:	4b1d      	ldr	r3, [pc, #116]	; (80075f4 <USBD_SetConfig+0x148>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007588:	4b1a      	ldr	r3, [pc, #104]	; (80075f4 <USBD_SetConfig+0x148>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff f94b 	bl	800682a <USBD_SetClassConfig>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00f      	beq.n	80075be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f903 	bl	80077ac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff f957 	bl	8006862 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075bc:	e014      	b.n	80075e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f942 	bl	8007848 <USBD_CtlSendStatus>
      break;
 80075c4:	e010      	b.n	80075e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f93e 	bl	8007848 <USBD_CtlSendStatus>
      break;
 80075cc:	e00c      	b.n	80075e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f8eb 	bl	80077ac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075d6:	4b07      	ldr	r3, [pc, #28]	; (80075f4 <USBD_SetConfig+0x148>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f7ff f940 	bl	8006862 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80075e2:	2303      	movs	r3, #3
 80075e4:	73fb      	strb	r3, [r7, #15]
      break;
 80075e6:	bf00      	nop
  }

  return ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000358 	.word	0x20000358

080075f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88db      	ldrh	r3, [r3, #6]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d004      	beq.n	8007614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8cd 	bl	80077ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007612:	e023      	b.n	800765c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	dc02      	bgt.n	8007626 <USBD_GetConfig+0x2e>
 8007620:	2b00      	cmp	r3, #0
 8007622:	dc03      	bgt.n	800762c <USBD_GetConfig+0x34>
 8007624:	e015      	b.n	8007652 <USBD_GetConfig+0x5a>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d00b      	beq.n	8007642 <USBD_GetConfig+0x4a>
 800762a:	e012      	b.n	8007652 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	3308      	adds	r3, #8
 8007636:	2201      	movs	r2, #1
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f8c7 	bl	80077ce <USBD_CtlSendData>
        break;
 8007640:	e00c      	b.n	800765c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	2201      	movs	r2, #1
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f8bf 	bl	80077ce <USBD_CtlSendData>
        break;
 8007650:	e004      	b.n	800765c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f8a9 	bl	80077ac <USBD_CtlError>
        break;
 800765a:	bf00      	nop
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007674:	b2db      	uxtb	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	2b02      	cmp	r3, #2
 800767a:	d81e      	bhi.n	80076ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	88db      	ldrh	r3, [r3, #6]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d004      	beq.n	800768e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f890 	bl	80077ac <USBD_CtlError>
        break;
 800768c:	e01a      	b.n	80076c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	330c      	adds	r3, #12
 80076ae:	2202      	movs	r2, #2
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f88b 	bl	80077ce <USBD_CtlSendData>
      break;
 80076b8:	e004      	b.n	80076c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f875 	bl	80077ac <USBD_CtlError>
      break;
 80076c2:	bf00      	nop
  }
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d106      	bne.n	80076ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8ae 	bl	8007848 <USBD_CtlSendStatus>
  }
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	2b02      	cmp	r3, #2
 800770a:	d80b      	bhi.n	8007724 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d10c      	bne.n	800772e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f893 	bl	8007848 <USBD_CtlSendStatus>
      }
      break;
 8007722:	e004      	b.n	800772e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f840 	bl	80077ac <USBD_CtlError>
      break;
 800772c:	e000      	b.n	8007730 <USBD_ClrFeature+0x3c>
      break;
 800772e:	bf00      	nop
  }
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	781a      	ldrb	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fa91 	bl	8006c8a <SWAPBYTE>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff fa84 	bl	8006c8a <SWAPBYTE>
 8007782:	4603      	mov	r3, r0
 8007784:	461a      	mov	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3301      	adds	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fa77 	bl	8006c8a <SWAPBYTE>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	80da      	strh	r2, [r3, #6]
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077b6:	2180      	movs	r1, #128	; 0x80
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f002 fcb9 	bl	800a130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077be:	2100      	movs	r1, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f002 fcb5 	bl	800a130 <USBD_LL_StallEP>
}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2202      	movs	r2, #2
 80077de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	2100      	movs	r1, #0
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f002 fd24 	bl	800a242 <USBD_LL_Transmit>

  return USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	2100      	movs	r1, #0
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f002 fd13 	bl	800a242 <USBD_LL_Transmit>

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f002 fd23 	bl	800a284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2204      	movs	r2, #4
 8007854:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007858:	2300      	movs	r3, #0
 800785a:	2200      	movs	r2, #0
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f002 fcef 	bl	800a242 <USBD_LL_Transmit>

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2205      	movs	r2, #5
 800787a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800787e:	2300      	movs	r3, #0
 8007880:	2200      	movs	r2, #0
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f002 fcfd 	bl	800a284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <__NVIC_SetPriority>:
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	db0a      	blt.n	80078be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	490c      	ldr	r1, [pc, #48]	; (80078e0 <__NVIC_SetPriority+0x4c>)
 80078ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b2:	0112      	lsls	r2, r2, #4
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	440b      	add	r3, r1
 80078b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80078bc:	e00a      	b.n	80078d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	4908      	ldr	r1, [pc, #32]	; (80078e4 <__NVIC_SetPriority+0x50>)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	3b04      	subs	r3, #4
 80078cc:	0112      	lsls	r2, r2, #4
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	440b      	add	r3, r1
 80078d2:	761a      	strb	r2, [r3, #24]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	e000e100 	.word	0xe000e100
 80078e4:	e000ed00 	.word	0xe000ed00

080078e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078ec:	2100      	movs	r1, #0
 80078ee:	f06f 0004 	mvn.w	r0, #4
 80078f2:	f7ff ffcf 	bl	8007894 <__NVIC_SetPriority>
#endif
}
 80078f6:	bf00      	nop
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007902:	f3ef 8305 	mrs	r3, IPSR
 8007906:	603b      	str	r3, [r7, #0]
  return(result);
 8007908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800790e:	f06f 0305 	mvn.w	r3, #5
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e00c      	b.n	8007930 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <osKernelInitialize+0x44>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800791e:	4b08      	ldr	r3, [pc, #32]	; (8007940 <osKernelInitialize+0x44>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007924:	2300      	movs	r3, #0
 8007926:	607b      	str	r3, [r7, #4]
 8007928:	e002      	b.n	8007930 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800792e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007930:	687b      	ldr	r3, [r7, #4]
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	2000035c 	.word	0x2000035c

08007944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800794a:	f3ef 8305 	mrs	r3, IPSR
 800794e:	603b      	str	r3, [r7, #0]
  return(result);
 8007950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007952:	2b00      	cmp	r3, #0
 8007954:	d003      	beq.n	800795e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007956:	f06f 0305 	mvn.w	r3, #5
 800795a:	607b      	str	r3, [r7, #4]
 800795c:	e010      	b.n	8007980 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <osKernelStart+0x48>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d109      	bne.n	800797a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007966:	f7ff ffbf 	bl	80078e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <osKernelStart+0x48>)
 800796c:	2202      	movs	r2, #2
 800796e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007970:	f000 ff56 	bl	8008820 <vTaskStartScheduler>
      stat = osOK;
 8007974:	2300      	movs	r3, #0
 8007976:	607b      	str	r3, [r7, #4]
 8007978:	e002      	b.n	8007980 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800797a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800797e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007980:	687b      	ldr	r3, [r7, #4]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	2000035c 	.word	0x2000035c

08007990 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a07      	ldr	r2, [pc, #28]	; (80079bc <vApplicationGetIdleTaskMemory+0x2c>)
 80079a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4a06      	ldr	r2, [pc, #24]	; (80079c0 <vApplicationGetIdleTaskMemory+0x30>)
 80079a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2280      	movs	r2, #128	; 0x80
 80079ac:	601a      	str	r2, [r3, #0]
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	20000360 	.word	0x20000360
 80079c0:	20000408 	.word	0x20000408

080079c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80079d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4a06      	ldr	r2, [pc, #24]	; (80079f4 <vApplicationGetTimerTaskMemory+0x30>)
 80079da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e2:	601a      	str	r2, [r3, #0]
}
 80079e4:	bf00      	nop
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20000608 	.word	0x20000608
 80079f4:	200006b0 	.word	0x200006b0

080079f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f103 0208 	add.w	r2, r3, #8
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f103 0208 	add.w	r2, r3, #8
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f103 0208 	add.w	r2, r3, #8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
}
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab0:	d103      	bne.n	8007aba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e00c      	b.n	8007ad4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3308      	adds	r3, #8
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e002      	b.n	8007ac8 <vListInsert+0x2e>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d2f6      	bcs.n	8007ac2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
}
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6892      	ldr	r2, [r2, #8]
 8007b22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6852      	ldr	r2, [r2, #4]
 8007b2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d103      	bne.n	8007b40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	1e5a      	subs	r2, r3, #1
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b8a:	f002 f803 	bl	8009b94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	441a      	add	r2, r3
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	68f9      	ldr	r1, [r7, #12]
 8007bbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	441a      	add	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	22ff      	movs	r2, #255	; 0xff
 8007bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	22ff      	movs	r2, #255	; 0xff
 8007bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d114      	bne.n	8007c0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01a      	beq.n	8007c1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3310      	adds	r3, #16
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 f8b1 	bl	8008d54 <xTaskRemoveFromEventList>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d012      	beq.n	8007c1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <xQueueGenericReset+0xcc>)
 8007bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	e009      	b.n	8007c1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3310      	adds	r3, #16
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7ff fef2 	bl	80079f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3324      	adds	r3, #36	; 0x24
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7ff feed 	bl	80079f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c1e:	f001 ffe9 	bl	8009bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c22:	2301      	movs	r3, #1
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08e      	sub	sp, #56	; 0x38
 8007c34:	af02      	add	r7, sp, #8
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <xQueueGenericCreateStatic+0x52>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <xQueueGenericCreateStatic+0x56>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e000      	b.n	8007c88 <xQueueGenericCreateStatic+0x58>
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	623b      	str	r3, [r7, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <xQueueGenericCreateStatic+0x7e>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueGenericCreateStatic+0x82>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueGenericCreateStatic+0x84>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61fb      	str	r3, [r7, #28]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cce:	2350      	movs	r3, #80	; 0x50
 8007cd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b50      	cmp	r3, #80	; 0x50
 8007cd6:	d00a      	beq.n	8007cee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	61bb      	str	r3, [r7, #24]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f805 	bl	8007d20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3730      	adds	r7, #48	; 0x30
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d4e:	2101      	movs	r1, #1
 8007d50:	69b8      	ldr	r0, [r7, #24]
 8007d52:	f7ff ff05 	bl	8007b60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	; 0x38
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d76:	2300      	movs	r3, #0
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <xQueueGenericSend+0x32>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d103      	bne.n	8007da8 <xQueueGenericSend+0x40>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <xQueueGenericSend+0x44>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e000      	b.n	8007dae <xQueueGenericSend+0x46>
 8007dac:	2300      	movs	r3, #0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <xQueueGenericSend+0x60>
	__asm volatile
 8007db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dc4:	bf00      	nop
 8007dc6:	e7fe      	b.n	8007dc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d103      	bne.n	8007dd6 <xQueueGenericSend+0x6e>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <xQueueGenericSend+0x72>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueGenericSend+0x74>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	623b      	str	r3, [r7, #32]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007df6:	f001 f96f 	bl	80090d8 <xTaskGetSchedulerState>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <xQueueGenericSend+0x9e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericSend+0xa2>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericSend+0xa4>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	61fb      	str	r3, [r7, #28]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e26:	f001 feb5 	bl	8009b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <xQueueGenericSend+0xd4>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d129      	bne.n	8007e90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e42:	f000 fa0b 	bl	800825c <prvCopyDataToQueue>
 8007e46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d010      	beq.n	8007e72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 ff7d 	bl	8008d54 <xTaskRemoveFromEventList>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d013      	beq.n	8007e88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e60:	4b3f      	ldr	r3, [pc, #252]	; (8007f60 <xQueueGenericSend+0x1f8>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	e00a      	b.n	8007e88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e78:	4b39      	ldr	r3, [pc, #228]	; (8007f60 <xQueueGenericSend+0x1f8>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e88:	f001 feb4 	bl	8009bf4 <vPortExitCritical>
				return pdPASS;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e063      	b.n	8007f58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d103      	bne.n	8007e9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e96:	f001 fead 	bl	8009bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e05c      	b.n	8007f58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea4:	f107 0314 	add.w	r3, r7, #20
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 ffb7 	bl	8008e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb2:	f001 fe9f 	bl	8009bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eb6:	f000 fd23 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eba:	f001 fe6b 	bl	8009b94 <vPortEnterCritical>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eca:	d103      	bne.n	8007ed4 <xQueueGenericSend+0x16c>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee0:	d103      	bne.n	8007eea <xQueueGenericSend+0x182>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eea:	f001 fe83 	bl	8009bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eee:	1d3a      	adds	r2, r7, #4
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 ffa6 	bl	8008e48 <xTaskCheckForTimeOut>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d124      	bne.n	8007f4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f04:	f000 faa2 	bl	800844c <prvIsQueueFull>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d018      	beq.n	8007f40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	3310      	adds	r3, #16
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fecc 	bl	8008cb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f1e:	f000 fa2d 	bl	800837c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f22:	f000 fcfb 	bl	800891c <xTaskResumeAll>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f47f af7c 	bne.w	8007e26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <xQueueGenericSend+0x1f8>)
 8007f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	e772      	b.n	8007e26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f42:	f000 fa1b 	bl	800837c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f46:	f000 fce9 	bl	800891c <xTaskResumeAll>
 8007f4a:	e76c      	b.n	8007e26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f4e:	f000 fa15 	bl	800837c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f52:	f000 fce3 	bl	800891c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3738      	adds	r7, #56	; 0x38
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	e000ed04 	.word	0xe000ed04

08007f64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b090      	sub	sp, #64	; 0x40
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <xQueueGenericSendFromISR+0x3c>
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <xQueueGenericSendFromISR+0x40>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <xQueueGenericSendFromISR+0x42>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d103      	bne.n	8007fce <xQueueGenericSendFromISR+0x6a>
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <xQueueGenericSendFromISR+0x6e>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <xQueueGenericSendFromISR+0x70>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	623b      	str	r3, [r7, #32]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fee:	f001 feb3 	bl	8009d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	61fa      	str	r2, [r7, #28]
 8008008:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800800a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <xQueueGenericSendFromISR+0xbc>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d12f      	bne.n	8008080 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008036:	f000 f911 	bl	800825c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800803a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008042:	d112      	bne.n	800806a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d016      	beq.n	800807a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	3324      	adds	r3, #36	; 0x24
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fe7f 	bl	8008d54 <xTaskRemoveFromEventList>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	e007      	b.n	800807a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800806a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800806e:	3301      	adds	r3, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	b25a      	sxtb	r2, r3
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800807a:	2301      	movs	r3, #1
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800807e:	e001      	b.n	8008084 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008080:	2300      	movs	r3, #0
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800808e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008092:	4618      	mov	r0, r3
 8008094:	3740      	adds	r7, #64	; 0x40
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08c      	sub	sp, #48	; 0x30
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80080a8:	2300      	movs	r3, #0
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <xQueueReceive+0x30>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	623b      	str	r3, [r7, #32]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <xQueueReceive+0x3e>
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <xQueueReceive+0x42>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <xQueueReceive+0x44>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <xQueueReceive+0x5e>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	61fb      	str	r3, [r7, #28]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080fa:	f000 ffed 	bl	80090d8 <xTaskGetSchedulerState>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <xQueueReceive+0x6e>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <xQueueReceive+0x72>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <xQueueReceive+0x74>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <xQueueReceive+0x8e>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	61bb      	str	r3, [r7, #24]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800812a:	f001 fd33 	bl	8009b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01f      	beq.n	800817a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800813e:	f000 f8f7 	bl	8008330 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	1e5a      	subs	r2, r3, #1
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	3310      	adds	r3, #16
 8008156:	4618      	mov	r0, r3
 8008158:	f000 fdfc 	bl	8008d54 <xTaskRemoveFromEventList>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008162:	4b3d      	ldr	r3, [pc, #244]	; (8008258 <xQueueReceive+0x1bc>)
 8008164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008172:	f001 fd3f 	bl	8009bf4 <vPortExitCritical>
				return pdPASS;
 8008176:	2301      	movs	r3, #1
 8008178:	e069      	b.n	800824e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d103      	bne.n	8008188 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008180:	f001 fd38 	bl	8009bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008184:	2300      	movs	r3, #0
 8008186:	e062      	b.n	800824e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800818e:	f107 0310 	add.w	r3, r7, #16
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fe42 	bl	8008e1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008198:	2301      	movs	r3, #1
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800819c:	f001 fd2a 	bl	8009bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081a0:	f000 fbae 	bl	8008900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081a4:	f001 fcf6 	bl	8009b94 <vPortEnterCritical>
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081ae:	b25b      	sxtb	r3, r3
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b4:	d103      	bne.n	80081be <xQueueReceive+0x122>
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081c4:	b25b      	sxtb	r3, r3
 80081c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ca:	d103      	bne.n	80081d4 <xQueueReceive+0x138>
 80081cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081d4:	f001 fd0e 	bl	8009bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081d8:	1d3a      	adds	r2, r7, #4
 80081da:	f107 0310 	add.w	r3, r7, #16
 80081de:	4611      	mov	r1, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fe31 	bl	8008e48 <xTaskCheckForTimeOut>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d123      	bne.n	8008234 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f000 f917 	bl	8008420 <prvIsQueueEmpty>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d017      	beq.n	8008228 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fd57 	bl	8008cb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008208:	f000 f8b8 	bl	800837c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800820c:	f000 fb86 	bl	800891c <xTaskResumeAll>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d189      	bne.n	800812a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <xQueueReceive+0x1bc>)
 8008218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	e780      	b.n	800812a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822a:	f000 f8a7 	bl	800837c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800822e:	f000 fb75 	bl	800891c <xTaskResumeAll>
 8008232:	e77a      	b.n	800812a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008236:	f000 f8a1 	bl	800837c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800823a:	f000 fb6f 	bl	800891c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800823e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008240:	f000 f8ee 	bl	8008420 <prvIsQueueEmpty>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	f43f af6f 	beq.w	800812a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800824c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800824e:	4618      	mov	r0, r3
 8008250:	3730      	adds	r7, #48	; 0x30
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10d      	bne.n	8008296 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d14d      	bne.n	800831e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 ff44 	bl	8009114 <xTaskPriorityDisinherit>
 800828c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	609a      	str	r2, [r3, #8]
 8008294:	e043      	b.n	800831e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d119      	bne.n	80082d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6858      	ldr	r0, [r3, #4]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	461a      	mov	r2, r3
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	f002 f934 	bl	800a514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d32b      	bcc.n	800831e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	605a      	str	r2, [r3, #4]
 80082ce:	e026      	b.n	800831e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68d8      	ldr	r0, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	461a      	mov	r2, r3
 80082da:	68b9      	ldr	r1, [r7, #8]
 80082dc:	f002 f91a 	bl	800a514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e8:	425b      	negs	r3, r3
 80082ea:	441a      	add	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d207      	bcs.n	800830c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	425b      	negs	r3, r3
 8008306:	441a      	add	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d105      	bne.n	800831e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	3b01      	subs	r3, #1
 800831c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008326:	697b      	ldr	r3, [r7, #20]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d018      	beq.n	8008374 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	441a      	add	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	d303      	bcc.n	8008364 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68d9      	ldr	r1, [r3, #12]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	461a      	mov	r2, r3
 800836e:	6838      	ldr	r0, [r7, #0]
 8008370:	f002 f8d0 	bl	800a514 <memcpy>
	}
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008384:	f001 fc06 	bl	8009b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800838e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008390:	e011      	b.n	80083b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	2b00      	cmp	r3, #0
 8008398:	d012      	beq.n	80083c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3324      	adds	r3, #36	; 0x24
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fcd8 	bl	8008d54 <xTaskRemoveFromEventList>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80083aa:	f000 fdaf 	bl	8008f0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dce9      	bgt.n	8008392 <prvUnlockQueue+0x16>
 80083be:	e000      	b.n	80083c2 <prvUnlockQueue+0x46>
					break;
 80083c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	22ff      	movs	r2, #255	; 0xff
 80083c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083ca:	f001 fc13 	bl	8009bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083ce:	f001 fbe1 	bl	8009b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083da:	e011      	b.n	8008400 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d012      	beq.n	800840a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3310      	adds	r3, #16
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fcb3 	bl	8008d54 <xTaskRemoveFromEventList>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083f4:	f000 fd8a 	bl	8008f0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dce9      	bgt.n	80083dc <prvUnlockQueue+0x60>
 8008408:	e000      	b.n	800840c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800840a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	22ff      	movs	r2, #255	; 0xff
 8008410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008414:	f001 fbee 	bl	8009bf4 <vPortExitCritical>
}
 8008418:	bf00      	nop
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008428:	f001 fbb4 	bl	8009b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	e001      	b.n	800843e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800843e:	f001 fbd9 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008454:	f001 fb9e 	bl	8009b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008460:	429a      	cmp	r2, r3
 8008462:	d102      	bne.n	800846a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008464:	2301      	movs	r3, #1
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	e001      	b.n	800846e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800846e:	f001 fbc1 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8008472:	68fb      	ldr	r3, [r7, #12]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	e014      	b.n	80084b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800848c:	4a0f      	ldr	r2, [pc, #60]	; (80084cc <vQueueAddToRegistry+0x50>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10b      	bne.n	80084b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008498:	490c      	ldr	r1, [pc, #48]	; (80084cc <vQueueAddToRegistry+0x50>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80084a2:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <vQueueAddToRegistry+0x50>)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	4413      	add	r3, r2
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084ae:	e006      	b.n	80084be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	d9e7      	bls.n	800848c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084bc:	bf00      	nop
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000ab0 	.word	0x20000ab0

080084d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084e0:	f001 fb58 	bl	8009b94 <vPortEnterCritical>
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ea:	b25b      	sxtb	r3, r3
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f0:	d103      	bne.n	80084fa <vQueueWaitForMessageRestricted+0x2a>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008500:	b25b      	sxtb	r3, r3
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008506:	d103      	bne.n	8008510 <vQueueWaitForMessageRestricted+0x40>
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008510:	f001 fb70 	bl	8009bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	3324      	adds	r3, #36	; 0x24
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fbe9 	bl	8008cfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f7ff ff26 	bl	800837c <prvUnlockQueue>
	}
 8008530:	bf00      	nop
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08e      	sub	sp, #56	; 0x38
 800853c:	af04      	add	r7, sp, #16
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <xTaskCreateStatic+0x2a>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	623b      	str	r3, [r7, #32]
}
 800855e:	bf00      	nop
 8008560:	e7fe      	b.n	8008560 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <xTaskCreateStatic+0x46>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	61fb      	str	r3, [r7, #28]
}
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800857e:	23a8      	movs	r3, #168	; 0xa8
 8008580:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2ba8      	cmp	r3, #168	; 0xa8
 8008586:	d00a      	beq.n	800859e <xTaskCreateStatic+0x66>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	61bb      	str	r3, [r7, #24]
}
 800859a:	bf00      	nop
 800859c:	e7fe      	b.n	800859c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800859e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01e      	beq.n	80085e4 <xTaskCreateStatic+0xac>
 80085a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01b      	beq.n	80085e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085be:	2300      	movs	r3, #0
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f000 f80c 	bl	80085f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085de:	f000 f8af 	bl	8008740 <prvAddNewTaskToReadyList>
 80085e2:	e001      	b.n	80085e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085e8:	697b      	ldr	r3, [r7, #20]
	}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3728      	adds	r7, #40	; 0x28
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	461a      	mov	r2, r3
 800860c:	21a5      	movs	r1, #165	; 0xa5
 800860e:	f001 fef7 	bl	800a400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800861c:	3b01      	subs	r3, #1
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	617b      	str	r3, [r7, #20]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01f      	beq.n	8008692 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	e012      	b.n	800867e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	7819      	ldrb	r1, [r3, #0]
 8008660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	3334      	adds	r3, #52	; 0x34
 8008668:	460a      	mov	r2, r1
 800866a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	4413      	add	r3, r2
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d006      	beq.n	8008686 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	3301      	adds	r3, #1
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	2b0f      	cmp	r3, #15
 8008682:	d9e9      	bls.n	8008658 <prvInitialiseNewTask+0x64>
 8008684:	e000      	b.n	8008688 <prvInitialiseNewTask+0x94>
			{
				break;
 8008686:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008690:	e003      	b.n	800869a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	2b37      	cmp	r3, #55	; 0x37
 800869e:	d901      	bls.n	80086a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086a0:	2337      	movs	r3, #55	; 0x37
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	2200      	movs	r2, #0
 80086b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	3304      	adds	r3, #4
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff f9bc 	bl	8007a38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	3318      	adds	r3, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff f9b7 	bl	8007a38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	3354      	adds	r3, #84	; 0x54
 80086f4:	224c      	movs	r2, #76	; 0x4c
 80086f6:	2100      	movs	r1, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 fe81 	bl	800a400 <memset>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	4a0c      	ldr	r2, [pc, #48]	; (8008734 <prvInitialiseNewTask+0x140>)
 8008702:	659a      	str	r2, [r3, #88]	; 0x58
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	4a0c      	ldr	r2, [pc, #48]	; (8008738 <prvInitialiseNewTask+0x144>)
 8008708:	65da      	str	r2, [r3, #92]	; 0x5c
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	4a0b      	ldr	r2, [pc, #44]	; (800873c <prvInitialiseNewTask+0x148>)
 800870e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	68f9      	ldr	r1, [r7, #12]
 8008714:	69b8      	ldr	r0, [r7, #24]
 8008716:	f001 f90d 	bl	8009934 <pxPortInitialiseStack>
 800871a:	4602      	mov	r2, r0
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800872a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800872c:	bf00      	nop
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20001498 	.word	0x20001498
 8008738:	20001500 	.word	0x20001500
 800873c:	20001568 	.word	0x20001568

08008740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008748:	f001 fa24 	bl	8009b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800874c:	4b2d      	ldr	r3, [pc, #180]	; (8008804 <prvAddNewTaskToReadyList+0xc4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	4a2c      	ldr	r2, [pc, #176]	; (8008804 <prvAddNewTaskToReadyList+0xc4>)
 8008754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008756:	4b2c      	ldr	r3, [pc, #176]	; (8008808 <prvAddNewTaskToReadyList+0xc8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800875e:	4a2a      	ldr	r2, [pc, #168]	; (8008808 <prvAddNewTaskToReadyList+0xc8>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008764:	4b27      	ldr	r3, [pc, #156]	; (8008804 <prvAddNewTaskToReadyList+0xc4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d110      	bne.n	800878e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800876c:	f000 fbf2 	bl	8008f54 <prvInitialiseTaskLists>
 8008770:	e00d      	b.n	800878e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008772:	4b26      	ldr	r3, [pc, #152]	; (800880c <prvAddNewTaskToReadyList+0xcc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800877a:	4b23      	ldr	r3, [pc, #140]	; (8008808 <prvAddNewTaskToReadyList+0xc8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	429a      	cmp	r2, r3
 8008786:	d802      	bhi.n	800878e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008788:	4a1f      	ldr	r2, [pc, #124]	; (8008808 <prvAddNewTaskToReadyList+0xc8>)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800878e:	4b20      	ldr	r3, [pc, #128]	; (8008810 <prvAddNewTaskToReadyList+0xd0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3301      	adds	r3, #1
 8008794:	4a1e      	ldr	r2, [pc, #120]	; (8008810 <prvAddNewTaskToReadyList+0xd0>)
 8008796:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008798:	4b1d      	ldr	r3, [pc, #116]	; (8008810 <prvAddNewTaskToReadyList+0xd0>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a4:	4b1b      	ldr	r3, [pc, #108]	; (8008814 <prvAddNewTaskToReadyList+0xd4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d903      	bls.n	80087b4 <prvAddNewTaskToReadyList+0x74>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	4a18      	ldr	r2, [pc, #96]	; (8008814 <prvAddNewTaskToReadyList+0xd4>)
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4a15      	ldr	r2, [pc, #84]	; (8008818 <prvAddNewTaskToReadyList+0xd8>)
 80087c2:	441a      	add	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3304      	adds	r3, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7ff f941 	bl	8007a52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087d0:	f001 fa10 	bl	8009bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087d4:	4b0d      	ldr	r3, [pc, #52]	; (800880c <prvAddNewTaskToReadyList+0xcc>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00e      	beq.n	80087fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <prvAddNewTaskToReadyList+0xc8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d207      	bcs.n	80087fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ea:	4b0c      	ldr	r3, [pc, #48]	; (800881c <prvAddNewTaskToReadyList+0xdc>)
 80087ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000fc4 	.word	0x20000fc4
 8008808:	20000af0 	.word	0x20000af0
 800880c:	20000fd0 	.word	0x20000fd0
 8008810:	20000fe0 	.word	0x20000fe0
 8008814:	20000fcc 	.word	0x20000fcc
 8008818:	20000af4 	.word	0x20000af4
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	; 0x28
 8008824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008826:	2300      	movs	r3, #0
 8008828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800882e:	463a      	mov	r2, r7
 8008830:	1d39      	adds	r1, r7, #4
 8008832:	f107 0308 	add.w	r3, r7, #8
 8008836:	4618      	mov	r0, r3
 8008838:	f7ff f8aa 	bl	8007990 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	9202      	str	r2, [sp, #8]
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	2300      	movs	r3, #0
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	2300      	movs	r3, #0
 800884c:	460a      	mov	r2, r1
 800884e:	4924      	ldr	r1, [pc, #144]	; (80088e0 <vTaskStartScheduler+0xc0>)
 8008850:	4824      	ldr	r0, [pc, #144]	; (80088e4 <vTaskStartScheduler+0xc4>)
 8008852:	f7ff fe71 	bl	8008538 <xTaskCreateStatic>
 8008856:	4603      	mov	r3, r0
 8008858:	4a23      	ldr	r2, [pc, #140]	; (80088e8 <vTaskStartScheduler+0xc8>)
 800885a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800885c:	4b22      	ldr	r3, [pc, #136]	; (80088e8 <vTaskStartScheduler+0xc8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008864:	2301      	movs	r3, #1
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e001      	b.n	800886e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d102      	bne.n	800887a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008874:	f000 fd10 	bl	8009298 <xTimerCreateTimerTask>
 8008878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d11b      	bne.n	80088b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	613b      	str	r3, [r7, #16]
}
 8008892:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008894:	4b15      	ldr	r3, [pc, #84]	; (80088ec <vTaskStartScheduler+0xcc>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3354      	adds	r3, #84	; 0x54
 800889a:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <vTaskStartScheduler+0xd0>)
 800889c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800889e:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <vTaskStartScheduler+0xd4>)
 80088a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <vTaskStartScheduler+0xd8>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088ac:	4b13      	ldr	r3, [pc, #76]	; (80088fc <vTaskStartScheduler+0xdc>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088b2:	f001 f8cd 	bl	8009a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b6:	e00e      	b.n	80088d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088be:	d10a      	bne.n	80088d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <vTaskStartScheduler+0xb4>
}
 80088d6:	bf00      	nop
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	0800adcc 	.word	0x0800adcc
 80088e4:	08008f25 	.word	0x08008f25
 80088e8:	20000fe8 	.word	0x20000fe8
 80088ec:	20000af0 	.word	0x20000af0
 80088f0:	2000005c 	.word	0x2000005c
 80088f4:	20000fe4 	.word	0x20000fe4
 80088f8:	20000fd0 	.word	0x20000fd0
 80088fc:	20000fc8 	.word	0x20000fc8

08008900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008904:	4b04      	ldr	r3, [pc, #16]	; (8008918 <vTaskSuspendAll+0x18>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	4a03      	ldr	r2, [pc, #12]	; (8008918 <vTaskSuspendAll+0x18>)
 800890c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000fec 	.word	0x20000fec

0800891c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800892a:	4b42      	ldr	r3, [pc, #264]	; (8008a34 <xTaskResumeAll+0x118>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <xTaskResumeAll+0x2c>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	603b      	str	r3, [r7, #0]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008948:	f001 f924 	bl	8009b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800894c:	4b39      	ldr	r3, [pc, #228]	; (8008a34 <xTaskResumeAll+0x118>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3b01      	subs	r3, #1
 8008952:	4a38      	ldr	r2, [pc, #224]	; (8008a34 <xTaskResumeAll+0x118>)
 8008954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008956:	4b37      	ldr	r3, [pc, #220]	; (8008a34 <xTaskResumeAll+0x118>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d162      	bne.n	8008a24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800895e:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <xTaskResumeAll+0x11c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d05e      	beq.n	8008a24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008966:	e02f      	b.n	80089c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008968:	4b34      	ldr	r3, [pc, #208]	; (8008a3c <xTaskResumeAll+0x120>)
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3318      	adds	r3, #24
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff f8c9 	bl	8007b0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3304      	adds	r3, #4
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff f8c4 	bl	8007b0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4b2d      	ldr	r3, [pc, #180]	; (8008a40 <xTaskResumeAll+0x124>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d903      	bls.n	8008998 <xTaskResumeAll+0x7c>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	4a2a      	ldr	r2, [pc, #168]	; (8008a40 <xTaskResumeAll+0x124>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <xTaskResumeAll+0x128>)
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7ff f84f 	bl	8007a52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b23      	ldr	r3, [pc, #140]	; (8008a48 <xTaskResumeAll+0x12c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089c2:	4b22      	ldr	r3, [pc, #136]	; (8008a4c <xTaskResumeAll+0x130>)
 80089c4:	2201      	movs	r2, #1
 80089c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089c8:	4b1c      	ldr	r3, [pc, #112]	; (8008a3c <xTaskResumeAll+0x120>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1cb      	bne.n	8008968 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089d6:	f000 fb5f 	bl	8009098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089da:	4b1d      	ldr	r3, [pc, #116]	; (8008a50 <xTaskResumeAll+0x134>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d010      	beq.n	8008a08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089e6:	f000 f847 	bl	8008a78 <xTaskIncrementTick>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80089f0:	4b16      	ldr	r3, [pc, #88]	; (8008a4c <xTaskResumeAll+0x130>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3b01      	subs	r3, #1
 80089fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f1      	bne.n	80089e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a02:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <xTaskResumeAll+0x134>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <xTaskResumeAll+0x130>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d009      	beq.n	8008a24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a10:	2301      	movs	r3, #1
 8008a12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a14:	4b0f      	ldr	r3, [pc, #60]	; (8008a54 <xTaskResumeAll+0x138>)
 8008a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a24:	f001 f8e6 	bl	8009bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a28:	68bb      	ldr	r3, [r7, #8]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000fec 	.word	0x20000fec
 8008a38:	20000fc4 	.word	0x20000fc4
 8008a3c:	20000f84 	.word	0x20000f84
 8008a40:	20000fcc 	.word	0x20000fcc
 8008a44:	20000af4 	.word	0x20000af4
 8008a48:	20000af0 	.word	0x20000af0
 8008a4c:	20000fd8 	.word	0x20000fd8
 8008a50:	20000fd4 	.word	0x20000fd4
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <xTaskGetTickCount+0x1c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a64:	687b      	ldr	r3, [r7, #4]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000fc8 	.word	0x20000fc8

08008a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a82:	4b4f      	ldr	r3, [pc, #316]	; (8008bc0 <xTaskIncrementTick+0x148>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f040 808f 	bne.w	8008baa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a8c:	4b4d      	ldr	r3, [pc, #308]	; (8008bc4 <xTaskIncrementTick+0x14c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a94:	4a4b      	ldr	r2, [pc, #300]	; (8008bc4 <xTaskIncrementTick+0x14c>)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d120      	bne.n	8008ae2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008aa0:	4b49      	ldr	r3, [pc, #292]	; (8008bc8 <xTaskIncrementTick+0x150>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	603b      	str	r3, [r7, #0]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xTaskIncrementTick+0x46>
 8008ac0:	4b41      	ldr	r3, [pc, #260]	; (8008bc8 <xTaskIncrementTick+0x150>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <xTaskIncrementTick+0x154>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <xTaskIncrementTick+0x150>)
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	4a3f      	ldr	r2, [pc, #252]	; (8008bcc <xTaskIncrementTick+0x154>)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	4b3e      	ldr	r3, [pc, #248]	; (8008bd0 <xTaskIncrementTick+0x158>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <xTaskIncrementTick+0x158>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	f000 fadb 	bl	8009098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ae2:	4b3c      	ldr	r3, [pc, #240]	; (8008bd4 <xTaskIncrementTick+0x15c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d349      	bcc.n	8008b80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aec:	4b36      	ldr	r3, [pc, #216]	; (8008bc8 <xTaskIncrementTick+0x150>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d104      	bne.n	8008b00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af6:	4b37      	ldr	r3, [pc, #220]	; (8008bd4 <xTaskIncrementTick+0x15c>)
 8008af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008afc:	601a      	str	r2, [r3, #0]
					break;
 8008afe:	e03f      	b.n	8008b80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b00:	4b31      	ldr	r3, [pc, #196]	; (8008bc8 <xTaskIncrementTick+0x150>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d203      	bcs.n	8008b20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b18:	4a2e      	ldr	r2, [pc, #184]	; (8008bd4 <xTaskIncrementTick+0x15c>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b1e:	e02f      	b.n	8008b80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fff1 	bl	8007b0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	3318      	adds	r3, #24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe ffe8 	bl	8007b0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b40:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <xTaskIncrementTick+0x160>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d903      	bls.n	8008b50 <xTaskIncrementTick+0xd8>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a22      	ldr	r2, [pc, #136]	; (8008bd8 <xTaskIncrementTick+0x160>)
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <xTaskIncrementTick+0x164>)
 8008b5e:	441a      	add	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f7fe ff73 	bl	8007a52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <xTaskIncrementTick+0x168>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d3b8      	bcc.n	8008aec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b7e:	e7b5      	b.n	8008aec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <xTaskIncrementTick+0x168>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b86:	4915      	ldr	r1, [pc, #84]	; (8008bdc <xTaskIncrementTick+0x164>)
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d901      	bls.n	8008b9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b9c:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <xTaskIncrementTick+0x16c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d007      	beq.n	8008bb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e004      	b.n	8008bb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <xTaskIncrementTick+0x170>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	4a0d      	ldr	r2, [pc, #52]	; (8008be8 <xTaskIncrementTick+0x170>)
 8008bb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bb4:	697b      	ldr	r3, [r7, #20]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000fec 	.word	0x20000fec
 8008bc4:	20000fc8 	.word	0x20000fc8
 8008bc8:	20000f7c 	.word	0x20000f7c
 8008bcc:	20000f80 	.word	0x20000f80
 8008bd0:	20000fdc 	.word	0x20000fdc
 8008bd4:	20000fe4 	.word	0x20000fe4
 8008bd8:	20000fcc 	.word	0x20000fcc
 8008bdc:	20000af4 	.word	0x20000af4
 8008be0:	20000af0 	.word	0x20000af0
 8008be4:	20000fd8 	.word	0x20000fd8
 8008be8:	20000fd4 	.word	0x20000fd4

08008bec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bf2:	4b2a      	ldr	r3, [pc, #168]	; (8008c9c <vTaskSwitchContext+0xb0>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bfa:	4b29      	ldr	r3, [pc, #164]	; (8008ca0 <vTaskSwitchContext+0xb4>)
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c00:	e046      	b.n	8008c90 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c02:	4b27      	ldr	r3, [pc, #156]	; (8008ca0 <vTaskSwitchContext+0xb4>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c08:	4b26      	ldr	r3, [pc, #152]	; (8008ca4 <vTaskSwitchContext+0xb8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	e010      	b.n	8008c32 <vTaskSwitchContext+0x46>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <vTaskSwitchContext+0x40>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	607b      	str	r3, [r7, #4]
}
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <vTaskSwitchContext+0x3e>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	491d      	ldr	r1, [pc, #116]	; (8008ca8 <vTaskSwitchContext+0xbc>)
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0e4      	beq.n	8008c10 <vTaskSwitchContext+0x24>
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <vTaskSwitchContext+0xbc>)
 8008c52:	4413      	add	r3, r2
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	605a      	str	r2, [r3, #4]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	3308      	adds	r3, #8
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d104      	bne.n	8008c76 <vTaskSwitchContext+0x8a>
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	4a0b      	ldr	r2, [pc, #44]	; (8008cac <vTaskSwitchContext+0xc0>)
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	4a08      	ldr	r2, [pc, #32]	; (8008ca4 <vTaskSwitchContext+0xb8>)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <vTaskSwitchContext+0xc0>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3354      	adds	r3, #84	; 0x54
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <vTaskSwitchContext+0xc4>)
 8008c8e:	6013      	str	r3, [r2, #0]
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	20000fec 	.word	0x20000fec
 8008ca0:	20000fd8 	.word	0x20000fd8
 8008ca4:	20000fcc 	.word	0x20000fcc
 8008ca8:	20000af4 	.word	0x20000af4
 8008cac:	20000af0 	.word	0x20000af0
 8008cb0:	2000005c 	.word	0x2000005c

08008cb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	60fb      	str	r3, [r7, #12]
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <vTaskPlaceOnEventList+0x44>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3318      	adds	r3, #24
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fe fed9 	bl	8007a9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ce8:	2101      	movs	r1, #1
 8008cea:	6838      	ldr	r0, [r7, #0]
 8008cec:	f000 fa80 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
}
 8008cf0:	bf00      	nop
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000af0 	.word	0x20000af0

08008cfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10a      	bne.n	8008d24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	617b      	str	r3, [r7, #20]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3318      	adds	r3, #24
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7fe fe90 	bl	8007a52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	68b8      	ldr	r0, [r7, #8]
 8008d42:	f000 fa55 	bl	80091f0 <prvAddCurrentTaskToDelayedList>
	}
 8008d46:	bf00      	nop
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20000af0 	.word	0x20000af0

08008d54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	60fb      	str	r3, [r7, #12]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	3318      	adds	r3, #24
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe fec1 	bl	8007b0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d8a:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <xTaskRemoveFromEventList+0xb0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d11d      	bne.n	8008dce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe feb8 	bl	8007b0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4b19      	ldr	r3, [pc, #100]	; (8008e08 <xTaskRemoveFromEventList+0xb4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d903      	bls.n	8008db0 <xTaskRemoveFromEventList+0x5c>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a16      	ldr	r2, [pc, #88]	; (8008e08 <xTaskRemoveFromEventList+0xb4>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a13      	ldr	r2, [pc, #76]	; (8008e0c <xTaskRemoveFromEventList+0xb8>)
 8008dbe:	441a      	add	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fe43 	bl	8007a52 <vListInsertEnd>
 8008dcc:	e005      	b.n	8008dda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	3318      	adds	r3, #24
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	480e      	ldr	r0, [pc, #56]	; (8008e10 <xTaskRemoveFromEventList+0xbc>)
 8008dd6:	f7fe fe3c 	bl	8007a52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dde:	4b0d      	ldr	r3, [pc, #52]	; (8008e14 <xTaskRemoveFromEventList+0xc0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d905      	bls.n	8008df4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008de8:	2301      	movs	r3, #1
 8008dea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <xTaskRemoveFromEventList+0xc4>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	e001      	b.n	8008df8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008df8:	697b      	ldr	r3, [r7, #20]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000fec 	.word	0x20000fec
 8008e08:	20000fcc 	.word	0x20000fcc
 8008e0c:	20000af4 	.word	0x20000af4
 8008e10:	20000f84 	.word	0x20000f84
 8008e14:	20000af0 	.word	0x20000af0
 8008e18:	20000fd8 	.word	0x20000fd8

08008e1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e24:	4b06      	ldr	r3, [pc, #24]	; (8008e40 <vTaskInternalSetTimeOutState+0x24>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <vTaskInternalSetTimeOutState+0x28>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	605a      	str	r2, [r3, #4]
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	20000fdc 	.word	0x20000fdc
 8008e44:	20000fc8 	.word	0x20000fc8

08008e48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	613b      	str	r3, [r7, #16]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	60fb      	str	r3, [r7, #12]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008e8a:	f000 fe83 	bl	8009b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e8e:	4b1d      	ldr	r3, [pc, #116]	; (8008f04 <xTaskCheckForTimeOut+0xbc>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ea6:	d102      	bne.n	8008eae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	e023      	b.n	8008ef6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <xTaskCheckForTimeOut+0xc0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d007      	beq.n	8008eca <xTaskCheckForTimeOut+0x82>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d302      	bcc.n	8008eca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	61fb      	str	r3, [r7, #28]
 8008ec8:	e015      	b.n	8008ef6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d20b      	bcs.n	8008eec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	1ad2      	subs	r2, r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff ff9b 	bl	8008e1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	e004      	b.n	8008ef6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ef6:	f000 fe7d 	bl	8009bf4 <vPortExitCritical>

	return xReturn;
 8008efa:	69fb      	ldr	r3, [r7, #28]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3720      	adds	r7, #32
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000fc8 	.word	0x20000fc8
 8008f08:	20000fdc 	.word	0x20000fdc

08008f0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f10:	4b03      	ldr	r3, [pc, #12]	; (8008f20 <vTaskMissedYield+0x14>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
}
 8008f16:	bf00      	nop
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20000fd8 	.word	0x20000fd8

08008f24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f2c:	f000 f852 	bl	8008fd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f30:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <prvIdleTask+0x28>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d9f9      	bls.n	8008f2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <prvIdleTask+0x2c>)
 8008f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f48:	e7f0      	b.n	8008f2c <prvIdleTask+0x8>
 8008f4a:	bf00      	nop
 8008f4c:	20000af4 	.word	0x20000af4
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
 8008f5e:	e00c      	b.n	8008f7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a12      	ldr	r2, [pc, #72]	; (8008fb4 <prvInitialiseTaskLists+0x60>)
 8008f6c:	4413      	add	r3, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fd42 	bl	80079f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3301      	adds	r3, #1
 8008f78:	607b      	str	r3, [r7, #4]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b37      	cmp	r3, #55	; 0x37
 8008f7e:	d9ef      	bls.n	8008f60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f80:	480d      	ldr	r0, [pc, #52]	; (8008fb8 <prvInitialiseTaskLists+0x64>)
 8008f82:	f7fe fd39 	bl	80079f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f86:	480d      	ldr	r0, [pc, #52]	; (8008fbc <prvInitialiseTaskLists+0x68>)
 8008f88:	f7fe fd36 	bl	80079f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f8c:	480c      	ldr	r0, [pc, #48]	; (8008fc0 <prvInitialiseTaskLists+0x6c>)
 8008f8e:	f7fe fd33 	bl	80079f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f92:	480c      	ldr	r0, [pc, #48]	; (8008fc4 <prvInitialiseTaskLists+0x70>)
 8008f94:	f7fe fd30 	bl	80079f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f98:	480b      	ldr	r0, [pc, #44]	; (8008fc8 <prvInitialiseTaskLists+0x74>)
 8008f9a:	f7fe fd2d 	bl	80079f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f9e:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <prvInitialiseTaskLists+0x78>)
 8008fa0:	4a05      	ldr	r2, [pc, #20]	; (8008fb8 <prvInitialiseTaskLists+0x64>)
 8008fa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	; (8008fd0 <prvInitialiseTaskLists+0x7c>)
 8008fa6:	4a05      	ldr	r2, [pc, #20]	; (8008fbc <prvInitialiseTaskLists+0x68>)
 8008fa8:	601a      	str	r2, [r3, #0]
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000af4 	.word	0x20000af4
 8008fb8:	20000f54 	.word	0x20000f54
 8008fbc:	20000f68 	.word	0x20000f68
 8008fc0:	20000f84 	.word	0x20000f84
 8008fc4:	20000f98 	.word	0x20000f98
 8008fc8:	20000fb0 	.word	0x20000fb0
 8008fcc:	20000f7c 	.word	0x20000f7c
 8008fd0:	20000f80 	.word	0x20000f80

08008fd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fda:	e019      	b.n	8009010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008fdc:	f000 fdda 	bl	8009b94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <prvCheckTasksWaitingTermination+0x50>)
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fd8d 	bl	8007b0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <prvCheckTasksWaitingTermination+0x54>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	4a0b      	ldr	r2, [pc, #44]	; (8009028 <prvCheckTasksWaitingTermination+0x54>)
 8008ffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	; (800902c <prvCheckTasksWaitingTermination+0x58>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3b01      	subs	r3, #1
 8009002:	4a0a      	ldr	r2, [pc, #40]	; (800902c <prvCheckTasksWaitingTermination+0x58>)
 8009004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009006:	f000 fdf5 	bl	8009bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f810 	bl	8009030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009010:	4b06      	ldr	r3, [pc, #24]	; (800902c <prvCheckTasksWaitingTermination+0x58>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e1      	bne.n	8008fdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000f98 	.word	0x20000f98
 8009028:	20000fc4 	.word	0x20000fc4
 800902c:	20000fac 	.word	0x20000fac

08009030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3354      	adds	r3, #84	; 0x54
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f9e7 	bl	800a410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009048:	2b00      	cmp	r3, #0
 800904a:	d108      	bne.n	800905e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fec1 	bl	8009dd8 <vPortFree>
				vPortFree( pxTCB );
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 febe 	bl	8009dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800905c:	e018      	b.n	8009090 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009064:	2b01      	cmp	r3, #1
 8009066:	d103      	bne.n	8009070 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 feb5 	bl	8009dd8 <vPortFree>
	}
 800906e:	e00f      	b.n	8009090 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009076:	2b02      	cmp	r3, #2
 8009078:	d00a      	beq.n	8009090 <prvDeleteTCB+0x60>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	60fb      	str	r3, [r7, #12]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <prvDeleteTCB+0x5e>
	}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800909e:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <prvResetNextTaskUnblockTime+0x38>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <prvResetNextTaskUnblockTime+0x3c>)
 80090aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090b0:	e008      	b.n	80090c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b2:	4b07      	ldr	r3, [pc, #28]	; (80090d0 <prvResetNextTaskUnblockTime+0x38>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4a04      	ldr	r2, [pc, #16]	; (80090d4 <prvResetNextTaskUnblockTime+0x3c>)
 80090c2:	6013      	str	r3, [r2, #0]
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	20000f7c 	.word	0x20000f7c
 80090d4:	20000fe4 	.word	0x20000fe4

080090d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090de:	4b0b      	ldr	r3, [pc, #44]	; (800910c <xTaskGetSchedulerState+0x34>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80090e6:	2301      	movs	r3, #1
 80090e8:	607b      	str	r3, [r7, #4]
 80090ea:	e008      	b.n	80090fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ec:	4b08      	ldr	r3, [pc, #32]	; (8009110 <xTaskGetSchedulerState+0x38>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090f4:	2302      	movs	r3, #2
 80090f6:	607b      	str	r3, [r7, #4]
 80090f8:	e001      	b.n	80090fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090fe:	687b      	ldr	r3, [r7, #4]
	}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	20000fd0 	.word	0x20000fd0
 8009110:	20000fec 	.word	0x20000fec

08009114 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d056      	beq.n	80091d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800912a:	4b2e      	ldr	r3, [pc, #184]	; (80091e4 <xTaskPriorityDisinherit+0xd0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	429a      	cmp	r2, r3
 8009132:	d00a      	beq.n	800914a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	60fb      	str	r3, [r7, #12]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	60bb      	str	r3, [r7, #8]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917a:	429a      	cmp	r2, r3
 800917c:	d02c      	beq.n	80091d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d128      	bne.n	80091d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3304      	adds	r3, #4
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fcbe 	bl	8007b0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <xTaskPriorityDisinherit+0xd4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d903      	bls.n	80091b8 <xTaskPriorityDisinherit+0xa4>
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	4a0c      	ldr	r2, [pc, #48]	; (80091e8 <xTaskPriorityDisinherit+0xd4>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a09      	ldr	r2, [pc, #36]	; (80091ec <xTaskPriorityDisinherit+0xd8>)
 80091c6:	441a      	add	r2, r3
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fc3f 	bl	8007a52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091d8:	697b      	ldr	r3, [r7, #20]
	}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000af0 	.word	0x20000af0
 80091e8:	20000fcc 	.word	0x20000fcc
 80091ec:	20000af4 	.word	0x20000af4

080091f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80091fa:	4b21      	ldr	r3, [pc, #132]	; (8009280 <prvAddCurrentTaskToDelayedList+0x90>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009200:	4b20      	ldr	r3, [pc, #128]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3304      	adds	r3, #4
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe fc80 	bl	8007b0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009212:	d10a      	bne.n	800922a <prvAddCurrentTaskToDelayedList+0x3a>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800921a:	4b1a      	ldr	r3, [pc, #104]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	3304      	adds	r3, #4
 8009220:	4619      	mov	r1, r3
 8009222:	4819      	ldr	r0, [pc, #100]	; (8009288 <prvAddCurrentTaskToDelayedList+0x98>)
 8009224:	f7fe fc15 	bl	8007a52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009228:	e026      	b.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4413      	add	r3, r2
 8009230:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009232:	4b14      	ldr	r3, [pc, #80]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	429a      	cmp	r2, r3
 8009240:	d209      	bcs.n	8009256 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009242:	4b12      	ldr	r3, [pc, #72]	; (800928c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3304      	adds	r3, #4
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7fe fc23 	bl	8007a9a <vListInsert>
}
 8009254:	e010      	b.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009256:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <prvAddCurrentTaskToDelayedList+0x94>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f7fe fc19 	bl	8007a9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009268:	4b0a      	ldr	r3, [pc, #40]	; (8009294 <prvAddCurrentTaskToDelayedList+0xa4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	429a      	cmp	r2, r3
 8009270:	d202      	bcs.n	8009278 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009272:	4a08      	ldr	r2, [pc, #32]	; (8009294 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6013      	str	r3, [r2, #0]
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20000fc8 	.word	0x20000fc8
 8009284:	20000af0 	.word	0x20000af0
 8009288:	20000fb0 	.word	0x20000fb0
 800928c:	20000f80 	.word	0x20000f80
 8009290:	20000f7c 	.word	0x20000f7c
 8009294:	20000fe4 	.word	0x20000fe4

08009298 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092a2:	f000 fb07 	bl	80098b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092a6:	4b1c      	ldr	r3, [pc, #112]	; (8009318 <xTimerCreateTimerTask+0x80>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d021      	beq.n	80092f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092b6:	1d3a      	adds	r2, r7, #4
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fb7f 	bl	80079c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	9202      	str	r2, [sp, #8]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	2302      	movs	r3, #2
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	460a      	mov	r2, r1
 80092d8:	4910      	ldr	r1, [pc, #64]	; (800931c <xTimerCreateTimerTask+0x84>)
 80092da:	4811      	ldr	r0, [pc, #68]	; (8009320 <xTimerCreateTimerTask+0x88>)
 80092dc:	f7ff f92c 	bl	8008538 <xTaskCreateStatic>
 80092e0:	4603      	mov	r3, r0
 80092e2:	4a10      	ldr	r2, [pc, #64]	; (8009324 <xTimerCreateTimerTask+0x8c>)
 80092e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80092e6:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <xTimerCreateTimerTask+0x8c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80092ee:	2301      	movs	r3, #1
 80092f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	613b      	str	r3, [r7, #16]
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800930e:	697b      	ldr	r3, [r7, #20]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20001020 	.word	0x20001020
 800931c:	0800add4 	.word	0x0800add4
 8009320:	0800945d 	.word	0x0800945d
 8009324:	20001024 	.word	0x20001024

08009328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009336:	2300      	movs	r3, #0
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	623b      	str	r3, [r7, #32]
}
 8009352:	bf00      	nop
 8009354:	e7fe      	b.n	8009354 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <xTimerGenericCommand+0x98>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d02a      	beq.n	80093b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b05      	cmp	r3, #5
 800936e:	dc18      	bgt.n	80093a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009370:	f7ff feb2 	bl	80090d8 <xTaskGetSchedulerState>
 8009374:	4603      	mov	r3, r0
 8009376:	2b02      	cmp	r3, #2
 8009378:	d109      	bne.n	800938e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800937a:	4b11      	ldr	r3, [pc, #68]	; (80093c0 <xTimerGenericCommand+0x98>)
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f107 0110 	add.w	r1, r7, #16
 8009382:	2300      	movs	r3, #0
 8009384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009386:	f7fe fcef 	bl	8007d68 <xQueueGenericSend>
 800938a:	6278      	str	r0, [r7, #36]	; 0x24
 800938c:	e012      	b.n	80093b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800938e:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <xTimerGenericCommand+0x98>)
 8009390:	6818      	ldr	r0, [r3, #0]
 8009392:	f107 0110 	add.w	r1, r7, #16
 8009396:	2300      	movs	r3, #0
 8009398:	2200      	movs	r2, #0
 800939a:	f7fe fce5 	bl	8007d68 <xQueueGenericSend>
 800939e:	6278      	str	r0, [r7, #36]	; 0x24
 80093a0:	e008      	b.n	80093b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093a2:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <xTimerGenericCommand+0x98>)
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f107 0110 	add.w	r1, r7, #16
 80093aa:	2300      	movs	r3, #0
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	f7fe fdd9 	bl	8007f64 <xQueueGenericSendFromISR>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3728      	adds	r7, #40	; 0x28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20001020 	.word	0x20001020

080093c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ce:	4b22      	ldr	r3, [pc, #136]	; (8009458 <prvProcessExpiredTimer+0x94>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	3304      	adds	r3, #4
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fb95 	bl	8007b0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d022      	beq.n	8009436 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	699a      	ldr	r2, [r3, #24]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	18d1      	adds	r1, r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	6978      	ldr	r0, [r7, #20]
 80093fe:	f000 f8d1 	bl	80095a4 <prvInsertTimerInActiveList>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d01f      	beq.n	8009448 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009408:	2300      	movs	r3, #0
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	2300      	movs	r3, #0
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	2100      	movs	r1, #0
 8009412:	6978      	ldr	r0, [r7, #20]
 8009414:	f7ff ff88 	bl	8009328 <xTimerGenericCommand>
 8009418:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d113      	bne.n	8009448 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	60fb      	str	r3, [r7, #12]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	b2da      	uxtb	r2, r3
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	6978      	ldr	r0, [r7, #20]
 800944e:	4798      	blx	r3
}
 8009450:	bf00      	nop
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20001018 	.word	0x20001018

0800945c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009464:	f107 0308 	add.w	r3, r7, #8
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f857 	bl	800951c <prvGetNextExpireTime>
 800946e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4619      	mov	r1, r3
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f803 	bl	8009480 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800947a:	f000 f8d5 	bl	8009628 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800947e:	e7f1      	b.n	8009464 <prvTimerTask+0x8>

08009480 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800948a:	f7ff fa39 	bl	8008900 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800948e:	f107 0308 	add.w	r3, r7, #8
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f866 	bl	8009564 <prvSampleTimeNow>
 8009498:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d130      	bne.n	8009502 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <prvProcessTimerOrBlockTask+0x3c>
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d806      	bhi.n	80094bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094ae:	f7ff fa35 	bl	800891c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ff85 	bl	80093c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094ba:	e024      	b.n	8009506 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094c2:	4b13      	ldr	r3, [pc, #76]	; (8009510 <prvProcessTimerOrBlockTask+0x90>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <prvProcessTimerOrBlockTask+0x50>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e000      	b.n	80094d2 <prvProcessTimerOrBlockTask+0x52>
 80094d0:	2300      	movs	r3, #0
 80094d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094d4:	4b0f      	ldr	r3, [pc, #60]	; (8009514 <prvProcessTimerOrBlockTask+0x94>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	4619      	mov	r1, r3
 80094e2:	f7fe fff5 	bl	80084d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80094e6:	f7ff fa19 	bl	800891c <xTaskResumeAll>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80094f0:	4b09      	ldr	r3, [pc, #36]	; (8009518 <prvProcessTimerOrBlockTask+0x98>)
 80094f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	f3bf 8f6f 	isb	sy
}
 8009500:	e001      	b.n	8009506 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009502:	f7ff fa0b 	bl	800891c <xTaskResumeAll>
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	2000101c 	.word	0x2000101c
 8009514:	20001020 	.word	0x20001020
 8009518:	e000ed04 	.word	0xe000ed04

0800951c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009524:	4b0e      	ldr	r3, [pc, #56]	; (8009560 <prvGetNextExpireTime+0x44>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <prvGetNextExpireTime+0x16>
 800952e:	2201      	movs	r2, #1
 8009530:	e000      	b.n	8009534 <prvGetNextExpireTime+0x18>
 8009532:	2200      	movs	r2, #0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <prvGetNextExpireTime+0x44>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e001      	b.n	8009550 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009550:	68fb      	ldr	r3, [r7, #12]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	20001018 	.word	0x20001018

08009564 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800956c:	f7ff fa74 	bl	8008a58 <xTaskGetTickCount>
 8009570:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009572:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <prvSampleTimeNow+0x3c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	429a      	cmp	r2, r3
 800957a:	d205      	bcs.n	8009588 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800957c:	f000 f936 	bl	80097ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	e002      	b.n	800958e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800958e:	4a04      	ldr	r2, [pc, #16]	; (80095a0 <prvSampleTimeNow+0x3c>)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20001028 	.word	0x20001028

080095a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b086      	sub	sp, #24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d812      	bhi.n	80095f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d302      	bcc.n	80095de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095d8:	2301      	movs	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	e01b      	b.n	8009616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095de:	4b10      	ldr	r3, [pc, #64]	; (8009620 <prvInsertTimerInActiveList+0x7c>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f7fe fa56 	bl	8007a9a <vListInsert>
 80095ee:	e012      	b.n	8009616 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d206      	bcs.n	8009606 <prvInsertTimerInActiveList+0x62>
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d302      	bcc.n	8009606 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009600:	2301      	movs	r3, #1
 8009602:	617b      	str	r3, [r7, #20]
 8009604:	e007      	b.n	8009616 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <prvInsertTimerInActiveList+0x80>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7fe fa42 	bl	8007a9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009616:	697b      	ldr	r3, [r7, #20]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	2000101c 	.word	0x2000101c
 8009624:	20001018 	.word	0x20001018

08009628 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	; 0x38
 800962c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800962e:	e0ca      	b.n	80097c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	da18      	bge.n	8009668 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009636:	1d3b      	adds	r3, r7, #4
 8009638:	3304      	adds	r3, #4
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	61fb      	str	r3, [r7, #28]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800965e:	6850      	ldr	r0, [r2, #4]
 8009660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009662:	6892      	ldr	r2, [r2, #8]
 8009664:	4611      	mov	r1, r2
 8009666:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	f2c0 80ab 	blt.w	80097c6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	3304      	adds	r3, #4
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe fa43 	bl	8007b0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009686:	463b      	mov	r3, r7
 8009688:	4618      	mov	r0, r3
 800968a:	f7ff ff6b 	bl	8009564 <prvSampleTimeNow>
 800968e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b09      	cmp	r3, #9
 8009694:	f200 8096 	bhi.w	80097c4 <prvProcessReceivedCommands+0x19c>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <prvProcessReceivedCommands+0x78>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096c9 	.word	0x080096c9
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096c9 	.word	0x080096c9
 80096ac:	0800973d 	.word	0x0800973d
 80096b0:	08009751 	.word	0x08009751
 80096b4:	0800979b 	.word	0x0800979b
 80096b8:	080096c9 	.word	0x080096c9
 80096bc:	080096c9 	.word	0x080096c9
 80096c0:	0800973d 	.word	0x0800973d
 80096c4:	08009751 	.word	0x08009751
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ce:	f043 0301 	orr.w	r3, r3, #1
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	18d1      	adds	r1, r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e8:	f7ff ff5c 	bl	80095a4 <prvInsertTimerInActiveList>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d069      	beq.n	80097c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d05e      	beq.n	80097c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	441a      	add	r2, r3
 8009710:	2300      	movs	r3, #0
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	2300      	movs	r3, #0
 8009716:	2100      	movs	r1, #0
 8009718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800971a:	f7ff fe05 	bl	8009328 <xTimerGenericCommand>
 800971e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d14f      	bne.n	80097c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	61bb      	str	r3, [r7, #24]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800974e:	e03a      	b.n	80097c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	617b      	str	r3, [r7, #20]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	699a      	ldr	r2, [r3, #24]
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	18d1      	adds	r1, r2, r3
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009794:	f7ff ff06 	bl	80095a4 <prvInsertTimerInActiveList>
					break;
 8009798:	e015      	b.n	80097c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a0:	f003 0302 	and.w	r3, r3, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80097a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097aa:	f000 fb15 	bl	8009dd8 <vPortFree>
 80097ae:	e00a      	b.n	80097c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097c2:	e000      	b.n	80097c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80097c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097c6:	4b08      	ldr	r3, [pc, #32]	; (80097e8 <prvProcessReceivedCommands+0x1c0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	1d39      	adds	r1, r7, #4
 80097cc:	2200      	movs	r2, #0
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fc64 	bl	800809c <xQueueReceive>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f47f af2a 	bne.w	8009630 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	3730      	adds	r7, #48	; 0x30
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20001020 	.word	0x20001020

080097ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097f2:	e048      	b.n	8009886 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097f4:	4b2d      	ldr	r3, [pc, #180]	; (80098ac <prvSwitchTimerLists+0xc0>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097fe:	4b2b      	ldr	r3, [pc, #172]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3304      	adds	r3, #4
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe f97d 	bl	8007b0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d02e      	beq.n	8009886 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4413      	add	r3, r2
 8009830:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	429a      	cmp	r2, r3
 8009838:	d90e      	bls.n	8009858 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009846:	4b19      	ldr	r3, [pc, #100]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3304      	adds	r3, #4
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f7fe f922 	bl	8007a9a <vListInsert>
 8009856:	e016      	b.n	8009886 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009858:	2300      	movs	r3, #0
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	2300      	movs	r3, #0
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	2100      	movs	r1, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7ff fd60 	bl	8009328 <xTimerGenericCommand>
 8009868:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	603b      	str	r3, [r7, #0]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009886:	4b09      	ldr	r3, [pc, #36]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1b1      	bne.n	80097f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009890:	4b06      	ldr	r3, [pc, #24]	; (80098ac <prvSwitchTimerLists+0xc0>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009896:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <prvSwitchTimerLists+0xc4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a04      	ldr	r2, [pc, #16]	; (80098ac <prvSwitchTimerLists+0xc0>)
 800989c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800989e:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <prvSwitchTimerLists+0xc4>)
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	6013      	str	r3, [r2, #0]
}
 80098a4:	bf00      	nop
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20001018 	.word	0x20001018
 80098b0:	2000101c 	.word	0x2000101c

080098b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098ba:	f000 f96b 	bl	8009b94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098be:	4b15      	ldr	r3, [pc, #84]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d120      	bne.n	8009908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098c6:	4814      	ldr	r0, [pc, #80]	; (8009918 <prvCheckForValidListAndQueue+0x64>)
 80098c8:	f7fe f896 	bl	80079f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098cc:	4813      	ldr	r0, [pc, #76]	; (800991c <prvCheckForValidListAndQueue+0x68>)
 80098ce:	f7fe f893 	bl	80079f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098d2:	4b13      	ldr	r3, [pc, #76]	; (8009920 <prvCheckForValidListAndQueue+0x6c>)
 80098d4:	4a10      	ldr	r2, [pc, #64]	; (8009918 <prvCheckForValidListAndQueue+0x64>)
 80098d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <prvCheckForValidListAndQueue+0x70>)
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <prvCheckForValidListAndQueue+0x68>)
 80098dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098de:	2300      	movs	r3, #0
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <prvCheckForValidListAndQueue+0x74>)
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <prvCheckForValidListAndQueue+0x78>)
 80098e6:	2110      	movs	r1, #16
 80098e8:	200a      	movs	r0, #10
 80098ea:	f7fe f9a1 	bl	8007c30 <xQueueGenericCreateStatic>
 80098ee:	4603      	mov	r3, r0
 80098f0:	4a08      	ldr	r2, [pc, #32]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098f4:	4b07      	ldr	r3, [pc, #28]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	490b      	ldr	r1, [pc, #44]	; (8009930 <prvCheckForValidListAndQueue+0x7c>)
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fdba 	bl	800847c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009908:	f000 f974 	bl	8009bf4 <vPortExitCritical>
}
 800990c:	bf00      	nop
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20001020 	.word	0x20001020
 8009918:	20000ff0 	.word	0x20000ff0
 800991c:	20001004 	.word	0x20001004
 8009920:	20001018 	.word	0x20001018
 8009924:	2000101c 	.word	0x2000101c
 8009928:	200010cc 	.word	0x200010cc
 800992c:	2000102c 	.word	0x2000102c
 8009930:	0800addc 	.word	0x0800addc

08009934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3b04      	subs	r3, #4
 8009944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800994c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b04      	subs	r3, #4
 8009952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f023 0201 	bic.w	r2, r3, #1
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3b04      	subs	r3, #4
 8009962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009964:	4a0c      	ldr	r2, [pc, #48]	; (8009998 <pxPortInitialiseStack+0x64>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b14      	subs	r3, #20
 800996e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3b04      	subs	r3, #4
 800997a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f06f 0202 	mvn.w	r2, #2
 8009982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3b20      	subs	r3, #32
 8009988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800998a:	68fb      	ldr	r3, [r7, #12]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	0800999d 	.word	0x0800999d

0800999c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099a6:	4b12      	ldr	r3, [pc, #72]	; (80099f0 <prvTaskExitError+0x54>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ae:	d00a      	beq.n	80099c6 <prvTaskExitError+0x2a>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	60fb      	str	r3, [r7, #12]
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <prvTaskExitError+0x28>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	60bb      	str	r3, [r7, #8]
}
 80099d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099da:	bf00      	nop
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0fc      	beq.n	80099dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	2000000c 	.word	0x2000000c
	...

08009a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a00:	4b07      	ldr	r3, [pc, #28]	; (8009a20 <pxCurrentTCBConst2>)
 8009a02:	6819      	ldr	r1, [r3, #0]
 8009a04:	6808      	ldr	r0, [r1, #0]
 8009a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	f380 8809 	msr	PSP, r0
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f04f 0000 	mov.w	r0, #0
 8009a16:	f380 8811 	msr	BASEPRI, r0
 8009a1a:	4770      	bx	lr
 8009a1c:	f3af 8000 	nop.w

08009a20 <pxCurrentTCBConst2>:
 8009a20:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop

08009a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a28:	4808      	ldr	r0, [pc, #32]	; (8009a4c <prvPortStartFirstTask+0x24>)
 8009a2a:	6800      	ldr	r0, [r0, #0]
 8009a2c:	6800      	ldr	r0, [r0, #0]
 8009a2e:	f380 8808 	msr	MSP, r0
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8814 	msr	CONTROL, r0
 8009a3a:	b662      	cpsie	i
 8009a3c:	b661      	cpsie	f
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	df00      	svc	0
 8009a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a4a:	bf00      	nop
 8009a4c:	e000ed08 	.word	0xe000ed08

08009a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a56:	4b46      	ldr	r3, [pc, #280]	; (8009b70 <xPortStartScheduler+0x120>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a46      	ldr	r2, [pc, #280]	; (8009b74 <xPortStartScheduler+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d10a      	bne.n	8009a76 <xPortStartScheduler+0x26>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a76:	4b3e      	ldr	r3, [pc, #248]	; (8009b70 <xPortStartScheduler+0x120>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a3f      	ldr	r2, [pc, #252]	; (8009b78 <xPortStartScheduler+0x128>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10a      	bne.n	8009a96 <xPortStartScheduler+0x46>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	60fb      	str	r3, [r7, #12]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a96:	4b39      	ldr	r3, [pc, #228]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	22ff      	movs	r2, #255	; 0xff
 8009aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	4b31      	ldr	r3, [pc, #196]	; (8009b80 <xPortStartScheduler+0x130>)
 8009abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009abe:	4b31      	ldr	r3, [pc, #196]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ac4:	e009      	b.n	8009ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ac6:	4b2f      	ldr	r3, [pc, #188]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	4a2d      	ldr	r2, [pc, #180]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae2:	2b80      	cmp	r3, #128	; 0x80
 8009ae4:	d0ef      	beq.n	8009ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ae6:	4b27      	ldr	r3, [pc, #156]	; (8009b84 <xPortStartScheduler+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f1c3 0307 	rsb	r3, r3, #7
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d00a      	beq.n	8009b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60bb      	str	r3, [r7, #8]
}
 8009b04:	bf00      	nop
 8009b06:	e7fe      	b.n	8009b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b08:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	4a1d      	ldr	r2, [pc, #116]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b12:	4b1c      	ldr	r3, [pc, #112]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b1a:	4a1a      	ldr	r2, [pc, #104]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b26:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a17      	ldr	r2, [pc, #92]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b32:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a14      	ldr	r2, [pc, #80]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b3e:	f000 f8dd 	bl	8009cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <xPortStartScheduler+0x13c>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b48:	f000 f8fc 	bl	8009d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b4c:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <xPortStartScheduler+0x140>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0f      	ldr	r2, [pc, #60]	; (8009b90 <xPortStartScheduler+0x140>)
 8009b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b58:	f7ff ff66 	bl	8009a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b5c:	f7ff f846 	bl	8008bec <vTaskSwitchContext>
	prvTaskExitError();
 8009b60:	f7ff ff1c 	bl	800999c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	e000ed00 	.word	0xe000ed00
 8009b74:	410fc271 	.word	0x410fc271
 8009b78:	410fc270 	.word	0x410fc270
 8009b7c:	e000e400 	.word	0xe000e400
 8009b80:	2000111c 	.word	0x2000111c
 8009b84:	20001120 	.word	0x20001120
 8009b88:	e000ed20 	.word	0xe000ed20
 8009b8c:	2000000c 	.word	0x2000000c
 8009b90:	e000ef34 	.word	0xe000ef34

08009b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	607b      	str	r3, [r7, #4]
}
 8009bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bae:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <vPortEnterCritical+0x58>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	4a0d      	ldr	r2, [pc, #52]	; (8009bec <vPortEnterCritical+0x58>)
 8009bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <vPortEnterCritical+0x58>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d10f      	bne.n	8009be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bc0:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <vPortEnterCritical+0x5c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	603b      	str	r3, [r7, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <vPortEnterCritical+0x4a>
	}
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	2000000c 	.word	0x2000000c
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <vPortExitCritical+0x50>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <vPortExitCritical+0x24>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	607b      	str	r3, [r7, #4]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <vPortExitCritical+0x50>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	4a09      	ldr	r2, [pc, #36]	; (8009c44 <vPortExitCritical+0x50>)
 8009c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <vPortExitCritical+0x50>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d105      	bne.n	8009c36 <vPortExitCritical+0x42>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	f383 8811 	msr	BASEPRI, r3
}
 8009c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	2000000c 	.word	0x2000000c
	...

08009c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c50:	f3ef 8009 	mrs	r0, PSP
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <pxCurrentTCBConst>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	f01e 0f10 	tst.w	lr, #16
 8009c60:	bf08      	it	eq
 8009c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	6010      	str	r0, [r2, #0]
 8009c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c74:	f380 8811 	msr	BASEPRI, r0
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f7fe ffb4 	bl	8008bec <vTaskSwitchContext>
 8009c84:	f04f 0000 	mov.w	r0, #0
 8009c88:	f380 8811 	msr	BASEPRI, r0
 8009c8c:	bc09      	pop	{r0, r3}
 8009c8e:	6819      	ldr	r1, [r3, #0]
 8009c90:	6808      	ldr	r0, [r1, #0]
 8009c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c96:	f01e 0f10 	tst.w	lr, #16
 8009c9a:	bf08      	it	eq
 8009c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ca0:	f380 8809 	msr	PSP, r0
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst>:
 8009cb0:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
}
 8009cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cd2:	f7fe fed1 	bl	8008a78 <xTaskIncrementTick>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cdc:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <xPortSysTickHandler+0x40>)
 8009cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f383 8811 	msr	BASEPRI, r3
}
 8009cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <vPortSetupTimerInterrupt+0x34>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d06:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <vPortSetupTimerInterrupt+0x38>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d0c:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <vPortSetupTimerInterrupt+0x3c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <vPortSetupTimerInterrupt+0x40>)
 8009d12:	fba2 2303 	umull	r2, r3, r2, r3
 8009d16:	099b      	lsrs	r3, r3, #6
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <vPortSetupTimerInterrupt+0x44>)
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <vPortSetupTimerInterrupt+0x34>)
 8009d20:	2207      	movs	r2, #7
 8009d22:	601a      	str	r2, [r3, #0]
}
 8009d24:	bf00      	nop
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	e000e010 	.word	0xe000e010
 8009d34:	e000e018 	.word	0xe000e018
 8009d38:	20000000 	.word	0x20000000
 8009d3c:	10624dd3 	.word	0x10624dd3
 8009d40:	e000e014 	.word	0xe000e014

08009d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d54 <vPortEnableVFP+0x10>
 8009d48:	6801      	ldr	r1, [r0, #0]
 8009d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d4e:	6001      	str	r1, [r0, #0]
 8009d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d52:	bf00      	nop
 8009d54:	e000ed88 	.word	0xe000ed88

08009d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d5e:	f3ef 8305 	mrs	r3, IPSR
 8009d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b0f      	cmp	r3, #15
 8009d68:	d914      	bls.n	8009d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <vPortValidateInterruptPriority+0x70>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d74:	4b15      	ldr	r3, [pc, #84]	; (8009dcc <vPortValidateInterruptPriority+0x74>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	7afa      	ldrb	r2, [r7, #11]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d20a      	bcs.n	8009d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d94:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <vPortValidateInterruptPriority+0x78>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <vPortValidateInterruptPriority+0x7c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d90a      	bls.n	8009dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	603b      	str	r3, [r7, #0]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <vPortValidateInterruptPriority+0x60>
	}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	e000e3f0 	.word	0xe000e3f0
 8009dcc:	2000111c 	.word	0x2000111c
 8009dd0:	e000ed0c 	.word	0xe000ed0c
 8009dd4:	20001120 	.word	0x20001120

08009dd8 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d04d      	beq.n	8009e86 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dea:	2308      	movs	r3, #8
 8009dec:	425b      	negs	r3, r3
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4413      	add	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <vPortFree+0xb8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4013      	ands	r3, r2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <vPortFree+0x44>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	60fb      	str	r3, [r7, #12]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <vPortFree+0x62>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	60bb      	str	r3, [r7, #8]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	4b14      	ldr	r3, [pc, #80]	; (8009e90 <vPortFree+0xb8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d01e      	beq.n	8009e86 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11a      	bne.n	8009e86 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <vPortFree+0xb8>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	43db      	mvns	r3, r3
 8009e5a:	401a      	ands	r2, r3
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e60:	f7fe fd4e 	bl	8008900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	4b0a      	ldr	r3, [pc, #40]	; (8009e94 <vPortFree+0xbc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	4a09      	ldr	r2, [pc, #36]	; (8009e94 <vPortFree+0xbc>)
 8009e70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e72:	6938      	ldr	r0, [r7, #16]
 8009e74:	f000 f812 	bl	8009e9c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e78:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <vPortFree+0xc0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4a06      	ldr	r2, [pc, #24]	; (8009e98 <vPortFree+0xc0>)
 8009e80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e82:	f7fe fd4b 	bl	800891c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e86:	bf00      	nop
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20001138 	.word	0x20001138
 8009e94:	20001130 	.word	0x20001130
 8009e98:	20001134 	.word	0x20001134

08009e9c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ea4:	4b28      	ldr	r3, [pc, #160]	; (8009f48 <prvInsertBlockIntoFreeList+0xac>)
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e002      	b.n	8009eb0 <prvInsertBlockIntoFreeList+0x14>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d8f7      	bhi.n	8009eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d108      	bne.n	8009ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	441a      	add	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	441a      	add	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d118      	bne.n	8009f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <prvInsertBlockIntoFreeList+0xb0>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d00d      	beq.n	8009f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	441a      	add	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]
 8009f18:	e008      	b.n	8009f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <prvInsertBlockIntoFreeList+0xb0>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	e003      	b.n	8009f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d002      	beq.n	8009f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f3a:	bf00      	nop
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	20001124 	.word	0x20001124
 8009f4c:	2000112c 	.word	0x2000112c

08009f50 <_ZN6System4initEv>:

const uint8_t TEST_BUF_SIZE = 64;
char test_buf_init[TEST_BUF_SIZE];
char test_buf_loop[TEST_BUF_SIZE];

void System::init(void) {
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
    snprintf(test_buf_init, sizeof(test_buf_init), "SYS INIT\n");
 8009f56:	4a0a      	ldr	r2, [pc, #40]	; (8009f80 <_ZN6System4initEv+0x30>)
 8009f58:	2140      	movs	r1, #64	; 0x40
 8009f5a:	480a      	ldr	r0, [pc, #40]	; (8009f84 <_ZN6System4initEv+0x34>)
 8009f5c:	f000 fa1c 	bl	800a398 <sniprintf>
    uint8_t counter = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	71fb      	strb	r3, [r7, #7]
    int delay = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	603b      	str	r3, [r7, #0]
    while (true) {
    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	1c5a      	adds	r2, r3, #1
 8009f6c:	71fa      	strb	r2, [r7, #7]
 8009f6e:	4a06      	ldr	r2, [pc, #24]	; (8009f88 <_ZN6System4initEv+0x38>)
 8009f70:	2140      	movs	r1, #64	; 0x40
 8009f72:	4806      	ldr	r0, [pc, #24]	; (8009f8c <_ZN6System4initEv+0x3c>)
 8009f74:	f000 fa10 	bl	800a398 <sniprintf>
    	delay = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	603b      	str	r3, [r7, #0]
    	snprintf(test_buf_loop, sizeof(test_buf_loop), "SYS LOOP [%u]\n", counter++);
 8009f7c:	e7f4      	b.n	8009f68 <_ZN6System4initEv+0x18>
 8009f7e:	bf00      	nop
 8009f80:	0800ade4 	.word	0x0800ade4
 8009f84:	2000113c 	.word	0x2000113c
 8009f88:	0800adf0 	.word	0x0800adf0
 8009f8c:	2000117c 	.word	0x2000117c

08009f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fc fc73 	bl	8006892 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	00db      	lsls	r3, r3, #3
 8009fd2:	440b      	add	r3, r1
 8009fd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	78fb      	ldrb	r3, [r7, #3]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f7fc fcad 	bl	800693c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8009ffc:	78fa      	ldrb	r2, [r7, #3]
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	440b      	add	r3, r1
 800a00a:	3324      	adds	r3, #36	; 0x24
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	4619      	mov	r1, r3
 800a012:	f7fc fcf6 	bl	8006a02 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b082      	sub	sp, #8
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fc fe0a 	bl	8006c46 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a042:	2301      	movs	r3, #1
 800a044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	795b      	ldrb	r3, [r3, #5]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d001      	beq.n	800a052 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a04e:	f7f6 fd3c 	bl	8000aca <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a058:	7bfa      	ldrb	r2, [r7, #15]
 800a05a:	4611      	mov	r1, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fc fdb4 	bl	8006bca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fc fd60 	bl	8006b2e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800a06e:	bf00      	nop
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a086:	4618      	mov	r0, r3
 800a088:	f7fc fdaf 	bl	8006bea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	7a5b      	ldrb	r3, [r3, #9]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a094:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <HAL_PCD_SuspendCallback+0x30>)
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	4a03      	ldr	r2, [pc, #12]	; (800a0a8 <HAL_PCD_SuspendCallback+0x30>)
 800a09a:	f043 0306 	orr.w	r3, r3, #6
 800a09e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	e000ed00 	.word	0xe000ed00

0800a0ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	7a5b      	ldrb	r3, [r3, #9]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d007      	beq.n	800a0cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a0bc:	4b08      	ldr	r3, [pc, #32]	; (800a0e0 <HAL_PCD_ResumeCallback+0x34>)
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	4a07      	ldr	r2, [pc, #28]	; (800a0e0 <HAL_PCD_ResumeCallback+0x34>)
 800a0c2:	f023 0306 	bic.w	r3, r3, #6
 800a0c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a0c8:	f000 f934 	bl	800a334 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fc fd9f 	bl	8006c16 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	e000ed00 	.word	0xe000ed00

0800a0e4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	70fb      	strb	r3, [r7, #3]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70bb      	strb	r3, [r7, #2]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a10c:	78bb      	ldrb	r3, [r7, #2]
 800a10e:	883a      	ldrh	r2, [r7, #0]
 800a110:	78f9      	ldrb	r1, [r7, #3]
 800a112:	f7f7 ff99 	bl	8002048 <HAL_PCD_EP_Open>
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 f90f 	bl	800a340 <USBD_Get_USB_Status>
 800a122:	4603      	mov	r3, r0
 800a124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a126:	7bbb      	ldrb	r3, [r7, #14]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	460b      	mov	r3, r1
 800a13a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a14a:	78fa      	ldrb	r2, [r7, #3]
 800a14c:	4611      	mov	r1, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	f7f8 f83f 	bl	80021d2 <HAL_PCD_EP_SetStall>
 800a154:	4603      	mov	r3, r0
 800a156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a158:	7bfb      	ldrb	r3, [r7, #15]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 f8f0 	bl	800a340 <USBD_Get_USB_Status>
 800a160:	4603      	mov	r3, r0
 800a162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a164:	7bbb      	ldrb	r3, [r7, #14]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	460b      	mov	r3, r1
 800a178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7f8 f872 	bl	8002276 <HAL_PCD_EP_ClrStall>
 800a192:	4603      	mov	r3, r0
 800a194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a196:	7bfb      	ldrb	r3, [r7, #15]
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f8d1 	bl	800a340 <USBD_Get_USB_Status>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	da0b      	bge.n	800a1e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1c8:	78fb      	ldrb	r3, [r7, #3]
 800a1ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ce:	68f9      	ldr	r1, [r7, #12]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	00db      	lsls	r3, r3, #3
 800a1d8:	440b      	add	r3, r1
 800a1da:	3312      	adds	r3, #18
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	e00b      	b.n	800a1f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	440b      	add	r3, r1
 800a1f2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800a1f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a21e:	78fa      	ldrb	r2, [r7, #3]
 800a220:	4611      	mov	r1, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f7f7 feec 	bl	8002000 <HAL_PCD_SetAddress>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 f886 	bl	800a340 <USBD_Get_USB_Status>
 800a234:	4603      	mov	r3, r0
 800a236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a238:	7bbb      	ldrb	r3, [r7, #14]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	460b      	mov	r3, r1
 800a250:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a260:	7af9      	ldrb	r1, [r7, #11]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	f7f7 ff7d 	bl	8002164 <HAL_PCD_EP_Transmit>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f865 	bl	800a340 <USBD_Get_USB_Status>
 800a276:	4603      	mov	r3, r0
 800a278:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a27a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	460b      	mov	r3, r1
 800a292:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a294:	2300      	movs	r3, #0
 800a296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2a2:	7af9      	ldrb	r1, [r7, #11]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	f7f7 ff2b 	bl	8002102 <HAL_PCD_EP_Receive>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f844 	bl	800a340 <USBD_Get_USB_Status>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <HAL_PCDEx_LPM_Callback+0x18>
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d013      	beq.n	800a306 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a2de:	e023      	b.n	800a328 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7a5b      	ldrb	r3, [r3, #9]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a2e8:	f000 f824 	bl	800a334 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a2ec:	4b10      	ldr	r3, [pc, #64]	; (800a330 <HAL_PCDEx_LPM_Callback+0x68>)
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	; (800a330 <HAL_PCDEx_LPM_Callback+0x68>)
 800a2f2:	f023 0306 	bic.w	r3, r3, #6
 800a2f6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fc fc89 	bl	8006c16 <USBD_LL_Resume>
    break;
 800a304:	e010      	b.n	800a328 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fc fc6c 	bl	8006bea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7a5b      	ldrb	r3, [r3, #9]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d005      	beq.n	800a326 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a31a:	4b05      	ldr	r3, [pc, #20]	; (800a330 <HAL_PCDEx_LPM_Callback+0x68>)
 800a31c:	691b      	ldr	r3, [r3, #16]
 800a31e:	4a04      	ldr	r2, [pc, #16]	; (800a330 <HAL_PCDEx_LPM_Callback+0x68>)
 800a320:	f043 0306 	orr.w	r3, r3, #6
 800a324:	6113      	str	r3, [r2, #16]
    break;
 800a326:	bf00      	nop
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	e000ed00 	.word	0xe000ed00

0800a334 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a338:	f7f6 fb7b 	bl	8000a32 <SystemClock_Config>
}
 800a33c:	bf00      	nop
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34a:	2300      	movs	r3, #0
 800a34c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a34e:	79fb      	ldrb	r3, [r7, #7]
 800a350:	2b03      	cmp	r3, #3
 800a352:	d817      	bhi.n	800a384 <USBD_Get_USB_Status+0x44>
 800a354:	a201      	add	r2, pc, #4	; (adr r2, 800a35c <USBD_Get_USB_Status+0x1c>)
 800a356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35a:	bf00      	nop
 800a35c:	0800a36d 	.word	0x0800a36d
 800a360:	0800a373 	.word	0x0800a373
 800a364:	0800a379 	.word	0x0800a379
 800a368:	0800a37f 	.word	0x0800a37f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
    break;
 800a370:	e00b      	b.n	800a38a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a372:	2303      	movs	r3, #3
 800a374:	73fb      	strb	r3, [r7, #15]
    break;
 800a376:	e008      	b.n	800a38a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a378:	2301      	movs	r3, #1
 800a37a:	73fb      	strb	r3, [r7, #15]
    break;
 800a37c:	e005      	b.n	800a38a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	73fb      	strb	r3, [r7, #15]
    break;
 800a382:	e002      	b.n	800a38a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	73fb      	strb	r3, [r7, #15]
    break;
 800a388:	bf00      	nop
  }
  return usb_status;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <sniprintf>:
 800a398:	b40c      	push	{r2, r3}
 800a39a:	b530      	push	{r4, r5, lr}
 800a39c:	4b17      	ldr	r3, [pc, #92]	; (800a3fc <sniprintf+0x64>)
 800a39e:	1e0c      	subs	r4, r1, #0
 800a3a0:	681d      	ldr	r5, [r3, #0]
 800a3a2:	b09d      	sub	sp, #116	; 0x74
 800a3a4:	da08      	bge.n	800a3b8 <sniprintf+0x20>
 800a3a6:	238b      	movs	r3, #139	; 0x8b
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ae:	b01d      	add	sp, #116	; 0x74
 800a3b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3b4:	b002      	add	sp, #8
 800a3b6:	4770      	bx	lr
 800a3b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a3bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a3c0:	bf14      	ite	ne
 800a3c2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a3c6:	4623      	moveq	r3, r4
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	9307      	str	r3, [sp, #28]
 800a3cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3d0:	9002      	str	r0, [sp, #8]
 800a3d2:	9006      	str	r0, [sp, #24]
 800a3d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3da:	ab21      	add	r3, sp, #132	; 0x84
 800a3dc:	a902      	add	r1, sp, #8
 800a3de:	4628      	mov	r0, r5
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	f000 f94b 	bl	800a67c <_svfiprintf_r>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	bfbc      	itt	lt
 800a3ea:	238b      	movlt	r3, #139	; 0x8b
 800a3ec:	602b      	strlt	r3, [r5, #0]
 800a3ee:	2c00      	cmp	r4, #0
 800a3f0:	d0dd      	beq.n	800a3ae <sniprintf+0x16>
 800a3f2:	9b02      	ldr	r3, [sp, #8]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	701a      	strb	r2, [r3, #0]
 800a3f8:	e7d9      	b.n	800a3ae <sniprintf+0x16>
 800a3fa:	bf00      	nop
 800a3fc:	2000005c 	.word	0x2000005c

0800a400 <memset>:
 800a400:	4402      	add	r2, r0
 800a402:	4603      	mov	r3, r0
 800a404:	4293      	cmp	r3, r2
 800a406:	d100      	bne.n	800a40a <memset+0xa>
 800a408:	4770      	bx	lr
 800a40a:	f803 1b01 	strb.w	r1, [r3], #1
 800a40e:	e7f9      	b.n	800a404 <memset+0x4>

0800a410 <_reclaim_reent>:
 800a410:	4b29      	ldr	r3, [pc, #164]	; (800a4b8 <_reclaim_reent+0xa8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4283      	cmp	r3, r0
 800a416:	b570      	push	{r4, r5, r6, lr}
 800a418:	4604      	mov	r4, r0
 800a41a:	d04b      	beq.n	800a4b4 <_reclaim_reent+0xa4>
 800a41c:	69c3      	ldr	r3, [r0, #28]
 800a41e:	b143      	cbz	r3, 800a432 <_reclaim_reent+0x22>
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d144      	bne.n	800a4b0 <_reclaim_reent+0xa0>
 800a426:	69e3      	ldr	r3, [r4, #28]
 800a428:	6819      	ldr	r1, [r3, #0]
 800a42a:	b111      	cbz	r1, 800a432 <_reclaim_reent+0x22>
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 f87f 	bl	800a530 <_free_r>
 800a432:	6961      	ldr	r1, [r4, #20]
 800a434:	b111      	cbz	r1, 800a43c <_reclaim_reent+0x2c>
 800a436:	4620      	mov	r0, r4
 800a438:	f000 f87a 	bl	800a530 <_free_r>
 800a43c:	69e1      	ldr	r1, [r4, #28]
 800a43e:	b111      	cbz	r1, 800a446 <_reclaim_reent+0x36>
 800a440:	4620      	mov	r0, r4
 800a442:	f000 f875 	bl	800a530 <_free_r>
 800a446:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a448:	b111      	cbz	r1, 800a450 <_reclaim_reent+0x40>
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 f870 	bl	800a530 <_free_r>
 800a450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a452:	b111      	cbz	r1, 800a45a <_reclaim_reent+0x4a>
 800a454:	4620      	mov	r0, r4
 800a456:	f000 f86b 	bl	800a530 <_free_r>
 800a45a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a45c:	b111      	cbz	r1, 800a464 <_reclaim_reent+0x54>
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 f866 	bl	800a530 <_free_r>
 800a464:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a466:	b111      	cbz	r1, 800a46e <_reclaim_reent+0x5e>
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 f861 	bl	800a530 <_free_r>
 800a46e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a470:	b111      	cbz	r1, 800a478 <_reclaim_reent+0x68>
 800a472:	4620      	mov	r0, r4
 800a474:	f000 f85c 	bl	800a530 <_free_r>
 800a478:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a47a:	b111      	cbz	r1, 800a482 <_reclaim_reent+0x72>
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 f857 	bl	800a530 <_free_r>
 800a482:	6a23      	ldr	r3, [r4, #32]
 800a484:	b1b3      	cbz	r3, 800a4b4 <_reclaim_reent+0xa4>
 800a486:	4620      	mov	r0, r4
 800a488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a48c:	4718      	bx	r3
 800a48e:	5949      	ldr	r1, [r1, r5]
 800a490:	b941      	cbnz	r1, 800a4a4 <_reclaim_reent+0x94>
 800a492:	3504      	adds	r5, #4
 800a494:	69e3      	ldr	r3, [r4, #28]
 800a496:	2d80      	cmp	r5, #128	; 0x80
 800a498:	68d9      	ldr	r1, [r3, #12]
 800a49a:	d1f8      	bne.n	800a48e <_reclaim_reent+0x7e>
 800a49c:	4620      	mov	r0, r4
 800a49e:	f000 f847 	bl	800a530 <_free_r>
 800a4a2:	e7c0      	b.n	800a426 <_reclaim_reent+0x16>
 800a4a4:	680e      	ldr	r6, [r1, #0]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 f842 	bl	800a530 <_free_r>
 800a4ac:	4631      	mov	r1, r6
 800a4ae:	e7ef      	b.n	800a490 <_reclaim_reent+0x80>
 800a4b0:	2500      	movs	r5, #0
 800a4b2:	e7ef      	b.n	800a494 <_reclaim_reent+0x84>
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
 800a4b6:	bf00      	nop
 800a4b8:	2000005c 	.word	0x2000005c

0800a4bc <__errno>:
 800a4bc:	4b01      	ldr	r3, [pc, #4]	; (800a4c4 <__errno+0x8>)
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	2000005c 	.word	0x2000005c

0800a4c8 <__libc_init_array>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	4d0d      	ldr	r5, [pc, #52]	; (800a500 <__libc_init_array+0x38>)
 800a4cc:	4c0d      	ldr	r4, [pc, #52]	; (800a504 <__libc_init_array+0x3c>)
 800a4ce:	1b64      	subs	r4, r4, r5
 800a4d0:	10a4      	asrs	r4, r4, #2
 800a4d2:	2600      	movs	r6, #0
 800a4d4:	42a6      	cmp	r6, r4
 800a4d6:	d109      	bne.n	800a4ec <__libc_init_array+0x24>
 800a4d8:	4d0b      	ldr	r5, [pc, #44]	; (800a508 <__libc_init_array+0x40>)
 800a4da:	4c0c      	ldr	r4, [pc, #48]	; (800a50c <__libc_init_array+0x44>)
 800a4dc:	f000 fc6a 	bl	800adb4 <_init>
 800a4e0:	1b64      	subs	r4, r4, r5
 800a4e2:	10a4      	asrs	r4, r4, #2
 800a4e4:	2600      	movs	r6, #0
 800a4e6:	42a6      	cmp	r6, r4
 800a4e8:	d105      	bne.n	800a4f6 <__libc_init_array+0x2e>
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f0:	4798      	blx	r3
 800a4f2:	3601      	adds	r6, #1
 800a4f4:	e7ee      	b.n	800a4d4 <__libc_init_array+0xc>
 800a4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4fa:	4798      	blx	r3
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	e7f2      	b.n	800a4e6 <__libc_init_array+0x1e>
 800a500:	0800ae44 	.word	0x0800ae44
 800a504:	0800ae44 	.word	0x0800ae44
 800a508:	0800ae44 	.word	0x0800ae44
 800a50c:	0800ae48 	.word	0x0800ae48

0800a510 <__retarget_lock_acquire_recursive>:
 800a510:	4770      	bx	lr

0800a512 <__retarget_lock_release_recursive>:
 800a512:	4770      	bx	lr

0800a514 <memcpy>:
 800a514:	440a      	add	r2, r1
 800a516:	4291      	cmp	r1, r2
 800a518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a51c:	d100      	bne.n	800a520 <memcpy+0xc>
 800a51e:	4770      	bx	lr
 800a520:	b510      	push	{r4, lr}
 800a522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a52a:	4291      	cmp	r1, r2
 800a52c:	d1f9      	bne.n	800a522 <memcpy+0xe>
 800a52e:	bd10      	pop	{r4, pc}

0800a530 <_free_r>:
 800a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a532:	2900      	cmp	r1, #0
 800a534:	d044      	beq.n	800a5c0 <_free_r+0x90>
 800a536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53a:	9001      	str	r0, [sp, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f1a1 0404 	sub.w	r4, r1, #4
 800a542:	bfb8      	it	lt
 800a544:	18e4      	addlt	r4, r4, r3
 800a546:	f000 fbc7 	bl	800acd8 <__malloc_lock>
 800a54a:	4a1e      	ldr	r2, [pc, #120]	; (800a5c4 <_free_r+0x94>)
 800a54c:	9801      	ldr	r0, [sp, #4]
 800a54e:	6813      	ldr	r3, [r2, #0]
 800a550:	b933      	cbnz	r3, 800a560 <_free_r+0x30>
 800a552:	6063      	str	r3, [r4, #4]
 800a554:	6014      	str	r4, [r2, #0]
 800a556:	b003      	add	sp, #12
 800a558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a55c:	f000 bbc2 	b.w	800ace4 <__malloc_unlock>
 800a560:	42a3      	cmp	r3, r4
 800a562:	d908      	bls.n	800a576 <_free_r+0x46>
 800a564:	6825      	ldr	r5, [r4, #0]
 800a566:	1961      	adds	r1, r4, r5
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf01      	itttt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	1949      	addeq	r1, r1, r5
 800a572:	6021      	streq	r1, [r4, #0]
 800a574:	e7ed      	b.n	800a552 <_free_r+0x22>
 800a576:	461a      	mov	r2, r3
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b10b      	cbz	r3, 800a580 <_free_r+0x50>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d9fa      	bls.n	800a576 <_free_r+0x46>
 800a580:	6811      	ldr	r1, [r2, #0]
 800a582:	1855      	adds	r5, r2, r1
 800a584:	42a5      	cmp	r5, r4
 800a586:	d10b      	bne.n	800a5a0 <_free_r+0x70>
 800a588:	6824      	ldr	r4, [r4, #0]
 800a58a:	4421      	add	r1, r4
 800a58c:	1854      	adds	r4, r2, r1
 800a58e:	42a3      	cmp	r3, r4
 800a590:	6011      	str	r1, [r2, #0]
 800a592:	d1e0      	bne.n	800a556 <_free_r+0x26>
 800a594:	681c      	ldr	r4, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	6053      	str	r3, [r2, #4]
 800a59a:	440c      	add	r4, r1
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	e7da      	b.n	800a556 <_free_r+0x26>
 800a5a0:	d902      	bls.n	800a5a8 <_free_r+0x78>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	6003      	str	r3, [r0, #0]
 800a5a6:	e7d6      	b.n	800a556 <_free_r+0x26>
 800a5a8:	6825      	ldr	r5, [r4, #0]
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf04      	itt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	6063      	str	r3, [r4, #4]
 800a5b6:	bf04      	itt	eq
 800a5b8:	1949      	addeq	r1, r1, r5
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	6054      	str	r4, [r2, #4]
 800a5be:	e7ca      	b.n	800a556 <_free_r+0x26>
 800a5c0:	b003      	add	sp, #12
 800a5c2:	bd30      	pop	{r4, r5, pc}
 800a5c4:	200015d8 	.word	0x200015d8

0800a5c8 <__ssputs_r>:
 800a5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5cc:	688e      	ldr	r6, [r1, #8]
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	42be      	cmp	r6, r7
 800a5d2:	680b      	ldr	r3, [r1, #0]
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4690      	mov	r8, r2
 800a5da:	d82c      	bhi.n	800a636 <__ssputs_r+0x6e>
 800a5dc:	898a      	ldrh	r2, [r1, #12]
 800a5de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5e2:	d026      	beq.n	800a632 <__ssputs_r+0x6a>
 800a5e4:	6965      	ldr	r5, [r4, #20]
 800a5e6:	6909      	ldr	r1, [r1, #16]
 800a5e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5ec:	eba3 0901 	sub.w	r9, r3, r1
 800a5f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5f4:	1c7b      	adds	r3, r7, #1
 800a5f6:	444b      	add	r3, r9
 800a5f8:	106d      	asrs	r5, r5, #1
 800a5fa:	429d      	cmp	r5, r3
 800a5fc:	bf38      	it	cc
 800a5fe:	461d      	movcc	r5, r3
 800a600:	0553      	lsls	r3, r2, #21
 800a602:	d527      	bpl.n	800a654 <__ssputs_r+0x8c>
 800a604:	4629      	mov	r1, r5
 800a606:	f000 f957 	bl	800a8b8 <_malloc_r>
 800a60a:	4606      	mov	r6, r0
 800a60c:	b360      	cbz	r0, 800a668 <__ssputs_r+0xa0>
 800a60e:	6921      	ldr	r1, [r4, #16]
 800a610:	464a      	mov	r2, r9
 800a612:	f7ff ff7f 	bl	800a514 <memcpy>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	6126      	str	r6, [r4, #16]
 800a624:	6165      	str	r5, [r4, #20]
 800a626:	444e      	add	r6, r9
 800a628:	eba5 0509 	sub.w	r5, r5, r9
 800a62c:	6026      	str	r6, [r4, #0]
 800a62e:	60a5      	str	r5, [r4, #8]
 800a630:	463e      	mov	r6, r7
 800a632:	42be      	cmp	r6, r7
 800a634:	d900      	bls.n	800a638 <__ssputs_r+0x70>
 800a636:	463e      	mov	r6, r7
 800a638:	6820      	ldr	r0, [r4, #0]
 800a63a:	4632      	mov	r2, r6
 800a63c:	4641      	mov	r1, r8
 800a63e:	f000 fb86 	bl	800ad4e <memmove>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	4433      	add	r3, r6
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	2000      	movs	r0, #0
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	462a      	mov	r2, r5
 800a656:	f000 fb4b 	bl	800acf0 <_realloc_r>
 800a65a:	4606      	mov	r6, r0
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1e0      	bne.n	800a622 <__ssputs_r+0x5a>
 800a660:	6921      	ldr	r1, [r4, #16]
 800a662:	4650      	mov	r0, sl
 800a664:	f7ff ff64 	bl	800a530 <_free_r>
 800a668:	230c      	movs	r3, #12
 800a66a:	f8ca 3000 	str.w	r3, [sl]
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a67a:	e7e9      	b.n	800a650 <__ssputs_r+0x88>

0800a67c <_svfiprintf_r>:
 800a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	4698      	mov	r8, r3
 800a682:	898b      	ldrh	r3, [r1, #12]
 800a684:	061b      	lsls	r3, r3, #24
 800a686:	b09d      	sub	sp, #116	; 0x74
 800a688:	4607      	mov	r7, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	4614      	mov	r4, r2
 800a68e:	d50e      	bpl.n	800a6ae <_svfiprintf_r+0x32>
 800a690:	690b      	ldr	r3, [r1, #16]
 800a692:	b963      	cbnz	r3, 800a6ae <_svfiprintf_r+0x32>
 800a694:	2140      	movs	r1, #64	; 0x40
 800a696:	f000 f90f 	bl	800a8b8 <_malloc_r>
 800a69a:	6028      	str	r0, [r5, #0]
 800a69c:	6128      	str	r0, [r5, #16]
 800a69e:	b920      	cbnz	r0, 800a6aa <_svfiprintf_r+0x2e>
 800a6a0:	230c      	movs	r3, #12
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a8:	e0d0      	b.n	800a84c <_svfiprintf_r+0x1d0>
 800a6aa:	2340      	movs	r3, #64	; 0x40
 800a6ac:	616b      	str	r3, [r5, #20]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b2:	2320      	movs	r3, #32
 800a6b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6bc:	2330      	movs	r3, #48	; 0x30
 800a6be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a864 <_svfiprintf_r+0x1e8>
 800a6c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6c6:	f04f 0901 	mov.w	r9, #1
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	469a      	mov	sl, r3
 800a6ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d2:	b10a      	cbz	r2, 800a6d8 <_svfiprintf_r+0x5c>
 800a6d4:	2a25      	cmp	r2, #37	; 0x25
 800a6d6:	d1f9      	bne.n	800a6cc <_svfiprintf_r+0x50>
 800a6d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a6dc:	d00b      	beq.n	800a6f6 <_svfiprintf_r+0x7a>
 800a6de:	465b      	mov	r3, fp
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff ff6f 	bl	800a5c8 <__ssputs_r>
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	f000 80a9 	beq.w	800a842 <_svfiprintf_r+0x1c6>
 800a6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f2:	445a      	add	r2, fp
 800a6f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80a1 	beq.w	800a842 <_svfiprintf_r+0x1c6>
 800a700:	2300      	movs	r3, #0
 800a702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a70a:	f10a 0a01 	add.w	sl, sl, #1
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	9307      	str	r3, [sp, #28]
 800a712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a716:	931a      	str	r3, [sp, #104]	; 0x68
 800a718:	4654      	mov	r4, sl
 800a71a:	2205      	movs	r2, #5
 800a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a720:	4850      	ldr	r0, [pc, #320]	; (800a864 <_svfiprintf_r+0x1e8>)
 800a722:	f7f5 fd7d 	bl	8000220 <memchr>
 800a726:	9a04      	ldr	r2, [sp, #16]
 800a728:	b9d8      	cbnz	r0, 800a762 <_svfiprintf_r+0xe6>
 800a72a:	06d0      	lsls	r0, r2, #27
 800a72c:	bf44      	itt	mi
 800a72e:	2320      	movmi	r3, #32
 800a730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a734:	0711      	lsls	r1, r2, #28
 800a736:	bf44      	itt	mi
 800a738:	232b      	movmi	r3, #43	; 0x2b
 800a73a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a73e:	f89a 3000 	ldrb.w	r3, [sl]
 800a742:	2b2a      	cmp	r3, #42	; 0x2a
 800a744:	d015      	beq.n	800a772 <_svfiprintf_r+0xf6>
 800a746:	9a07      	ldr	r2, [sp, #28]
 800a748:	4654      	mov	r4, sl
 800a74a:	2000      	movs	r0, #0
 800a74c:	f04f 0c0a 	mov.w	ip, #10
 800a750:	4621      	mov	r1, r4
 800a752:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a756:	3b30      	subs	r3, #48	; 0x30
 800a758:	2b09      	cmp	r3, #9
 800a75a:	d94d      	bls.n	800a7f8 <_svfiprintf_r+0x17c>
 800a75c:	b1b0      	cbz	r0, 800a78c <_svfiprintf_r+0x110>
 800a75e:	9207      	str	r2, [sp, #28]
 800a760:	e014      	b.n	800a78c <_svfiprintf_r+0x110>
 800a762:	eba0 0308 	sub.w	r3, r0, r8
 800a766:	fa09 f303 	lsl.w	r3, r9, r3
 800a76a:	4313      	orrs	r3, r2
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	46a2      	mov	sl, r4
 800a770:	e7d2      	b.n	800a718 <_svfiprintf_r+0x9c>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	1d19      	adds	r1, r3, #4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	9103      	str	r1, [sp, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	bfbb      	ittet	lt
 800a77e:	425b      	neglt	r3, r3
 800a780:	f042 0202 	orrlt.w	r2, r2, #2
 800a784:	9307      	strge	r3, [sp, #28]
 800a786:	9307      	strlt	r3, [sp, #28]
 800a788:	bfb8      	it	lt
 800a78a:	9204      	strlt	r2, [sp, #16]
 800a78c:	7823      	ldrb	r3, [r4, #0]
 800a78e:	2b2e      	cmp	r3, #46	; 0x2e
 800a790:	d10c      	bne.n	800a7ac <_svfiprintf_r+0x130>
 800a792:	7863      	ldrb	r3, [r4, #1]
 800a794:	2b2a      	cmp	r3, #42	; 0x2a
 800a796:	d134      	bne.n	800a802 <_svfiprintf_r+0x186>
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	9203      	str	r2, [sp, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bfb8      	it	lt
 800a7a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7a8:	3402      	adds	r4, #2
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a874 <_svfiprintf_r+0x1f8>
 800a7b0:	7821      	ldrb	r1, [r4, #0]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	f7f5 fd33 	bl	8000220 <memchr>
 800a7ba:	b138      	cbz	r0, 800a7cc <_svfiprintf_r+0x150>
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	eba0 000a 	sub.w	r0, r0, sl
 800a7c2:	2240      	movs	r2, #64	; 0x40
 800a7c4:	4082      	lsls	r2, r0
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	4825      	ldr	r0, [pc, #148]	; (800a868 <_svfiprintf_r+0x1ec>)
 800a7d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d6:	2206      	movs	r2, #6
 800a7d8:	f7f5 fd22 	bl	8000220 <memchr>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d038      	beq.n	800a852 <_svfiprintf_r+0x1d6>
 800a7e0:	4b22      	ldr	r3, [pc, #136]	; (800a86c <_svfiprintf_r+0x1f0>)
 800a7e2:	bb1b      	cbnz	r3, 800a82c <_svfiprintf_r+0x1b0>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	3307      	adds	r3, #7
 800a7e8:	f023 0307 	bic.w	r3, r3, #7
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	9303      	str	r3, [sp, #12]
 800a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f2:	4433      	add	r3, r6
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	e768      	b.n	800a6ca <_svfiprintf_r+0x4e>
 800a7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7a6      	b.n	800a750 <_svfiprintf_r+0xd4>
 800a802:	2300      	movs	r3, #0
 800a804:	3401      	adds	r4, #1
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	4619      	mov	r1, r3
 800a80a:	f04f 0c0a 	mov.w	ip, #10
 800a80e:	4620      	mov	r0, r4
 800a810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a814:	3a30      	subs	r2, #48	; 0x30
 800a816:	2a09      	cmp	r2, #9
 800a818:	d903      	bls.n	800a822 <_svfiprintf_r+0x1a6>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0c6      	beq.n	800a7ac <_svfiprintf_r+0x130>
 800a81e:	9105      	str	r1, [sp, #20]
 800a820:	e7c4      	b.n	800a7ac <_svfiprintf_r+0x130>
 800a822:	fb0c 2101 	mla	r1, ip, r1, r2
 800a826:	4604      	mov	r4, r0
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f0      	b.n	800a80e <_svfiprintf_r+0x192>
 800a82c:	ab03      	add	r3, sp, #12
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	462a      	mov	r2, r5
 800a832:	4b0f      	ldr	r3, [pc, #60]	; (800a870 <_svfiprintf_r+0x1f4>)
 800a834:	a904      	add	r1, sp, #16
 800a836:	4638      	mov	r0, r7
 800a838:	f3af 8000 	nop.w
 800a83c:	1c42      	adds	r2, r0, #1
 800a83e:	4606      	mov	r6, r0
 800a840:	d1d6      	bne.n	800a7f0 <_svfiprintf_r+0x174>
 800a842:	89ab      	ldrh	r3, [r5, #12]
 800a844:	065b      	lsls	r3, r3, #25
 800a846:	f53f af2d 	bmi.w	800a6a4 <_svfiprintf_r+0x28>
 800a84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a84c:	b01d      	add	sp, #116	; 0x74
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a852:	ab03      	add	r3, sp, #12
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	462a      	mov	r2, r5
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <_svfiprintf_r+0x1f4>)
 800a85a:	a904      	add	r1, sp, #16
 800a85c:	4638      	mov	r0, r7
 800a85e:	f000 f919 	bl	800aa94 <_printf_i>
 800a862:	e7eb      	b.n	800a83c <_svfiprintf_r+0x1c0>
 800a864:	0800ae10 	.word	0x0800ae10
 800a868:	0800ae1a 	.word	0x0800ae1a
 800a86c:	00000000 	.word	0x00000000
 800a870:	0800a5c9 	.word	0x0800a5c9
 800a874:	0800ae16 	.word	0x0800ae16

0800a878 <sbrk_aligned>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	4e0e      	ldr	r6, [pc, #56]	; (800a8b4 <sbrk_aligned+0x3c>)
 800a87c:	460c      	mov	r4, r1
 800a87e:	6831      	ldr	r1, [r6, #0]
 800a880:	4605      	mov	r5, r0
 800a882:	b911      	cbnz	r1, 800a88a <sbrk_aligned+0x12>
 800a884:	f000 fa7e 	bl	800ad84 <_sbrk_r>
 800a888:	6030      	str	r0, [r6, #0]
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 fa79 	bl	800ad84 <_sbrk_r>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d00a      	beq.n	800a8ac <sbrk_aligned+0x34>
 800a896:	1cc4      	adds	r4, r0, #3
 800a898:	f024 0403 	bic.w	r4, r4, #3
 800a89c:	42a0      	cmp	r0, r4
 800a89e:	d007      	beq.n	800a8b0 <sbrk_aligned+0x38>
 800a8a0:	1a21      	subs	r1, r4, r0
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f000 fa6e 	bl	800ad84 <_sbrk_r>
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d101      	bne.n	800a8b0 <sbrk_aligned+0x38>
 800a8ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}
 800a8b4:	200015dc 	.word	0x200015dc

0800a8b8 <_malloc_r>:
 800a8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8bc:	1ccd      	adds	r5, r1, #3
 800a8be:	f025 0503 	bic.w	r5, r5, #3
 800a8c2:	3508      	adds	r5, #8
 800a8c4:	2d0c      	cmp	r5, #12
 800a8c6:	bf38      	it	cc
 800a8c8:	250c      	movcc	r5, #12
 800a8ca:	2d00      	cmp	r5, #0
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	db01      	blt.n	800a8d4 <_malloc_r+0x1c>
 800a8d0:	42a9      	cmp	r1, r5
 800a8d2:	d905      	bls.n	800a8e0 <_malloc_r+0x28>
 800a8d4:	230c      	movs	r3, #12
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	2600      	movs	r6, #0
 800a8da:	4630      	mov	r0, r6
 800a8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a9b4 <_malloc_r+0xfc>
 800a8e4:	f000 f9f8 	bl	800acd8 <__malloc_lock>
 800a8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ec:	461c      	mov	r4, r3
 800a8ee:	bb5c      	cbnz	r4, 800a948 <_malloc_r+0x90>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	f7ff ffc0 	bl	800a878 <sbrk_aligned>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	d155      	bne.n	800a9aa <_malloc_r+0xf2>
 800a8fe:	f8d8 4000 	ldr.w	r4, [r8]
 800a902:	4626      	mov	r6, r4
 800a904:	2e00      	cmp	r6, #0
 800a906:	d145      	bne.n	800a994 <_malloc_r+0xdc>
 800a908:	2c00      	cmp	r4, #0
 800a90a:	d048      	beq.n	800a99e <_malloc_r+0xe6>
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	4631      	mov	r1, r6
 800a910:	4638      	mov	r0, r7
 800a912:	eb04 0903 	add.w	r9, r4, r3
 800a916:	f000 fa35 	bl	800ad84 <_sbrk_r>
 800a91a:	4581      	cmp	r9, r0
 800a91c:	d13f      	bne.n	800a99e <_malloc_r+0xe6>
 800a91e:	6821      	ldr	r1, [r4, #0]
 800a920:	1a6d      	subs	r5, r5, r1
 800a922:	4629      	mov	r1, r5
 800a924:	4638      	mov	r0, r7
 800a926:	f7ff ffa7 	bl	800a878 <sbrk_aligned>
 800a92a:	3001      	adds	r0, #1
 800a92c:	d037      	beq.n	800a99e <_malloc_r+0xe6>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	442b      	add	r3, r5
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	f8d8 3000 	ldr.w	r3, [r8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d038      	beq.n	800a9ae <_malloc_r+0xf6>
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	42a2      	cmp	r2, r4
 800a940:	d12b      	bne.n	800a99a <_malloc_r+0xe2>
 800a942:	2200      	movs	r2, #0
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	e00f      	b.n	800a968 <_malloc_r+0xb0>
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	1b52      	subs	r2, r2, r5
 800a94c:	d41f      	bmi.n	800a98e <_malloc_r+0xd6>
 800a94e:	2a0b      	cmp	r2, #11
 800a950:	d917      	bls.n	800a982 <_malloc_r+0xca>
 800a952:	1961      	adds	r1, r4, r5
 800a954:	42a3      	cmp	r3, r4
 800a956:	6025      	str	r5, [r4, #0]
 800a958:	bf18      	it	ne
 800a95a:	6059      	strne	r1, [r3, #4]
 800a95c:	6863      	ldr	r3, [r4, #4]
 800a95e:	bf08      	it	eq
 800a960:	f8c8 1000 	streq.w	r1, [r8]
 800a964:	5162      	str	r2, [r4, r5]
 800a966:	604b      	str	r3, [r1, #4]
 800a968:	4638      	mov	r0, r7
 800a96a:	f104 060b 	add.w	r6, r4, #11
 800a96e:	f000 f9b9 	bl	800ace4 <__malloc_unlock>
 800a972:	f026 0607 	bic.w	r6, r6, #7
 800a976:	1d23      	adds	r3, r4, #4
 800a978:	1af2      	subs	r2, r6, r3
 800a97a:	d0ae      	beq.n	800a8da <_malloc_r+0x22>
 800a97c:	1b9b      	subs	r3, r3, r6
 800a97e:	50a3      	str	r3, [r4, r2]
 800a980:	e7ab      	b.n	800a8da <_malloc_r+0x22>
 800a982:	42a3      	cmp	r3, r4
 800a984:	6862      	ldr	r2, [r4, #4]
 800a986:	d1dd      	bne.n	800a944 <_malloc_r+0x8c>
 800a988:	f8c8 2000 	str.w	r2, [r8]
 800a98c:	e7ec      	b.n	800a968 <_malloc_r+0xb0>
 800a98e:	4623      	mov	r3, r4
 800a990:	6864      	ldr	r4, [r4, #4]
 800a992:	e7ac      	b.n	800a8ee <_malloc_r+0x36>
 800a994:	4634      	mov	r4, r6
 800a996:	6876      	ldr	r6, [r6, #4]
 800a998:	e7b4      	b.n	800a904 <_malloc_r+0x4c>
 800a99a:	4613      	mov	r3, r2
 800a99c:	e7cc      	b.n	800a938 <_malloc_r+0x80>
 800a99e:	230c      	movs	r3, #12
 800a9a0:	603b      	str	r3, [r7, #0]
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f000 f99e 	bl	800ace4 <__malloc_unlock>
 800a9a8:	e797      	b.n	800a8da <_malloc_r+0x22>
 800a9aa:	6025      	str	r5, [r4, #0]
 800a9ac:	e7dc      	b.n	800a968 <_malloc_r+0xb0>
 800a9ae:	605b      	str	r3, [r3, #4]
 800a9b0:	deff      	udf	#255	; 0xff
 800a9b2:	bf00      	nop
 800a9b4:	200015d8 	.word	0x200015d8

0800a9b8 <_printf_common>:
 800a9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9bc:	4616      	mov	r6, r2
 800a9be:	4699      	mov	r9, r3
 800a9c0:	688a      	ldr	r2, [r1, #8]
 800a9c2:	690b      	ldr	r3, [r1, #16]
 800a9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	bfb8      	it	lt
 800a9cc:	4613      	movlt	r3, r2
 800a9ce:	6033      	str	r3, [r6, #0]
 800a9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	b10a      	cbz	r2, 800a9de <_printf_common+0x26>
 800a9da:	3301      	adds	r3, #1
 800a9dc:	6033      	str	r3, [r6, #0]
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	0699      	lsls	r1, r3, #26
 800a9e2:	bf42      	ittt	mi
 800a9e4:	6833      	ldrmi	r3, [r6, #0]
 800a9e6:	3302      	addmi	r3, #2
 800a9e8:	6033      	strmi	r3, [r6, #0]
 800a9ea:	6825      	ldr	r5, [r4, #0]
 800a9ec:	f015 0506 	ands.w	r5, r5, #6
 800a9f0:	d106      	bne.n	800aa00 <_printf_common+0x48>
 800a9f2:	f104 0a19 	add.w	sl, r4, #25
 800a9f6:	68e3      	ldr	r3, [r4, #12]
 800a9f8:	6832      	ldr	r2, [r6, #0]
 800a9fa:	1a9b      	subs	r3, r3, r2
 800a9fc:	42ab      	cmp	r3, r5
 800a9fe:	dc26      	bgt.n	800aa4e <_printf_common+0x96>
 800aa00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa04:	1e13      	subs	r3, r2, #0
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	bf18      	it	ne
 800aa0a:	2301      	movne	r3, #1
 800aa0c:	0692      	lsls	r2, r2, #26
 800aa0e:	d42b      	bmi.n	800aa68 <_printf_common+0xb0>
 800aa10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa14:	4649      	mov	r1, r9
 800aa16:	4638      	mov	r0, r7
 800aa18:	47c0      	blx	r8
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	d01e      	beq.n	800aa5c <_printf_common+0xa4>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	6922      	ldr	r2, [r4, #16]
 800aa22:	f003 0306 	and.w	r3, r3, #6
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	bf02      	ittt	eq
 800aa2a:	68e5      	ldreq	r5, [r4, #12]
 800aa2c:	6833      	ldreq	r3, [r6, #0]
 800aa2e:	1aed      	subeq	r5, r5, r3
 800aa30:	68a3      	ldr	r3, [r4, #8]
 800aa32:	bf0c      	ite	eq
 800aa34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa38:	2500      	movne	r5, #0
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	bfc4      	itt	gt
 800aa3e:	1a9b      	subgt	r3, r3, r2
 800aa40:	18ed      	addgt	r5, r5, r3
 800aa42:	2600      	movs	r6, #0
 800aa44:	341a      	adds	r4, #26
 800aa46:	42b5      	cmp	r5, r6
 800aa48:	d11a      	bne.n	800aa80 <_printf_common+0xc8>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e008      	b.n	800aa60 <_printf_common+0xa8>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	4652      	mov	r2, sl
 800aa52:	4649      	mov	r1, r9
 800aa54:	4638      	mov	r0, r7
 800aa56:	47c0      	blx	r8
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d103      	bne.n	800aa64 <_printf_common+0xac>
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa64:	3501      	adds	r5, #1
 800aa66:	e7c6      	b.n	800a9f6 <_printf_common+0x3e>
 800aa68:	18e1      	adds	r1, r4, r3
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	2030      	movs	r0, #48	; 0x30
 800aa6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa72:	4422      	add	r2, r4
 800aa74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa7c:	3302      	adds	r3, #2
 800aa7e:	e7c7      	b.n	800aa10 <_printf_common+0x58>
 800aa80:	2301      	movs	r3, #1
 800aa82:	4622      	mov	r2, r4
 800aa84:	4649      	mov	r1, r9
 800aa86:	4638      	mov	r0, r7
 800aa88:	47c0      	blx	r8
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	d0e6      	beq.n	800aa5c <_printf_common+0xa4>
 800aa8e:	3601      	adds	r6, #1
 800aa90:	e7d9      	b.n	800aa46 <_printf_common+0x8e>
	...

0800aa94 <_printf_i>:
 800aa94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	7e0f      	ldrb	r7, [r1, #24]
 800aa9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa9c:	2f78      	cmp	r7, #120	; 0x78
 800aa9e:	4691      	mov	r9, r2
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	469a      	mov	sl, r3
 800aaa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaaa:	d807      	bhi.n	800aabc <_printf_i+0x28>
 800aaac:	2f62      	cmp	r7, #98	; 0x62
 800aaae:	d80a      	bhi.n	800aac6 <_printf_i+0x32>
 800aab0:	2f00      	cmp	r7, #0
 800aab2:	f000 80d4 	beq.w	800ac5e <_printf_i+0x1ca>
 800aab6:	2f58      	cmp	r7, #88	; 0x58
 800aab8:	f000 80c0 	beq.w	800ac3c <_printf_i+0x1a8>
 800aabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aac4:	e03a      	b.n	800ab3c <_printf_i+0xa8>
 800aac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaca:	2b15      	cmp	r3, #21
 800aacc:	d8f6      	bhi.n	800aabc <_printf_i+0x28>
 800aace:	a101      	add	r1, pc, #4	; (adr r1, 800aad4 <_printf_i+0x40>)
 800aad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aad4:	0800ab2d 	.word	0x0800ab2d
 800aad8:	0800ab41 	.word	0x0800ab41
 800aadc:	0800aabd 	.word	0x0800aabd
 800aae0:	0800aabd 	.word	0x0800aabd
 800aae4:	0800aabd 	.word	0x0800aabd
 800aae8:	0800aabd 	.word	0x0800aabd
 800aaec:	0800ab41 	.word	0x0800ab41
 800aaf0:	0800aabd 	.word	0x0800aabd
 800aaf4:	0800aabd 	.word	0x0800aabd
 800aaf8:	0800aabd 	.word	0x0800aabd
 800aafc:	0800aabd 	.word	0x0800aabd
 800ab00:	0800ac45 	.word	0x0800ac45
 800ab04:	0800ab6d 	.word	0x0800ab6d
 800ab08:	0800abff 	.word	0x0800abff
 800ab0c:	0800aabd 	.word	0x0800aabd
 800ab10:	0800aabd 	.word	0x0800aabd
 800ab14:	0800ac67 	.word	0x0800ac67
 800ab18:	0800aabd 	.word	0x0800aabd
 800ab1c:	0800ab6d 	.word	0x0800ab6d
 800ab20:	0800aabd 	.word	0x0800aabd
 800ab24:	0800aabd 	.word	0x0800aabd
 800ab28:	0800ac07 	.word	0x0800ac07
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	1d1a      	adds	r2, r3, #4
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	602a      	str	r2, [r5, #0]
 800ab34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e09f      	b.n	800ac80 <_printf_i+0x1ec>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	682b      	ldr	r3, [r5, #0]
 800ab44:	0607      	lsls	r7, r0, #24
 800ab46:	f103 0104 	add.w	r1, r3, #4
 800ab4a:	6029      	str	r1, [r5, #0]
 800ab4c:	d501      	bpl.n	800ab52 <_printf_i+0xbe>
 800ab4e:	681e      	ldr	r6, [r3, #0]
 800ab50:	e003      	b.n	800ab5a <_printf_i+0xc6>
 800ab52:	0646      	lsls	r6, r0, #25
 800ab54:	d5fb      	bpl.n	800ab4e <_printf_i+0xba>
 800ab56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab5a:	2e00      	cmp	r6, #0
 800ab5c:	da03      	bge.n	800ab66 <_printf_i+0xd2>
 800ab5e:	232d      	movs	r3, #45	; 0x2d
 800ab60:	4276      	negs	r6, r6
 800ab62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab66:	485a      	ldr	r0, [pc, #360]	; (800acd0 <_printf_i+0x23c>)
 800ab68:	230a      	movs	r3, #10
 800ab6a:	e012      	b.n	800ab92 <_printf_i+0xfe>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	6820      	ldr	r0, [r4, #0]
 800ab70:	1d19      	adds	r1, r3, #4
 800ab72:	6029      	str	r1, [r5, #0]
 800ab74:	0605      	lsls	r5, r0, #24
 800ab76:	d501      	bpl.n	800ab7c <_printf_i+0xe8>
 800ab78:	681e      	ldr	r6, [r3, #0]
 800ab7a:	e002      	b.n	800ab82 <_printf_i+0xee>
 800ab7c:	0641      	lsls	r1, r0, #25
 800ab7e:	d5fb      	bpl.n	800ab78 <_printf_i+0xe4>
 800ab80:	881e      	ldrh	r6, [r3, #0]
 800ab82:	4853      	ldr	r0, [pc, #332]	; (800acd0 <_printf_i+0x23c>)
 800ab84:	2f6f      	cmp	r7, #111	; 0x6f
 800ab86:	bf0c      	ite	eq
 800ab88:	2308      	moveq	r3, #8
 800ab8a:	230a      	movne	r3, #10
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab92:	6865      	ldr	r5, [r4, #4]
 800ab94:	60a5      	str	r5, [r4, #8]
 800ab96:	2d00      	cmp	r5, #0
 800ab98:	bfa2      	ittt	ge
 800ab9a:	6821      	ldrge	r1, [r4, #0]
 800ab9c:	f021 0104 	bicge.w	r1, r1, #4
 800aba0:	6021      	strge	r1, [r4, #0]
 800aba2:	b90e      	cbnz	r6, 800aba8 <_printf_i+0x114>
 800aba4:	2d00      	cmp	r5, #0
 800aba6:	d04b      	beq.n	800ac40 <_printf_i+0x1ac>
 800aba8:	4615      	mov	r5, r2
 800abaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800abae:	fb03 6711 	mls	r7, r3, r1, r6
 800abb2:	5dc7      	ldrb	r7, [r0, r7]
 800abb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abb8:	4637      	mov	r7, r6
 800abba:	42bb      	cmp	r3, r7
 800abbc:	460e      	mov	r6, r1
 800abbe:	d9f4      	bls.n	800abaa <_printf_i+0x116>
 800abc0:	2b08      	cmp	r3, #8
 800abc2:	d10b      	bne.n	800abdc <_printf_i+0x148>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	07de      	lsls	r6, r3, #31
 800abc8:	d508      	bpl.n	800abdc <_printf_i+0x148>
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	6861      	ldr	r1, [r4, #4]
 800abce:	4299      	cmp	r1, r3
 800abd0:	bfde      	ittt	le
 800abd2:	2330      	movle	r3, #48	; 0x30
 800abd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800abdc:	1b52      	subs	r2, r2, r5
 800abde:	6122      	str	r2, [r4, #16]
 800abe0:	f8cd a000 	str.w	sl, [sp]
 800abe4:	464b      	mov	r3, r9
 800abe6:	aa03      	add	r2, sp, #12
 800abe8:	4621      	mov	r1, r4
 800abea:	4640      	mov	r0, r8
 800abec:	f7ff fee4 	bl	800a9b8 <_printf_common>
 800abf0:	3001      	adds	r0, #1
 800abf2:	d14a      	bne.n	800ac8a <_printf_i+0x1f6>
 800abf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf8:	b004      	add	sp, #16
 800abfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	f043 0320 	orr.w	r3, r3, #32
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	4833      	ldr	r0, [pc, #204]	; (800acd4 <_printf_i+0x240>)
 800ac08:	2778      	movs	r7, #120	; 0x78
 800ac0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	6829      	ldr	r1, [r5, #0]
 800ac12:	061f      	lsls	r7, r3, #24
 800ac14:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac18:	d402      	bmi.n	800ac20 <_printf_i+0x18c>
 800ac1a:	065f      	lsls	r7, r3, #25
 800ac1c:	bf48      	it	mi
 800ac1e:	b2b6      	uxthmi	r6, r6
 800ac20:	07df      	lsls	r7, r3, #31
 800ac22:	bf48      	it	mi
 800ac24:	f043 0320 	orrmi.w	r3, r3, #32
 800ac28:	6029      	str	r1, [r5, #0]
 800ac2a:	bf48      	it	mi
 800ac2c:	6023      	strmi	r3, [r4, #0]
 800ac2e:	b91e      	cbnz	r6, 800ac38 <_printf_i+0x1a4>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	f023 0320 	bic.w	r3, r3, #32
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	2310      	movs	r3, #16
 800ac3a:	e7a7      	b.n	800ab8c <_printf_i+0xf8>
 800ac3c:	4824      	ldr	r0, [pc, #144]	; (800acd0 <_printf_i+0x23c>)
 800ac3e:	e7e4      	b.n	800ac0a <_printf_i+0x176>
 800ac40:	4615      	mov	r5, r2
 800ac42:	e7bd      	b.n	800abc0 <_printf_i+0x12c>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	6826      	ldr	r6, [r4, #0]
 800ac48:	6961      	ldr	r1, [r4, #20]
 800ac4a:	1d18      	adds	r0, r3, #4
 800ac4c:	6028      	str	r0, [r5, #0]
 800ac4e:	0635      	lsls	r5, r6, #24
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	d501      	bpl.n	800ac58 <_printf_i+0x1c4>
 800ac54:	6019      	str	r1, [r3, #0]
 800ac56:	e002      	b.n	800ac5e <_printf_i+0x1ca>
 800ac58:	0670      	lsls	r0, r6, #25
 800ac5a:	d5fb      	bpl.n	800ac54 <_printf_i+0x1c0>
 800ac5c:	8019      	strh	r1, [r3, #0]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	4615      	mov	r5, r2
 800ac64:	e7bc      	b.n	800abe0 <_printf_i+0x14c>
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	1d1a      	adds	r2, r3, #4
 800ac6a:	602a      	str	r2, [r5, #0]
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	6862      	ldr	r2, [r4, #4]
 800ac70:	2100      	movs	r1, #0
 800ac72:	4628      	mov	r0, r5
 800ac74:	f7f5 fad4 	bl	8000220 <memchr>
 800ac78:	b108      	cbz	r0, 800ac7e <_printf_i+0x1ea>
 800ac7a:	1b40      	subs	r0, r0, r5
 800ac7c:	6060      	str	r0, [r4, #4]
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	2300      	movs	r3, #0
 800ac84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac88:	e7aa      	b.n	800abe0 <_printf_i+0x14c>
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	462a      	mov	r2, r5
 800ac8e:	4649      	mov	r1, r9
 800ac90:	4640      	mov	r0, r8
 800ac92:	47d0      	blx	sl
 800ac94:	3001      	adds	r0, #1
 800ac96:	d0ad      	beq.n	800abf4 <_printf_i+0x160>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	079b      	lsls	r3, r3, #30
 800ac9c:	d413      	bmi.n	800acc6 <_printf_i+0x232>
 800ac9e:	68e0      	ldr	r0, [r4, #12]
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	4298      	cmp	r0, r3
 800aca4:	bfb8      	it	lt
 800aca6:	4618      	movlt	r0, r3
 800aca8:	e7a6      	b.n	800abf8 <_printf_i+0x164>
 800acaa:	2301      	movs	r3, #1
 800acac:	4632      	mov	r2, r6
 800acae:	4649      	mov	r1, r9
 800acb0:	4640      	mov	r0, r8
 800acb2:	47d0      	blx	sl
 800acb4:	3001      	adds	r0, #1
 800acb6:	d09d      	beq.n	800abf4 <_printf_i+0x160>
 800acb8:	3501      	adds	r5, #1
 800acba:	68e3      	ldr	r3, [r4, #12]
 800acbc:	9903      	ldr	r1, [sp, #12]
 800acbe:	1a5b      	subs	r3, r3, r1
 800acc0:	42ab      	cmp	r3, r5
 800acc2:	dcf2      	bgt.n	800acaa <_printf_i+0x216>
 800acc4:	e7eb      	b.n	800ac9e <_printf_i+0x20a>
 800acc6:	2500      	movs	r5, #0
 800acc8:	f104 0619 	add.w	r6, r4, #25
 800accc:	e7f5      	b.n	800acba <_printf_i+0x226>
 800acce:	bf00      	nop
 800acd0:	0800ae21 	.word	0x0800ae21
 800acd4:	0800ae32 	.word	0x0800ae32

0800acd8 <__malloc_lock>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__malloc_lock+0x8>)
 800acda:	f7ff bc19 	b.w	800a510 <__retarget_lock_acquire_recursive>
 800acde:	bf00      	nop
 800ace0:	200015d4 	.word	0x200015d4

0800ace4 <__malloc_unlock>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__malloc_unlock+0x8>)
 800ace6:	f7ff bc14 	b.w	800a512 <__retarget_lock_release_recursive>
 800acea:	bf00      	nop
 800acec:	200015d4 	.word	0x200015d4

0800acf0 <_realloc_r>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	4680      	mov	r8, r0
 800acf6:	4614      	mov	r4, r2
 800acf8:	460e      	mov	r6, r1
 800acfa:	b921      	cbnz	r1, 800ad06 <_realloc_r+0x16>
 800acfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad00:	4611      	mov	r1, r2
 800ad02:	f7ff bdd9 	b.w	800a8b8 <_malloc_r>
 800ad06:	b92a      	cbnz	r2, 800ad14 <_realloc_r+0x24>
 800ad08:	f7ff fc12 	bl	800a530 <_free_r>
 800ad0c:	4625      	mov	r5, r4
 800ad0e:	4628      	mov	r0, r5
 800ad10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad14:	f000 f846 	bl	800ada4 <_malloc_usable_size_r>
 800ad18:	4284      	cmp	r4, r0
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	d802      	bhi.n	800ad24 <_realloc_r+0x34>
 800ad1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad22:	d812      	bhi.n	800ad4a <_realloc_r+0x5a>
 800ad24:	4621      	mov	r1, r4
 800ad26:	4640      	mov	r0, r8
 800ad28:	f7ff fdc6 	bl	800a8b8 <_malloc_r>
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d0ed      	beq.n	800ad0e <_realloc_r+0x1e>
 800ad32:	42bc      	cmp	r4, r7
 800ad34:	4622      	mov	r2, r4
 800ad36:	4631      	mov	r1, r6
 800ad38:	bf28      	it	cs
 800ad3a:	463a      	movcs	r2, r7
 800ad3c:	f7ff fbea 	bl	800a514 <memcpy>
 800ad40:	4631      	mov	r1, r6
 800ad42:	4640      	mov	r0, r8
 800ad44:	f7ff fbf4 	bl	800a530 <_free_r>
 800ad48:	e7e1      	b.n	800ad0e <_realloc_r+0x1e>
 800ad4a:	4635      	mov	r5, r6
 800ad4c:	e7df      	b.n	800ad0e <_realloc_r+0x1e>

0800ad4e <memmove>:
 800ad4e:	4288      	cmp	r0, r1
 800ad50:	b510      	push	{r4, lr}
 800ad52:	eb01 0402 	add.w	r4, r1, r2
 800ad56:	d902      	bls.n	800ad5e <memmove+0x10>
 800ad58:	4284      	cmp	r4, r0
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	d807      	bhi.n	800ad6e <memmove+0x20>
 800ad5e:	1e43      	subs	r3, r0, #1
 800ad60:	42a1      	cmp	r1, r4
 800ad62:	d008      	beq.n	800ad76 <memmove+0x28>
 800ad64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad6c:	e7f8      	b.n	800ad60 <memmove+0x12>
 800ad6e:	4402      	add	r2, r0
 800ad70:	4601      	mov	r1, r0
 800ad72:	428a      	cmp	r2, r1
 800ad74:	d100      	bne.n	800ad78 <memmove+0x2a>
 800ad76:	bd10      	pop	{r4, pc}
 800ad78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad80:	e7f7      	b.n	800ad72 <memmove+0x24>
	...

0800ad84 <_sbrk_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4d06      	ldr	r5, [pc, #24]	; (800ada0 <_sbrk_r+0x1c>)
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	f7f6 f876 	bl	8000e80 <_sbrk>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_sbrk_r+0x1a>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_sbrk_r+0x1a>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	200015d0 	.word	0x200015d0

0800ada4 <_malloc_usable_size_r>:
 800ada4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ada8:	1f18      	subs	r0, r3, #4
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bfbc      	itt	lt
 800adae:	580b      	ldrlt	r3, [r1, r0]
 800adb0:	18c0      	addlt	r0, r0, r3
 800adb2:	4770      	bx	lr

0800adb4 <_init>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr

0800adc0 <_fini>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr
